<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314555-20011106-C00001.CDX SYSTEM "US06314555-20011106-C00001.CDX" NDATA CDX>
<!ENTITY US06314555-20011106-C00001.MOL SYSTEM "US06314555-20011106-C00001.MOL" NDATA MOL>
<!ENTITY US06314555-20011106-C00001.TIF SYSTEM "US06314555-20011106-C00001.TIF" NDATA TIF>
<!ENTITY US06314555-20011106-D00000.TIF SYSTEM "US06314555-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314555-20011106-D00001.TIF SYSTEM "US06314555-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314555-20011106-D00002.TIF SYSTEM "US06314555-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314555-20011106-D00003.TIF SYSTEM "US06314555-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314555-20011106-D00004.TIF SYSTEM "US06314555-20011106-D00004.TIF" NDATA TIF>
<!ENTITY US06314555-20011106-D00005.TIF SYSTEM "US06314555-20011106-D00005.TIF" NDATA TIF>
<!ENTITY US06314555-20011106-D00006.TIF SYSTEM "US06314555-20011106-D00006.TIF" NDATA TIF>
<!ENTITY US06314555-20011106-D00007.TIF SYSTEM "US06314555-20011106-D00007.TIF" NDATA TIF>
<!ENTITY US06314555-20011106-D00008.TIF SYSTEM "US06314555-20011106-D00008.TIF" NDATA TIF>
<!ENTITY US06314555-20011106-D00009.TIF SYSTEM "US06314555-20011106-D00009.TIF" NDATA TIF>
<!ENTITY US06314555-20011106-D00010.TIF SYSTEM "US06314555-20011106-D00010.TIF" NDATA TIF>
<!ENTITY US06314555-20011106-D00011.TIF SYSTEM "US06314555-20011106-D00011.TIF" NDATA TIF>
<!ENTITY US06314555-20011106-D00012.TIF SYSTEM "US06314555-20011106-D00012.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314555</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>09125727</PDAT></DNUM></B210>
<B211US><PDAT>09</PDAT></B211US>
<B220><DATE><PDAT>19980825</PDAT></DATE></B220>
</B200>
<B300>
<B310><DNUM><PDAT>97305600</PDAT></DNUM></B310>
<B320><DATE><PDAT>19970725</PDAT></DATE></B320>
<B330><CTRY><PDAT>EP</PDAT></CTRY></B330>
</B300>
<B500>
<B510>
<B511><PDAT>G06F  994</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>717  1</PDAT></B521>
<B522><PDAT>709202</PDAT></B522>
<B522><PDAT>709316</PDAT></B522>
<B522><PDAT>709317</PDAT></B522>
<B522><PDAT>706 49</PDAT></B522>
<B522><PDAT>706 50</PDAT></B522>
<B522><PDAT>706 59</PDAT></B522>
<B522><PDAT>706922</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Software system generation</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5421013</PDAT></DNUM>
<DATE><PDAT>19950500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Smith</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709107</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5596750</PDAT></DNUM>
<DATE><PDAT>19970100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Li et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709101</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5758160</PDAT></DNUM>
<DATE><PDAT>19980500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>McInerney et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395701</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5790789</PDAT></DNUM>
<DATE><PDAT>19980800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Suarez</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709202</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5812844</PDAT></DNUM>
<DATE><PDAT>19980900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Jones et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709104</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5819243</PDAT></DNUM>
<DATE><PDAT>19981000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Rich et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>706 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5822585</PDAT></DNUM>
<DATE><PDAT>19981000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Noble et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709316</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5826020</PDAT></DNUM>
<DATE><PDAT>19981000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Randell</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709202</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5931907</PDAT></DNUM>
<DATE><PDAT>19990800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Davies et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709218</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B562><NCIT><STEXT><PDAT>Erman et al., &ldquo;ABE: An Environment for Engineering Intelligent Systems,&rdquo; IEEE Transactions on Software Engineering, vol. 14, Issue 12, Dec. 1998, pp. 1758-1770.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Hayes-Roth et al., &ldquo;Domain-Specific Software Architectures: Distributed Intelligent Control and Management,&rdquo; IEEE Symp. on Computer-Aided Control System Design, Mar. 17-19, 1992, pp. 117-128.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Barbuceanu et al., &ldquo;The Information Agent: An Infrastructure Agent Supporting Collaborative Enterprise Architectures,&rdquo; Proceedings., Third Workshop on Enabling Technologies: Infrastructure for Collaborative Enterprises, Apr. 17-19, 1994, pp. 112-116.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Finin et al., &ldquo;KQML as an Agent Communication Language,&rdquo; Proceedings., Third International Conference on Information and Knowledge Management (CIKM&apos;94), ACM Press, Nov. 1994, pp. 1-9.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Benjamin N. Grosof, &ldquo;Conflict Resolution in Advice Taking and Instruction for Learning Agents,&rdquo; IBM Research Report RC 20123 Jun. 30, 1995, World Wide Web: http://www.watson.ibm.com.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Chess et al., &ldquo;Itinerant Agents for Mobile Computing,&rdquo; IEEE Personal Communications, vol. 2, Issue 5, Oct. 1995, pp. 34-49.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Grosoft et al., &ldquo;Reusable Architecture for Embedding Rule-based Intelligence in Information Agents,&rdquo; IBM Research Report RC 20305, Dec. 5, 1995, pp. 1-9, W W W: http://www.research.ibm.com.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>&ldquo;Reticular Systems to Develop Java TM-based AgentBuilder TM&rdquo; Press Release &lsqb;online&rsqb;. Reticular Systems Inc., 1996&lsqb;retrieved on Jan. 14, 2000&rsqb;. Retrieved from the internet.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>&lt;URL:www.reticular.com/PressReleases/Dec. 3, 1996.html&gt;.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Franklin et al., &ldquo;Is it an Agent, or just a Program&quest;: A Taxonomy for Autonomous Agents,&rdquo; Proceedings., Third Int&apos;l. Workshop on Agent Theories, Architectures, and Languages, Springer-Verlag, 1996, pp. 1-10.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>&ldquo;Aglets Software Development Kit News, &rdquo;Aglets News &lsqb;online&rsqb;. IBM Company, 1999&lsqb;retrieved on Jan. 19, 2000&rsqb;. Retrieved from the Internet:&lt;URL:www.trl.ibm.co.jp/aglets/whatsnew.html&gt;, pp. 1-4.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Danny B. Lange, Java Aglet application Programming Interface (J-AAPI) White Papaer-Draft 2, IBM Tokyo Research Laboratory, Feb. 19, 1997, pp. 1-6.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Repenning et al., &ldquo;Agentsheets: a medium for creating domain-oriented visual languages,&rdquo; Computer Vo. 28, Issue 3, Mar. 1995, pp. 17-25.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Lange et al., &ldquo;Agent Transfer Protocol&mdash;ATP/0.1&rdquo; IBM Tokyo Research Laboratory, Draft number:4, Mar. 19, 1997, pp. 1-13.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Bret Sommers, &ldquo;Agents: Not just for Bond anymore,&rdquo; JavaWorld, Apr. 1997, pp. 1-14.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Bill Venners, &ldquo;Under the Hood: The architecture of Aglets,&rdquo; JavaWorld Apr. 1997, pp. 1-7.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Bill Venners, &ldquo;Solve real problems with aglets, a type of mobile agent,&rdquo; JavaWorld May 1997, pp. 1-8.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Benjamin N. Grosof, Building Commersial Agents: An IBM Research Perspective (Invited Talk), IBM Research Report, RC 20835 (92272), May 8, 1997, pp. 1-6.</PDAT></STEXT></NCIT><CITED-BY-EXAMINER></B562>
</B560>
<B570>
<B577><PDAT>40</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>706 47</PDAT></B582>
<B582><PDAT>706 49</PDAT></B582>
<B582><PDAT>706 50</PDAT></B582>
<B582><PDAT>706 60</PDAT></B582>
<B582><PDAT>706 62</PDAT></B582>
<B582><PDAT>706914</PDAT></B582>
<B582><PDAT>706919</PDAT></B582>
<B582><PDAT>706 922</PDAT></B582>
<B582><PDAT>706 59</PDAT></B582>
<B583US><PDAT>717  1-  4</PDAT></B583US>
<B582><PDAT>717 10</PDAT></B582>
<B582><PDAT>709102</PDAT></B582>
<B582><PDAT>709104</PDAT></B582>
<B582><PDAT>709106</PDAT></B582>
<B582><PDAT>709202</PDAT></B582>
<B582><PDAT>709227</PDAT></B582>
<B582><PDAT>709317</PDAT></B582>
<B582><PDAT>709316</PDAT></B582>
<B582><PDAT>709328</PDAT></B582>
<B582><PDAT>709332</PDAT></B582>
<B582><PDAT>705 80</PDAT></B582>
<B582><PDAT>707 10</PDAT></B582>
<B582><PDAT>707104</PDAT></B582>
</B580>
<B590><B595><PDAT>12</PDAT></B595><B596><PDAT>15</PDAT></B596><B597US>
</B590>
</B500>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Divine T</PDAT></FNM><SNM><STEXT><PDAT>Ndumu</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Suffolk</PDAT></CITY>
<CTRY><PDAT>GB</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Hyacinth S</PDAT></FNM><SNM><STEXT><PDAT>Nwana</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Suffolk</PDAT></CITY>
<CTRY><PDAT>GB</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Lyndon C</PDAT></FNM><SNM><STEXT><PDAT>Lee</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Colchester</PDAT></CITY>
<CTRY><PDAT>GB</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>British Telecommunications public limited company</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>London</PDAT></CITY><CTRY><PDAT>GB</PDAT></CTRY></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>03</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Nixon &amp; Vanderhye P.C.</PDAT></STEXT></ONM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Tuan Q.</PDAT></FNM><SNM><STEXT><PDAT>Dam</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B748US><PDAT>2122</PDAT></B748US>
</B745>
</B700>
<B800>
<B860>
<B861>
<DOC><DNUM><PDAT>PCT/GB98/02241</PDAT></DNUM><DATE><PDAT>19980727</PDAT></DATE><CTRY><PDAT>WO</PDAT></CTRY><KIND><PDAT>00</PDAT></KIND></DOC>
</B861>
<B863><DATE><PDAT>19980825</PDAT></DATE></B863>
<B864><DATE><PDAT>19980825</PDAT></DATE></B864>
</B860>
<B870>
<B871><DOC><DNUM><PDAT>WO99/05593</PDAT></DNUM><DATE><PDAT>19990202</PDAT></DATE><CTRY><PDAT>WO</PDAT></CTRY><KIND><PDAT>A </PDAT></KIND></DOC></B871>
</B870>
</B800>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A system for building collaborative software agents is provided with a set of editors for capturing data for installation in the individual agents. The collaborative software agents will normally form a community, including some standard agents, provided by the system, and will collaborate to provide functionality in a domain selected by the user. Each collaborative software agent built by the system is provided with co-ordination policies, selected by the user, and represented by a co-ordination graph. A single collaborative software agent can be provided with more than one collaborative policy and is capable of running more than one collaborative policy simultaneously with different agents of the system. An exception handler flags an exception during use of the collaborative agents in the relevant domain when the value of a variable for an agent conflicts with a relevant constraint. Alternatively, the exception handler flags an exception when the resource and time constraints cannot be met by allocation of tasks between the collaborative agents. Communities of software agents built within a system might be used to launch and/or manage telecommunications services or to control a chemical process, for example.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>1. Field of the Invention</PDAT></PTEXT></PARA>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>The present invention relates to software system generation and finds an application for instance in building communications systems.</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>2. Related Art</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>Software agent technology has developed over the past few years in several different fields. A software agent is a computer program which acts as an agent for an entity such as a user, a piece of equipment or a business. The software agent usually holds data in relation to the entity it represents, has a set of constraints or conditions to determine its behaviour and, most importantly, is provided with decision making software for making decisions on behalf of the entity within or as a result of the constraints and conditions. Agents are generally acting within a system and the decisions an agent makes can result in activity by the system. In control software systems, those decisions result in control activity, such as initiating connection set-up in a communications network controlled by the system.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>An agent acting within a system will also generally hold data about the system so that it can operate in context.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>In a distributed environment, many such agents may co-operate to co-ordinate and perform the control activities. Typically, such agents form an agent layer, with each agent interfacing with a number of external systems (the domain layer) which they control, monitor or manage, as shown in FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>An agent-based system can be very complex since the interactions between the agents, the decision-making processes of individual agents and, the interactions between agents and the external systems they control, need to be taken into account.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>Different types of agent-based systems are described in many papers, such as those published in the proceedings of the First and Second International Conferences on the Practical Application of Intelligent Agents and Multi-Agent Technology. These are published by the Practical Application Company Ltd., Blackpool, Lancashire, in 1996 and 1997 respectively. A general comprehensive review of agent-based technology is given by Hyacinth S. Nwana, &ldquo;Software Agents: An Overview&rdquo; in the </PDAT><HIL><ITALIC><PDAT>Knowledge Engineering Review journal</PDAT></ITALIC></HIL><PDAT>, Vol. 11, No. 3, pages 205-244.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>There are ways already known for building software agents. For instance, the following publications describe agent building arrangements:</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="1"><PTEXT><PDAT>1. IBM&apos;s Agent Building Environment (ABE) which is essentially a C&plus;&plus; class library &lsqb;http://www.networking.ibm.com/iag/iagwatsn.htm&rsqb;. ABE is a tool-kit that facilitates the construction of agent-based applications or helps add an agent to existing applications. This tool-kit applies to relatively trivial &ldquo;interface&rdquo; agents, or agents that work alone. For example, an agent here could be one which monitors the value of stock in the financial markets and alerts its user (e.g. via paging) when the value falls below a certain threshold. ABE does not describe means for building multiple agent systems, nor do they describe means for building more than one type of agent.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="1"><PTEXT><PDAT>2. MIT&apos;s SODABOT &lsqb;http://www.ai.mit.edu/people/sodabot/sodabot.html&rsqb;, General Magic&apos;s Telescript and Odyssey &lsqb;http://www.genmagic.com&rsqb;, and IBM&apos;s Aglets &lsqb;http://www.trl.ibm.co.jp/aglets&rsqb;. These all provide other environments which facilitate the construction of &ldquo;mobile&rdquo; agents-based applications. However, they are also not much more than languages, comparable to the &ldquo;Java&rdquo; language developed by Sun Microsystems Inc., and do not provide specific advanced agent-building arrangements.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>Perhaps more relevant to embodiments of the present invention is the agent building shell work done at the University of Toronto. This is described by Mihai Barbuceanu &amp; Mark S. Fox in the paper &ldquo;</PDAT><HIL><ITALIC><PDAT>The Architecture of an Agent Building Shell</PDAT></ITALIC></HIL><PDAT>&rdquo;, published in 1996 in </PDAT><HIL><ITALIC><PDAT>Intelligent Agents II</PDAT></ITALIC></HIL><PDAT>, Berlin by Springer-Verlag, 1037, 235-250 and edited by Wooldridge, M., Muller, J. &amp; Tambe, M. This work describes an agent building shell &ldquo;that provides several reusable layers of languages and services for building agent systems: coordination and communication languages, description logic based knowledge management, cooperative information distribution, organisation modelling and conflict management&rdquo; (page 235). This work is still very much in progress and has not yet resulted in a practical embodiment with much effort having been expended on theoretical issues such as description logics, non-monotonic logics and extending KQML to derive the language &ldquo;COOL&rdquo;. The work of the present invention differs markedly from this in that it provides a tool-kit for defining and generating real agent-based control software for real applications, and goes well beyond the general academic nature of the Toronto work.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>A particular problem arises with &ldquo;collaborative&rdquo; agents. Collaborative agents are a group of agents which co-operate with one another to co-ordinate their activities in performing a particular task. Such co-operation may be necessary because know-how, resources or processing power may be distributed across the environment or across the agents in the system. The problem with collaborative agent systems is the need to co-ordinate their activities in a problem- and context-dependent manner.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>An example of a collaborative agent system, used in this case in communications network management, is described in international patent application number WO95/15635, in the name of the present applicant.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>According to a first aspect of the present invention, there is provided a software building environment, for building a software system for use in control, monitoring and/or management of a process or apparatus, said environment comprising at least one software module, means for capturing data for loading a copy of said module for use in said software system, and means for generating the software system comprising at least two of said loaded modules.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>Each loaded software module preferably comprises a collaborative software agent. It will therefore comprise or have access to at least one collaboration or co-ordination strategy, expressed for instance as a rule or algorithm. Said at least two loaded modules together can then provide a multiple agent community for controlling, monitoring and/or managing the process.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>Embodiments of the present invention can provide collaborative agent building environments with which system developers can define a set of agents to work together in a system, organise them in relation to one another in whatever manner they choose, imbue them with co-ordination abilities suitable for the problems the agents are being designated to tackle, support links from the agents to said process or apparatus they need to communicate with, to control or update for instance, and generate the software code for the agents.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><PDAT>It is not necessary that all the loaded software modules are the same. Indeed, usually at least some of them will hold different data sets because they represent different entities. Preferably, the software building environment provides, or provides access to, more than one collaboration or co-ordination strategy. In use of the environment, the developer can then load a different collaboration or co-ordination strategy to at least one module for use in the system.</PDAT></PTEXT></PARA>
<PARA ID="P-00020" LVL="0"><PTEXT><PDAT>More preferably, the software module is capable of having loaded therein more than one collaboration or co-ordination strategy such that its collaboration or co-ordination behaviour in the system is flexible. That is, it can operate according to one collaboration or co-ordination strategy at one time and another collaboration or co-ordination strategy at another time.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><PDAT>The software module may also or instead be capable of operating according to more than one collaboration or co-ordination strategy at once.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><PDAT>According to a second aspect of the present invention, there is provided a software system for use in control, monitoring and/or management of a process or apparatus, wherein said system comprises at least two software modules, each module comprising data and/or process information which comprises:</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="2"><PTEXT><PDAT>(i) organisation data concerning an inter-module relationship; and</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="2"><PTEXT><PDAT>(ii) executable software providing a collaboration or co-ordination strategy,</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="2"><PTEXT><PDAT>expressed for instance as a rule or algorithm;</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="2"><PTEXT><PDAT>wherein, in use, a module selects said executable software for use in negotiating with another software module in relation to task allocation, said selection being determined at least in part by said organisation data.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>According to a third aspect of the present invention, there is provided a software module for use in a software system for distributed control, monitoring and/or management of a process or apparatus, the module comprising:</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="2"><PTEXT><PDAT>(i) communication means for communicating with other software modules;</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="2"><PTEXT><PDAT>(ii) executable software for use in coordinating with other software modules in the selection of tasks to be allocated to respective software modules for controlling or carrying out; and</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="2"><PTEXT><PDAT>(iii) a data store, or access to a data store, for storing task definitions including time data indicating task execution times,</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="2"><PTEXT><PDAT>said module further comprising scheduling means for storing data selected from at least one of said task definitions, including said time data for the respective task definition or definitions.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>This scheduling means can be used by the software system for allocating tasks amongst a plurality of software modules during control, monitoring and/or management of a process or apparatus.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>The scheduling means for one software module may store data from more than one task definition, ordering the data so as to determine the order in which, in use of the system, the software module will control or carry out the relevant task.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><PDAT>Advantageously, the scheduling means may store the task data together with an indicator of status selected from at least two alternative statuses such as &ldquo;tentative&rdquo; and &ldquo;firm&rdquo;. The indicator of status may be used by the scheduler to determine modes of managing such data. For instance, the scheduler may operate a time-out in relation to task data having the status &ldquo;tentative&rdquo;, after which the data is deleted or can be overwritten by subsequent incoming data.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><PDAT>Particularly advantageously, the scheduling means may overbook resources by storing data from more than one task definition, said data storing overlapping time contraints.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><PDAT>According to a fourth aspect of the present invention, there is provided a visualisation arrangement for use in a software system for controlling, monitoring or managing a process or arrangement, said software system comprising a plurality of software modules provided with means to communicate with each other, wherein the visualisation arrangement comprises means to store and provide for display communication instances, or data relating thereto, occurring in relation to a single, selected software module, and means to store and provide for display communication instances, or data relating thereto, occurring between at least two of said software modules.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><PDAT>A debugging arrangement which allows the user to choose to review communications relevant either to a single software module, or to a community of communicating software modules, or to both, can offer a very effective debugging mechanism to the user.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>Preferably, the visualisation arrangement is provided with means for obtaining organisational data in relation to the software modules, and with means for processing the communications instances or data prior to display, such that said communications instances, or data relating thereto, can be displayed in a manner determined by the organisational data.</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>It is also advantageous if the visualisation arrangement is provided with means to access data or executable software code held in one or more of the software modules, to download said data or code, to provide said data or code for modification and to load modified data or code to the software module. The data or code may be modified by editing means provided within the visualisation arrangement itself, or by separate editing means.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>It should be noted that there are several novel and innovative features of the embodiments of the present invention described below, not all of which are necessarily referred to above, and at least some of which have applicability independently of other aspects of said embodiments.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>It should also be noted that, in a distributed environment, software modules in practice may not themselves comprise data or software, such as collaboration or co-ordination strategies as mentioned above. They may instead simply have access to them, for instance for loading at the relevant run-time. These arrangements should be taken as covered by the above.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>An agent building system tool-kit known as the Collaborative Agent Building System (&ldquo;CABS&rdquo;) will now be described, by way of example only, as an embodiment of the present invention, with reference to the accompanying drawings, in which:</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> shows an agent-based control system, built using CABS, as it interfaces with external hardware and/or software;</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> shows a schematic architecture for a software module constituting an agent for distributed control, monitoring and management of a system;</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> shows a CABS platform for building an agent as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>;</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> shows a layered model of an agent in terms of primary characterisation;</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> shows a flow chart of steps involved in designing an agent using the platform of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>;</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> shows possible organisational relationships between software agents built using CABS;</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> shows data obtained using a debugging tool for debugging an agent-based control system built using CABS;</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> shows a scenario for debugging using the debugging tool for debugging a CABS agent system;</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT> shows a commitment table for an agent according to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>;</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 10</PDAT></FGREF><PDAT> shows a debugging and visualisation system for use with the agent-based control system of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>;</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 11</PDAT></FGREF><PDAT> shows a flow chart of a co-ordination process for use between agents in a system according to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>;</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT> shows schematically an example of the screen-based output of a &ldquo;society tool&rdquo; of the visualisation system in use;</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 13</PDAT></FGREF><PDAT> shows schematically a GANTT chart as an example of the screen-based output of a &ldquo;reports tool&rdquo; of the visualisation system in use;</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 14</PDAT></FGREF><PDAT> shows schematically an example of the screen-based output of a &ldquo;micro tool&rdquo; of the visualisation system in use; and</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 15</PDAT></FGREF><PDAT> shows schematically an example of the screen-based output of a &ldquo;statistics tool&rdquo; of the visualisation system in use.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<PARA ID="P-00058" LVL="0"><PTEXT><PDAT>In the following description, an agent-based system is described, together with an environment for building it.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS</PDAT></STEXT></H>
<H LVL="1"><STEXT><PDAT>1. AN AGENT-BASED SYSTEM BUILT USING THE CABS TOOL-KIT</PDAT></STEXT></H>
<PARA ID="P-00059" LVL="0"><PTEXT><PDAT>The system shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is an example of an agent-based system for use in communications. A CABS platform could however be used for building almost any agent-based system where software agents need both to collaborate with other agents and to perform tasks which result in some output. The output in the example of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is control of service provision by means of components of a communications system. The output could alternatively be data generation or control of a production process for instance and other examples are used elsewhere in this specification.</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="0"><PTEXT><PDAT>The system comprises a set of classes (in the object-oriented technology sense) implemented in the Java programming language, allowing it to run on a variety of hardware platforms. Java is a good choice of language for developing multi-agent applications because it is object-oriented and multi-threaded, and each agent may consist of many objects and several threads. It also has the advantage of being portable across operating systems, as well as providing a rich set of class libraries that include excellent network communication facilities.</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>The classes of the system can be categorised into three primary functional groups&mdash;an agent component library, an agent building tool and an agent visualisation tool.</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="0"><PTEXT><PDAT>The agent component library comprises Java classes that form the &ldquo;building blocks&rdquo; of individual agents. These together implement the &ldquo;agent-level&rdquo; functionality required for a collaborative agent. Thus for instance for communications, reasoning, inter-agent co-operation and the ability to participate in goal-driven interactions between agents, the system provides:</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="2"><PTEXT><PDAT>A performative-based inter-agent communication language</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="2"><PTEXT><PDAT>Knowledge representation and storage using ontologies</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="2"><PTEXT><PDAT>An asynchronous socket-based message passing system</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="2"><PTEXT><PDAT>A planning and scheduling system</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="2"><PTEXT><PDAT>An event model together with an applications programming interface (API) that allows programmers to monitor changes in the internal state of an agent, and to control its behaviour externally</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="2"><PTEXT><PDAT>A co-ordination engine</PDAT></PTEXT></PARA>
<PARA ID="P-00069" LVL="2"><PTEXT><PDAT>A library of predefined co-ordination protocols</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="2"><PTEXT><PDAT>A library of predefined organisational relationships</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="0"><PTEXT><PDAT>It further provides support agents of known general type such as name-servers, facilitators (classified directories), and visualisers.</PDAT></PTEXT></PARA>
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>Preferably, components of the system use standard technologies wherever possible, such as communicating through TCP/IP sockets using a language based on the Knowledge Query Management Language (KQML).</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="0"><PTEXT><PDAT>Further descriptions of these aspects can be found below.</PDAT></PTEXT></PARA>
<PARA ID="P-00074" LVL="0"><PTEXT><PDAT>In the following, the terms &ldquo;goal&rdquo;, &ldquo;task&rdquo; and &ldquo;job&rdquo; are used. These are defined as follows:</PDAT></PTEXT></PARA>
<PARA ID="P-00075" LVL="2"><PTEXT><PDAT>A &ldquo;goal&rdquo;: a logical description of a resource (fact) which it is intended an agent should produce;</PDAT></PTEXT></PARA>
<PARA ID="P-00076" LVL="2"><PTEXT><PDAT>A &ldquo;task&rdquo;: a logical description of a process which uses zero or more resources and produces one or more resources; and</PDAT></PTEXT></PARA>
<PARA ID="P-00077" LVL="2"><PTEXT><PDAT>A &ldquo;job&rdquo;: refers to a goal or task depending on the context. (For instance, in the context of the visualiser </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> discussed below under the heading &ldquo;</PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>. DEBUGGING AND VISUALISATION&rdquo;, it refers to goals.)</PDAT></PTEXT></PARA>
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, an agent-based system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, built using the CABS platform, comprises a set of communicating agents </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> for controlling/representing entities in an external system, together with a set of infrastructure agents </PDAT><HIL><BOLD><PDAT>135</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>145</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>The agents of the system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> communicate with each using a network such as a Local Area Network </PDAT><HIL><BOLD><PDAT>150</PDAT></BOLD></HIL><PDAT>. They might alternatively communicate using capacity in the external system itself.</PDAT></PTEXT></PARA>
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>External to the agent system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, there is a communications system </PDAT><HIL><BOLD><PDAT>125</PDAT></BOLD></HIL><PDAT> with various components. There is within the external system </PDAT><HIL><BOLD><PDAT>125</PDAT></BOLD></HIL><PDAT>, for instance, a terminal </PDAT><HIL><BOLD><PDAT>155</PDAT></BOLD></HIL><PDAT>, a software application providing authentication </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> and several network links </PDAT><HIL><BOLD><PDAT>165</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>170</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>175</PDAT></BOLD></HIL><PDAT>. One of the network links </PDAT><HIL><BOLD><PDAT>175</PDAT></BOLD></HIL><PDAT> is provided with an external agent </PDAT><HIL><BOLD><PDAT>180</PDAT></BOLD></HIL><PDAT> which is separate from the agent-based system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> built using the CABS platform.</PDAT></PTEXT></PARA>
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>The CABS agents </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> have various tasks to carry out and resources to control. The agents will need both to collaborate together and to carry out tasks. The tasks will include those directly involved in providing services to a user but may also include auxiliary tasks.</PDAT></PTEXT></PARA>
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>In an example, in the system shown, if the user wants data downloaded to the terminal </PDAT><HIL><BOLD><PDAT>155</PDAT></BOLD></HIL><PDAT>, the user agent </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> will have the task of providing an authentication resource </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT>, the terminal agent </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> will have the task of providing sufficient storage for the data at the terminal </PDAT><HIL><BOLD><PDAT>155</PDAT></BOLD></HIL><PDAT> and the network agents </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> will have the task of providing network bandwidth to carry the data to the terminal </PDAT><HIL><BOLD><PDAT>155</PDAT></BOLD></HIL><PDAT>. The network agents </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> will also need to collaborate with each other, for instance by bidding against one another in terms of cost, time and quality of service to provide the network bandwidth.</PDAT></PTEXT></PARA>
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>After an inter-agent collaboration stage, the agents </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> will carry out the tasks by outputting control messages to the components of the system </PDAT><HIL><BOLD><PDAT>125</PDAT></BOLD></HIL><PDAT> they control. The terminal agent </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> must therefore control the terminal </PDAT><HIL><BOLD><PDAT>155</PDAT></BOLD></HIL><PDAT> so as to provide the storage capacity it has agreed to provide. The user agent </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> must launch the authentication application </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT>. One of the two network agents </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> must provide the bandwidth, agreed as a result of the collaboration, on its respective network link </PDAT><HIL><BOLD><PDAT>170</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>During their activities, the agents </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> will have access to common resources within the CABS agent system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, including for instance the infrastructure agents mentioned above; a name server agent </PDAT><HIL><BOLD><PDAT>135</PDAT></BOLD></HIL><PDAT>, a debugging/fault finding agent </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT>, referred to here as a visualiser, and a facilitator agent </PDAT><HIL><BOLD><PDAT>145</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>The separate agent </PDAT><HIL><BOLD><PDAT>180</PDAT></BOLD></HIL><PDAT>, controlling a network link </PDAT><HIL><BOLD><PDAT>175</PDAT></BOLD></HIL><PDAT> of the external system </PDAT><HIL><BOLD><PDAT>125</PDAT></BOLD></HIL><PDAT>, may provide back up to the network agents </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> of the CABS system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, in the event that bandwidth is not available through network links directly controlled by the CABS built agents </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT>. It will be clear in that circumstance that the CABS agents </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> will need to share a common communication language with the separate agent X </PDAT><HIL><BOLD><PDAT>180</PDAT></BOLD></HIL><PDAT>, together with some sort of co-ordination protocol. Communication with the external agent </PDAT><HIL><BOLD><PDAT>180</PDAT></BOLD></HIL><PDAT>, for instance to obtain capacity on its link as a backup resource, could be allocated as a task to any one or more of the CABS agents.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>2. STRUCTURE OF A SINGLE AGENT BUILT USING CABS PLATFORM/TOOL-KIT</PDAT></STEXT></H>
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, the internal structure of a single, collaborative agent which can be built using CABS, for distributed control, monitoring and management of external systems </PDAT><HIL><BOLD><PDAT>240</PDAT></BOLD></HIL><PDAT>, comprises:</PDAT></PTEXT></PARA>
<PARA ID="P-00087" LVL="2"><PTEXT><PDAT>(i) a mail box </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> or communicating device which handles communications between the software module and other internal or external software or hardware systems;</PDAT></PTEXT></PARA>
<PARA ID="P-00088" LVL="2"><PTEXT><PDAT>(ii) a message handler </PDAT><HIL><BOLD><PDAT>205</PDAT></BOLD></HIL><PDAT> which processes messages incoming from the mail box </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, dispatching them to other components in the architecture;</PDAT></PTEXT></PARA>
<PARA ID="P-00089" LVL="2"><PTEXT><PDAT>(iii) a co-ordination engine and reasoning system </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> which takes decisions concerning the goals the agent should be pursuing, how said goals should be pursued, when to abandon them etc., and how to co-ordinate the agent&apos;s activities with respect to other CABS agents in the system. The co-ordination engine and reasoning system contains both an engine and a database of coordination processes </PDAT><HIL><BOLD><PDAT>255</PDAT></BOLD></HIL><PDAT>;</PDAT></PTEXT></PARA>
<PARA ID="P-00090" LVL="2"><PTEXT><PDAT>(iv) an acquaintance model </PDAT><HIL><BOLD><PDAT>215</PDAT></BOLD></HIL><PDAT> which describes the agent&apos;s knowledge about the capabilities of other agents in the system;</PDAT></PTEXT></PARA>
<PARA ID="P-00091" LVL="2"><PTEXT><PDAT>(v) a planner and scheduler </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> which plans and schedules the tasks the agent is controlling, monitoring or managing based on decisions taken by the co-ordination engine and reasoning system </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> and the resources and tasks available to be controlled, monitored and/or managed by the agent;</PDAT></PTEXT></PARA>
<PARA ID="P-00092" LVL="2"><PTEXT><PDAT>(vi) a resource database </PDAT><HIL><BOLD><PDAT>225</PDAT></BOLD></HIL><PDAT> containing logical descriptions of the resources currently available to the agent; and providing an interface between the database and external systems such that the database can query external systems about the availability or resources and inform external systems when resources are no longer needed by the agent, and external systems can on their own initiative add, delete or modify resource items in the database, thus initiating changes in the agent&apos;s behaviour;</PDAT></PTEXT></PARA>
<PARA ID="P-00093" LVL="2"><PTEXT><PDAT>(vii) a task database </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT> which provides logical descriptions of tasks available for control, monitoring and/or management by the agent; and</PDAT></PTEXT></PARA>
<PARA ID="P-00094" LVL="2"><PTEXT><PDAT>(viii) an execution monitor </PDAT><HIL><BOLD><PDAT>235</PDAT></BOLD></HIL><PDAT> which starts, stops, and monitors external systems tasks scheduled for execution or termination by the planner and scheduler, and which informs the co-ordination engine and reasoning system </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> of successful and exceptional terminating conditions to the tasks it is monitoring.</PDAT></PTEXT></PARA>
<PARA ID="P-00095" LVL="0"><PTEXT><PDAT>When the agent is built, the developer uses various CABS-provided editors to provide descriptions required for various modules of the agent architecture including the coordination and reasoning engine </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>, the acquaintance model </PDAT><HIL><BOLD><PDAT>215</PDAT></BOLD></HIL><PDAT>, the resource database </PDAT><HIL><BOLD><PDAT>225</PDAT></BOLD></HIL><PDAT> and the task database </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00096" LVL="0"><PTEXT><PDAT>In use, the agent is driven by events which cause the agent&apos;s state to change. The agent will run an event model provided by the component library of the system to monitor these internal changes, making them visible to a programmer via an API. There are three possible external event sources (see FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>): external messages from other agents into the Mailbox </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> (e.g requests for a service), external events initiated from the Execution Monitor </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> monitoring external systems </PDAT><HIL><BOLD><PDAT>240</PDAT></BOLD></HIL><PDAT> (e.g. from various sensors) and external events initiated from changes to the Resource Database </PDAT><HIL><BOLD><PDAT>225</PDAT></BOLD></HIL><PDAT>. For example, if there is an event which changes the state of the agent, such as loss of a resource, it will need to update its records accordingly.</PDAT></PTEXT></PARA>
<PARA ID="P-00097" LVL="0"><PTEXT><PDAT>A change in state may initiate a sequence of activities within and/or outside the particular agent. For example, losing a resource (e.g. through failure) which is required to provide some service would require the Planner &amp; Scheduler module </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> to attempt to secure another resource which may be able to do the same job. If it succeeds, all activities as a result of the loss of the resource can be contained within the agent. However, if the Planning and Scheduling module </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> cannot locate another local resource, the Coordination Engine and Reasoning System </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> will be called upon to attempt either to secure the resource from some other agent or delegate/contract the task which required that resource to another agent. In both cases, the Coordination Engine and Reasoning System </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> will request the Mailbox </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> via the Message Handler </PDAT><HIL><BOLD><PDAT>205</PDAT></BOLD></HIL><PDAT> to construct a message and despatch it to selected other agents. In this way, coordination of activities with other agents is realised.</PDAT></PTEXT></PARA>
<PARA ID="P-00098" LVL="0"><PTEXT><PDAT>Further details of the components of the agent structure which support the above mechanism are given below.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>2.1 Mailbox </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL></STEXT></H>
<PARA ID="P-00099" LVL="0"><PTEXT><PDAT>The mailbox </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> is implemented as a multi-threaded module with inter-agent communication via TCP/IP sockets. One thread of execution, the server thread, continuously listens for and accepts incoming TCP connection requests from other agents, receives any incoming messages from those agents and puts the received messages into an in-tray (a queue). A second thread, the client thread, opens TCP connections with other agents to deliver messages. Messages to be delivered are retrieved from an out-tray (queue). When other modules of the agent request a message to be delivered to another agent, those messages are placed on the out-tray of the mailbox to be later picked up by the client-thread. The message language used in the current implementation is the KQML agent communication language &lsqb;Tim Finin, Yannis Labrou &amp; James Mayfield (1997), KQML as an Agent Communication Language, in Bradshaw, J (Ed.), Software Agents, Cambridge Mass: MIT Press, Chapter 14, pages 291-316&rsqb;</PDAT></PTEXT></PARA>
<PARA ID="P-00100" LVL="0"><PTEXT><PDAT>The mailbox technology is relatively standard and could have been implemented using alternative communication protocol other than TCP/IP such as electronic mail and HyperText Transfer Protocol (HTTP).</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>2.2 Message Handler </PDAT><HIL><BOLD><PDAT>205</PDAT></BOLD></HIL></STEXT></H>
<PARA ID="P-00101" LVL="0"><PTEXT><PDAT>The message handler </PDAT><HIL><BOLD><PDAT>205</PDAT></BOLD></HIL><PDAT> continually polls the in-tray of the mailbox </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> for new incoming messages, which it dispatches to other relevant components of the agent for detailed processing. This module is based on standard technology, comprising a continuously running thread which polls the mailbox </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, and has access to handles of all the major components of the agent for dispatching messages to them.</PDAT></PTEXT></PARA>
<PARA ID="P-00102" LVL="0"><PTEXT><PDAT>In CABS, the format of KQML messages is as follows:</PDAT></PTEXT></PARA>
<PARA ID="P-00103" LVL="2"><PTEXT><PDAT>KQML &lsqb;:sender :receivers :content&rsqb;</PDAT></PTEXT></PARA>
<PARA ID="P-00104" LVL="0"><PTEXT><PDAT>Agent messages, including inter-agent communications as usually used in co-ordination in CABS, use KQML performatives, and the details of the communications are usually contained in the KQML content field. A CABS agent that puts forward a change in state to other agents (which may represent a proposal, counter-proposal, or acceptance in the CABS co-ordination protocol) uses the KQML performative &ldquo;achieve&rdquo;. Recipient agents reply by using the KQML performative &ldquo;reply&rdquo; when they counter-propose and &ldquo;accept&rdquo; when they accept a proposal.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>2.3 Co-ordination Engine And Reasoning System </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL></STEXT></H>
<PARA ID="P-00105" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 2 and 3</PDAT></FGREF><PDAT>, the co-ordination engine and reasoning system </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> and the planner and scheduler </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> are both unique in a CABS agent and both are now described in detail. Further reference is made to these below, in describing use of the CABS platform to design an agent system, under the headings &ldquo;Step </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>: Agent Coordination Strategy Specification&rdquo; and &ldquo;Step </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>: Agent Definition&rdquo; respectively, in the section entitled &ldquo;</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>. USING THE CABS PLATFORM TO DESIGN AN AGENT SYSTEM&rdquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00106" LVL="0"><PTEXT><PDAT>Coordination is extremely important in CABS because its agents are collaborative. Collaborative software agents refer to the complex class of agents which are both autonomous and which are capable of cooperation with other agents in order to perform tasks for the entities they represent. They may have to negotiate in order to reach mutually acceptable agreements with other agents. For instance, an agent may receive a request for a resource from another agent. It will respond according to the relationship between them and according to its own particular circumstances (&ldquo;state&rdquo;), such as whether it has that resource available. The response forms part of an interaction process between the two agents which is determined by a &ldquo;co-ordination protocol&rdquo;. The co-ordination engine and reasoning system </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> allows the agent to interact with other agents using one or more different co-ordination protocols, selected by the developer to be appropriate to the agent&apos;s domain.</PDAT></PTEXT></PARA>
<PARA ID="P-00107" LVL="0"><PTEXT><PDAT>Typically, in the past, coordination protocols have been &ldquo;hardwired&rdquo; into the way individual software agents work, such that changing them requires a total re-write of the entire distributed application. In a CABS system however, the agent is provided with one or more co-ordination graphs </PDAT><HIL><BOLD><PDAT>255</PDAT></BOLD></HIL><PDAT> and an engine </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> for executing them. Each graph comprises a set of labels for nodes together with a set of labels for arcs which identify transition conditions for going from node to node. The agent is also provided with access to a repository of the executable form of the nodes and arcs identified by the labels. This repository may be held internally in the agent or externally from it. The co-ordination engine </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> uses graph descriptions to dynamically build and run co-ordination processes by putting together the process steps identified by the node and arc labels of the graphs.</PDAT></PTEXT></PARA>
<PARA ID="P-00108" LVL="0"><PTEXT><PDAT>At agent build time, the user selects from a co-ordination graphs database </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT> the specific coordination graphs for the agent, which are loaded into the agent&apos;s local coordination graph database </PDAT><HIL><BOLD><PDAT>255</PDAT></BOLD></HIL><PDAT>. (The CABS unique visualiser agent </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> is provided with a control tool which allows users to modify agents&apos; co-ordination graphs at runtime. This is further described below, under the heading &ldquo;5. DEBUGGING AND VISUALISATION&rdquo;.)</PDAT></PTEXT></PARA>
<PARA ID="P-00109" LVL="0"><PTEXT><PDAT>A particularly important feature of the CABS agent is that its co-ordination engine </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> can implement more than one co-ordination process, and therefore more than one coordination protocol, simultaneously. This is done effectively by multiplexing execution of the co-ordination graphs held in the co-ordination graph database </PDAT><HIL><BOLD><PDAT>255</PDAT></BOLD></HIL><PDAT> by an agent. The engine </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> deals with the first node of each co-ordination graph </PDAT><HIL><BOLD><PDAT>255</PDAT></BOLD></HIL><PDAT> it has been loaded with, then steps on sequentially to the second nodes of all the graphs, etc. Thus it effectively steps through the co-ordination graphs </PDAT><HIL><BOLD><PDAT>255</PDAT></BOLD></HIL><PDAT> in parallel.</PDAT></PTEXT></PARA>
<PARA ID="P-00110" LVL="0"><PTEXT><PDAT>CABS thus provides in the agent shell </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> a co-ordination engine and reasoning system </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> for which the functionality is determined by selection from a set of co-ordination graphs </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT> during agent build. Once each agent is in use, the co-ordination graphs are used by the co-ordination engine and reasoning system </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> to run specified co-ordination process steps and protocols.</PDAT></PTEXT></PARA>
<PARA ID="P-00111" LVL="0"><PTEXT><PDAT>The repository of process steps identified by the labels is not necessarily itself held in each agent. It may simply be accessed by the agent at runtime, in accordance with its co-ordination graph(s).</PDAT></PTEXT></PARA>
<PARA ID="P-00112" LVL="0"><PTEXT><PDAT>(In the following, the co-ordination engine and reasoning system </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> is also referred to as the Coordination Software Module </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>.)</PDAT></PTEXT></PARA>
<PARA ID="P-00113" LVL="0"><PTEXT><PDAT>The overall architecture of the Coordination Software Module </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> is one of a Turing state machine. It takes as inputs various state variable values, parameters, goals, exceptions and constraints, and it outputs decisions.</PDAT></PTEXT></PARA>
<PARA ID="P-00114" LVL="0"><PTEXT><PDAT>In a multi-agent system, when two or more agents go through a co-ordination process, using their respective Coordination Software Modules </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>, the overall process functionality can generally be represented by a &ldquo;universal co-ordination protocol (UCP)&rdquo; as follows: </PDAT>
<CWU>
<CHEM-US ID="CHEM-US-00001">
<CHEMCDX ID="CHEMCDX-00001" FILE="US06314555-20011106-C00001.CDX">
<CHEMMOL ID="CHEMMOL-00001" FILE="US06314555-20011106-C00001.MOL">
<EMI ID="EMI-C00001" FILE="US06314555-20011106-C00001.TIF">
</CHEM-US>
</CWU>
</PTEXT></PARA>
<PARA ID="P-00115" LVL="0"><PTEXT><PDAT>This UCP is a 3-phase sequence of activities &ldquo;proposal&rdquo;, &ldquo;counter-proposal&rdquo; and &ldquo;acceptance/confirmation&rdquo;, with possible iterations as shown. Each activity is represented by a &ldquo;node&rdquo; (represented here by a high level process description) and the nodes are connected by &ldquo;arcs&rdquo; (shown here as arrows) which each indicate a transition condition for moving from node to node. The Coordination Software Module </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> for each agent must be capable of supporting that agent&apos;s role in the UCP.</PDAT></PTEXT></PARA>
<PARA ID="P-00116" LVL="7"><PTEXT><PDAT>2.3.1 Co-ordination Software Module </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL></PTEXT></PARA>
<PARA ID="P-00117" LVL="0"><PTEXT><PDAT>The co-ordination software module </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> is designed to interpret co-ordination graphs when given an initial (problem) state. The initial state specifies the initial conditions of the problems and the necessary data.</PDAT></PTEXT></PARA>
<PARA ID="P-00118" LVL="0"><PTEXT><PDAT>Execution of a graph by the coordination software module </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> proceeds as follows: the engine selects the first node of the graph and instantiates a process identified by the label of the node. This process is run by calling its exec( ) which returns one of three possible results: FAIL, OK or WAIT. If exec( ) returns OK, a process identified by the label of the first arc leaving the node is instantiated and executed. If the arc test succeeds then the node pointed to by the arc is scheduled for execution. The graph will be executed in this way until a final node is reached from which there are no more arcs.</PDAT></PTEXT></PARA>
<PARA ID="P-00119" LVL="0"><PTEXT><PDAT>The co-ordination software module </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> continuously cycles through graphs in the sense that it monitors for events and exceptions occurring at any time.</PDAT></PTEXT></PARA>
<PARA ID="P-00120" LVL="0"><PTEXT><PDAT>If an arc test fails at a node, the next arc from the node is tried. If a node&apos;s exec( ) method returns FAIL or all arcs leaving the node fail then the node is backtracked over (by calling the node&apos;s backtrack( ) method which undoes any changes made by the exec( ) method) to the previous node of the chain.</PDAT></PTEXT></PARA>
<PARA ID="P-00121" LVL="0"><PTEXT><PDAT>If a node&apos;s exec( ) method returns WAIT, then the node is placed on a wait queue until one of two conditions become true: either a new external event is received by the engine (e.g. a reply message is received from another agent) or a timeout specified by the node is exceeded. In either case, the node is scheduled for execution again. In summary, the engine performs a depth-first execution of the graph with backtracking allowed.</PDAT></PTEXT></PARA>
<PARA ID="P-00122" LVL="0"><PTEXT><PDAT>Other attributes of the engine include:</PDAT></PTEXT></PARA>
<PARA ID="P-00123" LVL="2"><PTEXT><PDAT>(i) the ability to treat graphs and arcs as equivalent when an arc label in fact denotes a graph&mdash;this gives the engine recursive power; and</PDAT></PTEXT></PARA>
<PARA ID="P-00124" LVL="2"><PTEXT><PDAT>(ii) the ability to create multiple instances of the same arc and execute them in parallel with management of failure of the parallel branches. I.e. when one branch of a parallel arc fails, the engine automatically fails all the other executing parallel branches.</PDAT></PTEXT></PARA>
<PARA ID="P-00125" LVL="0"><PTEXT><PDAT>The detailed logic of the coordination engine </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> is as follows:</PDAT></PTEXT></PARA>
<PARA ID="P-00126" LVL="2"><PTEXT><PDAT>Vector executionQueue//queue of nodes awaiting execution</PDAT></PTEXT></PARA>
<PARA ID="P-00127" LVL="2"><PTEXT><PDAT>Vector messageQueue//queue of new messages</PDAT></PTEXT></PARA>
<PARA ID="P-00128" LVL="2"><PTEXT><PDAT>Vector messageWaitQueue//queue of nodes awaiting messages</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00001">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>public void run( ) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;Node node;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;while(running) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>node &equals; (Node)dequeue( );</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>node.run(this);</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>void enqueue(Node node) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;add node to the executionQueue</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;wake up the engine if it is sleeping</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Node dequeue( ) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;Node node;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;Time t;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;while ( executionQueue.isEmpty( )) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>// compute timeout &amp; wait</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>compute the minimum timeout (t) of all the nodes in</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>the messageWaitQueue</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>t &equals; t &minus; current_time</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>// now wait by putting the engine to sleep</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if ( t &gt; 0 ) wait(t);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>check if the timeout of any node on the messageWaitQueue</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>has been exceeded. For those nodes whose timeout has been</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>exceeded remove them from the messageWaitQueue and add them</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>to executionQueue</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;delete and return the first element of the execution Queue</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>void add(Node node) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;enqueue(node);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>void add(Goal goal) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;select graph (g) from the graph library and run it</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>void add(Message message) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;if message is a proposal</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>create a new goal from the contents of the message and</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>run a new graph with the goal as input</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;otherwise</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>add message to the messageQueue</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>wakeup( );</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>void wakeup( ) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;remove aII nodes from the messageWaitQueue and add</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;to the executionQueue</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>void waitForMsg(Node node) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;add node to messageWaitQueue</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Vector replyReceived(String key) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;find the set S of all messages in the messageQueue</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;with key field &equals; key</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;messageQueue &equals; messageQueue &minus; S</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;return S</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00129" LVL="0"><PTEXT><PDAT>The following code fragments describe the basic behaviour of a node. Note that in defining a new node only the exec( ) and backtrack( ) functions need to be defined. The other functions below describe how nodes interact with the engine and arcs.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00002">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>String&lsqb; &rsqb; arcs // the list of arcs from this mode</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>String&lsqb; &rsqb; nodes // the list of node pointed to by the arcs</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Node &emsp;previous_node // the previous node in the chain</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Graph &emsp;graph // the graph which led to the instantiation of this node</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>int &emsp;state // the current state of this node</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>int &emsp;current_arc // the current arc awaiting execution</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Object data // data describing the current state on which this node acts</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>void run(Engine engine) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;switch(state) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case READY:</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;if ( &excl;graph.allow_exec( ) )</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="196PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>// the graph.allow_exec( )asks the graph if execution of this node</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>is allowed</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="196PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>fail(engine,false,&ldquo;Exec refused by graph&rdquo;);</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;else</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="196PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>switch( exec( ) )&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;case OK:</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;state: &equals; RUNNING;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;engine.add(this);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;break;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;case WAIT:</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;engine.waitForMsg(this);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;break;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;case FAIL:</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;fail(engine,false,&ldquo;Node exec failed&rdquo;);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;break;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;break;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;case RUNNING:</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;if ( &excl;graph.allow_exec( ) )</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="196PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>fail(engine,true,&ldquo;Exec refused by graph&rdquo;);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>else if ( arcs &equals;&equals; null )</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;done(engine,&ldquo;terminal node reached&rdquo;);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>else if ( current_arc &gt;&equals; arcs.length )</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;fail(engine,true,&ldquo;All arcs traversed&rdquo;);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>else</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;exec_arc(engine, data);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>break;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>void fail(Engine engine, boolean backtrack, String reason) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;state &equals; FAILED;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;if ( backtrack )</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>backtrack( );</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;graph.failed(engine,this);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;if ( previous_node &excl;&equals; null )</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>previous_node.nextArc(engine);</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>protected int exec( ) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;// contains the actual executable code for</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;// this node</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>protected void backtrack( ) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;// reset any state changed by exec( )</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>void exec_arc(Engine engine) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;load process described by current_arc and</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;the call the run( )method of the arc.</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;If the run( )method succeeds &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>create a new node process by calling</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>graph.newNode(label) where label is the node label pointed to by</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>nodes&lsqb;current_arc &rsqb;.</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Initialise the new node with setInput(data) and</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>add the node to the engine with engine.add(newNode)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;if the arc process cannot be created or the run method</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;&ensp;fails call the nextArc( )method of this node</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>void setInput(Object data) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;this.data &equals; data</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>void nextArc(Engine engine) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;if ( &excl;graph.allow_exec( ) )</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>fail(engine,true,&ldquo;Next arc disallowed by graph&rdquo;);</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;else &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if ( state &equals;&equals; DONE &amp;&amp; arcs &equals;&equals; null )</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;fail(engine,true,&ldquo;All arcs traversed&rdquo;);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>else &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;state &equals; RUNNING;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;current_arc&plus;&plus;;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;engine.add(this);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00130" LVL="0"><PTEXT><PDAT>The following code fragment describes the functions that implement the behaviour of a graph. Note again that a user does not need to implement these functions. To describe any graph, the user simply needs to provide a two dimensional string array listing the nodes and arcs of the graph.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00003">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0" PGWIDE="1">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;String&lsqb; &rsqb;&lsqb; &rsqb; nodes // two dimensional array of listing the nodes and arcs of the</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>graph</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="1" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="224PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;String</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>start_node // the label of the start node</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;String</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>next_node // the label of the next node</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;Node</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>previous_node // the process of the last node of the graph</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;Node</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;begin_node // the process identifier of the start node &emsp;Graph</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>parent_graph // the graph of which this is a subgraph</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="1" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="224PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;int</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>state // the current state of the graph</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;public void run(Engine engine, Graph parent_graph, Node previous_node,</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="210PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>String next_node) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>this.parent_graph &equals; parent_graph;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>this.previous_node &equals; previous_node;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>this.next_node &equals; next_node;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>start(engine,arc_data);</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;public void run(Engine engine, Object input) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>start(engine,input);</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;protected void start(Engine engine, Object input) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>state &equals; RUNNING;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>begin_node &equals; newNode(start_node);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if ( begin_node &equals;&equals; null )</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;fail(engine,&ldquo;Start node not found&rdquo;);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>else &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;begin_node.setInput(input,previous_node);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;engine.add(begin_node);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>void done(Engine engine, Node node) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>state &equals; DONE;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if ( graph &excl;&equals; null ) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;Node next &equals; graph.newNode(next_node);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;if ( next &equals;&equals; null) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="238PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>state &equals; RUNNING;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>node.nextArc(engine);</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;else &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="238PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Object data &equals; node.getData( );</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>next.setInput(data,node);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>engine.add(next);</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>void failed(Engine engine, Node node) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if (node &equals;&equals; begin_node ) state &equals; FAILED;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>void fail(Engine engine, String reason) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>state &equals; FAILED;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if ( previous_node &excl;&equals; null )</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;previous_node.nextArc(engine);</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Node newNode(String name) &lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>create a new node process identifed by the label name and</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>using the 2D nodes array find the arcs leaving this node and</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>their destination nodes and set these as the arc/node data</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>for the new node</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00131" LVL="0"><PTEXT><PDAT>Below is an example of a graph description which is stored in the coordination graph database </PDAT><HIL><BOLD><PDAT>255</PDAT></BOLD></HIL><PDAT> and used to create and run a coordination process.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00004">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="84PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="133PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub; &lcub;&ldquo;s0&rdquo;,</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="91PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="126PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ldquo;a1&rdquo;, &ldquo;s1&rdquo;,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ldquo;a2&rdquo;, &ldquo;s4&rdquo;,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ldquo;a3&rdquo;, &ldquo;s4&rdquo;&rcub;,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;&ldquo;s1&rdquo;,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ldquo;a4&rdquo;, &ldquo;s2&rdquo;,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ldquo;a5&rdquo;, &ldquo;s3&rdquo;&rcub;,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;&ldquo;s3&rdquo;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;&ldquo;s4&rdquo;&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="84PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="133PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00132" LVL="0"><PTEXT><PDAT>The array describes a graph with four states s</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>-s</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, and five arcs a</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>-a</PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>. From node s</PDAT><HIL><BOLD><PDAT>0</PDAT></BOLD></HIL><PDAT> we can take arc a</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> to state s</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> or arc a</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> to state s</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> or alternative arc a</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> to state s</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>. When more than one can be traversed from a node, the arcs are tried in the order in which they are presented in the graph description.</PDAT></PTEXT></PARA>
<PARA ID="P-00133" LVL="0"><PTEXT><PDAT>The code with which a user defines a node is simply required to implement an exec( ) and a backtrack( ) method. For arcs the code should implement an exec) method which returns a boolean result of true or false.</PDAT></PTEXT></PARA>
<PARA ID="P-00134" LVL="7"><PTEXT><PDAT>2.3.2 Coordination Mechanisms</PDAT></PTEXT></PARA>
<PARA ID="P-00135" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11</PDAT></FGREF><PDAT>, in CABS agents every coordination mechanism is specified in terms of a 14-stage framework where in each stage at least one state process function should be implemented. The 14-stage framework can be considered an &ldquo;executive summary&rdquo; of the detailed logic of the co-ordination engine </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> set out in code above. Generic atomic process functions for the fourteen stages are listed below. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11</PDAT></FGREF><PDAT> describes in schematic form the stages listed below.</PDAT></PTEXT></PARA>
<PARA ID="P-00136" LVL="7"><PTEXT><PDAT>Resource Phase</PDAT></PTEXT></PARA>
<PARA ID="P-00137" LVL="0"><PTEXT><PDAT>In this phase, an agent A</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> has been triggered by an incoming message from another Agent A</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> which for instance needs to delegate tasks. The incoming message will be sent to the co-ordination engine and reasoning system </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> of A</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> which will call on the planner and scheduler </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT>, and on the various databases </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>225</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>215</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>245</PDAT></BOLD></HIL><PDAT> in building and running a co-ordination graph in order to respond to agent A</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>. In the resource phase, agent A</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> will use the task database </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT> to see what resources a task requires, and the resource and commitment databases </PDAT><HIL><BOLD><PDAT>225</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>245</PDAT></BOLD></HIL><PDAT> to see if it has those resources available.</PDAT></PTEXT></PARA>
<PARA ID="P-00138" LVL="7"><PTEXT><PDAT>Stage One</PDAT></PTEXT></PARA>
<PARA ID="P-00139" LVL="0"><PTEXT><PDAT>Verify resource availability and determine actions for situations of sufficient/insufficient resources;</PDAT></PTEXT></PARA>
<PARA ID="P-00140" LVL="0"><PTEXT><PDAT>Decision:</PDAT></PTEXT></PARA>
<PARA ID="P-00141" LVL="2"><PTEXT><PDAT>if resources are completely/partially sufficient go to next stage;</PDAT></PTEXT></PARA>
<PARA ID="P-00142" LVL="2"><PTEXT><PDAT>if resources are completely not available reject and terminate;</PDAT></PTEXT></PARA>
<PARA ID="P-00143" LVL="7"><PTEXT><PDAT>Stage Two</PDAT></PTEXT></PARA>
<PARA ID="P-00144" LVL="0"><PTEXT><PDAT>Tentatively reserve resources;</PDAT></PTEXT></PARA>
<PARA ID="P-00145" LVL="7"><PTEXT><PDAT>Delegation Phase</PDAT></PTEXT></PARA>
<PARA ID="P-00146" LVL="0"><PTEXT><PDAT>This phase will only come into play if agent A</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> does not have the resource available, itself, to respond to agent A</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00147" LVL="7"><PTEXT><PDAT>Stage Three</PDAT></PTEXT></PARA>
<PARA ID="P-00148" LVL="0"><PTEXT><PDAT>Determine the agent&apos;s position/role in the whole coordination context (head&mdash;owner of the current goal, or non-head&mdash;i.e. one to whom a sub-goal has been delegated) and distinguish the level of resource availability (partially/completely sufficient).</PDAT></PTEXT></PARA>
<PARA ID="P-00149" LVL="2"><PTEXT><PDAT>if resources are only partially sufficient go to next stage (S</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>3</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00150" LVL="2"><PTEXT><PDAT>if the resources are only partially sufficient, it is necessary to negotiate with other agents to find additional resource. Stages S</PDAT><HIL><SB><PDAT>3 </PDAT></SB></HIL><PDAT>to S</PDAT><HIL><SB><PDAT>9 </PDAT></SB></HIL><PDAT>bring in negotiation process steps which are not required if resources are completely sufficient. Hence, if resources are completely sufficient and the agent&apos;s role is &ldquo;head&rdquo; go to Stage Thirteen (S</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>13</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00151" LVL="2"><PTEXT><PDAT>resources are completely sufficient but the agent&apos;s role is not &ldquo;head&rdquo;, go to Stage Ten (S</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>10</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00152" LVL="7"><PTEXT><PDAT>Stage Four</PDAT></PTEXT></PARA>
<PARA ID="P-00153" LVL="0"><PTEXT><PDAT>Find the first set of tasks whose required resources cannot be met;</PDAT></PTEXT></PARA>
<PARA ID="P-00154" LVL="0"><PTEXT><PDAT>Remove the selected set (S</PDAT><HIL><SB><PDAT>3</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>4</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00155" LVL="7"><PTEXT><PDAT>Stage Five</PDAT></PTEXT></PARA>
<PARA ID="P-00156" LVL="0"><PTEXT><PDAT>Create a new proposal using every task in the selected set (S</PDAT><HIL><SB><PDAT>4</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>5</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00157" LVL="7"><PTEXT><PDAT>Stage Six</PDAT></PTEXT></PARA>
<PARA ID="P-00158" LVL="0"><PTEXT><PDAT>Find a set of agents to which the proposal can be posted (S</PDAT><HIL><SB><PDAT>5</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>6</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>Negotiation Phase</PDAT></STEXT></H>
<PARA ID="P-00159" LVL="7"><PTEXT><PDAT>Stage Seven</PDAT></PTEXT></PARA>
<PARA ID="P-00160" LVL="2"><PTEXT><PDAT>(will depend on co-ordination strategy to be applied, for instance &ldquo;Multiple Round Second Price Open Bid&rdquo; or &ldquo;Contract Net&rdquo;&mdash;see below.)</PDAT></PTEXT></PARA>
<PARA ID="P-00161" LVL="2"><PTEXT><PDAT>send the proposal (S</PDAT><HIL><SB><PDAT>6</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>7</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00162" LVL="2"><PTEXT><PDAT>perform acceptance handling (S</PDAT><HIL><SB><PDAT>7</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>6</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00163" LVL="2"><PTEXT><PDAT>(perform counter-proposal handling) (S</PDAT><HIL><SB><PDAT>6</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>7</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00164" LVL="2"><PTEXT><PDAT>(perform modified-proposal processing) (S</PDAT><HIL><SB><PDAT>7</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>6</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00165" LVL="7"><PTEXT><PDAT>Stage Eight</PDAT></PTEXT></PARA>
<PARA ID="P-00166" LVL="0"><PTEXT><PDAT>Summarise results obtained from negotiation phase (S</PDAT><HIL><SB><PDAT>7</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>8</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00167" LVL="7"><PTEXT><PDAT>Stage Nine</PDAT></PTEXT></PARA>
<PARA ID="P-00168" LVL="0"><PTEXT><PDAT>Decision: select a set of acceptances from the result (S</PDAT><HIL><SB><PDAT>8</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>9</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00169" LVL="7"><PTEXT><PDAT>Stage Ten</PDAT></PTEXT></PARA>
<PARA ID="P-00170" LVL="0"><PTEXT><PDAT>Decision:</PDAT></PTEXT></PARA>
<PARA ID="P-00171" LVL="2"><PTEXT><PDAT>if there are other sets of tasks whose required resources cannot be met go to Stage Three (S</PDAT><HIL><SB><PDAT>9</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>3</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00172" LVL="2"><PTEXT><PDAT>if there are no other sets of tasks whose required resources cannot be met, and the agent is a head agent go to Stage Thirteen (S</PDAT><HIL><SB><PDAT>9</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>12</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00173" LVL="2"><PTEXT><PDAT>if there are no other sets of tasks whose required resources cannot be met, and the agent is not a head agent go to next stage (S</PDAT><HIL><SB><PDAT>9</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>10</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00174" LVL="7"><PTEXT><PDAT>Stage Eleven</PDAT></PTEXT></PARA>
<PARA ID="P-00175" LVL="2"><PTEXT><PDAT>send acceptance and replies (S</PDAT><HIL><SB><PDAT>10</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>11</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00176" LVL="2"><PTEXT><PDAT>perform confirmation handling (S</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>10</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00177" LVL="2"><PTEXT><PDAT>if applicable, perform modified-proposal handling (S</PDAT><HIL><SB><PDAT>11</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>10</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00178" LVL="7"><PTEXT><PDAT>Stage Twelve</PDAT></PTEXT></PARA>
<PARA ID="P-00179" LVL="0"><PTEXT><PDAT>Decision:</PDAT></PTEXT></PARA>
<PARA ID="P-00180" LVL="2"><PTEXT><PDAT>if not having delegated and confirmation received go to Stage Fourteen (S</PDAT><HIL><SB><PDAT>11</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>13</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00181" LVL="2"><PTEXT><PDAT>if having delegated and confirmation received go to next stage (S</PDAT><HIL><SB><PDAT>11</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>12</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00182" LVL="2"><PTEXT><PDAT>if no confirmation received reject and terminate (S</PDAT><HIL><SB><PDAT>11</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>E</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00183" LVL="7"><PTEXT><PDAT>Stage Thirteen</PDAT></PTEXT></PARA>
<PARA ID="P-00184" LVL="0"><PTEXT><PDAT>Send confirmation (S</PDAT><HIL><SB><PDAT>12</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>13</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00185" LVL="7"><PTEXT><PDAT>Stage Fourteen</PDAT></PTEXT></PARA>
<PARA ID="P-00186" LVL="0"><PTEXT><PDAT>Firmly reserve the resources and terminate (S</PDAT><HIL><SB><PDAT>13</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>14</PDAT></SB></HIL><PDAT>, S</PDAT><HIL><SB><PDAT>14</PDAT></SB></HIL><PDAT>-S</PDAT><HIL><SB><PDAT>E</PDAT></SB></HIL><PDAT>);</PDAT></PTEXT></PARA>
<PARA ID="P-00187" LVL="7"><PTEXT><PDAT>2.3.3 Defining New Coordination Mechanisms</PDAT></PTEXT></PARA>
<PARA ID="P-00188" LVL="0"><PTEXT><PDAT>The design of the coordination machine allows virtually infinite extension to the various UCP-compliant coordination graphs and even to non-UCP-compliant graphs. This is achieved by the fact that the coordination engine is a generic and domain-independent function which interprets any graph description of the form described earlier. By giving different coordination graphs to the engine, different coordination behaviour will be performed. Moreover, by altering the implemented functions (i.e. programs) identified by the node and arc labels of a graph, then on executing that graph the engine will behave differently even if the set of given labels remains unchanged.</PDAT></PTEXT></PARA>
<PARA ID="P-00189" LVL="0"><PTEXT><PDAT>It has been realised that the UCP and its derivative, the 14-stages framework, subsume many existing coordination mechanisms. It has also been realised that these mechanisms differ only in certain minor, but subtle, aspects. After careful analysis, it was found that by differentiating the UCP in 14 stages, most mechanisms have many of the stages in common and only differ in a small number of stages. This makes it possible to implement a large number of different mechanisms by developing only a few new functions and many of the common functions can be reused. In addition, specifying mechanisms using a unified underlying framework makes it possible to solve a problem using a mixture off different mechanisms.</PDAT></PTEXT></PARA>
<PARA ID="P-00190" LVL="0"><PTEXT><PDAT>Given a coordination behaviour, in order to define a new UCP-compliant coordination graph, the following steps should suffice:</PDAT></PTEXT></PARA>
<PARA ID="P-00191" LVL="2"><PTEXT><PDAT>To refine the behaviour so that the decision-making and processing conform to the 14-stages framework;</PDAT></PTEXT></PARA>
<PARA ID="P-00192" LVL="2"><PTEXT><PDAT>Search the library of the coordination machine, and reuse existing implemented functions as far as possible. This will be where the functional behaviour is identical to the required one;</PDAT></PTEXT></PARA>
<PARA ID="P-00193" LVL="2"><PTEXT><PDAT>For those stages where no implemented functions can be reused, implement new functions in which the following three methods must exist:</PDAT></PTEXT></PARA>
<PARA ID="P-00194" LVL="2"><PTEXT><PDAT>exec: to verify whether function is applicable, perform the necessary change of state, messaging, and certain databases update;</PDAT></PTEXT></PARA>
<PARA ID="P-00195" LVL="2"><PTEXT><PDAT>backtrack: to reset all the operations performed and restore the original state;</PDAT></PTEXT></PARA>
<PARA ID="P-00196" LVL="2"><PTEXT><PDAT>Label: give any newly implemented function a label.</PDAT></PTEXT></PARA>
<PARA ID="P-00197" LVL="7"><PTEXT><PDAT>2.3.4 Adding New Coordination Graphs to the Engine</PDAT></PTEXT></PARA>
<PARA ID="P-00198" LVL="0"><PTEXT><PDAT>After a repository of implemented functions has been defined, in order to allow the engine to use a particular coordination graph, a string description of the graph should simply be added to the engine. (The engine can unify multiple coordination graphs into one unified graph which contains no duplication of states.)</PDAT></PTEXT></PARA>
<PARA ID="P-00199" LVL="0"><PTEXT><PDAT>If more than one coordination mechanism is required to solve a particular problem, the engine should in this case be given the graphs describing the required coordination processes. Following unification of the graphs, the engine is able to apply the different mechanisms implicit in the unified graphs opportunistically.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>2.4 Acquaintance Database </PDAT><HIL><BOLD><PDAT>215</PDAT></BOLD></HIL></STEXT></H>
<PARA ID="P-00200" LVL="0"><PTEXT><PDAT>The resource, task, and acquaintance databases </PDAT><HIL><BOLD><PDAT>225</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>215</PDAT></BOLD></HIL><PDAT> primarily serve as information repositories, and can be implemented using conventional database technologies which support storage, retrieval and query facilities. In one implementation, a hashtable (linking each data item to be stored with a unique key) is used as the main data storage structure for each module.</PDAT></PTEXT></PARA>
<PARA ID="P-00201" LVL="0"><PTEXT><PDAT>The acquaintance database </PDAT><HIL><BOLD><PDAT>215</PDAT></BOLD></HIL><PDAT> stores an acquaintance model for the agent in the form of a relationship table as in the following example: the domain in this example is a dealing environment such as between two shops: Shop </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and Shop </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT>, the manager agent of Shop </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> (Agent A</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) has two assistants, Agents B</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and C</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>; whilst the manager agent of Shop </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> (Agent A</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>) has three assistants Agents B</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, C</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and D</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00202" LVL="0"><PTEXT><PDAT>Necessarily in this scenario, A</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> knows of the existence and abilities of B</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and C</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> since they are his assistants, and similarly A</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> of B</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, C</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and D</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. Assume that A</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> knows of A</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and the items A</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> can produce; however A</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> has no knowledge of A</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>. Further, assume that in each shop, the assistants all know one another and their respective abilities. The two tables below summarise one possible instance of the organisational knowledge of the agents in Shops </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00005">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="CENTER">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ROWSEP="1"><PTEXT><PDAT>TABLE</PDAT></PTEXT></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>An instance of the organisational knowledge of Shop 1 agents</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="4">
<COLSPEC COLNAME="1" COLWIDTH="28PT" ALIGN="CENTER">
<COLSPEC COLNAME="2" COLWIDTH="42PT" ALIGN="CENTER">
<COLSPEC COLNAME="3" COLWIDTH="28PT" ALIGN="CENTER">
<COLSPEC COLNAME="4" COLWIDTH="119PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>Base</PDAT></PTEXT></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Target</PDAT></PTEXT></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Agent</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Relation</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Agent</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Abilities Base believes Target possesses</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="4" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>A1</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>superior</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>B1</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>(:item Item1 :time 4 :cost 5), . . .</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>superior</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>C1</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>(:item Item2 :time 3 :cost 4), . . .</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>peer</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>A2</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>(:item item3 :time 5 :cost 8), . . .</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>B1</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>subordinate</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>A1</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>co-worker</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>C1</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>(:item Item2 :time 5 :cost 3), . . .</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>C1</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>subordinate</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>A1</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>co-worker</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>B1</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>(:item Item1 :time 4 :cost 5), . . .</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="4" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<CWU>
<TABLE-US ID="TABLE-US-00006">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="CENTER">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ROWSEP="1"><PTEXT><PDAT>TABLE</PDAT></PTEXT></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>An instance of the organisational knowledge of Shop 1 agents</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="4">
<COLSPEC COLNAME="1" COLWIDTH="28PT" ALIGN="CENTER">
<COLSPEC COLNAME="2" COLWIDTH="42PT" ALIGN="CENTER">
<COLSPEC COLNAME="3" COLWIDTH="28PT" ALIGN="CENTER">
<COLSPEC COLNAME="4" COLWIDTH="119PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>Base</PDAT></PTEXT></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Target</PDAT></PTEXT></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Agent</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Relation</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Agent</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Abilities Base believes Target possesses</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="4" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>A1</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>superior</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>B1</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>(:item Item1 :time 4 :cost 5), . . .</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>superior</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>C1</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>(:item Item2 :time 3 :cost 4), . . .</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>peer</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>A2</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>(:item item3 :time 5 :cost 8), . . .</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>B1</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>subordinate</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>A1</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>co-worker</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>C1</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>(:item Item2 :time 5 :cost 3), . . .</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>C1</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>subordinate</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>A1</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>co-worker</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>B1</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>(:item Item1 :time 4 :cost 5), . . .</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="4" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00203" LVL="0"><PTEXT><PDAT>The Shop </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> Table introduces the four organisational relationships used in the current implementation of the CABS system. The superior and subordinate relationships maintain their natural interpretation as vertical structural relationships with authority undertones. Peer and co-worker are horizontal structural relationships; in CABS, a co-worker is another agent in the same static agency who is neither a superior nor a subordinate. Peer relationships are the default, and refer to any agent known by the base agent who is neither a superior, subordinate nor co-worker.</PDAT></PTEXT></PARA>
<PARA ID="P-00204" LVL="0"><PTEXT><PDAT>Some of the implications of the different organisational relationships on negotiation and coordination strategies are discussed below, under the heading</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>&ldquo;4.4 Step </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>: Agent Coordination Strategy Specification </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT>&rdquo;</PDAT></STEXT></H>
<PARA ID="P-00205" LVL="0"><PTEXT><PDAT>Note that organisational relationships are not by default bi-directional. That is, although an agent X might believe Y to be her subordinate, it does not necessarily imply that Y believes X to be her superior. It can also be noted that the Shop </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> Table shows no peer relationship for the A</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> agent. This reflects the fact that the A</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> agent has no knowledge of the manager of Shop </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the A</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> agent.</PDAT></PTEXT></PARA>
<PARA ID="P-00206" LVL="0"><PTEXT><PDAT>Note also that one agent&apos;s beliefs about a second need not be consistent with a third agent&apos;s beliefs (data) about the second. For example, in the Shop </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> Table, A</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> believes C</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> can produce Item</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> at a cost of </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> units and using 3 time units. However, B</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> believes differently that C</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> produces Item</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> at cost 3 units and using 5 time units. This may in practice arise if agents have different service level agreements, for instance.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>2.5 Planner &amp; Scheduler </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL></STEXT></H>
<PARA ID="P-00207" LVL="0"><PTEXT><PDAT>The role of the planner/scheduler is to plan and schedule the tasks to be performed by the agent. Conventional planning (e.g. means-end analysis as in the SIPE or O-PLAN planners&mdash;see papers in IEEE Expert: &ldquo;Intelligent systems ano their applications&rdquo;, Vol 11, No. 6, December 1996), and scheduling (e.g. job-shop scheduling) techniques can be used. However, the planner and scheduler </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> of the CABS agent has additional, innovative aspects. For instance it can offer an overbooking facility to ensure maximised use of resource.</PDAT></PTEXT></PARA>
<PARA ID="P-00208" LVL="0"><PTEXT><PDAT>The implementation of a CABS agent&apos;s planner/scheduler </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> is a means-end partial and hierarchical planner. Referring also to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT>, it maintains a commitment table (or database) </PDAT><HIL><BOLD><PDAT>245</PDAT></BOLD></HIL><PDAT> which is a two-dimensional array with rows </PDAT><HIL><BOLD><PDAT>900</PDAT></BOLD></HIL><PDAT> denoting available processors and columns </PDAT><HIL><BOLD><PDAT>905</PDAT></BOLD></HIL><PDAT> denoting time points (using an integer representation of time). The base time (&ldquo;0&rdquo;) of the table is the current time, while the maximum time is the current time plus the maximum plan-ahead period of the agent.</PDAT></PTEXT></PARA>
<PARA ID="P-00209" LVL="0"><PTEXT><PDAT>Inputs to the planner/scheduler </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> are goals of the form: Produce resource R, by time e, at maximum cost c. Note, the goal specification may include other parameters such as quality. This will depend on the planner being used. Its outputs are:</PDAT></PTEXT></PARA>
<PARA ID="P-00210" LVL="2"><PTEXT><PDAT>(a) output-tasks&mdash;a set of tasks it will need to perform to achieve the goal; and</PDAT></PTEXT></PARA>
<PARA ID="P-00211" LVL="2"><PTEXT><PDAT>(b) output-subgoals&mdash;a set of sub-goals which the agent must contract out to other agents if the top-level goal is to be achieved.</PDAT></PTEXT></PARA>
<PARA ID="P-00212" LVL="0"><PTEXT><PDAT>The behaviour of the planner is as follows:</PDAT></PTEXT></PARA>
<PARA ID="P-00213" LVL="2"><PTEXT><PDAT>if (e&lt;current-time or e&gt;current-time&plus;plan-ahead) return fail.</PDAT></PTEXT></PARA>
<PARA ID="P-00214" LVL="7"><PTEXT><PDAT>/* Check to ensure we are within the time-range covered by the agents planner */</PDAT></PTEXT></PARA>
<PARA ID="P-00215" LVL="2"><PTEXT><PDAT>Let applicable-tasks&equals;the set of tasks in the agent&apos;s task database which have the desired resource R as one of their effects (produced items).</PDAT></PTEXT></PARA>
<PARA ID="P-00216" LVL="7"><PTEXT><PDAT>/* Note depending on the planner the applicable-tasks can be ordered by cost, quality, time, etc. That is, the cost of performing the task, the quality of resources the task produces, or the time it takes to perform the task.* /</PDAT></PTEXT></PARA>
<PARA ID="P-00217" LVL="0"><PTEXT><PDAT>For each task in the set of applicable-tasks do</PDAT></PTEXT></PARA>
<PARA ID="P-00218" LVL="2"><PTEXT><PDAT>Attempt to place the task in the commitment table in a continuous block of free spaces, between the desired end-time e of the task and the current-time.</PDAT></PTEXT></PARA>
<PARA ID="P-00219" LVL="2"><PTEXT><PDAT>If not enough free spaces are available for the task, go on to the next task in the set of applicable-tasks.</PDAT></PTEXT></PARA>
<PARA ID="P-00220" LVL="2"><PTEXT><PDAT>If task has been successfully placed on the table:</PDAT></PTEXT></PARA>
<PARA ID="P-00221" LVL="3"><PTEXT><PDAT>Add task to the set output-tasks the start-time s of the task is given by its start position on the table</PDAT></PTEXT></PARA>
<PARA ID="P-00222" LVL="3"><PTEXT><PDAT>Let consumed-resources&equals;the set of resources required to perform the task.</PDAT></PTEXT></PARA>
<PARA ID="P-00223" LVL="3"><PTEXT><PDAT>For each resource C in consumed-resources:</PDAT></PTEXT></PARA>
<PARA ID="P-00224" LVL="4"><PTEXT><PDAT>Check the resource database for C if the resource database contains C then allocate C to the task; otherwise create a subgoal to achieve resource C by time s, and with other constraints such as quality similar to those imposed on the top-level goal.</PDAT></PTEXT></PARA>
<PARA ID="P-00225" LVL="4"><PTEXT><PDAT>Next, recursively invoke the planner to achieve the new subgoal C, and append the two outputs of the planner respectively to the sets output-tasks and output-subgoals.</PDAT></PTEXT></PARA>
<PARA ID="P-00226" LVL="0"><PTEXT><PDAT>If the no task can be found to achieve the resource R within the time, resource and other constraints, append the goal to achieve R to the set output-subgoals and return.</PDAT></PTEXT></PARA>
<PARA ID="P-00227" LVL="0"><PTEXT><PDAT>The computation of the total cost of achieving a goal is taken as the sum of the cost of performing all the task required to attain the goal.</PDAT></PTEXT></PARA>
<PARA ID="P-00228" LVL="0"><PTEXT><PDAT>Once planning has taken place, the planner tentatively books the planned schedule into the commitment table. On receipt of a confirmation of the booking from the coordination engine, the schedule will be firmly booked and the tasks made ready for execution at their scheduled times. This use of tentative and firm booking gives the coordination engine time to delegate external subgoals required to achieve a goal, and also the ability to cancel commitments.</PDAT></PTEXT></PARA>
<PARA ID="P-00229" LVL="0"><PTEXT><PDAT>The behaviour of the CABS agent planner introduces the following particularly useful concepts:</PDAT></PTEXT></PARA>
<PARA ID="P-00230" LVL="2"><PTEXT><PDAT>the use of tentative and firm bookings gives the planner the ability to double-book already tentatively booked slots (similar in principle to what airline reservation companies do). This idea improves the agent&apos;s chances of operating at full capacity. The mechanism for handling double-booking operates as follows: The planner maintains a second copy of the commitment table which records only the firmly booked slots and double-booked tentatively booked slots. If double-booking is allowed by the agent, the planner uses this table in planning when it cannot find free slots for a task using the normal commitment table. If free slots are found on the second table, then those slots are marked as double-booked. In the current implementation, when two goals are booked on the same slots, the first goal to be confirmed gets allocated the slots and the second goal is rejected. Other selection policies could be implemented, e.g. highest priority goal or highest cost goal, etc. It is also possible to control the degree of double-booking by giving the planner a percentage of its total number of slots that can be double-booked.</PDAT></PTEXT></PARA>
<PARA ID="P-00231" LVL="2"><PTEXT><PDAT>bounding the maximum number of parallel branches on the basis of available processors;</PDAT></PTEXT></PARA>
<PARA ID="P-00232" LVL="2"><PTEXT><PDAT>the preconditions of a task may be ordered, e.g. a task with three preconditions A, B and C might impose the constraint that A must be achieved before B, then C. While this is a feature of some conventional planners, in CABS such goal ordering leads to the interleaving of planning with coordination. In conventional agent-based systems the coordination engine controls the planner but in CABS agents the planner </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> and the coordination engine </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> share control when handling goal ordering. For example, in the A, B, C case above, A might be planned for by the agent and B sub-contracted out. However, the choice of agent to achieve B and the manner in which it will be achieved (variable bindings), and the way in which A will be achieved will all affect C. Thus, the ultimate decision about which agent gets the contract depends on the planner and is not simply based on a single factor such as cheapest cost. Such problems typically occur when sub-goals are not independent; and interleaving planning with coordination provides a flexible mechanism for handling such dependence.</PDAT></PTEXT></PARA>
<PARA ID="P-00233" LVL="0"><PTEXT><PDAT>Reference is made above to &ldquo;variable bindings&rdquo;. These are a known concept for enforcing an equality constraint between a variable and a fact or another variable. A binding is used when a variable is set equal to a fact. For example, if variable &ldquo;v</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&rdquo; equals fact &ldquo;f</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&rdquo;, say, &ldquo;v</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&rdquo; is said to be bound to &ldquo;f</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&rdquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00234" LVL="0"><PTEXT><PDAT>CABS agents can also allow an optimising scheduler to be attached to the commitment table. In a simple implementation, a constraint satisfaction algorithm can be used to reschedule already planned activities such that none of the constraints that were imposed during planning is violated. This is useful in handling exception or in achieving policy goals. Optimisation can be added to the constraint-based rescheduler.</PDAT></PTEXT></PARA>
<PARA ID="P-00235" LVL="0"><PTEXT><PDAT>In the case of exceptions, an exception (unexpected failure condition) might occur when an executing task overruns its scheduled time. If there are free slots in the commitment table, then the planner could possibly reschedule its activities to give the executing task more time. For a simple constraint satisfaction type rescheduling, the planner tries to arrive at a new arrangement such that none of the original constraints imposed by the goals are violated. For an optimising rescheduler, the planner might allow constraint violation so long as an optimal arrangement is found (optimality in this case will be based on criteria decided on by the developer). For example a low cost job to which the planner is already committed may be dropped in favour of extending the processing time of an over-run high cost job.</PDAT></PTEXT></PARA>
<PARA ID="P-00236" LVL="0"><PTEXT><PDAT>A scheduler might also be used to ensure policy objectives. For example, an agent might have a policy objective to ensure that jobs are performed as quickly as possible. In such a case, in the commitment table </PDAT><HIL><BOLD><PDAT>245</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT>, it may shift sub-tasks B and C two and one cell leftwards respectively and begin executing them if the agent has all their required resources&mdash;such rescheduling does not violate any of the constraints imposed by the top-level goal.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>2.6 Resource Database </PDAT><HIL><BOLD><PDAT>225</PDAT></BOLD></HIL></STEXT></H>
<PARA ID="P-00237" LVL="0"><PTEXT><PDAT>The resource database </PDAT><HIL><BOLD><PDAT>225</PDAT></BOLD></HIL><PDAT> stores resource definitions.</PDAT></PTEXT></PARA>
<PARA ID="P-00238" LVL="0"><PTEXT><PDAT>In general, a &ldquo;variable&rdquo; is a logical description of something while a &ldquo;fact&rdquo; is a specific instance of that something, with relevant data added to the logical description. Resources in this context are facts which therefore require the user to provide data in relation to each resource for the purpose of building the commitment table. The FactNariables Editor </PDAT><HIL><BOLD><PDAT>355</PDAT></BOLD></HIL><PDAT> is provided so as to allow the user to load the necessary data using a frame-based object-attribute-value formalism.</PDAT></PTEXT></PARA>
<PARA ID="P-00239" LVL="0"><PTEXT><PDAT>A resource is defined as an object with attached attribute-value pairs. For example, an agent in a communications system may require a resource in order to provide a fibre-optic network connection from London to Ipswich which transmits video data. The resource need of the agent can be expressed as follows:</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>RESOURCE EXAMPLE 1</PDAT></STEXT></H>
<CWU>
<TABLE-US ID="TABLE-US-00007">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="168PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>(:type network-link</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:is-variable false</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:id 11001</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:attributes (:from London</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="77PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="140PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:to lpswich</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:connection-type fibre-optic</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:speed 1000</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:data-type video</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="168PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00240" LVL="0"><PTEXT><PDAT>The particular resources and associated attributes chosen will depend on how the user decides to model the domain.</PDAT></PTEXT></PARA>
<PARA ID="P-00241" LVL="0"><PTEXT><PDAT>If the &ldquo;is-variable&rdquo; flag is false as in the example above, then the resource is indeed a fact. Otherwise it is considered a variable. The &ldquo;id&rdquo; field gives the unique identifier of the resource. The following two examples are of resource variables:</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>RESOURCE EXAMPLE 2</PDAT></STEXT></H>
<CWU>
<TABLE-US ID="TABLE-US-00008">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="168PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>(:type video-data</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:is-variable true</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:id 11002</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:attributes (:data XXX</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="77PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="140PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="168PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>(:type video-data-transmitted</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:is-variable true</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:id 11003</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:attributes (:from &quest;location1</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="77PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="140PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:to &quest;location2</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:data &quest;any-data</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="168PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00242" LVL="0"><PTEXT><PDAT>Note that &ldquo;&quest;anything&rdquo; denotes a local variable.</PDAT></PTEXT></PARA>
<PARA ID="P-00243" LVL="0"><PTEXT><PDAT>The resource database </PDAT><HIL><BOLD><PDAT>225</PDAT></BOLD></HIL><PDAT> also contains the ontology database </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT>. This stores the logical definition of each fact type&mdash;its legal attributes, the range of legal values for each attribute, any constraints between attribute values, and any relationships between the attributes of the fact and other facts. Agents have to use the same ontological information if they are to understand each other.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>2.7 Task Database </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL></STEXT></H>
<PARA ID="P-00244" LVL="0"><PTEXT><PDAT>The task database stores task definitions that will be used for instance by the planner and scheduler </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00245" LVL="0"><PTEXT><PDAT>The task definition provides a skeletal programming framework which comprises:</PDAT></PTEXT></PARA>
<PARA ID="P-00246" LVL="2"><PTEXT><PDAT>a sequence of activities</PDAT></PTEXT></PARA>
<PARA ID="P-00247" LVL="2"><PTEXT><PDAT>selection (if, then . . . )</PDAT></PTEXT></PARA>
<PARA ID="P-00248" LVL="2"><PTEXT><PDAT>iteration (exit condition)</PDAT></PTEXT></PARA>
<PARA ID="P-00249" LVL="0"><PTEXT><PDAT>The CABS task definition (or description) also introduces the idea of &ldquo;mandatory parallel&rdquo; tasks and &ldquo;optional parallel&rdquo; tasks. Where a task description shows mandatory parallel activities, more than one activity has to be carried out simultaneously. This will prevent an agent with only a single resource available from contending for the task.</PDAT></PTEXT></PARA>
<PARA ID="P-00250" LVL="0"><PTEXT><PDAT>A task may be a primitive task, comprising only one activity, or may involve a set of sub-tasks. An example of the latter is where the task is to carry out a simple arithmetic calculation such as &ldquo;ax</PDAT><HIL><SP><PDAT>2</PDAT></SP></HIL><PDAT>&plus;dx&plus;c.&rdquo; If this task is shown with the mandatory parallel indication, then the three values ax</PDAT><HIL><SP><PDAT>2</PDAT></SP></HIL><PDAT>, dx and c will be calculated simultaneously, followed by the sequential step of adding the calculated values together. For a task of this nature, a decomposition </PDAT><HIL><BOLD><PDAT>560</PDAT></BOLD></HIL><PDAT> will be generated by the task definition editor </PDAT><HIL><BOLD><PDAT>335</PDAT></BOLD></HIL><PDAT> (see below under the heading &ldquo;4.5 Step </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>: Tasks Definition&rdquo;) and an important aspect of the task description will be the interfaces between outputs of one task activity to inputs of subsequent task activities.</PDAT></PTEXT></PARA>
<PARA ID="P-00251" LVL="0"><PTEXT><PDAT>A task description further comprises pre-conditions for the task, such as, resources it will require and the effects it will have (inputs/outputs), how long the task will take, logical descriptions for actually performing a task at the external system </PDAT><HIL><BOLD><PDAT>125</PDAT></BOLD></HIL><PDAT> and, in the case of complex tasks, the decomposition </PDAT><HIL><BOLD><PDAT>560</PDAT></BOLD></HIL><PDAT> mentioned above which is a list of sub-tasks within the complex task.</PDAT></PTEXT></PARA>
<PARA ID="P-00252" LVL="0"><PTEXT><PDAT>An output of the task is a callback </PDAT><HIL><BOLD><PDAT>555</PDAT></BOLD></HIL><PDAT>, this being the instruction which is output via the execution monitor </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> to the external system </PDAT><HIL><BOLD><PDAT>125</PDAT></BOLD></HIL><PDAT> to perform a relevant function. An example might be to run a facsimile activity. The logical description comprises a variable </PDAT><HIL><BOLD><PDAT>550</PDAT></BOLD></HIL><PDAT> which describes loading paper and dialling a facsimile network number. A decomposition </PDAT><HIL><BOLD><PDAT>560</PDAT></BOLD></HIL><PDAT> for the task would list sub-tasks such as detecting presence of the master sheet to be sent, or of a block of text data in the correct buffer, detecting ring tone, detecting call pick up and commencing transmission, or detecting busy tone, storing the required number and retrying after a set time interval. (These are clearly sub-tasks which could not be done in parallel or divided amongst facsimile machines.) The callback </PDAT><HIL><BOLD><PDAT>555</PDAT></BOLD></HIL><PDAT> is the instruction to a facsimile machine in the real world to carry out the actual facsimile activity.</PDAT></PTEXT></PARA>
<PARA ID="P-00253" LVL="0"><PTEXT><PDAT>Tasks and task definitions are discussed in more detail below (under the heading &ldquo;4.5 Step </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>: Tasks Definition&rdquo;).</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>2.8 Execution Monitor </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL></STEXT></H>
<PARA ID="P-00254" LVL="0"><PTEXT><PDAT>The execution monitor </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> has interfaces to the external system </PDAT><HIL><BOLD><PDAT>125</PDAT></BOLD></HIL><PDAT>, to the planner and scheduler </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> and to the co-ordination engine and reasoning system </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00255" LVL="0"><PTEXT><PDAT>The execution monitor </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> achieves an agent&apos;s goals by causing tasks to be performed in the external system </PDAT><HIL><BOLD><PDAT>125</PDAT></BOLD></HIL><PDAT>. For every task type in the CABS environment, a user-defined task call-back function is provided. When the execution monitor </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> decides to execute a particular task, it does so by calling the appropriate task call-back functions and outputting them to the external system </PDAT><HIL><BOLD><PDAT>125</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00256" LVL="0"><PTEXT><PDAT>To simplify the construction of CABS, the actual execution in these task call-back functions is simulated. On successful completion of a task, the execution monitor </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> will be signalled. Nonetheless, failure of task execution (e.g. there may have been a hardware problem in robot arms of the external system </PDAT><HIL><BOLD><PDAT>125</PDAT></BOLD></HIL><PDAT>) can also be simulated. In these circumstances, the execution monitor </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> will be alerted of the failure and hence appropriate corrective actions can be designed. For instance, the agent designer may design the agent, upon failure, to re-schedule the goals to be achieved by running alternate task call-back functions or by delegating them to other agents through the coordination engine </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00257" LVL="0"><PTEXT><PDAT>Furthermore, the execution monitor </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> can decide that the time required to execute a task has exceeded its expected duration, the execution monitor </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> not having received an appropriate input signal. By the same token, the agent designer can determine what appropriate actions should be carried out in such a case.</PDAT></PTEXT></PARA>
<PARA ID="P-00258" LVL="0"><PTEXT><PDAT>The execution monitor </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> has the following functions for proposals labelled by PID and Seq:</PDAT></PTEXT></PARA>
<PARA ID="P-00259" LVL="7"><PTEXT><PDAT>Book (reserves resources)</PDAT></PTEXT></PARA>
<PARA ID="P-00260" LVL="7"><PTEXT><PDAT>Book &lsqb;PID, Level, Seq, AID&rsqb;</PDAT></PTEXT></PARA>
<PARA ID="P-00261" LVL="7"><PTEXT><PDAT>where</PDAT></PTEXT></PARA>
<PARA ID="P-00262" LVL="2"><PTEXT><PDAT>PID, Proposal-ID, labels a particular proposal;</PDAT></PTEXT></PARA>
<PARA ID="P-00263" LVL="2"><PTEXT><PDAT>Level, Seq &egr; Z is the level number and sequence number of proposal.</PDAT></PTEXT></PARA>
<PARA ID="P-00264" LVL="2"><PTEXT><PDAT>AID specifies the ID of the action returned by the function.</PDAT></PTEXT></PARA>
<PARA ID="P-00265" LVL="7"><PTEXT><PDAT>UnBook (cancels the reservation of resources)</PDAT></PTEXT></PARA>
<PARA ID="P-00266" LVL="7"><PTEXT><PDAT>UnBook &lsqb;PID, Level, Seq, AID&rsqb;</PDAT></PTEXT></PARA>
<PARA ID="P-00267" LVL="7"><PTEXT><PDAT>where</PDAT></PTEXT></PARA>
<PARA ID="P-00268" LVL="2"><PTEXT><PDAT>PID, Proposal-ID, labels a particular proposal;</PDAT></PTEXT></PARA>
<PARA ID="P-00269" LVL="2"><PTEXT><PDAT>Level, Seq&egr;Z is the level number and sequence number of proposal.</PDAT></PTEXT></PARA>
<PARA ID="P-00270" LVL="2"><PTEXT><PDAT>AID specifies the ID of the action returned by the function.</PDAT></PTEXT></PARA>
<PARA ID="P-00271" LVL="7"><PTEXT><PDAT>Commit (allocates resources)</PDAT></PTEXT></PARA>
<PARA ID="P-00272" LVL="7"><PTEXT><PDAT>Commit &lsqb;PID, Level, Seq, AID&rsqb;</PDAT></PTEXT></PARA>
<PARA ID="P-00273" LVL="7"><PTEXT><PDAT>where</PDAT></PTEXT></PARA>
<PARA ID="P-00274" LVL="2"><PTEXT><PDAT>PID, Proposal-ID, labels a particular proposal;</PDAT></PTEXT></PARA>
<PARA ID="P-00275" LVL="2"><PTEXT><PDAT>Level, Seq&egr;Z is the level number and sequence number of proposal.</PDAT></PTEXT></PARA>
<PARA ID="P-00276" LVL="2"><PTEXT><PDAT>AID specifies the ID of the action returned by the function.</PDAT></PTEXT></PARA>
<PARA ID="P-00277" LVL="7"><PTEXT><PDAT>Uncommit (cancels the allocation of resources)</PDAT></PTEXT></PARA>
<PARA ID="P-00278" LVL="7"><PTEXT><PDAT>Free &lsqb;PID, Level, Seq, AID&rsqb;</PDAT></PTEXT></PARA>
<PARA ID="P-00279" LVL="7"><PTEXT><PDAT>where</PDAT></PTEXT></PARA>
<PARA ID="P-00280" LVL="2"><PTEXT><PDAT>PID, Proposal-ID, labels a particular proposal;</PDAT></PTEXT></PARA>
<PARA ID="P-00281" LVL="2"><PTEXT><PDAT>Level, Seq&egr;Z is the level number and sequence number of proposal.</PDAT></PTEXT></PARA>
<PARA ID="P-00282" LVL="2"><PTEXT><PDAT>AID specifies the ID of the action returned by the function.</PDAT></PTEXT></PARA>
<PARA ID="P-00283" LVL="0"><PTEXT><PDAT>(This function can only be executed only if the execution of the proposal has not yet commenced.)</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>3. OVERVIEW: CABS PLATFORM</PDAT></STEXT></H>
<PARA ID="P-00284" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>, the means for capturing data for loading said architecture , for generating a system comprising one or multiple entities according to said architecture, and for automatically building a software module according to said architecture, is provided by the CABS platform. This provides an agent template </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> which dictates the agent structure shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, a user interface </PDAT><HIL><BOLD><PDAT>305</PDAT></BOLD></HIL><PDAT> which is primarily a set of editors for identifying a set of agents, selecting agent functionality and inputting task and domain-related data, a library of co-ordination strategies </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT> and a set of standard-type, supporting agents </PDAT><HIL><BOLD><PDAT>315</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00285" LVL="0"><PTEXT><PDAT>The agent shell </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> is simply the framework to support an agent structure as shown in FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and described in full herein. The editors are described below. The co-ordination strategies </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT> are described above, under the heading &ldquo;2.3 Co-ordination Engine and Reasoning System </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>&rdquo;. One of the supporting agents </PDAT><HIL><BOLD><PDAT>315</PDAT></BOLD></HIL><PDAT> is particularly important however, and novel. This is described below, under the heading &ldquo;5. DEBUGGING AND VISUALISATION&rdquo;. It could have application in other multi-agent and distributed systems, not just those built using the CABS system.</PDAT></PTEXT></PARA>
<PARA ID="P-00286" LVL="0"><PTEXT><PDAT>The editors of the user interface </PDAT><HIL><BOLD><PDAT>305</PDAT></BOLD></HIL><PDAT> support and record decisions taken by the developer during agent creation and input via a design interface </PDAT><HIL><BOLD><PDAT>350</PDAT></BOLD></HIL><PDAT>. In more detail, they comprise the following:</PDAT></PTEXT></PARA>
<PARA ID="P-00287" LVL="2"><PTEXT><PDAT>an agent definition editor </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT> (referred to below under &ldquo;4.2 Step </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>: Agent Definition </PDAT><HIL><BOLD><PDAT>500</PDAT></BOLD></HIL><PDAT>&rdquo;) for providing a logical description of the agent, its abilities and initial resources etc</PDAT></PTEXT></PARA>
<PARA ID="P-00288" LVL="2"><PTEXT><PDAT>an organisation editor </PDAT><HIL><BOLD><PDAT>325</PDAT></BOLD></HIL><PDAT> (referred to below under &ldquo;4.3 Step </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>: Agent Organisation </PDAT><HIL><BOLD><PDAT>505</PDAT></BOLD></HIL><PDAT>&rdquo;) for describing the relational links between agents in a scenario and also the beliefs that each agent has about other agents in the system</PDAT></PTEXT></PARA>
<PARA ID="P-00289" LVL="2"><PTEXT><PDAT>a co-ordination editor </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT> (referred to below under &ldquo;4.4 Step </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>: Agent Co-ordination Strategy Specification </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT>&rdquo;) for selecting and/or describing co-ordination strategies of the agents</PDAT></PTEXT></PARA>
<PARA ID="P-00290" LVL="2"><PTEXT><PDAT>a task description editor </PDAT><HIL><BOLD><PDAT>335</PDAT></BOLD></HIL><PDAT> (referred to below under &ldquo;4.5 Step </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>: Tasks Definition </PDAT><HIL><BOLD><PDAT>520</PDAT></BOLD></HIL><PDAT>&rdquo;) for describing the tasks that the agents in the domain can perform</PDAT></PTEXT></PARA>
<PARA ID="P-00291" LVL="2"><PTEXT><PDAT>an ontology editor </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT> (referred to below under &ldquo;4.1 Step </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>: Domain Study and Agent Identification </PDAT><HIL><BOLD><PDAT>515</PDAT></BOLD></HIL><PDAT>&rdquo;) for describing a suitable ontology for the domain</PDAT></PTEXT></PARA>
<PARA ID="P-00292" LVL="2"><PTEXT><PDAT>a fact/variable editor </PDAT><HIL><BOLD><PDAT>355</PDAT></BOLD></HIL><PDAT> (referred to below under &ldquo;4.2 Step </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>: Agent Definition </PDAT><HIL><BOLD><PDAT>500</PDAT></BOLD></HIL><PDAT>&rdquo; and under &ldquo;4.5 Step </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>: Tasks Definition </PDAT><HIL><BOLD><PDAT>520</PDAT></BOLD></HIL><PDAT>&rdquo;) for describing specific instances of facts and variables, using the templates provided by the ontology editor </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL></PTEXT></PARA>
<PARA ID="P-00293" LVL="2"><PTEXT><PDAT>a code generation editor </PDAT><HIL><BOLD><PDAT>360</PDAT></BOLD></HIL><PDAT> (referred to below under &ldquo;4.6 Step </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>: Domain-specific Problem Solving Code Production </PDAT><HIL><BOLD><PDAT>525</PDAT></BOLD></HIL><PDAT>&rdquo;) for generating code according to the definitions provided for each agent</PDAT></PTEXT></PARA>
<PARA ID="P-00294" LVL="2"><PTEXT><PDAT>a summary task editor </PDAT><HIL><BOLD><PDAT>365</PDAT></BOLD></HIL><PDAT> (referred to below under &ldquo;4.5 Step </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>: Tasks Definition </PDAT><HIL><BOLD><PDAT>520</PDAT></BOLD></HIL><PDAT>&rdquo;) for describing summary tasks which are tasks composed of one or more sub-tasks which have to be performed in some order</PDAT></PTEXT></PARA>
<PARA ID="P-00295" LVL="2"><PTEXT><PDAT>a constraints editor </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> (referred to below under &ldquo;4.5 Step </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>: Tasks Definition </PDAT><HIL><BOLD><PDAT>520</PDAT></BOLD></HIL><PDAT>&rdquo;) for describing the constraints between (i) the preconditions and effects of a task, (ii) one or more preconditions of a task, and (iii) the effects of a preceding task and the preconditions of a succeeding task in a summary task description.</PDAT></PTEXT></PARA>
<PARA ID="P-00296" LVL="0"><PTEXT><PDAT>The output </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> of the CABS platform is then a logical description of a set of agents and a set of tasks to be carried out in a domain, together with executable code for each agent and stubs for executable code for each task.</PDAT></PTEXT></PARA>
<PARA ID="P-00297" LVL="0"><PTEXT><PDAT>CABS embodies a system of methods plus environment to provide a multi-agent systems developer with the means to:</PDAT></PTEXT></PARA>
<PARA ID="P-00298" LVL="2"><PTEXT><PDAT>configure a number of different agents of varying functionality and behaviour,</PDAT></PTEXT></PARA>
<PARA ID="P-00299" LVL="2"><PTEXT><PDAT>organise them in whatever manner she chooses,</PDAT></PTEXT></PARA>
<PARA ID="P-00300" LVL="2"><PTEXT><PDAT>imbue each agent with communicative and co-ordination abilities selected from a CABS-supplied list,</PDAT></PTEXT></PARA>
<PARA ID="P-00301" LVL="2"><PTEXT><PDAT>supply each agent with the necessary domain-specific problem-solving code, and</PDAT></PTEXT></PARA>
<PARA ID="P-00302" LVL="2"><PTEXT><PDAT>automatically generate the required executables for the agents.</PDAT></PTEXT></PARA>
<PARA ID="P-00303" LVL="0"><PTEXT><PDAT>In addition, the CABS platform can provide the developer with a suite of support agents </PDAT><HIL><BOLD><PDAT>315</PDAT></BOLD></HIL><PDAT> of known general type such as name-servers, facilitators (classified directories), and visualisers. Overall, CABS allows the system developer to concentrate on domain-specific analysis without having to expend effort on agent-related issues.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>4. USING CABS PLATFORM TO DESIGN AN AGENT SYSTEM</PDAT></STEXT></H>
<PARA ID="P-00304" LVL="0"><PTEXT><PDAT>The CABS platform is based on a methodology for designing collaborative software agents which views the agents as having five primary sets of characteristics, or &ldquo;layers&rdquo;. Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 4 and 5</PDAT></FGREF><PDAT>, this methodology requires developers to provide inputs in respect of three of these, a definition layer </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>, an organisation layer </PDAT><HIL><BOLD><PDAT>405</PDAT></BOLD></HIL><PDAT> and a coordination layer </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT>, as follows.</PDAT></PTEXT></PARA>
<PARA ID="P-00305" LVL="0"><PTEXT><PDAT>In an &ldquo;agent definition&rdquo; step </PDAT><HIL><BOLD><PDAT>500</PDAT></BOLD></HIL><PDAT>, relevant to the definition layer </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>, user inputs determine the agent in terms of its reasoning (and learning) abilities, goals, resources etc.</PDAT></PTEXT></PARA>
<PARA ID="P-00306" LVL="0"><PTEXT><PDAT>In an &ldquo;agent organisation&rdquo; step </PDAT><HIL><BOLD><PDAT>505</PDAT></BOLD></HIL><PDAT>, relevant to the organisation layer </PDAT><HIL><BOLD><PDAT>405</PDAT></BOLD></HIL><PDAT>, user inputs determine the agent in terms of its relationships with other agents, e.g. what agencies it belongs to, what roles it plays in these agencies, what other agents it is aware of, what abilities it knows those other agents possess, etc. (An agency is a group of agents which share a common attribute such as belonging to the same company. Agencies may be virtual or real. A, virtual agency is a group of agents which share some sort of co-operation agreement.)</PDAT></PTEXT></PARA>
<PARA ID="P-00307" LVL="0"><PTEXT><PDAT>In an &ldquo;agent co-ordination&rdquo; step </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT>, relevant to the coordination layer </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT>, user inputs determine the coordination and negotiation techniques for the agent.</PDAT></PTEXT></PARA>
<PARA ID="P-00308" LVL="0"><PTEXT><PDAT>The two other &ldquo;layers&rdquo; which will be present in each agent are shown in FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>. They are a communication layer </PDAT><HIL><BOLD><PDAT>415</PDAT></BOLD></HIL><PDAT>, which handles technical aspects of inter-agent communication, and an application programming interface (API) layer </PDAT><HIL><BOLD><PDAT>420</PDAT></BOLD></HIL><PDAT> which provides an interface for external systems to add, modify or delete resources available to the agent. In the structure shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, the communication layer </PDAT><HIL><BOLD><PDAT>415</PDAT></BOLD></HIL><PDAT> will be provided by the mailbox </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> and the message handler </PDAT><HIL><BOLD><PDAT>205</PDAT></BOLD></HIL><PDAT>. The API layer </PDAT><HIL><BOLD><PDAT>420</PDAT></BOLD></HIL><PDAT> will be provided by the interfaces between external systems </PDAT><HIL><BOLD><PDAT>240</PDAT></BOLD></HIL><PDAT> and the resource database </PDAT><HIL><BOLD><PDAT>225</PDAT></BOLD></HIL><PDAT> and the execution monitor </PDAT><HIL><BOLD><PDAT>235</PDAT></BOLD></HIL><PDAT>. These are therefore both provided by the agent template </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00309" LVL="0"><PTEXT><PDAT>The user inputs required by the CABS methodology to the definition layer </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>, the organisation layer </PDAT><HIL><BOLD><PDAT>405</PDAT></BOLD></HIL><PDAT> and the coordination layer </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> are structured according to the following six steps:</PDAT></PTEXT></PARA>
<PARA ID="P-00310" LVL="2"><PTEXT><PDAT>1. Domain study and agent identification </PDAT><HIL><BOLD><PDAT>515</PDAT></BOLD></HIL><PDAT>,</PDAT></PTEXT></PARA>
<PARA ID="P-00311" LVL="2"><PTEXT><PDAT>2. Agent definition </PDAT><HIL><BOLD><PDAT>500</PDAT></BOLD></HIL><PDAT>,</PDAT></PTEXT></PARA>
<PARA ID="P-00312" LVL="2"><PTEXT><PDAT>3. Agent(s) organisation </PDAT><HIL><BOLD><PDAT>505</PDAT></BOLD></HIL><PDAT>,</PDAT></PTEXT></PARA>
<PARA ID="P-00313" LVL="2"><PTEXT><PDAT>4. Agent coordination strategy specification </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT>,</PDAT></PTEXT></PARA>
<PARA ID="P-00314" LVL="2"><PTEXT><PDAT>5. Tasks definition </PDAT><HIL><BOLD><PDAT>520</PDAT></BOLD></HIL><PDAT>, and</PDAT></PTEXT></PARA>
<PARA ID="P-00315" LVL="2"><PTEXT><PDAT>6. Domain-specific problem solving code production </PDAT><HIL><BOLD><PDAT>525</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00316" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3 and 5</PDAT></FGREF><PDAT>, the CABS platform provides visual programming editors via the user interface </PDAT><HIL><BOLD><PDAT>305</PDAT></BOLD></HIL><PDAT> to support and automate Steps </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>. These steps should be performed iteratively until the developer is satisfied that the final suite of agents accurately depict the problem being modelled.</PDAT></PTEXT></PARA>
<PARA ID="P-00317" LVL="0"><PTEXT><PDAT>Use of the CABS platform to carry out Steps </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> is now described in more detail.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>4.1 Step </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>: Domain Study and Agent Identification </PDAT><HIL><BOLD><PDAT>515</PDAT></BOLD></HIL></STEXT></H>
<PARA ID="P-00318" LVL="0"><PTEXT><PDAT>The CABS platform is for use by a developer who is the domain expert rather than a software agent expert. This first step will be carried out in a way that the domain expert considers best. It might be that the domain expert for instance bases a decision on where control processes have to be carried out in the domain. However, the preferred approach is to emphasise autonomous decision-making ability as the main criterion for identifying the initial set of candidates for agents in the domain. The level of granularity at which the domain is modelled will be determined by the domain expert and will determine the boundaries of the candidate agents. As a starting point, candidate agents will usually be identified wherever there is a decision-making entity in the domain.</PDAT></PTEXT></PARA>
<PARA ID="P-00319" LVL="0"><PTEXT><PDAT>The user input at this stage will simply be a list of agent identifiers, representing the set of candidate agents selected by the domain expert as likely to provide a reasonable model of, and therefore workable control structure for, the domain. The CABS system will allocate each of the identifiers a copy of the agent shell </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> and the output of Step </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> is this set of agent shells </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00320" LVL="0"><PTEXT><PDAT>If at a later stage it is found that there is conflict, for instance a candidate agent having to be allocated decisions in respect of a process it cannot influence in practice, then the list of agent identifiers can be amended to adjust the set of candidate agents, for instance to introduce a new one, and the design process will be reiterated to reflect the changes.</PDAT></PTEXT></PARA>
<PARA ID="P-00321" LVL="0"><PTEXT><PDAT>No specific editor is necessary for agent identification.</PDAT></PTEXT></PARA>
<PARA ID="P-00322" LVL="0"><PTEXT><PDAT>Another important user input is the vocabulary of the domain. This is input using the ontology editor </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT>. An ontology or data dictionary for a domain describes all the possible concepts or objects that can exist in the domain. In CABS, an object-attribute-value formalism is used for describing domain objects and concepts. The ontology editor </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT> simply provides templates for describing these objects, that is (i) the different object types, (ii) the list of attributes of each of these object types, (iii) the type of values of that each attribute takes, and (iv) the default values (if any) for each attribute. This editor provides a template or form so that you can describe the vocabulary of the domain which the agents will be controlling.</PDAT></PTEXT></PARA>
<PARA ID="P-00323" LVL="0"><PTEXT><PDAT>The ontology editor </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT> allows the user to identify an ENTITY, its ATTRIBUTES, the VALUES the attributes take, and typical DEFAULT values. An example in the communications network field would be as follows:</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00009">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="4">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="70PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="84PT" ALIGN="LEFT">
<COLSPEC COLNAME="3" COLWIDTH="49PT" ALIGN="CENTER">
<THEAD>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="3" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>ENTITY</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Link</PDAT></PTEXT></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>ATTRIBUTES</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>type</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>capacity</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="3" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>VALUE</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>video, satellite, optical, etc</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>10 Mbits/s</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>DEFAULT VALUE</PDAT></PTEXT></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;7 Mbits/s</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="3" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<H LVL="1"><STEXT><PDAT>4.2 Step </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>: Agent Definition </PDAT><HIL><BOLD><PDAT>500</PDAT></BOLD></HIL></STEXT></H>
<PARA ID="P-00324" LVL="0"><PTEXT><PDAT>For each of the agents identified in Step </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the following user inputs have to be made, via the Agent Definition Editor </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT>:</PDAT></PTEXT></PARA>
<PARA ID="P-00325" LVL="2"><PTEXT><PDAT>identities of the tasks the agent can perform;</PDAT></PTEXT></PARA>
<PARA ID="P-00326" LVL="2"><PTEXT><PDAT>the number of tasks the agent can perform concurrently;</PDAT></PTEXT></PARA>
<PARA ID="P-00327" LVL="2"><PTEXT><PDAT>the time period over which the agent will normally allocate its resources (plan its activities); and</PDAT></PTEXT></PARA>
<PARA ID="P-00328" LVL="2"><PTEXT><PDAT>the resources available to the agent.</PDAT></PTEXT></PARA>
<PARA ID="P-00329" LVL="0"><PTEXT><PDAT>This data will be routed to the planner and scheduler </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT>, described above in relation to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, for use in building a commitment table </PDAT><HIL><BOLD><PDAT>245</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00330" LVL="0"><PTEXT><PDAT>Data entry concerning task identifiers, the number of tasks and the planning time frame is a fairly straight forward process, except that where the time frame is concerned, different factors will come into play. For instance, in some scenarios, an agent which can only plan ahead for shorter durations is less able to meet customer requests but may be more reactive to changing economic, circumstances.</PDAT></PTEXT></PARA>
<PARA ID="P-00331" LVL="0"><PTEXT><PDAT>The tasks are defined at a later stage, discussed below under the heading &ldquo;4.5 Step </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>: Tasks Definition&rdquo;, and at this stage it is only necessary to input the identifiers. However, the resources available to the agent have to be defined. Since the context in which the agent may be functioning could be any of a large number of very different contexts, it is necessary to give the agent a definition of the resources which is sufficient for it to build a correct logical model of the real physical resources available to the agent such that it could plan its activities properly. CABS provides a Fact/Variables Editor </PDAT><HIL><BOLD><PDAT>355</PDAT></BOLD></HIL><PDAT> which is used for describing the resources available to an agent.</PDAT></PTEXT></PARA>
<PARA ID="P-00332" LVL="0"><PTEXT><PDAT>In general, a &ldquo;variable&rdquo; is a logical description of something while a &ldquo;fact&rdquo; is a specific instance of that something, with relevant data added to the logical description. Resources in this context are facts which therefore require the user to provide data in relation to each resource for the purpose of building the logical model of real physical resources. The Fact/Variables Editor </PDAT><HIL><BOLD><PDAT>355</PDAT></BOLD></HIL><PDAT> is provided so as to allow the user to load the necessary data using a frame-based object-attribute-value formalism.</PDAT></PTEXT></PARA>
<PARA ID="P-00333" LVL="0"><PTEXT><PDAT>A resource (or fact) is defined as an object with attached attribute-value pairs. For example, an agent in a communications system may require a resource in order to provide a fibre-optic network connection from London to Ipswich which transmits video data. The resource need of the agent possibly can be expressed as follows:</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>RESOURCE EXAMPLE 1</PDAT></STEXT></H>
<CWU>
<TABLE-US ID="TABLE-US-00010">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="168PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;:type network-link</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:is-variable false</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:id 11001</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:attributes (:from London</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="77PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="140PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:to lpswich</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:connection-type fibre-optic</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:speed 1000</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:data-type video</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="168PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00334" LVL="0"><PTEXT><PDAT>The particular resources and associated attributes chosen will depend con how the user decides to model the domain.</PDAT></PTEXT></PARA>
<PARA ID="P-00335" LVL="0"><PTEXT><PDAT>If the &ldquo;is-variable&rdquo; flag is false as in the example above, then the resource is indeed a fact. Otherwise it is considered a variable. The &ldquo;id&rdquo; field gives the unique identifier of the resource. The following two examples are of resource variables:</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>RESOURCE EXAMPLE 2</PDAT></STEXT></H>
<CWU>
<TABLE-US ID="TABLE-US-00011">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="168PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;:type video-data</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:is-variable true</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:id 11002</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:attributes (:data XXX</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="77PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="140PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="168PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>(:type video-data-transmitted</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:is-variable true</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:id 11003</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:attributes (:from &quest;location1</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="77PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="140PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:to &quest;location2</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:data &quest;any-data</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="168PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00336" LVL="0"><PTEXT><PDAT>Note that &ldquo;&quest;anything&rdquo; denotes a local variable.</PDAT></PTEXT></PARA>
<PARA ID="P-00337" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, the Fact/Variables Editor </PDAT><HIL><BOLD><PDAT>355</PDAT></BOLD></HIL><PDAT> loads the resource data to the resource database </PDAT><HIL><BOLD><PDAT>225</PDAT></BOLD></HIL><PDAT> of the agent, to which the planner and scheduler </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> has access for the purpose of building and running a commitment table.</PDAT></PTEXT></PARA>
<PARA ID="P-00338" LVL="0"><PTEXT><PDAT>The output of Step </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> is therefore a set of facts </PDAT><HIL><BOLD><PDAT>530</PDAT></BOLD></HIL><PDAT> (resources) and a list of task identifiers </PDAT><HIL><BOLD><PDAT>535</PDAT></BOLD></HIL><PDAT> for which definitions must be provided at Step </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, described below.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>4.3 Step </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>: Agent Organisation </PDAT><HIL><BOLD><PDAT>505</PDAT></BOLD></HIL></STEXT></H>
<PARA ID="P-00339" LVL="0"><PTEXT><PDAT>For each of the agents identified in Step </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the following user inputs have to be made, via the Organisation Editor </PDAT><HIL><BOLD><PDAT>325</PDAT></BOLD></HIL><PDAT>:</PDAT></PTEXT></PARA>
<PARA ID="P-00340" LVL="2"><PTEXT><PDAT>identify the other agents in the community that it knows;</PDAT></PTEXT></PARA>
<PARA ID="P-00341" LVL="2"><PTEXT><PDAT>determine the primary structural relationship it has with each of the identified agents;</PDAT></PTEXT></PARA>
<PARA ID="P-00342" LVL="2"><PTEXT><PDAT>identify the task outputs (if any) that each of the identified agents can produce;</PDAT></PTEXT></PARA>
<PARA ID="P-00343" LVL="2"><PTEXT><PDAT>specify average cost and time (if known) for each of the identified task outputs.</PDAT></PTEXT></PARA>
<PARA ID="P-00344" LVL="0"><PTEXT><PDAT>The data inputs concerning task outputs again need only comprise identifiers for task outputs which can be understood by the agent from the tasks definition, Step </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, described below.</PDAT></PTEXT></PARA>
<PARA ID="P-00345" LVL="0"><PTEXT><PDAT>The Organisation Editor </PDAT><HIL><BOLD><PDAT>325</PDAT></BOLD></HIL><PDAT> uses the data input in this step (Step </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>) to create a relationship table which is then stored in the Acquaintance Model </PDAT><HIL><BOLD><PDAT>215</PDAT></BOLD></HIL><PDAT> of the agent. (The relationship table is described above under the heading &ldquo;2.4 Acquaintance Database </PDAT><HIL><BOLD><PDAT>215</PDAT></BOLD></HIL><PDAT>&rdquo;.)</PDAT></PTEXT></PARA>
<PARA ID="P-00346" LVL="0"><PTEXT><PDAT>The outputs of Step </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> are therefore a set of agent relationships </PDAT><HIL><BOLD><PDAT>545</PDAT></BOLD></HIL><PDAT> which the CABS system stores in the acquaintance model </PDAT><HIL><BOLD><PDAT>215</PDAT></BOLD></HIL><PDAT> of the agent, and a set of variables </PDAT><HIL><BOLD><PDAT>540</PDAT></BOLD></HIL><PDAT> describing the resources (products) that the base agent believes the target agent can produce.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>4.4 Step </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>: Agent Coordination Strategy Specification </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL></STEXT></H>
<PARA ID="P-00347" LVL="0"><PTEXT><PDAT>For each of the agents identified in Step </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> above, the identities of the UCP-compliant coordination graphs which the agent can execute to realise its different coordination strategies have to be input, via the Co-ordination Editor </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT>. CABS currently provides the following coordination graphs in its coordination graph database </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT> which user can select and assign to agents by loading the agent&apos;s coordination graph database </PDAT><HIL><BOLD><PDAT>255</PDAT></BOLD></HIL><PDAT>:</PDAT></PTEXT></PARA>
<PARA ID="P-00348" LVL="2"><PTEXT><PDAT>1. Master-slave (hierarchical task distribution)</PDAT></PTEXT></PARA>
<PARA ID="P-00349" LVL="2"><PTEXT><PDAT>2. Contract net (Limited contract net)</PDAT></PTEXT></PARA>
<PARA ID="P-00350" LVL="2"><PTEXT><PDAT>3. Multiple Round First Price Sealed Bid</PDAT></PTEXT></PARA>
<PARA ID="P-00351" LVL="2"><PTEXT><PDAT>4. Multiple Round First Price Open Bid (similar to English Auction)</PDAT></PTEXT></PARA>
<PARA ID="P-00352" LVL="2"><PTEXT><PDAT>5. Multiple Round Second Price Sealed Bid</PDAT></PTEXT></PARA>
<PARA ID="P-00353" LVL="2"><PTEXT><PDAT>6. Multiple Round Second Price Open Bid (similar to Vickery Auction)</PDAT></PTEXT></PARA>
<PARA ID="P-00354" LVL="2"><PTEXT><PDAT>7. Multiple Round Reverse Price Open Bid (similar to Dutch Auction)</PDAT></PTEXT></PARA>
<PARA ID="P-00355" LVL="2"><PTEXT><PDAT>8. Single Round Derivatives of the last five strategies</PDAT></PTEXT></PARA>
<PARA ID="P-00356" LVL="0"><PTEXT><PDAT>Client-server or master-slave coordination occurs when a master assigns a slave a job to perform. This strategy necessarily requires a superior relationship between the slave and master. The contract-net strategy is when an agent announces a task, requesting bids to perform the task from other agents. It then evaluates the bids and awards the contract to the winning agent(s). This strategy does not rely on any organisational relationship between the participating agents. Limited contract-net is similar to the contract-net strategy except that the announcer selects/restricts the agents to whom bids are broadcast.</PDAT></PTEXT></PARA>
<PARA ID="P-00357" LVL="0"><PTEXT><PDAT>The coordination protocols listed above can be single round or multiple round. A single round behaviour between two agents involves some agent receiving some proposal (for example) and accepting it immediately. Alternatively, the agent may initiate another round of the cycle in which case a multiple round behaviour emerges. The key point here is that the terminating condition on the agent that initiates the interaction must be met before the interaction terminates.</PDAT></PTEXT></PARA>
<PARA ID="P-00358" LVL="0"><PTEXT><PDAT>Typically, most other agent applications have agents with one or at most two fixed strategies. CABS agents can have many more as illustrated by the list above. Hence for example, an agent may use a first coordination protocol (say the English Auction) to sell some antique while simultaneously using a second protocol (e.g. Dutch Auction) for selling flowers, whilst at the same time using a third protocol (the contract net) for some other tasks distribution.</PDAT></PTEXT></PARA>
<PARA ID="P-00359" LVL="0"><PTEXT><PDAT>If a user requires a coordination strategy which is not provided by the CABS system, the Coordination Editor </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT> can be used to define a new coordination graph to add to the agent coordination graph database </PDAT><HIL><BOLD><PDAT>255</PDAT></BOLD></HIL><PDAT>. Using the UCP as starting point, new co-ordination graphs can be created for instance by adding a new sub-graph which introduces new nodes between some of the existing nodes in one of the predefined graphs, and/or by modifying one or more of the arcs in a predefined graph. Alternatively, a completely new graph can be created by following the process described earlier under &ldquo;2.4.1 Coordination Software Module: Defining new coordination graphs&rdquo;. The key advantage of this novel approach is that it maintains a simple core (the UCP) while facilitating considerably more complex coordination techniques to be developed and installed. New coordination graphs can be assembled from primitives provided, based on the UCP and within constraints provided by the co-ordination editor </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT>. The editor </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT> ensures that the designer of a new protocol does the following:</PDAT></PTEXT></PARA>
<PARA ID="P-00360" LVL="2"><PTEXT><PDAT>1. starts with the UCP;</PDAT></PTEXT></PARA>
<PARA ID="P-00361" LVL="2"><PTEXT><PDAT>2. identifies the parts of the UCP where it is necessary to add the extra complexity to realise the new protocol; and</PDAT></PTEXT></PARA>
<PARA ID="P-00362" LVL="2"><PTEXT><PDAT>3. defines and implements the new graph either by adding a sub-graph or by refinement of existing arcs or nodes of a predefined graph.</PDAT></PTEXT></PARA>
<PARA ID="P-00363" LVL="2"><PTEXT><PDAT>4. if any new nodes or arcs need to be defined the editor </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT> provides the user templates for these.</PDAT></PTEXT></PARA>
<PARA ID="P-00364" LVL="0"><PTEXT><PDAT>Thus, for each of the agents identified in Step </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the user selects and/or develops zero or more negotiation/co-ordination strategies which the agent can invoke, via the Co-ordination Editor </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>4.5 Step </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>: Tasks Definition </PDAT><HIL><BOLD><PDAT>520</PDAT></BOLD></HIL></STEXT></H>
<PARA ID="P-00365" LVL="0"><PTEXT><PDAT>For each of the tasks identified in Step </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, the following user inputs have to be made for each agent, via the task description editor </PDAT><HIL><BOLD><PDAT>335</PDAT></BOLD></HIL><PDAT>:</PDAT></PTEXT></PARA>
<PARA ID="P-00366" LVL="2"><PTEXT><PDAT>1. Determine the average cost and duration of performing the task.</PDAT></PTEXT></PARA>
<PARA ID="P-00367" LVL="2"><PTEXT><PDAT>2. Exhaustively list as variables </PDAT><HIL><BOLD><PDAT>550</PDAT></BOLD></HIL><PDAT> all the items (resources) that are required before the task can be performed.</PDAT></PTEXT></PARA>
<PARA ID="P-00368" LVL="2"><PTEXT><PDAT>3. Exhaustively list as variables </PDAT><HIL><BOLD><PDAT>550</PDAT></BOLD></HIL><PDAT> all the items (products) produced once the task is performed.</PDAT></PTEXT></PARA>
<PARA ID="P-00369" LVL="2"><PTEXT><PDAT>4. Determine and note all the constraints between the consumed items (No. 2 above) and the produced items (No. 3 above), and within each group.</PDAT></PTEXT></PARA>
<PARA ID="P-00370" LVL="2"><PTEXT><PDAT>5. Determine if the task can be performed by directly executing a domain function primitive tasks) or whether it is in fact an abstract specification of a network of other tasks (i.e. it is a summary task).</PDAT></PTEXT></PARA>
<PARA ID="P-00371" LVL="2"><PTEXT><PDAT>6. if the task is primitive then provide the following two functions (a) one to execute to perform the task (a callback </PDAT><HIL><BOLD><PDAT>555</PDAT></BOLD></HIL><PDAT>) and (b) one to compute the actual cost of the task once it has been performed. For summary tasks provide a description of the summary tasks in terms of its component tasks.</PDAT></PTEXT></PARA>
<PARA ID="P-00372" LVL="0"><PTEXT><PDAT>Tasks consume certain resources to produce their products, with each executing task lasting for a finite time interval. The CABS platform provides a Variables Editor </PDAT><HIL><BOLD><PDAT>355</PDAT></BOLD></HIL><PDAT> using a frame-based object-attribute-value representation for defining the consumed and produced items.</PDAT></PTEXT></PARA>
<PARA ID="P-00373" LVL="0"><PTEXT><PDAT>The constraints between and within the consumed and produced items serve to delimit each task to specific well-defined cases. For instance, a task may call on a particular resource but there may be a constraint on the resource for that particular task, such as processing capacity or equipment type. A Constraints Editor </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> is also provided to describe constraints between the variables to ensure that tasks use realistic variables and that each task output equals the input to the next stage. This can be extended to setting inequalities, for example saying what an output should not be, for example integer/non-integer.</PDAT></PTEXT></PARA>
<PARA ID="P-00374" LVL="0"><PTEXT><PDAT>In addition, a Summary Task (Plan) Editor </PDAT><HIL><BOLD><PDAT>365</PDAT></BOLD></HIL><PDAT> is provided for listing component tasks of summary tasks. This editor allows summary tasks to comprise (i) simple actions (ii) multiple optionally parallel actions (iii) multiple (mandatory) parallel actions (iv) guarded actions (selections), and (v) iterative actions. Furthermore, these actions can be linked as a network, with a facility to constrain the variables at the endpoints of each link.</PDAT></PTEXT></PARA>
<PARA ID="P-00375" LVL="0"><PTEXT><PDAT>Below is an example of a task description created using the task description editor </PDAT><HIL><BOLD><PDAT>335</PDAT></BOLD></HIL><PDAT>. The task describes the fact that to create a link from A. (&quest;Link-</PDAT><HIL><BOLD><PDAT>141</PDAT></BOLD></HIL><PDAT>.from) to B (&quest;Link-</PDAT><HIL><BOLD><PDAT>141</PDAT></BOLD></HIL><PDAT>.to) a link is needed from A (&quest;Link-</PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT>.from) to some location X (&quest;Link-</PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT>.to) and another link from X (&quest;Link-</PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT>.from) to B (&quest;Link-</PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT>.to).</PDAT></PTEXT></PARA>
<PARA ID="P-00376" LVL="0"><PTEXT><PDAT>The consumed_facts of the task list the resources required in performing the last, i.e. the links from A to X and from X to B. The produced_facts lists the resource which will be produced once the task is performed, i.e. the link from A to B. The constraints specify relationships between the consumed and produced facts. For example, the constraint &ldquo;&quest;Link-</PDAT><HIL><BOLD><PDAT>141</PDAT></BOLD></HIL><PDAT>.from&equals;&quest;Link-</PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT>.from&rdquo; specifies the condition that the source of the produced link should be the same as the source of one of the required links. These and similar constraints will be enforced at runtime by the planner </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> of the agent ensuring that the variable &quest;Link-</PDAT><HIL><BOLD><PDAT>141</PDAT></BOLD></HIL><PDAT>.from is bound to the same token as &quest;Link-</PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT>.from.</PDAT></PTEXT></PARA>
<PARA ID="P-00377" LVL="0"><PTEXT><PDAT>The ordering specifies the order in which the preconditions should be tried. In this case it states the planner should attempt to obtain a resource satisfying the resource description &quest;Link-</PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT> before attempting to obtain a resource satisfying the description &quest;Link-</PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00378" LVL="0"><PTEXT><PDAT>A consumed_fact resource description with the scope field set to local is a flag to the planner </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> that it should only try to obtain the required resource locally, i.e. not subcontract-out the resource to another agent. Consumed facts with global scope fields can be sub-contracted out to other agents for production. For a produced_fact, if its scope field is local, this is signal to the planner not to use this task when trying to achieve that particular. A local scope field indicates the task can be used when trying to produce the resource.</PDAT></PTEXT></PARA>
<PARA ID="P-00379" LVL="0"><PTEXT><PDAT>The following is an example of a task description:</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00012">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>(:name LinkA2B</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&ensp;:time 1</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&ensp;:cost 70</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&ensp;:consumed_facts ((:type Link</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="98PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="119PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:id 136</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:var true</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:scope local</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="91PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="126PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:attributes (:to &quest;var-138</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="119PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="98PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:from &quest;var-139</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:no &quest;var-140</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="91PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="126PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="77PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="140PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;:type Link</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:id 131</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:var true</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;:scope global</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;attributes (:to &quest;var-133</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="119PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="98PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:from &quest;var-134</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:no &quest;var-135</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="77PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="140PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="168PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="175PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&ensp;:produced_facts ((:type Link</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="168PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:id 141</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:var true</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:scope global</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:attributes (:to &quest;var-143</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="91PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="126PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:from &quest;var-144</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>:no &quest;var-145</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="77PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="140PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="168PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="175PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>:constraints ((:lhs &quest;Link-131.from :op &equals; :rhs &quest;Link-141.from)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="63PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="154PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>(:lhs &quest;Link-136.to :op &equals; :rhs &quest;Link-141.to)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>(:lhs &quest;Link-131.to :op &equals; :rhs &quest;Link-136.from)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>(:lhs &quest;Link-131.no :op &equals; :rhs &quest;Link-141.no)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>(:lhs &quest;Link-136.no :op &equals; :rhs &quest;Link-141.no)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>:ordering((:lhs &quest;Link-131 :op &lt; :rhs &quest;Link-136 )</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="175PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00380" LVL="0"><PTEXT><PDAT>An interesting aspect of task definition in this way is that it can enforce optimality. For instance, by including deadline constraints together with resource definitions, inadequate resources become apparent. It may actually be necessary for the system user to extend or add to the resource available.</PDAT></PTEXT></PARA>
<PARA ID="P-00381" LVL="0"><PTEXT><PDAT>For instance, if the agent system is concerned with processing call record data in a telecommunications system, the technical processes involved might be mapped onto tasks as follows:</PDAT></PTEXT></PARA>
<PARA ID="P-00382" LVL="2"><PTEXT><PDAT>i) information received at call record centre;</PDAT></PTEXT></PARA>
<PARA ID="P-00383" LVL="2"><PTEXT><PDAT>ii) information sorted by priority;</PDAT></PTEXT></PARA>
<PARA ID="P-00384" LVL="2"><PTEXT><PDAT>iii) information passed to appropriate resource/people; and</PDAT></PTEXT></PARA>
<PARA ID="P-00385" LVL="2"><PTEXT><PDAT>iv) exception handling e.g. &ldquo;resource not available&rdquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00386" LVL="0"><PTEXT><PDAT>If the exception handling step throws up &ldquo;resource unavailable&rdquo; it may be extremely important that further resource is made available. This might be the case where the call record centre supports fault location. The deadlines for getting network capacity back into service may be unextendible for instance for certain categories of customer. It would therefore be very important to the service provider that the call record centre has the resource to process the call records within the time constraint.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>4.6 Step </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>: Domain-specific Problem Solving Code Production </PDAT><HIL><BOLD><PDAT>525</PDAT></BOLD></HIL></STEXT></H>
<PARA ID="P-00387" LVL="0"><PTEXT><PDAT>In order to output a functional, collaborative agent, the CABS system has to generate actual code. The data which a CABS agent requires is of two types: declarative and procedural. Predefined objects provide the procedural side. The declarative information is all captured via the editors and task descriptions. At compile time for an agent, for aspects which will be common to all agents, such as the Mailbox </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, the code generator can simply take a dump of code associated with the agent shell </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT>. For information such as task and resource information which is agent-specific, this is all dumped as database files and linked at compilation with the mailbox code etc for each agent.</PDAT></PTEXT></PARA>
<PARA ID="P-00388" LVL="0"><PTEXT><PDAT>That is, for all defined agents it is necessary to generate all components of code and databases, dump in directories, together with agent relationships, co-ordination abilities and an optional visualiser, and compile. Effectively, this is making an instance of the objects of each agent, then adding relationship and co-ordination information and standard components.</PDAT></PTEXT></PARA>
<PARA ID="P-00389" LVL="0"><PTEXT><PDAT>It is also necessary however for the user to provide domain specific code to implement task functionality. That is, the user must provide code for all of the functions for computing costs for a primitive task, and for providing callbacks </PDAT><HIL><BOLD><PDAT>555</PDAT></BOLD></HIL><PDAT> to control external systems. This is done using the code generation editor </PDAT><HIL><BOLD><PDAT>360</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00390" LVL="0"><PTEXT><PDAT>This is the only place where the developer needs to define any executable code. CABS can define prototypes for these functions and also provides an API library </PDAT><HIL><BOLD><PDAT>380</PDAT></BOLD></HIL><PDAT> for use by developers in their code production.</PDAT></PTEXT></PARA>
<PARA ID="P-00391" LVL="0"><PTEXT><PDAT>The output of CABS </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, in the form of software agents, is distributed to the user environment via scripts </PDAT><HIL><BOLD><PDAT>390</PDAT></BOLD></HIL><PDAT>. Existing systems can then be linked to the agents using an API of a wrapper class, defined by the system, which wraps code inherited from the component library together with the user-supplied data.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>5. DEBUGGING AND VISUALISATION</PDAT></STEXT></H>
<PARA ID="P-00392" LVL="0"><PTEXT><PDAT>It is difficult to create any single program, even a program which interacts with no other programs, which has no faults or errors in it. It is an order of magnitude more difficult to analyse and debug distributed software which contains multiple agents. The behaviours that emerge from the overall distributed software may not be at all what was expected. Further, the communication is often at such a high level that it is not possible to look directly at data involved. Even an object based system can be designed to allow the programmer to look at the actual data involved in a sequence of events but agents, using message-based communication, may simply not enable the programmer to do so.</PDAT></PTEXT></PARA>
<PARA ID="P-00393" LVL="0"><PTEXT><PDAT>Clearly, it is important to analyse what is going wrong so that it can be corrected. Approaches used in singular &lsquo;agent&rsquo; applications may be used but are frequently inadequate in analysing and debugging distributed software systems.</PDAT></PTEXT></PARA>
<PARA ID="P-00394" LVL="0"><PTEXT><PDAT>For example, fault analysis can be done as a &ldquo;post mortem&rdquo; exercise where the data is stored at the time of failure which later provides a &ldquo;snap shot&rdquo; of the prevailing circumstances, from which an attempt can be made to find out what caused the failure. A known debugger, described in international patent application No: WO93/24882 in the name of the present applicant, shows how such data can be captured in a history file which can later be &lsquo;played&rsquo;, &lsquo;replayed&rsquo;, &lsquo;rewound&rsquo;, &lsquo;fast forwarded&rsquo;, etc.&mdash;video style.</PDAT></PTEXT></PARA>
<PARA ID="P-00395" LVL="0"><PTEXT><PDAT>Such an approach may be helpful in some circumstances with distributed software, but certainly not all. There are many classes of errors which occur in multi-agent systems. There may be structural errors at the level of singular agents within the multi-agent system, such as wrong or missing aquaintance relationships between agents, missing resources, incorrectly specified (typically short) times to run tasks etc. There may be functional errors, ie errors which relate to the logic of the tasks that the agents are performing. These can be compounded by the fact individual agents may be functionally &lsquo;correct&rsquo;, but the emergent behaviour of the overall set up of distributed control agents may not be what was expected. This is typically due to what might be called co-ordination errors. In some cases, such behaviour can lead to incoherent multi-agent systems.</PDAT></PTEXT></PARA>
<PARA ID="P-00396" LVL="0"><PTEXT><PDAT>Some examples of the sort of undesired behaviours which emerge from such systems include the following:</PDAT></PTEXT></PARA>
<PARA ID="P-00397" LVL="2"><PTEXT><PDAT>Deadlock: where agents may be contending for shared resources. An agent may grab a vital shared resource and fail to relinquish it for some reason, perhaps because of some failure for example at the level of the individual agent. But this resource is invaluable to other agents who &lsquo;hang up&rsquo; waiting for this resource to be relinquished. Basically, deadlock refers to a state of affairs in which further action between two or more agents is impossible.</PDAT></PTEXT></PARA>
<PARA ID="P-00398" LVL="2"><PTEXT><PDAT>Livelock: where agents continuously act (e.g. interact or exchange messages), but no progress is made in solving the problem at hand. This is common in cases where the agents co-ordinate their activities via decentralised planning. Here, the agents can indefinitely exchange subplans without necessarily progressing the co-ordination effort, especially where there are no structural checks to detect and prevent indefinite loops in the planning process.</PDAT></PTEXT></PARA>
<PARA ID="P-00399" LVL="2"><PTEXT><PDAT>Chaos: Chaotic behaviour is always potentially possible in a distributed setting.</PDAT></PTEXT></PARA>
<PARA ID="P-00400" LVL="0"><PTEXT><PDAT>Such behaviours, in addition to standard &lsquo;incorrect&rsquo; behaviours or bugs on the part of individual agents, frequently lead to uncoordinated behaviours. Naturally, a distributed control system should normally be coordinated. A correctly coordinated set-up fully exploits the capabilities of individual agents and minimises conflicts, resource contentions and redundancy between them. Clearly then, co-ordination is a desirable property of agent systems.</PDAT></PTEXT></PARA>
<PARA ID="P-00401" LVL="0"><PTEXT><PDAT>As well as debugging, visualisation also allows the user to confirm, understand, control and/or analyse the behaviour of the system.</PDAT></PTEXT></PARA>
<PARA ID="P-00402" LVL="0"><PTEXT><PDAT>Visualisers of the type described below can provide means to analyse and debug such distributed control software so that the behaviours obtained are as intended by the designers. The visualiser provides a generic, customisable and scaleable visualisation system for use with a domain-independent toolkit for constructing multi-agent applications. The visualiser particularly described is generic in the sense that it could be used with any application developed using the toolkit, and customisable in the sense that it provides building blocks, for constructing application specific visualisers. The scaleability requirement implies it should support visualisation of systems comprising any number of agents with limited degradation in performance. The distributed nature of multi-agent applications necessarily required that the visualiser should be able to visualise remote agents across a wide area network. Further, for administrative and debugging purposes, it is important that the visualiser function both online and off-line.</PDAT></PTEXT></PARA>
<PARA ID="P-00403" LVL="0"><PTEXT><PDAT>In embodiments of a visualiser according to the present invention, there is provided an arrangement for analysing and locating unintended behaviours in distributed control systems, which arrangement comprises a suite of tools which all provide different viewpoints to the analysis of the distributed control software system.</PDAT></PTEXT></PARA>
<PARA ID="P-00404" LVL="0"><PTEXT><PDAT>All the different tools store different state data. Although no tool is capable of providing a complete analysis of the distributed system, the combination of one tool with another can. Different tools provide or suggest diagnoses. Where the evidence of one tool corroborates that from another tool, the trustworthiness in that diagnosis is increased. There is therefore a greater likelihood that the diagnosis may lead to a successful debugging of the problem. Where the evidence is conflicting, the combination of one tool with another may eliminate a hypothesis or be suggestive of other possible diagnoses.</PDAT></PTEXT></PARA>
<PARA ID="P-00405" LVL="0"><PTEXT><PDAT>The tools in the current CABS Visualiser/Debugging tools suite include:</PDAT></PTEXT></PARA>
<PARA ID="P-00406" LVL="2"><PTEXT><PDAT>A Society Tool: which shows the interactions (messages passed) between different agents in the whole society. This includes a video type tool which is capable of recording the messages passed between different agents for later &ldquo;post mortem&rdquo; analysis. These messages are stored in a database from which relational queries can be made for more in-depth study of the interactions. This tool can be used to analyse either a single agent or a society of agents.</PDAT></PTEXT></PARA>
<PARA ID="P-00407" LVL="2"><PTEXT><PDAT>A Statistics Tool: which captures various statistics on individual agents (e.g. the types and the numbers of messages being exchanged by agents). For example, it answers questions like &lsquo;How many messages were sent from agent A to agent B during some particular time frame&quest;&rsquo; or &lsquo;Plot me the number of messages that Agent A has been receiving over time&rsquo;, etc. The statistics tool provides pie and bar chart type visualisation of individual agent activities in addition to various graphs. With both the video and the statistics tools, you can select the agents of interest and study their recorded agents&apos; states more closely. This tool can be used to analyse either a single agent or a society of agents.</PDAT></PTEXT></PARA>
<PARA ID="P-00408" LVL="2"><PTEXT><PDAT>A Micro Tool: which shows the internals of an agent to some degree of abstraction. Indeed, frequently just by watching the micro tool, the designer is able to ascertain if the agent is &lsquo;dead&rsquo;, &lsquo;deadlocked&rsquo; or &lsquo;alive&rsquo;; alternatively, he or she may ascertain if parts of the agent&apos;s internals are failing for some reason.</PDAT></PTEXT></PARA>
<PARA ID="P-00409" LVL="2"><PTEXT><PDAT>A Reports Tool: this provides a GANTT chart type presentation of the overall task which an agent for example may be controlling. Typically, an agent enlists the help and services of many other agents, and this tool allows the designer to choose some particular agent and one task (of possible many tasks) that the agent is controlling. This shows up a GANTT chart of how it has decomposed the task (i.e. what sub-tasks there are), which tasks have been allocated to whom, where the execution of the task has reached, and what the statuses of the different sub-tasks are (e.g. running, failed, suspended or waiting).</PDAT></PTEXT></PARA>
<PARA ID="P-00410" LVL="2"><PTEXT><PDAT>Control Monitor Tool: this is a very important administrative tool which is used for killing all agents, suspending some agents, suspending or failing some of the tasks they are performing in order to study the emerging exception behaviour, etc. This is also an important testing and debugging tool in the sense that certain agents may be suspending, killed from the society, etc. so that specific agents are studied more closely.</PDAT></PTEXT></PARA>
<PARA ID="P-00411" LVL="0"><PTEXT><PDAT>The visualiser </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> comprises a software agent having the same general framework as any other of the collaborative agents in a CABS system. It has the capability of pulling data off other agents in the system. It is passive in the sense that it does not negotiate with other agents but it registers itself with the name server </PDAT><HIL><BOLD><PDAT>135</PDAT></BOLD></HIL><PDAT> and also visualises itself.</PDAT></PTEXT></PARA>
<PARA ID="P-00412" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 10</PDAT></FGREF><PDAT>, the overall architecture of the Debugging/Visualisation Software Module </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> comprises a central hub made up of a mailbox </PDAT><HIL><BOLD><PDAT>1000</PDAT></BOLD></HIL><PDAT>, a message handler </PDAT><HIL><BOLD><PDAT>1005</PDAT></BOLD></HIL><PDAT>, a message context database </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT>, and a tool launcher </PDAT><HIL><BOLD><PDAT>1015</PDAT></BOLD></HIL><PDAT>. The hub has available to it a set of tool outlines </PDAT><HIL><BOLD><PDAT>1020</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00413" LVL="0"><PTEXT><PDAT>The mailbox </PDAT><HIL><BOLD><PDAT>1000</PDAT></BOLD></HIL><PDAT> provides facilities for messaging between the Debugger/Visualiser </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> and other agents, using the common agent communication language which in this case is KQML.</PDAT></PTEXT></PARA>
<PARA ID="P-00414" LVL="0"><PTEXT><PDAT>The tool launcher </PDAT><HIL><BOLD><PDAT>1015</PDAT></BOLD></HIL><PDAT> launches ton demand by the user) instances of the different tools in the tool set, namely instances of the Society, Statistics, Micro, Reports, and Control Tools. There are a large number of dimensions along which a multi-agent system can be visualised. Developing a single complex tool which supports all the different visualisation modes could make the visualiser difficult to use, inflexible and difficult to maintain: hence the use of a suite of tools, the tool set, with each tool sharing a common look and feel and being dedicated to a single visualisation task. All tools are launched from a central hub and share a common interface with the hub. This way, the visualiser is easier to maintain and readily extensible. The set of tools selected are those which have been found most useful in visualising, controlling and debugging multi-agent systems.</PDAT></PTEXT></PARA>
<PARA ID="P-00415" LVL="0"><PTEXT><PDAT>Primarily, the visualiser </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> sends request messages to other agents for data which they hold. It queries the name server </PDAT><HIL><BOLD><PDAT>135</PDAT></BOLD></HIL><PDAT> for agent addresses and then uses those addresses. The message handler </PDAT><HIL><BOLD><PDAT>205</PDAT></BOLD></HIL><PDAT> of the receiving agent routes the received request message appropriately, depending where the data of interest will be located. Data received by the visualiser </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> from all the other agents is stored, retrieved and processed for appropriate display.</PDAT></PTEXT></PARA>
<PARA ID="P-00416" LVL="0"><PTEXT><PDAT>The visualiser </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> can also install data in an agent. It can therefore be used to modify an agent&apos;s behaviour. This is further described below.</PDAT></PTEXT></PARA>
<PARA ID="P-00417" LVL="0"><PTEXT><PDAT>The message handler </PDAT><HIL><BOLD><PDAT>1005</PDAT></BOLD></HIL><PDAT> of the visualiser </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> handles incoming messages received by the mailbox </PDAT><HIL><BOLD><PDAT>1000</PDAT></BOLD></HIL><PDAT> and delivers them to tool instances that have registered an interest in messages of that type. Tool instances register an interest in receiving messages of a particular type by using the message context database </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> which is consulted by the message handler </PDAT><HIL><BOLD><PDAT>1005</PDAT></BOLD></HIL><PDAT> during its processing. Thus, each tool instance interested in receiving report messages of a particular type from a set of agents will first, using the mailbox </PDAT><HIL><BOLD><PDAT>1000</PDAT></BOLD></HIL><PDAT>, send a request to those agents that they should send report messages to the Debugger/Visualiser </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> whenever events of that type occur (using an &ldquo;if, then&rdquo; type of control instruction), and second, register in the message context database </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> an interest in receiving copies of all incoming report messages of the desired type. This arrangement allows a user of the Debugger/Visualiser to dynamically decide at runtime the set of events he/she is interested in monitoring, and also to change at any time this set.</PDAT></PTEXT></PARA>
<PARA ID="P-00418" LVL="0"><PTEXT><PDAT>In particular, the KQML reply_with (outgoing message) and in_reply_to (incoming message) files are used to associate an identifier to each message, which is unique to tool instances and event-types. This way, the message handler does not need to scan the contents of a message to determine which tool instance requires it. This arrangement allows users of the visualiser to decide at runtime the set of events they are interested in monitoring, and also to change the set at any time. Furthermore, extension of the tools suite with a new tool and/or monitoring of a new event type requires no modification to the basic support infrastructure.</PDAT></PTEXT></PARA>
<PARA ID="P-00419" LVL="0"><PTEXT><PDAT>The visualiser </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> is not a full repository of data for an agent system. It only stores data for a limited time frame, for instance two days. If the user wants to store persistent data, it needs to be stored, for instance, in the video type tool included in the Society Tool. The time frame for which the visualiser </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> will hold data will be affected by the size, activity and complexity of the CABS agent system and, if there are for instance too many agents, the visualiser </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> may need to be extended.</PDAT></PTEXT></PARA>
<PARA ID="P-00420" LVL="0"><PTEXT><PDAT>The visualiser </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> only provides a historic mechanism; it lags the real-time activity of the system. It is possible for the visualiser </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> to receive messages in the wrong order. To avoid misinterpretation, the visualiser </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> is provided with a limited buffer </PDAT><HIL><BOLD><PDAT>1025</PDAT></BOLD></HIL><PDAT> which re-organises messages in their correct time sequence. (It should be noted that the messages consequently are necessarily time stamped.)</PDAT></PTEXT></PARA>
<PARA ID="P-00421" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT>, in a simple implemented scenario, the domain is supply chain provisioning in which agents collaborate to manufacture and/or provision goods making up a service. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT> shows a view of the domain which could be produced by the society tool. In the example, we have five principal agents. C, a computer manufacturer, has two subordinates, M and U. M produces monitors, and knows C as its superior and U as its co-worker. U produces central processing units (CPUs), and similarly knows C as its superior and M as its co-worker. Both M and U share two subordinates (X and Y). C knows of another agent P as a peer who produces printer ink and toner cartridges. P has a subordinate T that produces printer ink and toner cartridges.</PDAT></PTEXT></PARA>
<PARA ID="P-00422" LVL="0"><PTEXT><PDAT>Co-workers are agents in the same organisation who have no authority relation between them while peers are agents belonging to different organisations.</PDAT></PTEXT></PARA>
<PARA ID="P-00423" LVL="0"><PTEXT><PDAT>In the example, the production of a computer requires the base unit (CPU and monitor) as well as an appropriate printer.</PDAT></PTEXT></PARA>
<PARA ID="P-00424" LVL="0"><PTEXT><PDAT>In the environment are three additional support agents: an agent nameserver (ANS) which provides a white-pages facility for agent address look-up; a broker agent (PC_Broker) which provides a yellow-pages facility through which agents find other agents capable of performing a task; and a database proxy agent (DB) whose sole function is to store and retrieve messages from proprietary databases on demand from visualisers. These agents also communicate in the common agent communication language (ACL). Finally, there is the visualiser agent itself (Visual).</PDAT></PTEXT></PARA>
<PARA ID="P-00425" LVL="0"><PTEXT><PDAT>Use of any of the tools in the suite requires that once the tool is launched users connect to one or more nameservers. In a multi-agent system environment, nameservers contain the names and addresses of all &ldquo;live&rdquo; agents in the environment. Thus, connecting to a nameserver involves sending a request to the nameserver to list all agents in the environment and any agents which later come online. In an environment with many nameservers, the user can select which to connect to, effectively filtering the visualisation effort to a subset of agents of interest.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>5.1 The Society Tool</PDAT></STEXT></H>
<PARA ID="P-00426" LVL="0"><PTEXT><PDAT>The society tool of the visualiser sends out three types of request messages.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00013">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="CENTER">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Society Tool Messages</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="4">
<COLSPEC COLNAME="1" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="63PT" ALIGN="LEFT">
<COLSPEC COLNAME="3" COLWIDTH="63PT" ALIGN="LEFT">
<COLSPEC COLNAME="4" COLWIDTH="42PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>What is</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Message Type</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>To WHOM</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Purpose</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>returned</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="4" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Request</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Agent name server</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>return addresses</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Addresses</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>of all agents</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Request</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>All agents</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>return relationships</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Relation-</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>ships</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Request</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>None, some or all</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>cc all messages</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>cc&apos;ed</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>agents</PDAT></PTEXT></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>messages</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="4" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00427" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT>, the society tool allows a user to select a set of agents and view (a) the structural organisational relationships, and (b) the messaging between them. It therefore accesses the acquaintance models </PDAT><HIL><BOLD><PDAT>215</PDAT></BOLD></HIL><PDAT> stored in the individual agents. It can also set a flag that causes the message handlers </PDAT><HIL><BOLD><PDAT>205</PDAT></BOLD></HIL><PDAT> of the agents to copy all messages to the visualiser </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00428" LVL="0"><PTEXT><PDAT>To view (a) or (b), users use menu items to send requests to designated subsets of agent requesting they update the tool instance with their current knowledge of the organisational relations, or to send copies of all their outgoing messages to the tool instance respectively.</PDAT></PTEXT></PARA>
<PARA ID="P-00429" LVL="0"><PTEXT><PDAT>The organisational relationships describe role relations such as superior, subordinate, co-worker or peer. Knowing these relationships is important during debugging because they affect how the agents might coordinate their activities. For example, the agents may be configured to try performing all tasks first, if that fails delegate to subordinates, if that fails subcontract to co-workers, and only if all fail subcontract to peers. The tool supports graphical layout of the agents according to role relationships. Current layouts include a vertical layout (as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT>) emphasising the vertical superior-subordinate relationship, a horizontal circular layout emphasising co-workers, with groups of co-worker arranged in circles, a horizontal circular layout emphasising peers, with groups of peers arranged in circles, and a single agent-centred layout in which all the other agents are centred about a user-designated central agent. In the layout graphs the links between the agents are colour-coded according to their role relationship. Facilities are provided to collapse, expand, hide and show nodes of the various graphs. The different layouts are important especially when used with the messaging feature of the tool, because they allow the user to readily see the organisational structure of the agents and how coordination proceeds within that structure. This allows him or her to identify bugs either in the way in which the agents are organised, or in the manner in which coordination proceeds within the organisation.</PDAT></PTEXT></PARA>
<PARA ID="P-00430" LVL="0"><PTEXT><PDAT>It should be noted that no single agent necessarily possesses a full picture of the organisational structure. It is the responsibility of the society tool to integrate local information returned by the agents into a global picture of the organisation.</PDAT></PTEXT></PARA>
<PARA ID="P-00431" LVL="0"><PTEXT><PDAT>Messages between agents can be colour-coded (for easy visualisation) by type, e.g. all request messages in one colour, or by content, e.g. all messages pertaining to a particular job in one colour. In addition, the tool supports the filtering of messages before display. Messages may be filtered by sender, receiver, type or content. For example, a filter option might state &ldquo;show only counter-propose messages &lsqb;type filter&rsqb; from the set of agents . . . &lsqb;sender filter&rsqb; to the set of agents . . . &lsqb;recipient filter&rsqb; about job . . . &lsqb;content filter&rsqb;&rdquo;. These features facilitate debugging by allowing the user to focus-in on the particular messages of interest. Further, combined with the off-line replay facilities with forward and backward video modes (discussed next), they provide a powerful debugging tool.</PDAT></PTEXT></PARA>
<PARA ID="P-00432" LVL="0"><PTEXT><PDAT>As mentioned earlier, the society tool also provides facilities for the storage in a database for later playback of the messages sent and received by the agents. Again, message filters can be used during storage and/or replay to select particular messages of interest. Replay facilities support the video metaphor, allowing a user to review the messages in forward or reverse mode, in single step fashion or animated. Further, because the messages are stored in a relational database, users can make normal (eg relational) database type queries on the stored messages, e.g. &ldquo;how many messages did Agent A send out regarding Job </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>&rdquo;. The video replay facilities with message filters and the database query support significantly enhance the debugging effort of a user, by allowing him or her to focus-in or out and dynamically change perspectives while trying to make sense of the interactions between the agents.</PDAT></PTEXT></PARA>
<PARA ID="P-00433" LVL="0"><PTEXT><PDAT>In the graphical user interface shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT>, it is possible to see the layout of agents </PDAT><HIL><BOLD><PDAT>1200</PDAT></BOLD></HIL><PDAT> in the supply chain provisioning scenario described above. On the left of the window are layout and view controls </PDAT><HIL><BOLD><PDAT>1210</PDAT></BOLD></HIL><PDAT>. Toolbar buttons </PDAT><HIL><BOLD><PDAT>1220</PDAT></BOLD></HIL><PDAT> on the right control video-style replay of messages while those on the left </PDAT><HIL><BOLD><PDAT>1230</PDAT></BOLD></HIL><PDAT> and a pop-up menu </PDAT><HIL><BOLD><PDAT>1240</PDAT></BOLD></HIL><PDAT> control the position and visibility of the agent icons.</PDAT></PTEXT></PARA>
<PARA ID="P-00434" LVL="0"><PTEXT><PDAT>The actual storage of messages in a database is performed by opening a link to a database proxy agent, and sending to it copies of the messages to be stored. Retrieval proceeds in a similar manner, albeit in reverse. This arrangement provides a flexible approach since any proprietary database system can be used simply by interfacing it with a standard proxy which understand and communicates in the agent communication language.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>5.2 The Reports Tool</PDAT></STEXT></H>
<PARA ID="P-00435" LVL="0"><PTEXT><PDAT>In a collaborative multi-agent set-up, generally it is the behaviour of the society as a whole (i.e. the combined inputs of all the agents) which is important and not that of an individual agent. A typical problem in debugging multi-agent systems arises from the fact that each agent provides only a local view of the problem-solving effort of the society.</PDAT></PTEXT></PARA>
<PARA ID="P-00436" LVL="0"><PTEXT><PDAT>Each agent only knows about jobs and subjobs which have been allocated to and/or by it. No single agent holds data for the overall breakdown and the state of all the jobs.</PDAT></PTEXT></PARA>
<PARA ID="P-00437" LVL="0"><PTEXT><PDAT>For example, in order to produce a computer, agent C might contract out part of this task to P to provide a laser printer. P in turn, might delegate part of its contract to T to provide a toner cartridge. Because of the autonomy of the individual agents, C is only aware of the part of the task it is scheduled to perform, and the part it contracted out to P; it remains unaware of the part delegated by P to T. Thus, a user viewing any one of the agents in isolation gets an incomplete picture of the problem solving effort of the society. So, if for example C reports a failure to perform the task, the user will be unable to immediately determine, for instance, that the root cause of the failure was because T failed to provide the toner cartridge as requested by P.</PDAT></PTEXT></PARA>
<PARA ID="P-00438" LVL="0"><PTEXT><PDAT>The Reports Tool is able to request the relevant data from each of the agents, collate it and depict it. The Reports Tool applies the algorithm set out below to collate the data and generate a full picture, which can then be represented in a GANTT chart of the type shown in FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00439" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT>, for this tool, note that a job J given to an agent A may be split up into subjobs J</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and J</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> which are allocated to agents B and C respectively. Subjob J</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> may further be split into J</PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>, J</PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, J</PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> and allocated to other agents E, F and G. Subjob J</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> may also be split, agent B retaining responsibility for a subjob J</PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> but allocating a subjob J</PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> to agent D.</PDAT></PTEXT></PARA>
<PARA ID="P-00440" LVL="0"><PTEXT><PDAT>The important thing is to ensure each top level job, such as job J, has a unique identifier which is maintained even if subjobs (and subsubjobs, etc) of this top-level job get generated. This is recorded in each agent by means of the commitment table of FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT> and as a result of decisions by the co-ordination engine and reasoning system </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>. So when Agent A splits a job having identifier &ldquo;J&rdquo; into subjobs J</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and J</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and allocates them to other agents, these other agents maintain the identifier &ldquo;J&rdquo;, even when they themselves further split the subjobs (J</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, J</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, etc) into yet further subjobs and allocate them to yet other agents. Note that a subjob &ldquo;J</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&rdquo; has added its own identifier &ldquo;1&rdquo; in addition to &ldquo;J&rdquo; to trace where it originates from if it gets further decomposed, and this applies when a subjob such as &ldquo;J</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&rdquo; gets further decomposed into &ldquo;J</PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>&rdquo; and &ldquo;J</PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>&rdquo;. In this case, both identifiers &ldquo;J&rdquo; and &ldquo;1&rdquo; have been retained.</PDAT></PTEXT></PARA>
<PARA ID="P-00441" LVL="0"><PTEXT><PDAT>Thus, using a root goal identifier and parent-child links, the report tool can graph a global task decomposition across the society. In fact, the same mechanism is used in the society tool to colour-code messages by goals.</PDAT></PTEXT></PARA>
<PARA ID="P-00442" LVL="0"><PTEXT><PDAT>Hence, the algorithm of the Reports tool for processing the data (retrieved from all the agents) is as follows:</PDAT></PTEXT></PARA>
<PARA ID="P-00443" LVL="2"><PTEXT><PDAT>i) for some Agent &ldquo;A&rdquo;, select a job/goal owned by that agent;</PDAT></PTEXT></PARA>
<PARA ID="P-00444" LVL="2"><PTEXT><PDAT>ii) retrieve the unique identifier for the goal, for example &ldquo;J&rdquo;;</PDAT></PTEXT></PARA>
<PARA ID="P-00445" LVL="2"><PTEXT><PDAT>iii) do a search to retrieve all other jobs/goals with that identifier and return both the jobs/goals and their relationships (with respect to the selected goal &ldquo;J&rdquo;);</PDAT></PTEXT></PARA>
<PARA ID="P-00446" LVL="2"><PTEXT><PDAT>iv) Graph the relationships land states), as shown in FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00447" LVL="0"><PTEXT><PDAT>Referring again to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT>, consider the scenario with three agents A, B, and E. In order to perform a job, J</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> say, Agent A might delegate a subpart (J</PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>) of this job to Agent B. who in turn delegates a subpart (J</PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT>) of J</PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> to Agent E. Because of the autonomy of the individual agents, Agent A is only aware of the subpart of J</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> it is scheduled to perform, and the subpart (J</PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>) it delegated to Agent B; it remains unaware of the subpart (J</PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT>) delegated by Agent B to Agent E. Thus, a user viewing any one of the agents in isolation gets an incomplete picture of the problem solving effort of the society. So if, for example, Agent A reports a failure to perform J</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the user will be unable to immediately determine, by looking at Agent A, that the root cause of the failure was because Agent E failed to achieve J</PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00448" LVL="0"><PTEXT><PDAT>The reports tool provides a global view of problem solving in a society of agents and is useful both as a debugging and an administrative tool. It allows a user to select a set of agents and request that they report the status of all their jobs to it. Next, the user can select an agent of interest and a job owned by that agent. (An agent owns a job if it is scheduled to perform the job or subpart at a root node in a task decomposition hierarchy for the job.) For the selection of agent and job, the reports tool generates the GANTT chart type graph </PDAT><HIL><BOLD><PDAT>700</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> showing the decomposition </PDAT><HIL><BOLD><PDAT>560</PDAT></BOLD></HIL><PDAT> of the job, the allocation of its constituent subparts to different agents in the community, and the relevant states of the job and subparts. Other attributes of the jobs might also be shown on the chart, such as when each agent is scheduled to perform its part, their costs, the priority assigned to them by the agents, and the resources they require.</PDAT></PTEXT></PARA>
<PARA ID="P-00449" LVL="0"><PTEXT><PDAT>Referring to FIG. </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> and returning to the &ldquo;MakeComputer&rdquo; task mentioned above, the GANTT chart </PDAT><HIL><BOLD><PDAT>700</PDAT></BOLD></HIL><PDAT> might be displayed on screen with selection boxes for selecting the agent and task to look at. As shown, the selection boxes </PDAT><HIL><BOLD><PDAT>1305</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>1310</PDAT></BOLD></HIL><PDAT> have been used to select task &ldquo;MakeComputer&rdquo; for agent C </PDAT><HIL><BOLD><PDAT>1300</PDAT></BOLD></HIL><PDAT>. The GANTT chart </PDAT><HIL><BOLD><PDAT>700</PDAT></BOLD></HIL><PDAT> shows the decomposition of the &ldquo;MakeComputer&rdquo; task into MakeTonerCartridge (Agent T) </PDAT><HIL><BOLD><PDAT>1315</PDAT></BOLD></HIL><PDAT>, MakeMonitor (Agent M) </PDAT><HIL><BOLD><PDAT>1325</PDAT></BOLD></HIL><PDAT>, MakeCPU (Agent U) </PDAT><HIL><BOLD><PDAT>1320</PDAT></BOLD></HIL><PDAT> and MakePrinter (Agent P) </PDAT><HIL><BOLD><PDAT>1316</PDAT></BOLD></HIL><PDAT>. The Task Status Key </PDAT><HIL><BOLD><PDAT>1335</PDAT></BOLD></HIL><PDAT> shows by colour coding (not visible in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 13</PDAT></FGREF><PDAT>) that the MakeTonerCartridge and MakeMonitor tasks </PDAT><HIL><BOLD><PDAT>1315</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>1325</PDAT></BOLD></HIL><PDAT> are running, the MakeCPU task </PDAT><HIL><BOLD><PDAT>1320</PDAT></BOLD></HIL><PDAT> is completed and the MakePrinter and MakeComputer tasks </PDAT><HIL><BOLD><PDAT>1316</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>1300</PDAT></BOLD></HIL><PDAT> are waiting. A dialogue box </PDAT><HIL><BOLD><PDAT>1330</PDAT></BOLD></HIL><PDAT> has been brought up to show details of the MakeTonerCartridge task </PDAT><HIL><BOLD><PDAT>1315</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00450" LVL="0"><PTEXT><PDAT>The reports tool therefore needs access for instance to the task decompositions </PDAT><HIL><BOLD><PDAT>560</PDAT></BOLD></HIL><PDAT> and to the commitment database </PDAT><HIL><BOLD><PDAT>245</PDAT></BOLD></HIL><PDAT> in each agent.</PDAT></PTEXT></PARA>
<PARA ID="P-00451" LVL="0"><PTEXT><PDAT>As mentioned, the job graph created by the reports tool also shows the current status of each subpart of the job, i.e. either waiting, running, completed or failed. Thus from the graph a user is immediately able to determine the overall status of a job, and if the job fails where exactly it did so&mdash;which obviously aids the debugging effort. For easy visualisation, the different states of a job can be colour-coded in the graph.</PDAT></PTEXT></PARA>
<PARA ID="P-00452" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> as a whole shows a task report </PDAT><HIL><BOLD><PDAT>700</PDAT></BOLD></HIL><PDAT> for job J</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> owned by Agent A. The subpart J</PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT> (Agent E) has failed, while J</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> (Agent C) is running and J</PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> (Agent D) is completed. J</PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> (Agent B) and J</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> (Agent A) are waiting, but because of the failure to achieve J</PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT> will both fail unless action is taken to achieve J</PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT> in some other way.</PDAT></PTEXT></PARA>
<PARA ID="P-00453" LVL="0"><PTEXT><PDAT>The tool also provides the user with facilities for collapsing/expanding sections of the graph and hiding/showing nodes on the graph&mdash;this is important in dealing with a very large graph since it allows a user to focus-in on the regions of interest, reducing too much detail which might hinder the debugging effort.</PDAT></PTEXT></PARA>
<PARA ID="P-00454" LVL="0"><PTEXT><PDAT>The algorithm for ensuring the correct integration of task descriptions into graphs relies on two facts: first, the agent on which the goal is initiated assigns a system-wide unique identifier to the goal that is propagated down the task decomposition hierarchy of the goal. Second, whenever an agent decomposes a task into subtasks, it creates unique identifiers for the subtasks and records the identifiers with the parent task (this happens whether or not other agents perform the subtasks). Thus, using the root goal identifier and parent-child links, the report tool can graph the global task decomposition across the society. (in fact, the same mechanism is used in the society tool to colour-code messages by goals.) The same mechanism also allows the display of joint graphs, wherein two task decomposition graphs are linked by one or more tasks. This happens when side effects of a task in one goal decomposition graph are utilised in another.</PDAT></PTEXT></PARA>
<PARA ID="P-00455" LVL="0"><PTEXT><PDAT>Similarly to the society tool, the report tool also supports online logging of report messages to a database, and then subsequent off-line replay.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>5.3 The Micro Tool</PDAT></STEXT></H>
<PARA ID="P-00456" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 14</PDAT></FGREF><PDAT>, the micro tool allows a user to select a single agent, Agent C as shown, and review its processing by looking at its current data and at the messages being sent and received by different components of the agent. For instance, it might look at the last ten messages for a selected component. Looking at threads in the mailbox, it might review messages under construction to go out, or messages recently received. It can request to see:</PDAT></PTEXT></PARA>
<PARA ID="P-00457" LVL="2"><PTEXT><PDAT>1. &ldquo;Message in queue&rdquo; </PDAT><HIL><BOLD><PDAT>1400</PDAT></BOLD></HIL><PDAT>: most recent messages received and still to be dealt with;</PDAT></PTEXT></PARA>
<PARA ID="P-00458" LVL="2"><PTEXT><PDAT>2. &ldquo;Message out queue&rdquo; </PDAT><HIL><BOLD><PDAT>1405</PDAT></BOLD></HIL><PDAT>: messages to be sent out;</PDAT></PTEXT></PARA>
<PARA ID="P-00459" LVL="2"><PTEXT><PDAT>3. &ldquo;Message handler summary&rdquo; </PDAT><HIL><BOLD><PDAT>1410</PDAT></BOLD></HIL><PDAT>: a summary of the actions taken in response to incoming messages, for example, to what module of the agent has the message been dispatched for detailed processing;</PDAT></PTEXT></PARA>
<PARA ID="P-00460" LVL="2"><PTEXT><PDAT>4. &ldquo;Co-ordination graph&rdquo; </PDAT><HIL><BOLD><PDAT>1415</PDAT></BOLD></HIL><PDAT>: visually depicts the dynamic state of execution of the co-ordination engine so as to visualise the progress of the realisation of some goal. Where there are multiple goals the agent is trying to achieve, the user can select a particular one in order to visualise its progress. As each node </PDAT><HIL><BOLD><PDAT>1420</PDAT></BOLD></HIL><PDAT> of the graph is running, it shows GREEN. If that node fails, it shows RED;</PDAT></PTEXT></PARA>
<PARA ID="P-00461" LVL="2"><PTEXT><PDAT>5. &ldquo;Execution monitor summary&rdquo; </PDAT><HIL><BOLD><PDAT>1425</PDAT></BOLD></HIL><PDAT>: a diary detailing the tasks the agent has committed itself to performing, and the current status of those tasks (i.e. waiting, running, completed or failed) e.g. the monitor might indicate a task which has failed to start because of inadequate resources (for example, results expected from another agent might never arrive or arrive too late), or it might flag an executing task which has been stopped because it over-ran its scheduled allocation of processor time;</PDAT></PTEXT></PARA>
<PARA ID="P-00462" LVL="2"><PTEXT><PDAT>6. &ldquo;Resource database summary&rdquo; </PDAT><HIL><BOLD><PDAT>1430</PDAT></BOLD></HIL><PDAT>: summary of the resources the agent manages. It also shows which are free, which have been allocated, and to whom; and</PDAT></PTEXT></PARA>
<PARA ID="P-00463" LVL="2"><PTEXT><PDAT>7. &ldquo;Commitment table&rdquo; </PDAT><HIL><BOLD><PDAT>1435</PDAT></BOLD></HIL><PDAT>: visual depiction of how tasks have been scheduled. This is a summary of the results of monitoring executing tasks or tasks scheduled to start execution; eg the monitor might indicate a task which has failed to start because of inadequate resources or it might flag an executing task which has been stopped because it overran its scheduled allocation of processor time. As shown, Agent C is firmly committed to the task MakeComputer at time </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00464" LVL="0"><PTEXT><PDAT>The micro tool provides a user with a finer look at the internal processing of an agent and has obvious debugging potential. For example, the flagging of executing tasks which have been stopped because they over-ran their allocated processor time might indicate to a user that he or she underestimated the amount of time required to run those tasks. (It is assumed that users/developers provide a conservative estimate of the processor time needed to run each task, which is used by the agent in scheduling its activities.)</PDAT></PTEXT></PARA>
<PARA ID="P-00465" LVL="0"><PTEXT><PDAT>As another example, by looking at the current state of the coordination process for a job (from the graphical depiction of the coordination process), a user might be able to infer, for instance, why the job was rejected by the agent. Since each node of the coordination graph indicates a particular state of the process, the trace of a job on the graph informs the user of most of all there is to know about the coordination of that job. For instance, from a trace, a user might infer that Job-O, say, failed because it required certain resources which the agent did not have; further, the agent could not find any other agent that could provide the resource within the required quantity, time, cost and other constraints.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>5.4 The Control Monitor Tool</PDAT></STEXT></H>
<PARA ID="P-00466" LVL="0"><PTEXT><PDAT>It allows for the following functions:</PDAT></PTEXT></PARA>
<PARA ID="P-00467" LVL="2"><PTEXT><PDAT>Browse-through</PDAT></PTEXT></PARA>
<PARA ID="P-00468" LVL="2"><PTEXT><PDAT>Add</PDAT></PTEXT></PARA>
<PARA ID="P-00469" LVL="2"><PTEXT><PDAT>Modify</PDAT></PTEXT></PARA>
<PARA ID="P-00470" LVL="2"><PTEXT><PDAT>Delete</PDAT></PTEXT></PARA>
<PARA ID="P-00471" LVL="0"><PTEXT><PDAT>These functions act on current goals, jobs, resources, tasks, organisational relations and knowledge, and co-ordination strategies. Other functions include:</PDAT></PTEXT></PARA>
<PARA ID="P-00472" LVL="2"><PTEXT><PDAT>Suspend (jobs or agents)</PDAT></PTEXT></PARA>
<PARA ID="P-00473" LVL="2"><PTEXT><PDAT>resume (jobs or agents)</PDAT></PTEXT></PARA>
<PARA ID="P-00474" LVL="2"><PTEXT><PDAT>Kill (agents)</PDAT></PTEXT></PARA>
<PARA ID="P-00475" LVL="0"><PTEXT><PDAT>These latter three are done by sending request messages to these agents; with the contents being the above (e.g. a suspension notice).</PDAT></PTEXT></PARA>
<PARA ID="P-00476" LVL="0"><PTEXT><PDAT>The control monitor tool again works in relation to single agents. It provides an online version of the original CABS agent-building capabilities.</PDAT></PTEXT></PARA>
<PARA ID="P-00477" LVL="0"><PTEXT><PDAT>The control monitor tool allows a user to select an agent of interest and browse-through, add, modify or delete its current jobs, resources, tasks, organisational relations and knowledge, and coordination strategies. Further, the user can suspend or resume jobs, and also suspend, resume or even kill agents. A facility is also provided for the user to tune various parameters of an agent such as how long it waits for replies from other agents before assuming a null response, or how the agent should split its time between performing tasks it has already committed to and coordinating new tasks. Because different multi-agent systems or applications may use different ontologies or data dictionaries to specify data items, this tool allows users to load an ontology database </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT> defining the ontology of their specific system or application.</PDAT></PTEXT></PARA>
<PARA ID="P-00478" LVL="0"><PTEXT><PDAT>The control monitor tool is useful in debugging and/or analysing the behaviour of a society of agents by allowing a user to dynamically reconfigure the society and analyse its subsequent behaviour. This is useful when testing hypotheses. The user can use it to study the effects of various changes on agents&apos; constitution, organisational relations, co-ordination behaviour etc. For example, an agent might, contrary to expectations, consistently reject a job for which it has adequate know-how (task) but lacks the required resources although there are other agents in the society that can produce the required resources. Using the control monitor tool to browse through the tasks and resources of the agent, a user might convince herself that the agent possesses the know-how but lacks the resources. Checking the agent&apos;s list of coordination strategies may, for example, indicate that the agent does have the coordination ability to subcontract out the production of the required resources to other agents in the set-up. Since the agent rejects the job though, the user might posit two hypotheses, that either (A) the agent is unaware of other agents in the society that can produce the required resource, or (B) the time-out period that the agent waits for acceptance after sending out job request messages to other agents might be less than the time needed by those agents to determine whether or not to accept a job. Using the control tool to browse through the organisational relations and knowledge of the agent might confirm or refute hypothesis (A), and again using this tool to increase the agent&apos;s wait-acceptance time-out might confirm or refute hypothesis (B).</PDAT></PTEXT></PARA>
<PARA ID="P-00479" LVL="0"><PTEXT><PDAT>Other tools such as the micro or society tool might also be used in tandem with the control monitor tool to investigate these hypotheses. Using the society tool, for instance, the user might observe the agent sending out job request messages&mdash;refuting hypothesis (A); and using the micro tool the user might observe that in the coordination trace for the job, the agent progresses past the wait-acceptance node before replies to its job request messages are received&mdash;confirming hypothesis (B).</PDAT></PTEXT></PARA>
<PARA ID="P-00480" LVL="0"><PTEXT><PDAT>A browser window for the control tool might for instance allow a user to remotely browse, add, delete and/or modify the task specifications of agents in a society. Such a window might show list boxes for the agents in the society, the set of tasks of the current selected agent, and the status of the selected task. A text area might show the specification of the current selected task. &ldquo;Modify&rdquo; and &ldquo;Add&rdquo; buttons might launch a task specification editor through which an existing task specification may be modified or a new task defined. The status of the tasks are set to OK when, as far as the tool is aware, the task definition in the tool is the same as that in the relevant agent&apos;s task database. A staus value of UNKNOWN indicates that the user has modified the task specification but, so far, the agent has not yet returned acknowledgement of receipt of the new specification.</PDAT></PTEXT></PARA>
<PARA ID="P-00481" LVL="0"><PTEXT><PDAT>The control tool is useful in debugging and/or analysing the behaviour of a society of agents by allowing a user to dynamically reconfigure the society and analyse its subsequent behaviour. That is, it allows the agent system to be redefined at runtime.</PDAT></PTEXT></PARA>
<PARA ID="P-00482" LVL="0"><PTEXT><PDAT>The strength in the control tool lies in the use of high level messages in communication, perhaps KQML and its related languages. With high-level messages, new specifications of whatever behaviour can be sent to an agent and it is the agent&apos;s function to interpret the specification into the relevant functionality. If one were to use object-level messaging such dynamism is immediately lost. An analogy is the relationship between interpreted languages such as Prolog and Lisp that provide dynamic redefinition of program behaviour and compiled languages such as C&plus;&plus;and Fortran that do not.</PDAT></PTEXT></PARA>
<PARA ID="P-00483" LVL="0"><PTEXT><PDAT>Because different multi-agent system applications may use different ontologies or date dictionaries to specify date items, this tool allows user to load an ontology database defining the ontology of their specific application.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>5.5 The Statistics Tool</PDAT></STEXT></H>
<PARA ID="P-00484" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 15</PDAT></FGREF><PDAT>, this tool allows a user to collate various statistics about a society of agents on a per agent basis as well as on a community basis. The statistics collected might include for instance, but are not limited to:</PDAT></PTEXT></PARA>
<PARA ID="P-00485" LVL="2"><PTEXT><PDAT>(a) the number of messages and their types sent by the agents over a time period;</PDAT></PTEXT></PARA>
<PARA ID="P-00486" LVL="2"><PTEXT><PDAT>(b) the number of messages sent by the agents in coordinating different jobs;</PDAT></PTEXT></PARA>
<PARA ID="P-00487" LVL="2"><PTEXT><PDAT>(c) the average loading of the agents, i.e. the proportion of time agents spend actually executing tasks; and</PDAT></PTEXT></PARA>
<PARA ID="P-00488" LVL="2"><PTEXT><PDAT>(d) the coordination versus execution time ratio, i.e. how much time is spent coordinating tasks as opposed to actually running them.</PDAT></PTEXT></PARA>
<PARA ID="P-00489" LVL="0"><PTEXT><PDAT>Statistics such as these are particularly useful in debugging or fine-tuning the performance of a society of agents. For example, using the control monitor tool and the statistics tool, a user is better able to answer questions such as &ldquo;what organisational structuring, and distribution of task and coordination know-how best minimises the time spent coordinating jobs and maximises the time spent executing them (i.e. increasing the profitability of the society)&rdquo;. If the agents in the society learn from experience, the statistics tool becomes even more useful in assessing the performance of different learning strategies since certain statistics such as the average number of messages sent by the agent per job and/or the coordination versus execution time ratio can serve as performance metrics for measuring learning success.</PDAT></PTEXT></PARA>
<PARA ID="P-00490" LVL="0"><PTEXT><PDAT>The particular screen shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 15</PDAT></FGREF><PDAT> shows the amount of traffic generated </PDAT><HIL><BOLD><PDAT>1500</PDAT></BOLD></HIL><PDAT> by the principal agents U, T, P, M, C in achieving the goal MakeComputer. As expected from the task decomposition </PDAT><HIL><BOLD><PDAT>700</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 13</PDAT></FGREF><PDAT>, Agent C sends out three achieve-messages while Agent P only throws out one. The reply messages correspond to negotiation and post-negotiation (task management) dialogues.</PDAT></PTEXT></PARA>
<PARA ID="P-00491" LVL="0"><PTEXT><PDAT>The tool can support different display formats, such as histogram, pie, line, or xy-scatter graph formats for the display of statistics. The choice of format is user-determinable, using toolbar buttons </PDAT><HIL><BOLD><PDAT>1505</PDAT></BOLD></HIL><PDAT>, although there are pre-specifiecd defaults formats for the various statistics.</PDAT></PTEXT></PARA>
<PARA ID="P-00492" LVL="0"><PTEXT><PDAT>Similarly to the society and report tools, the statistics tool supports database saving and video-style replay of agent statistics. For generality, only raw (as opposed to processed) agent data is saved onto database, thus, on playback, any relevant statistic can be recreated.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>5.6 An Extended Example</PDAT></STEXT></H>
<PARA ID="P-00493" LVL="0"><PTEXT><PDAT>Returning to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT>, while each tool described above is useful as a debugging aid when used in isolation, when used in combination with the other tools they provide even greater debugging and analysis support by giving the user a multi-perspective viewpoint of the agents&apos; behaviour. By way of illustration, an extended example of using different tools to assess different aspects of agents&apos; behaviour in a debugging problem is described below.</PDAT></PTEXT></PARA>
<PARA ID="P-00494" LVL="0"><PTEXT><PDAT>Consider a multi-agent society comprising seven agents A-G as shown in FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>. The user believes that the agents have been configured such that given job J to agent A, the decomposition of the job across the society would proceed as illustrated; i.e. J</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> to agent B, J</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> to agent C, J</PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> to agent D etc. However, when job J is given to agent A, it reports a failure in planning out the job.</PDAT></PTEXT></PARA>
<PARA ID="P-00495" LVL="0"><PTEXT><PDAT>To debug this problem, the user might for example use the society tool, particularly the message storage, video-style playback and filter facilities to review the coordination activities of agents when job J was presented to agent A. The user notes, for example, that as expected, agent A sends out a request (Propose message) to agent B to achieve J</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and another request (Propose message) to agent C to achieve J</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. Again, as expected agent B sends out a request to agent D to achieve J</PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>. Agent C however sends out no requests, although it had been expected to send out three.</PDAT></PTEXT></PARA>
<PARA ID="P-00496" LVL="0"><PTEXT><PDAT>In a rerun of the scenario, using the micro tool to view the internals of agent C, it is noted from the trace of its coordination graph for job J</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> that J</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> was successfully decomposed into J</PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>, J</PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> and J</PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, but the coordination process failed when no candidate agents could be found to subcontract J</PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> to. Using the control monitor tool to review the organisational relations and knowledge of agent C, it is noted that no entries specifying agents that could achieve J</PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> were listed in agent C&apos;s organisational knowledge-base&mdash;thus, an entry is added to agent C&apos;s organisational knowledge-base to fix this &lsquo;bug&rsquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00497" LVL="0"><PTEXT><PDAT>The problem is again rerun and, this time, agent A reports success in distributing the task across the society but later reports failure due to inadequate resources when it tried to actually perform its subpart of the job.</PDAT></PTEXT></PARA>
<PARA ID="P-00498" LVL="0"><PTEXT><PDAT>Using the reports tool, in a rerun, the user notes that following-successful problem decomposition across the society, agents E, F, G and C successfully started and ran to completion their respective subparts of the job. However, agent D failed to achieve J</PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, which in turn caused the failure of agent B to achieve J</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and in turn that of agent A to achieve J.</PDAT></PTEXT></PARA>
<PARA ID="P-00499" LVL="0"><PTEXT><PDAT>The user reruns the scenario and uses the micro tool to monitor agent D. She notices that D successfully starts J</PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> but later stops it because J</PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> ran out of its allocated processor time (indicated by an execution monitor message). The control monitor is used to modify the definition of J</PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> to increase its estimated run-time.</PDAT></PTEXT></PARA>
<PARA ID="P-00500" LVL="0"><PTEXT><PDAT>The scenario is again rerun, and this time everything runs to completion.</PDAT></PTEXT></PARA>
<PARA ID="P-00501" LVL="0"><PTEXT><PDAT>Alternatively, task J</PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> may have had time to execute but produced the wrong outputs (ie the task body was wrongly specified). In this case, the micro tool will not detect that J</PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> ran out of time and the task body will have to be reviewed and corrected.</PDAT></PTEXT></PARA>
<PARA ID="P-00502" LVL="0"><PTEXT><PDAT>In a different fault scenario using the same arrangement of agents as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT>, the statistics tool may instead show that agent C in fact sends out two requests (Propose messages) in respect of the J</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> task, although three requests would be expected. It is now possible to form the hypothesis that the cause of failure is located in agent C, probably due to one or both of the following:</PDAT></PTEXT></PARA>
<PARA ID="P-00503" LVL="2"><PTEXT><PDAT>(i) an error in the specification of the J</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> task. The task specification is expected to be &lcub;J</PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>,J</PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>,J</PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>&rcub;&equals;&lcub;J</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&rcub;, that is, given J</PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>, J</PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> and J</PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> then J</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> can be produced. If there is an error in the specification, for example &lcub;J</PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT>,J</PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>,J</PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>&rcub;&equals;&lcub;J</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&rcub; instead, then there would arise two Propose messages sent out for jobs J</PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> and J</PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, but no equivalent Propose message for J</PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT>. Agent C will not send out a Propose message for job J</PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> since it doesn&apos;t know of any other agent that can produce J</PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT>;</PDAT></PTEXT></PARA>
<PARA ID="P-00504" LVL="2"><PTEXT><PDAT>(ii) an error in a specification in the aquaintance database of agent C. Assuming the task is properly specified, then the most likely reason what the third propose message was not sent out would be (once more) that no agent is listed in agent C&apos;s aquaintance database capable of performing the third job.</PDAT></PTEXT></PARA>
<PARA ID="P-00505" LVL="0"><PTEXT><PDAT>The overall hypothesis that the failure lies in agent C can be verified by, for example, using the micro tool for viewing the internals of agent C. For instance, it might be noted from the trace of its co-ordination graph that agent C could not plan or co-ordinate the activities the activities involved in J</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, thus confirming the hypothesis.</PDAT></PTEXT></PARA>
<PARA ID="P-00506" LVL="0"><PTEXT><PDAT>Regarding the hypotheses (i) and (ii), the control tool can be used to remotely review the task specification database of agent C. If that is correct, (i) is eliminated. To confirm hypothesis (ii), the control tool can be used to directly review the aquaintance database of agent C, checking all specifications relating to J</PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>, J</PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> and J</PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> (by browsing through the aquaintance database of agent C using a task browser window of the control tool).</PDAT></PTEXT></PARA>
<PARA ID="P-00507" LVL="0"><PTEXT><PDAT>Alternatively, if the aquaintance database is large, it is possible to use the society tool to review the messages sent out by agent C. It might be discovered that agent C sent out messages to agents F and G to perform jobs J</PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> and J</PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> respectively. Now it is reasonably certain that the failure to perform job J was due to a specification error in the aquaintance database of agent C, regarding J</PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> (the goal) and agent E. This can be confirmed by using the control tool to review and modify the aquaintance database of agent C.</PDAT></PTEXT></PARA>
<PARA ID="P-00508" LVL="0"><PTEXT><PDAT>It should be noted that the suite of tools described above cannot detect every possible cause of failure in a multiagent system it is used to monitor but it makes the debugging task immeasurably easier.</PDAT></PTEXT></PARA>
<PARA ID="P-00509" LVL="0"><PTEXT><PDAT>Although described in relation to the particular CABS multiagent system described above, one or more of the debugging tools could easily be used with other multiagent systems, based on different architectures, agents, relationships and languages. It would simply be necessary that the agents of the debugging tool(s) and of the multiagent system being debugged were able to understand messages and other information, such as task specifications, in the same way so that the debugging tool(s) could understand what the messages concerned and could review and amend the other information.</PDAT></PTEXT></PARA>
<PARA ID="P-00510" LVL="0"><PTEXT><PDAT>Embodiments of the present invention can be used in relation to a wide range of multi-agent systems. For instance, it has been evaluated in particular in the following applications:</PDAT></PTEXT></PARA>
<PARA ID="P-00511" LVL="2"><PTEXT><PDAT>a travel management application involving 17 agents, in which a travel manager agent negotiates with hotel, air-line, car, train and taxi reservation agents to generate an itinerary for a transatlantic trip for a user;</PDAT></PTEXT></PARA>
<PARA ID="P-00512" LVL="2"><PTEXT><PDAT>a telecommunications network management application with 27 agents. Here agents controlling network links negotiate to provision virtual private networks for users. For this application the report tool was very easily customised to support a different display format for task decomposition graphs; and</PDAT></PTEXT></PARA>
<PARA ID="P-00513" LVL="2"><PTEXT><PDAT>an electronic commerce application where agents buy and sell goods and services using different negotiation strategies. This application involved over 100 agents simultaneously performing many different tasks, and the colour-coding of messages by goal was essential in understanding the interactions between the agents.</PDAT></PTEXT></PARA>
<PARA ID="P-00514" LVL="0"><PTEXT><PDAT>Although different languages and hardware may well be found appropriate in various circumstances, embodiments of the present invention can be implemented entirely in the java programming language and run on Unix, for instance Solaris, and windows NT workstations.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00515" LVL="0"><PTEXT><PDAT>1. Software building apparatus for building a software system for use in control, monitoring and/or management of a process or apparatus, said apparatus comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>i) at least one software module, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>ii) means for capturing data for loading to at least two copies of said module, the loaded modules each comprising a collaborative agent for use in said software system, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>iii) means for loading, or providing access to, at least two different collaboration strategies to at least one of said copies of said loaded module, for use by the respective collaborative software agent in use of the software system such that its collaboration behavior in the system is flexible, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>iv) means for generating the software system comprising the collaborative software agents of ii) and iii) above. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00516" LVL="0"><PTEXT><PDAT>2. Apparatus as in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein at least two of said loaded software modules hold different data determined by different entities represented by said modules.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00517" LVL="0"><PTEXT><PDAT>3. Apparatus as in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said at least one collaborative software agent has at least two different collaboration strategies and is capable of operating according to more than one collaboration strategy over the same time period, such that it operates according to at least the two different strategies effectively in parallel.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00518" LVL="0"><PTEXT><PDAT>4. An exception handler for use in apparatus as in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein the data to be loaded to at least one copy of a module includes task definition data, defining resources and other variables of tasks to be distributed between multiple loaded copies of software modules for use in said software system, wherein said task definitions include one or more constraints on one or more variables and the exception handler flags an exception when a variable conflicts with a relevant constraint during use of the system.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00519" LVL="0"><PTEXT><PDAT>5. An exception handler for use in apparatus as in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein the data to be loaded to at least one copy of a module includes scheduling data for tasks, defining resource and time constraints in relation to a task, and the exception handler flags an exception when the resource and time constraints cannot be met by allocation of tasks between the software modules.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00520" LVL="0"><PTEXT><PDAT>6. Software building apparatus as in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein the software module comprises a collaboration engine for running a collaboration strategy in use of a collaborative software agent comprising a loaded copy of said module.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00521" LVL="0"><PTEXT><PDAT>7. Software building apparatus as in claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> wherein a collaboration strategy comprises a graph description.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00522" LVL="0"><PTEXT><PDAT>8. Software building apparatus as in claim </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT> wherein the graph description describes a set of states, identified by nodes, and a set for arcs for traversing between specified states, each node and each arc identifying at least one process.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00523" LVL="0"><PTEXT><PDAT>9. Software building apparatus as in claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> wherein at least one arc identifies a graph description.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00524" LVL="0"><PTEXT><PDAT>10. Software building apparatus as in claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> wherein the collaboration engine is adapted to run a collaboration strategy, in use of the software system, by selecting a first node of the associated graph description, instantiating and running a process identified by the node, instantiating and running a process identified by an arc associated with the node, thereby traversing to a second node, and repeating the process until the end of the graph description.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00525" LVL="0"><PTEXT><PDAT>11. Software building apparatus as in claim </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>the at least one collaborative software agent having at least two different collaboration strategies is capable of operating according to more than one collaboration strategy over the same time period, such that it operates according to at least two different strategies effectively in parallel, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>the collaboration engine being adapted to run the collaboration strategies by selecting a node from each of the strategies, instantiating and running processes identified by all the selected nodes, then traversing to a next node from each of the strategies and instantiating and running processes identified by all the next nodes, repeating the process until the end of each graph description associated with a collaboration strategy being run in parallel. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00526" LVL="0"><PTEXT><PDAT>12. A software system for use in control, monitoring and/or management of a process or apparatus, wherein said system comprises at least two software modules, each module comprising data and/or process information which comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(i) organisation data concerning an inter-module relationship; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(ii) executable software providing at least two intermodule collaboration strategies; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein, in use, a module selects at least one of said strategies for use in negotiating with another software module in relation to task allocation, such that its collaboration behaved in the system is flexible, said selection being determined at least in part by said organisation data. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00527" LVL="0"><PTEXT><PDAT>13. A software system as in claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, wherein at least two of said software modules hold different data, determined by different entities represented by said modules.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00528" LVL="0"><PTEXT><PDAT>14. A software system as in claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> wherein at least one module, comprising executable software providing at least two different collaboration strategies, is capable of operating according to more than one collaboration strategy over the same time period, such that it operates according to at least two different strategies effectively in parallel.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00529" LVL="0"><PTEXT><PDAT>15. A software system as in claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, wherein each module comprises a collaboration engine for running a collaboration strategy in use of the system.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00530" LVL="0"><PTEXT><PDAT>16. A software system as in claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> wherein a collaboration strategy comprises a graph description.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00017">
<PARA ID="P-00531" LVL="0"><PTEXT><PDAT>17. A software system as in claim </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT> wherein the graph description describes a set of states, identified by nodes, and a set for arcs for traversing between specified states, each node and each arc identifying at least one process.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00018">
<PARA ID="P-00532" LVL="0"><PTEXT><PDAT>18. A software system as in claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT> wherein at least one arc identifies a graph description.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00019">
<PARA ID="P-00533" LVL="0"><PTEXT><PDAT>19. A software system as in claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT> wherein the collaboration engine is adapted to run a collaboration strategy, in use of the software system, by selecting a first node of the associated graph description, instantiating and running a process identified by the node, instantiating and running a process identified by an arc associated with the node, thereby traversing to a second node, and repeating the process until the end of the graph description.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00020">
<PARA ID="P-00534" LVL="0"><PTEXT><PDAT>20. A software system as in claim </PDAT><HIL><BOLD><PDAT>19</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>at least one module, comprising executable software providing at least two different collaboration strategies, is capable of operating according to more than one collaboration strategy over the same time period, such that it operates according to at least two different strategies effectively in parallel, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>the collaboration engine of the at least one module being adapted to run the collaboration strategies by selecting a node from each of the strategies, instantiating and running processes identified by all the selected nodes, then traversing to a next node from each of the strategies and instantiating and running processes identified by all the next nodes, repeating the process until the end of each graph description associated with a collaboration strategy being run in parallel. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00021">
<PARA ID="P-00535" LVL="0"><PTEXT><PDAT>21. A method for building a software system for use in control, monitoring and/or management of a process or apparatus, said method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>i) capturing data for loading to at least two copies of a software module, the loaded modules each comprising a collaborative agent for use in said software system, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>ii) loading, or providing access to, at least two different collaboration strategies to at least one of said loaded copies of said module, for use by the respective collaborative software agent in use of the software system such that its behavior in the system is flexible, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>iii) generating the software system comprising the collaborative software agents of i) and ii) above. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00022">
<PARA ID="P-00536" LVL="0"><PTEXT><PDAT>22. A method as in claim </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> wherein at least two of said loaded software modules hold different data determined by different entities represented by said modules.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00023">
<PARA ID="P-00537" LVL="0"><PTEXT><PDAT>23. A method as in claim </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> wherein said at least one collaborative software agent has at least two different collaboration strategies and is capable of operating according to more than one collaboration strategy over the same time period, such that it operates according to at least the two different strategies effectively in parallel.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00024">
<PARA ID="P-00538" LVL="0"><PTEXT><PDAT>24. An exception handler method for use in a software building method as in claim </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> wherein the data to be loaded to at least one copy of a module includes task definition data, defining resources and other variables of tasks to be distributed between multiple loaded copies of software modules for use in said software system, wherein said task definitions include one or more constraints on one or more variables and the exception handler flags an exception when a variable conflicts with a relevant constraint during use of the system.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00025">
<PARA ID="P-00539" LVL="0"><PTEXT><PDAT>25. An exception handler method for use in a software building system as in claim </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> wherein the data to be loaded to at least one copy of a module includes scheduling data for tasks, defining resource and time constraints in relation to a task, and the exception handler flags an exception when the resource and time constraints cannot be met by allocation of tasks between the software modules.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00026">
<PARA ID="P-00540" LVL="0"><PTEXT><PDAT>26. A method as in claim </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> wherein the software module comprises a collaboration engine for running a collaboration strategy in use of a collaborative software agent comprising a loaded copy of said module.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00027">
<PARA ID="P-00541" LVL="0"><PTEXT><PDAT>27. A method as in claim </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> wherein a collaboration strategy comprises a graph description.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00028">
<PARA ID="P-00542" LVL="0"><PTEXT><PDAT>28. A method as in claim </PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT> wherein the graph description describes a set of states, identified by nodes, and a set for arcs for traversing between specified states, each node and each are arc identifying at least one process.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00029">
<PARA ID="P-00543" LVL="0"><PTEXT><PDAT>29. A method as in claim </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> wherein at least one arc identifies a graph description.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00030">
<PARA ID="P-00544" LVL="0"><PTEXT><PDAT>30. A method as in claim </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> wherein the collaboration engine is adapted to run a collaboration strategy, in use of the software system, by selecting a first node of the associated graph description, instantiating and running a process identified by the node, instantiating and running a process identified by an arc associated with the node, thereby traversing to a second node, and repeating the process until the end of the graph description.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00031">
<PARA ID="P-00545" LVL="0"><PTEXT><PDAT>31. A method as in claim </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>the at least one collaborative software agent having at least two different collaboration strategies is capable of operating according to more than one collaboration strategy over the same time period, such that it operates according to at least the two different strategies effectively in parallel, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>the collaboration engine being adapted to run the collaboration strategies by selecting a node from each of the strategies, instantiating and running processes identified by all the selected nodes, then traversing to a next node from each of the strategies and instantiating and running processes identified by all the next nodes, repeating the process until the end of each graph description associated with a collaboration strategy being run in parallel. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00032">
<PARA ID="P-00546" LVL="0"><PTEXT><PDAT>32. A method for using software in control, monitoring and/or management of a process or apparatus, wherein said method uses at least two software modules, each module comprising data and/or process information which comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(i) organization data concerning an inter-module relationship; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(ii) executable software providing at least two inter-module collaboration strategies; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein, in use, a module selects at least one of said inter-module collaboration strategies for use in negotiating with another software module in relation to task allocation such that its collaboration behavior in the system is flexible, said selection being determined at least in part by said organization data. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00033">
<PARA ID="P-00547" LVL="0"><PTEXT><PDAT>33. A method as in claim </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT>, wherein at least two of said software modules hold different data, determined by different entities represented by said modules.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00034">
<PARA ID="P-00548" LVL="0"><PTEXT><PDAT>34. A method as in claim </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT> wherein at least one module, comprising executable software providing at least two different collaboration strategies, is capable of operating according to more than one collaboration strategy over the same time period, such that it operates according to at least the two different strategies effectively in parallel.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00035">
<PARA ID="P-00549" LVL="0"><PTEXT><PDAT>35. A method as in claim </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT>, wherein each module comprises a collaboration engine for running a collaboration strategy in use of the system.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00036">
<PARA ID="P-00550" LVL="0"><PTEXT><PDAT>36. A method as in claim </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT> wherein a collaboration strategy comprises a graph description.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00037">
<PARA ID="P-00551" LVL="0"><PTEXT><PDAT>37. A method as in claim </PDAT><HIL><BOLD><PDAT>36</PDAT></BOLD></HIL><PDAT> wherein the graph description describes a set of states, identified by nodes, and a set for arcs for traversing between specified states, each node and each arc identifying at least one process.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00038">
<PARA ID="P-00552" LVL="0"><PTEXT><PDAT>38. A method as in claim </PDAT><HIL><BOLD><PDAT>37</PDAT></BOLD></HIL><PDAT> wherein at least one arc identifies a graph description.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00039">
<PARA ID="P-00553" LVL="0"><PTEXT><PDAT>39. A method as in claim </PDAT><HIL><BOLD><PDAT>37</PDAT></BOLD></HIL><PDAT> wherein the collaboration engine is adapted to run a collaboration strategy, in use of the software system, by selecting a first node of the associated graph description, instantiating and running a process identified by the node, instantiating and running a process identified by an arc associated with the node, thereby traversing to a second node, and repeating the process until the end of the graph description.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00040">
<PARA ID="P-00554" LVL="0"><PTEXT><PDAT>40. A method as in claim </PDAT><HIL><BOLD><PDAT>39</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>at least one module, comprising executable software providing at least two different collaboration strategies, is capable of operating according to more than one collaboration strategy over the same time period, such that it operates according to at least tie two different strategies effectively in parallel, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>the collaboration engine of the at least one module being adapted to run the collaboration strategies by selecting a node from each of the strategies, instantiating and running processes identified by all the selected nodes, then traversing to a next node from each of the strategies and instantiating and running processes identified by all the next nodes, repeating the process until the end of each graph description associated with a collaboration strategy being run in parallel.</PDAT></PTEXT></CLMSTEP>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314555-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314555-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314555-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314555-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314555-20011106-D00004.TIF">
<EMI ID="EMI-D00005" FILE="US06314555-20011106-D00005.TIF">
<EMI ID="EMI-D00006" FILE="US06314555-20011106-D00006.TIF">
<EMI ID="EMI-D00007" FILE="US06314555-20011106-D00007.TIF">
<EMI ID="EMI-D00008" FILE="US06314555-20011106-D00008.TIF">
<EMI ID="EMI-D00009" FILE="US06314555-20011106-D00009.TIF">
<EMI ID="EMI-D00010" FILE="US06314555-20011106-D00010.TIF">
<EMI ID="EMI-D00011" FILE="US06314555-20011106-D00011.TIF">
<EMI ID="EMI-D00012" FILE="US06314555-20011106-D00012.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314556-20011106-D00000.TIF SYSTEM "US06314556-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00001.TIF SYSTEM "US06314556-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00002.TIF SYSTEM "US06314556-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00003.TIF SYSTEM "US06314556-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00004.TIF SYSTEM "US06314556-20011106-D00004.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00005.TIF SYSTEM "US06314556-20011106-D00005.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00006.TIF SYSTEM "US06314556-20011106-D00006.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00007.TIF SYSTEM "US06314556-20011106-D00007.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00008.TIF SYSTEM "US06314556-20011106-D00008.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00009.TIF SYSTEM "US06314556-20011106-D00009.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00010.TIF SYSTEM "US06314556-20011106-D00010.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00011.TIF SYSTEM "US06314556-20011106-D00011.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00012.TIF SYSTEM "US06314556-20011106-D00012.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00013.TIF SYSTEM "US06314556-20011106-D00013.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00014.TIF SYSTEM "US06314556-20011106-D00014.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00015.TIF SYSTEM "US06314556-20011106-D00015.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00016.TIF SYSTEM "US06314556-20011106-D00016.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00017.TIF SYSTEM "US06314556-20011106-D00017.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00018.TIF SYSTEM "US06314556-20011106-D00018.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00019.TIF SYSTEM "US06314556-20011106-D00019.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00020.TIF SYSTEM "US06314556-20011106-D00020.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00021.TIF SYSTEM "US06314556-20011106-D00021.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00022.TIF SYSTEM "US06314556-20011106-D00022.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00023.TIF SYSTEM "US06314556-20011106-D00023.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00024.TIF SYSTEM "US06314556-20011106-D00024.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00025.TIF SYSTEM "US06314556-20011106-D00025.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00026.TIF SYSTEM "US06314556-20011106-D00026.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00027.TIF SYSTEM "US06314556-20011106-D00027.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00028.TIF SYSTEM "US06314556-20011106-D00028.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00029.TIF SYSTEM "US06314556-20011106-D00029.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00030.TIF SYSTEM "US06314556-20011106-D00030.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00031.TIF SYSTEM "US06314556-20011106-D00031.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00032.TIF SYSTEM "US06314556-20011106-D00032.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00033.TIF SYSTEM "US06314556-20011106-D00033.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00034.TIF SYSTEM "US06314556-20011106-D00034.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00035.TIF SYSTEM "US06314556-20011106-D00035.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00036.TIF SYSTEM "US06314556-20011106-D00036.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00037.TIF SYSTEM "US06314556-20011106-D00037.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00038.TIF SYSTEM "US06314556-20011106-D00038.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00039.TIF SYSTEM "US06314556-20011106-D00039.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00040.TIF SYSTEM "US06314556-20011106-D00040.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00041.TIF SYSTEM "US06314556-20011106-D00041.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00042.TIF SYSTEM "US06314556-20011106-D00042.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00043.TIF SYSTEM "US06314556-20011106-D00043.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00044.TIF SYSTEM "US06314556-20011106-D00044.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00045.TIF SYSTEM "US06314556-20011106-D00045.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00046.TIF SYSTEM "US06314556-20011106-D00046.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00047.TIF SYSTEM "US06314556-20011106-D00047.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00048.TIF SYSTEM "US06314556-20011106-D00048.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00049.TIF SYSTEM "US06314556-20011106-D00049.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00050.TIF SYSTEM "US06314556-20011106-D00050.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00051.TIF SYSTEM "US06314556-20011106-D00051.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00052.TIF SYSTEM "US06314556-20011106-D00052.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00053.TIF SYSTEM "US06314556-20011106-D00053.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00054.TIF SYSTEM "US06314556-20011106-D00054.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00055.TIF SYSTEM "US06314556-20011106-D00055.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00056.TIF SYSTEM "US06314556-20011106-D00056.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00057.TIF SYSTEM "US06314556-20011106-D00057.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00058.TIF SYSTEM "US06314556-20011106-D00058.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00059.TIF SYSTEM "US06314556-20011106-D00059.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00060.TIF SYSTEM "US06314556-20011106-D00060.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00061.TIF SYSTEM "US06314556-20011106-D00061.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00062.TIF SYSTEM "US06314556-20011106-D00062.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00063.TIF SYSTEM "US06314556-20011106-D00063.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00064.TIF SYSTEM "US06314556-20011106-D00064.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00065.TIF SYSTEM "US06314556-20011106-D00065.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00066.TIF SYSTEM "US06314556-20011106-D00066.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00067.TIF SYSTEM "US06314556-20011106-D00067.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00068.TIF SYSTEM "US06314556-20011106-D00068.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00069.TIF SYSTEM "US06314556-20011106-D00069.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00070.TIF SYSTEM "US06314556-20011106-D00070.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00071.TIF SYSTEM "US06314556-20011106-D00071.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00072.TIF SYSTEM "US06314556-20011106-D00072.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00073.TIF SYSTEM "US06314556-20011106-D00073.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00074.TIF SYSTEM "US06314556-20011106-D00074.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00075.TIF SYSTEM "US06314556-20011106-D00075.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00076.TIF SYSTEM "US06314556-20011106-D00076.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00077.TIF SYSTEM "US06314556-20011106-D00077.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00078.TIF SYSTEM "US06314556-20011106-D00078.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00079.TIF SYSTEM "US06314556-20011106-D00079.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00080.TIF SYSTEM "US06314556-20011106-D00080.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00081.TIF SYSTEM "US06314556-20011106-D00081.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00082.TIF SYSTEM "US06314556-20011106-D00082.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00083.TIF SYSTEM "US06314556-20011106-D00083.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00084.TIF SYSTEM "US06314556-20011106-D00084.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00085.TIF SYSTEM "US06314556-20011106-D00085.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00086.TIF SYSTEM "US06314556-20011106-D00086.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00087.TIF SYSTEM "US06314556-20011106-D00087.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00088.TIF SYSTEM "US06314556-20011106-D00088.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00089.TIF SYSTEM "US06314556-20011106-D00089.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00090.TIF SYSTEM "US06314556-20011106-D00090.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00091.TIF SYSTEM "US06314556-20011106-D00091.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00092.TIF SYSTEM "US06314556-20011106-D00092.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00093.TIF SYSTEM "US06314556-20011106-D00093.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00094.TIF SYSTEM "US06314556-20011106-D00094.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00095.TIF SYSTEM "US06314556-20011106-D00095.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00096.TIF SYSTEM "US06314556-20011106-D00096.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00097.TIF SYSTEM "US06314556-20011106-D00097.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00098.TIF SYSTEM "US06314556-20011106-D00098.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00099.TIF SYSTEM "US06314556-20011106-D00099.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00100.TIF SYSTEM "US06314556-20011106-D00100.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00101.TIF SYSTEM "US06314556-20011106-D00101.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00102.TIF SYSTEM "US06314556-20011106-D00102.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00103.TIF SYSTEM "US06314556-20011106-D00103.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00104.TIF SYSTEM "US06314556-20011106-D00104.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00105.TIF SYSTEM "US06314556-20011106-D00105.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00106.TIF SYSTEM "US06314556-20011106-D00106.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00107.TIF SYSTEM "US06314556-20011106-D00107.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00108.TIF SYSTEM "US06314556-20011106-D00108.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00109.TIF SYSTEM "US06314556-20011106-D00109.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00110.TIF SYSTEM "US06314556-20011106-D00110.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00111.TIF SYSTEM "US06314556-20011106-D00111.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00112.TIF SYSTEM "US06314556-20011106-D00112.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00113.TIF SYSTEM "US06314556-20011106-D00113.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00114.TIF SYSTEM "US06314556-20011106-D00114.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00115.TIF SYSTEM "US06314556-20011106-D00115.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00116.TIF SYSTEM "US06314556-20011106-D00116.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00117.TIF SYSTEM "US06314556-20011106-D00117.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00118.TIF SYSTEM "US06314556-20011106-D00118.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00119.TIF SYSTEM "US06314556-20011106-D00119.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00120.TIF SYSTEM "US06314556-20011106-D00120.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00121.TIF SYSTEM "US06314556-20011106-D00121.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00122.TIF SYSTEM "US06314556-20011106-D00122.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00123.TIF SYSTEM "US06314556-20011106-D00123.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00124.TIF SYSTEM "US06314556-20011106-D00124.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00125.TIF SYSTEM "US06314556-20011106-D00125.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00126.TIF SYSTEM "US06314556-20011106-D00126.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00127.TIF SYSTEM "US06314556-20011106-D00127.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00128.TIF SYSTEM "US06314556-20011106-D00128.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00129.TIF SYSTEM "US06314556-20011106-D00129.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00130.TIF SYSTEM "US06314556-20011106-D00130.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00131.TIF SYSTEM "US06314556-20011106-D00131.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00132.TIF SYSTEM "US06314556-20011106-D00132.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00133.TIF SYSTEM "US06314556-20011106-D00133.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00134.TIF SYSTEM "US06314556-20011106-D00134.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00135.TIF SYSTEM "US06314556-20011106-D00135.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00136.TIF SYSTEM "US06314556-20011106-D00136.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00137.TIF SYSTEM "US06314556-20011106-D00137.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00138.TIF SYSTEM "US06314556-20011106-D00138.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00139.TIF SYSTEM "US06314556-20011106-D00139.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00140.TIF SYSTEM "US06314556-20011106-D00140.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00141.TIF SYSTEM "US06314556-20011106-D00141.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00142.TIF SYSTEM "US06314556-20011106-D00142.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00143.TIF SYSTEM "US06314556-20011106-D00143.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00144.TIF SYSTEM "US06314556-20011106-D00144.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00145.TIF SYSTEM "US06314556-20011106-D00145.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00146.TIF SYSTEM "US06314556-20011106-D00146.TIF" NDATA TIF>
<!ENTITY US06314556-20011106-D00147.TIF SYSTEM "US06314556-20011106-D00147.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314556</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>09382710</PDAT></DNUM></B210>
<B211US><PDAT>09</PDAT></B211US>
<B220><DATE><PDAT>19990824</PDAT></DATE></B220>
</B200>
<B500>
<B510>
<B511><PDAT>G06F 1760</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>717  1</PDAT></B521>
<B522><PDAT>705  2</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Modular health care information management system utilizing reusable software objects</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5301320</PDAT></DNUM>
<DATE><PDAT>19940400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>McAtee et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705  9</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5319543</PDAT></DNUM>
<DATE><PDAT>19940600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Wilhelm</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705  3</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5583758</PDAT></DNUM>
<DATE><PDAT>19961200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>McIlroy et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705  2</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5596502</PDAT></DNUM>
<DATE><PDAT>19970100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Koski et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>36446801</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5721913</PDAT></DNUM>
<DATE><PDAT>19980200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Ackroff et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>707103</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5724575</PDAT></DNUM>
<DATE><PDAT>19980300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hoover et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>707 10</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5732401</PDAT></DNUM>
<DATE><PDAT>19980300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Conway</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705 29</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5748907</PDAT></DNUM>
<DATE><PDAT>19980500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Crane</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705  2</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5826239</PDAT></DNUM>
<DATE><PDAT>19981000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Du et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705  8</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5842173</PDAT></DNUM>
<DATE><PDAT>19981100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Strum et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705  1</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5845254</PDAT></DNUM>
<DATE><PDAT>19981200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Lockwood et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705  2</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B562><NCIT><STEXT><PDAT>Sethi, Ravi. Programming Languages. New York: Addison Wesley. 1989, pp. 169-173 and 178-185. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Biggerstaff et al. Software Reusability. New York: Addison Wesley. 1989, vol. 2, pp. 269-287.</PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
</B560>
<B570>
<B577><PDAT>36</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
<B578US><PDAT>11</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>717  1</PDAT></B582>
<B582><PDAT>705  2</PDAT></B582>
</B580>
<B590><B595><PDAT>147</PDAT></B595><B596><PDAT>147</PDAT></B596><B597US>
</B590>
</B500>
<B600>
<B630><B632><PARENT-US><CDOC><DOC><DNUM><PDAT>09/382710</PDAT></DNUM></DOC></CDOC><PDOC><DOC><DNUM><PDAT>08/965788</PDAT></DNUM><DATE><PDAT>19971107</PDAT></DATE><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>00</PDAT></KIND></DOC></PDOC><PSTA><PDAT>01</PDAT></PSTA><PPUB><DOC><DNUM><PDAT>5995937</PDAT></DNUM><DATE><PDAT>19991130</PDAT></DATE><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>A </PDAT></KIND></DOC></PPUB></PARENT-US></B632></B630>
</B600>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Brian C.</PDAT></FNM><SNM><STEXT><PDAT>DeBusk</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Clinton</PDAT></CITY>
<STATE><PDAT>TN</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Michael C.</PDAT></FNM><SNM><STEXT><PDAT>Cofer</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Knoxville</PDAT></CITY>
<STATE><PDAT>TN</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Mark W.</PDAT></FNM><SNM><STEXT><PDAT>Shanks</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Knoxville</PDAT></CITY>
<STATE><PDAT>TN</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Wil Francis</PDAT></FNM><SNM><STEXT><PDAT>Lukens</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Knoxville</PDAT></CITY>
<STATE><PDAT>TN</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>DeRoyal Business Systems, LLC</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Powell</PDAT></CITY><STATE><PDAT>TN</PDAT></STATE></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>02</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Luedeka, Neely &amp; Graham, P.C.</PDAT></STEXT></ONM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Mark</PDAT></FNM><SNM><STEXT><PDAT>Powell</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>John Q.</PDAT></FNM><SNM><STEXT><PDAT>Chavis</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2122</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A health care information management system that utilizes modular and reusable software objects to allow for user configuration. The disclosed information management system allows for the creation by the user of software objects representative of specific events and resources which will occur or be utilized during the provision of health care to patients. These user configured software modules then allow the user to track the provision of health care, the utilization of resources during the provision of health care, the allocation of resources to perform medical procedures and identify opportunities for enhancing efficiencies in the provision of health care services. In one embodiment of the invention described, the system allows for the user to create, manage and maintain software modules representing specific procedural pathways to be performed in a health care institution. The user creates these modules using user configurable software objects that function to represent containers, resources and data. The software objects are modular and re-usable and allow the user to select components for creation of the modules. The created modules may then be used to provide information management relating to the provision of the medical procedures represented by the procedural pathway modules.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<RELAPP>
<BTEXT>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>This application is a continuation in part of application Ser. No. 08/965,788, filed Nov. 7, 1997, entitled Modular Health-Care Information Management System Utilizing Reusable Software Objects, which issued on Nov. 30, 1999 as U.S. Pat. No. 5,995,937.</PDAT></PTEXT></PARA>
</BTEXT>
</RELAPP>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>FIELD OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>This invention relates to the field of information systems for use in the health care environment and in particular to an information system incorporating software for supply, scheduling and resource utilization management in the health care environment. This specification includes a microfiche appendix of 50 slides with a capacity of 96 frames each, with a total of 1,450 frames. This application is a continuation in part of application 08/965,788, filed Nov. 7, 1997, entitled Modular Health-Care Information Management System Utilizing Reusable Software Objects, which issued on Nov. 30, 1999 as U.S. Pat. 5,995,937.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>One important consideration in the provision of health care is the allocation, utilization and consumption of resources such as labor, durable equipment, reusable supplies and disposable supplies. For example, one way for supplies to be obtained by hospitals is for a central supply service to order the individual supplies anticipated to be needed for a given time period. These supplies are maintained in a supply room until needed for a given procedure. Once a procedure is scheduled, a pick list (a list of supplies) is generated. A hospital employee then uses the pick list to withdraw the desired items from inventory and place them in the operating room where the procedure takes place. After the procedure is completed, unused supplies are returned to inventory, a list of used supplies is provided to the billing department, and the used supplies are disposed of or re-sterilized. However, this system is costly and inefficient.</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>For example, a relatively large inventory of supplies has to be maintained, particularly for standard items such as drapes, sponges, sutures, clamps, etc., which could be used in a large variety of procedures. The inventory of such items has to be large in order to insure that sufficient quantities are on hand for every procedure. Furthermore, the act of picking items for surgery and, later, restocking unused items, is onerous and expensive since relatively highly skilled labor is utilized to insure that the proper items were collected and that the restocked items are placed in the proper location. In particular, the restocking of unused items is a substantial burden on the hospital. Each item pulled from inventory has to be either used and billed for, or restocked and not billed for. If an item is not used during the procedure and is billed for anyway, the billing for that product could be considered fraud on the reimburser. Since items are often individually wrapped, the restocking procedure could be very time consuming, particularly where sufficient quantities of items are picked from inventory to cover any situation during surgery. For example, it is not uncommon to withdraw ten clamps from inventory and use only three or four, except in situations where heavy bleeding is encountered, which might necessitate the use of all ten.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>What is needed, therefore, is an integrated information system for use in healthcare institutions for managing, optimizing and analyzing the use of resources within that institution.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>The above and further objects are met in the exemplar embodiment of the present invention, having an information management system for managing information relating to providing health care services, including a general purpose computer system having storage means for storing data corresponding to the information, processing means for processing management instructions, display means for visually presenting the information, and input means for receiving the management instructions and the information. Information management software is installed on the general purpose computer system, which software includes software objects, where each of the software objects provides a health care information management function and corresponds to an aspect of providing health care services.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>In various preferred embodiments the software objects include software objects of many different types. Node software objects are for creating, altering characteristics of, and the management of the software objects. Container software objects are for containing the software objects, and correspond to at least one of health care procedures, health care information, and health care resource groups. Types of container software objects include care event container software objects for containing the software objects, and which correspond to health care procedures, and bundle container software objects to contain the software objects, which correspond to health care resource groups.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>Resource software objects correspond to resources to be used in the provision of health care services, and also are of several types. Equipment resource software objects correspond to equipment to be used in the provision of health care services. Personnel resource software objects correspond to personnel to be used in the provision of health care services, and supply resource software objects correspond to supplies to be used in the provision of health care services. Finally, data software objects correspond to health care information associated with the provision of health care services.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>The node software objects, container software objects, resource software objects, and data software objects may be combined in different structures, including procedural pathways corresponding to sets of health care procedures, cases corresponding to sets of health care procedures designated for a patient, and libraries. The cases may be selectively designated as open, corresponding to health care procedures that are planned for a patient, or selectively designated as closed, corresponding to health care procedures that are completed for a patient. The libraries may be of predefined care event containers corresponding to predefined health care procedures, or predefined bundle containers corresponding to predefined health care resource groups, or a combination of the two. Libraries can also include predefined data software objects, corresponding to the predetermined sets of health care information to be gathered and recorded.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>Further, the node software objects, container software objects, resource software objects, and data software objects may be combined in a library of procedural pathways having predefined care event containers corresponding to predefined health care procedures and predefined bundle containers corresponding to predefined health care resource groups, which procedural pathways correspond to predefined sets of health care procedures. The procedural pathways may contain data objects, corresponding to health care information to be gathered and recorded. The data objects may be used to selectively include a portion of the predefined bundle containers.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>The node software objects, container software objects, resource software objects, and data software objects may be provided in a hierarchical form, corresponding to a sequential order of health care procedures to be performed, health care resources to be provided, and health care information to be gathered and recorded.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>In an alternate embodiment of a system for managing health care services, a computing means has input means for receiving patient health care information, storage means for storing data corresponding to the patient health care information, processing means for processing software objects corresponding to health care services management instructions and the patient health care information and producing health care services management output, and display means for visually presenting the health care services output.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>The software objects include data software objects, resource software objects, and node software objects. The data software objects have means for receiving the patient health care information and means for providing the patient health care information through a standardized interface.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>The resource software objects associate resources with information relating to the resources, and are of several different types. Personnel resource software objects have means for associating a health care personnel resource with information relating to the health care personnel resource, including at least one of a personnel resource billing rate, a personnel resource pay rate, and a personnel resource time requirement, and means for providing the information relating to the health care personnel resource through the standardized interface.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>Equipment resource software objects have means for associating a health care equipment resource with information relating to the health care equipment resource, including at least one of an equipment resource billing rate, an equipment resource cost, and an equipment resource time requirement, and means for providing the information relating to the health care equipment resource through the standardized interface.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>Supply resource software objects include bundle supply resource software objects and conditional bundle supply resource software objects. The bundle supply resource software objects have means for associating health care supply resources with information relating to health care supply resources, including at least one of a supply resource billing rate and a supply resource cost, and means for providing the information relating to heath care supply resources through the standardized interface. The conditional bundle supply resource software objects have means for associating health care supply resources with information relating to health care supply resources, including at least one of supply resource billing rates and supply resource costs, and means for selectively providing the information relating to health care supply resources through the standardized interface based at least in part on the patient health care information provided by at least one of the data software objects.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>The node software objects include at least a pathway node software object having means for selectively creating the data software objects and means for selectively creating the resource software objects. Means selectively link the standardized interface of the data software objects and resource software objects into configurable procedural pathways associated with health care treatment plans. Means also selectively adapt the information provided through the standardized interface of the data software objects, and resource software objects. Means further provide the data software objects and resource software objects with a first set of functions specifically adapted to the pathway node software object.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><PDAT>In a preferred embodiment, container software objects are also included, having means for selectively associating groups of data software objects, resource software objects, and container software objects, and means for associating the groups with information relating to at least one of a health care procedure and a health care resource kit.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00020" LVL="0"><PTEXT><PDAT>The foregoing embodiments of the present invention may be best understood with reference to the following Detailed Description of the Preferred Embodiments and the drawings, wherein:</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a block diagram showing the generic form of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a tree diagram showing the organization of a preferred form of the present invention, and</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3-147</PDAT></FGREF><PDAT> are screen shots of a computer program of an exemplar embodiment of the present invention.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</PDAT></STEXT></H>
<PARA ID="P-00024" LVL="0"><PTEXT><PDAT>DeRoyal Industries, Inc., the assignee of U.S. patent application Ser. No. 08/846,798, filed Apr. 30, 1997, entitled, Method and System for the Tracking and Profiling of Supply Usage in a Health Care Environment, U.S. patent application Ser. No. 08/936,780, filed Sep. 24, 1997, entitled Method for the Analysis and Standardization of Bills of Resources, and U.S. application Ser. No. 08/889,948, filed Jul. 10, 1997, entitled Method for the Supply of Medical Supplies to a Health care Institution Based on a Nested Bill of Materials on a Procedure Level, which is a continuation-in-part of U.S. Pat. No. 5,682,728, issued Nov. 4, 1997, entitled Method for the Supply of Medical Supplies to a Health care Institution Based on a Nested Bill of Materials on a Procedure Level, the entire disclosures of which are hereby incorporated by reference thereto as if fully set forth herein, has been developing a resource utilization paradigm based upon the concept of the procedural pathway.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><PDAT>In the provision of medical services, the process by which medical services are provided may be described as a procedural pathway. Any given treatment regimen or clinical procedure may be easily described as a related series of care events. Each care event has some relation to at least one of either the preceding or the following care events that is logical and reasonable. For example, take a simple procedure such as suturing a wound. The task of suturing a wound can be described as a series of care events: 1) examination of the wound; 2) cleansing of the wound; 3) anesthesia; 4) suturing of the wound; and 5) dressing the sutured wound. Thus, each of these related care events make up a procedural pathway for the procedure of suturing a wound. Each of the care events could be broken down into a more detailed series of sub care events, thus, the concept of the procedural pathway is scaleable; that is, any given care event may be made of a series of care events and can therefore be described as a procedural pathway.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><PDAT>The concept of the procedural pathway may also be expanded to more involved procedures. For example, a patient might go to her doctor complaining of particular symptoms. The doctor might then make an examination or order tests. Based upon the result of the examination or tests, the doctor makes a diagnosis and prescribes a treatment regimen. The treatment regimen may include a surgical procedure to be performed in a hospital, as well as follow up care. In this case, the procedural pathway might look like: 1) patient induction (basic administration getting the patient into the doctor&apos;s system); 2) examination; 3) testing; 4) diagnosis; 5) prescription of treatment; 6) admission to the hospital; 7) pre-surgical testing; 8) pre-operative preparation; 9) anesthesia; 10) surgery; 11) post operative recovery; 12) discharge from hospital; 13) follow up treatment; 14) final discharge. Once again, each care event in the given example might be further broken down into smaller incremental care events, and thus represent a procedural pathway of its own. For example, the surgery could be broken down into each step associated with the surgery from the initial incision until the incision is closed.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>Each care event represents the provision of some type of medical (or administrative) service, and each care event may also require the allocation of some type of resources in order to be performed. These resources may be in the form of labor (doctor, nurse, technician, data clerk, etc.), equipment (x-ray machine, respirator, vital signs monitors, etc.), or supplies (sponges, surgical instruments, drapes, x-ray film, sutures, medications, etc.). Thus, for each care event it is possible to identify the allocation of resources necessary for completion of the care event. For example, for the examination step described in the second example, the allocation of resources could be: 15 minutes of doctor&apos;s time, use of a specimen collector, use of a specimen container, and the use of a blood collection kit. Likewise, the testing step might include the use of an imaging device (such as an x-ray or MRI machine), thirty minutes of technician&apos;s time, use of x-ray film, use of an x-ray developer and associated chemical supplies, and fifteen minutes of a radiologist&apos;s time to interpret the images.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><PDAT>By describing events in the context of a procedural pathway, a framework is provided which allows for the systematic classification of the steps necessary to treat a particular patient as well as identifying the resource allocation necessary to properly complete the procedural pathway.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><PDAT>Basing an information system around the procedural pathway, as opposed to just tying services, supplies and other resources used to the patient, with no real relation to the pathway, provides an inherent ability to use the information more efficiently and to allow for greater cost accountability in the provision of medical services.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><PDAT>To illustrate the efficiency of the procedural pathway, it is best to analyze generally a hospital stay for a given patient. Initially, the patient will be admitted, have some blood work done, be assigned a room, possibly be subject to some diagnostic screenings, possibly have a surgical procedure done, spend a period of time recovering from the procedure and be discharged. Also, the procedural pathway may extend beyond the hospital stay and include follow up care such as periodic check ups or rehabilitation. Each step along the procedural pathway can be broken down into increasingly fine detail as series of more and more detailed sub procedures. For example, the surgical procedure can be further broken down into surgical preparation, anesthesia, the surgical procedure itself, closing and post operative anesthesia recovery. Each of these sub procedures could be further broken down into specific tasks to be performed at each stage.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><PDAT>As can be seen from the procedural pathway model, each stage of the procedural pathway is going to require the utilization of resources. These resources may be labor resources, consumable supply items, durable equipment, reusable supply items, particular rooms (i.e. patient rooms, OR&apos;s, recovery rooms, etc.) or services. For example, the blood work will require a technician to draw the blood, the disposable equipment for drawing blood, a labor resource to deliver the blood to the laboratory, the consumable and reusable supplies for handling and testing the blood, durable medical equipment for testing the blood, labor resources for testing the blood and generating the report, and a labor resource for providing the report to the patient&apos;s chart. As can be seen, each resource can be analyzed and tied to a particular care event along the procedural pathway.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>Each procedural pathway is going to have some unique characteristics which will vary based upon the reason the patient is in the health care facility (the type of procedure), the doctor performing the procedure and the characteristics of the patient. The procedural pathway is preferably different for someone having heart bypass surgery from someone having out patient orthopedic surgery. Likewise, preferences vary from one doctor to another in performing the same surgery; i.e. one doctor may prefer the feel of one brand of scalpel while another doctor may prefer another. Finally, the patient will often dictate variation within a given procedure; i.e. one patient may have certain physical characteristics that require using certain supplies and equipment and another patient may require different supplies and equipment.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>The present invention provides an information system for use in the health care environment that utilizes the procedural pathway paradigm for the input of data, the organization of data, the retrieval of data and the analysis of the data. In addition to storing unique data for each procedural pathway (historical data), the present invention also provides for the development of procedural pathways for certain medical procedures which have been analyzed and standard pathways developed. These procedural pathways, which are created from modular software objects configured by the user of the software associate the anticipated resource allocation to a given procedure and allow for the anticipation of resource consumption for each upcoming standard procedure.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><PDAT>For example, if a procedural pathway is developed for a hip replacement surgery, the procedural pathway for a given patient coming in for hip surgery is easily developed from the template. The information system user merely enters the identifying information about the patient and the surgeon performing the procedure, and the standard template generates a procedural pathway showing the resources required for that patient. At a further level of detail, departure points from the standard template can be identified and the alternate resource allocation for the departure points may also be provided in the information system.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><PDAT>For example, in co-pending application Ser. No. 08/846,798, the disclosure of which has been incorporated by reference, this feature is described as a conditional bundle. For example, in the hip replacement surgery described above, variations in resource requirements may vary from doctor to doctor because of differing techniques, requirements and subjective preferences. Thus, the standard template for a hip replacement surgery may be substantially the same for two different doctors, but vary on a few items. The conditional bundles can be used to account for the departure from the standard template for each doctor and, by entering the doctor performing the procedure, the information system can automatically associate the appropriate conditional bundle with the standard template to form the procedural pathway for a given patient.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><PDAT>In terms of resource management, there are two basic types of resources which will be needed to perform a medical procedure at a given location: 1) those resources which will need to be brought in from outside the location for the procedure and 2) those resources which are maintained by the location and which must be scheduled for a given procedure (for the purposes of this application, although doctors are not usually employed by the hospital, we will assume that they are resources associated with the location, since they are typically driving the scheduling of a procedure at a location). The management of outside and inside resources requires the consideration of two different sets of problems. Typically, the outside resources will primarily include the supplies which must be ordered from outside vendors, be delivered to the location and be provided at the appropriate time and place for the performance of the procedure. The inside resources will include the labor resources, equipment owned and maintained by the location and facilities at the location such as OR&apos;s, radiology, laboratories, etc.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><PDAT>In managing the outside resources there are two competing interests, the desire to have sufficient quantities of everything readily available, which necessitates a large inventory of supplies along with skilled personnel to maintain the inventory and deliver it for performance of the procedure, and the desire to minimize inventory, which minimizes inventory carrying costs, the risk that inventory will expire before use, tied up capital and the skilled labor necessary to maintain the inventory and pull it for each procedure.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>In managing inside resources the goal is to maximize the utilization of each available resource while carrying only the minimum amount of required resources to get the job done. Management of these resources necessitates that efficient resource allocation tools be used so that the location is not carrying costs associated with labor, equipment and facilities which are not being fully used, while insuring that all of the procedures can be performed in a timely fashion. For example, idle employees, equipment, OR&apos;s, etc. all carry a substantial cost. However, overworked employees, overused equipment and overbooked facilities reduce the efficiency and efficacy of the performance of the procedures and result in additional costs. Thus, precise scheduling and resource utilization management software is necessary to allow for the maximum productivity from resources, while minimizing inefficiency caused by overbooked resources and overworked employees. Additionally, software which allows for the detailed analysis of historical resource utilization will allow for the prediction of when new labor and other resources will be needed and allow for the most effective way of acquiring those resources, often saving money as opposed to the last minute recognition and rush acquisition of such resources.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>Description of the Preferred Embodiment</PDAT></STEXT></H>
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>In the preferred embodiment, the information management system consists of a series of software objects implemented using Microsoft ActiveX controls which may be configured and linked by a user to build a custom configured health care information management system. Preferably, the information system is implemented on a Windows NT or Windows 95 based personal computer, which may or may not be networked. In order to maintain a database of information related to this information system, a database program such as Microsoft SQL/Server or Microsoft Access is used in background. The information system of the preferred embodiment generates data and communicates through an interface compatible with the background database program. Typically, the software objects which will be described are coded in Visual C&plus;&plus; or Visual Basic, and adhere to the framework of ActiveX or OLE controls so as to maintain the ability to be implemented as compatible software objects in a component based software architecture.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>In general, the software provides a number of &ldquo;nodes,&rdquo; each of which correspond to a particular function of the information system. For example, if the system will have functions for developing and maintaining software based procedural pathways, maintaining and logging resource consumption on a case by case basis, and studying resource consumption for logged cases, each of these functions represent one node. Each of these nodes uses the feature of ActiveX controls to allow objects created in one node to provide necessary information or form the basis for a new object in another node. The interaction of objects from one node to another will be described more fully hereinafter.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>Referring now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, each node </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, as described, provides for a particular information management function in the present invention. Also, each node </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> represents a software object which will allow the user to perform certain functions and tasks relative to the information system function provided for the node </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>. In general, the function of each node will be to allow the user to generate specific templates, or software object modules </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> which will organize additional software objects into custom configurations representative of the information to be managed. Under each node </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, the user will have access to further software objects, by copying from previously generated templates, by creating the objects or copying them from an object library, in order to access the functionality of the node </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>The software objects available to the user will be of three specific types: 1) container objects </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT>, 2) resource objects </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> and 3) data objects </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT>. Each of these objects represent ActiveX software objects which function as miniature software programs to perform a specific function. Container objects </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> function as receptacles of other objects and act to organize the other objects in accordance with the user&apos;s specifications. Additionally, container objects </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> will be customized by the input of data from the user based upon what the container object </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> is designed to hold, the specific use to which the container object is subjected by the user and other usage specific data which the user will provide.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>Resource objects </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> are software objects which represent resources to be utilized in the provision of the health care. Resource objects </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> typically represent supplies, or kits of supplies, equipment, personnel, pharmaceuticals, or any other resource which will be utilized during the provision of health care. Each resource object </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> will be populated with data relevant to that object and will communicate that information as required.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>Data objects </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> are software objects which will be used by the user to collect specific information for use by the template or the information system. For example, it may be necessary to gather certain procedure specific information at some point in a procedural pathway and a data object </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> may be inserted at that point in a module </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> to collect such data and make it available to the appropriate software objects.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>Use of the software objects is best understood by a general reference to one function of the information system. Referring now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, the first node </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> of the software represents the function of generation, modification and maintenance of software templates for procedural pathways using the objects previously described. This node </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> allows the user to create software modules </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT>, made up of user selected objects, which represent in software a health care procedure or procedural pathway. In general, as described previously, the procedural pathway will be broken down into a series of related care events, representing discrete sub procedures along the procedural pathway. Using the functionality provided by the procedural pathway node </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>, the user develops a new module </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> by making an appropriate selection from the menu of the software. The user is prompted to input information relevant to the procedural pathway generally, such as the name of the procedural pathway, any hospital or other codes used to identify the type of procedure, doctors who perform that type of procedure, etc.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>Once the module </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> is defined and created, the user breaks the procedure down into a series of care events. For example, if the procedure is a heart bypass operation, then various care events can be identified such as 1) anesthesia care event, 2) draping care event and 3) the operative care event. Each of these care events is implemented in the procedural pathway module </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> by the selection or creation of care event container objects corresponding to each care event </PDAT><HIL><BOLD><PDAT>214</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>218</PDAT></BOLD></HIL><PDAT>. These objects require the input of information relevant to the care event and function as containers for additional container, resource, or data care events.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>Once the care event containers </PDAT><HIL><BOLD><PDAT>214</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>218</PDAT></BOLD></HIL><PDAT> are created in the module </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT>, the user fills out each of the associated care events for the module. For example, a patient history data object </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> might be associated with the module </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT>, which prompts the user to obtain patient specific data when the procedural pathway is used relative to a particular patient. Resources are then associated with each care event.</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>For example, the Anesthesia Care Event container </PDAT><HIL><BOLD><PDAT>214</PDAT></BOLD></HIL><PDAT> may contain an anesthesia supply bundle container </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT>, which in turn can contain resources such as anesthesia drugs </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT> and an airway circuit </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT>. Other resources, provided by a resource object, such as an anesthesiologist </PDAT><HIL><BOLD><PDAT>228</PDAT></BOLD></HIL><PDAT> and patient monitor </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT>, which are related to the anesthesia care event </PDAT><HIL><BOLD><PDAT>214</PDAT></BOLD></HIL><PDAT> are also associated with the anesthesia care event </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT>. In the example, the anesthesia drugs resource </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT> represents a pharmaceutical resource object, which contains certain information relevant to the specific drugs to be delivered, while the airway resource </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT> represent specific supplies to be used in the anesthesia care event object </PDAT><HIL><BOLD><PDAT>214</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>These two items, because they will be used together, are combined in a supply bundle container </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> which may be reused for other procedures, which include an anesthesia care event. The anesthesiologist resource </PDAT><HIL><BOLD><PDAT>228</PDAT></BOLD></HIL><PDAT> represents a personnel resource object and will contain information concerning the anesthesiologist, including identification, time to be allotted for the procedure and scheduling information. The patient monitor resource object </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT> represents an equipment resource, which contains information about its availability and utilization.</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>This process is repeated until each of the remaining care events </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>218</PDAT></BOLD></HIL><PDAT> for the procedural pathway is completed (a more complete description of a procedural pathway, including examples of multiple care events which have been completed is provided in the Description of an Exemplar Embodiment below). The user of the information system then has a software module </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> configured for the heart bypass procedural pathway, which consists of container, resource and data objects. Each of the software objects encapsulates information particular to that object and communicates that information via a standard interface to other software objects as such information is required.</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>For example, after constructing a particular procedural pathway module, the user might desire to schedule a procedure for a particular patient using the procedural pathway. By utilizing a node designed to manage information for individual cases, the user could select the appropriate procedural pathway module, which transfers the data from the procedural pathway module for that procedure into a case module. The case module then contains all of the information from the objects from the selected procedural pathway module and provides a ready listing of resources to be utilized in performing the procedure. With this information, schedules of supplies, equipment, etc. could be generated in order to facilitate the performance of the procedure.</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>Additionally, as will be described more fully hereinafter, by creating a case module, the user has available the case node functionality which allows for the tracking of resource utilization in performing the procedure and creation of a consumption record for use in analyzing resource utilization, generating cost information for cost recovery and allows the user to perform other case node specific functions. Also, to the extent that objects created in the procedural pathway have utility for other procedural pathways, the created objects may be reused to develop additional procedural pathways.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>As will be described in greater detail below, the various types of objects are predefined in the overall software system. Container objects are available to represent care events, supply bundles and conditional supply bundles. Each type of container may then be configured by the user to reflect the particulars of the procedural pathway to be represented. Care event containers will be configured with specific information for each care event in the procedural pathway and will contain information relevant to that care event. Supply bundles will be provisioned with supply resource objects and will have information specific to that supply bundle contained therein. Conditional supply bundles will be provisioned with supplies and a condition, which will determine if that conditional supply bundle will be used; for example, a conditional supply bundle may be developed for a particular surgeon and will have supplies used only by that surgeon provided therein. Then, if the condition is met when a case is scheduled, such as the particular surgeon is assigned to the case, that conditional bundle will automatically be added to the list of objects associated with that case.</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>Similarly, various types of resource objects are provided as standard templates for configuration by the user. Examples of such types of resource objects are supplies, kits (which are pre-packaged groups of supplies), equipment, personnel and pharmaceuticals. When configuring resource objects for a procedural pathway, the user selects the appropriate supply type for the resource to be represented and inputs the prompted information. For example, the user might be able to look up a database of listed supplies and select a particular supply for inclusion in the procedural pathway. Alternatively, the user could create a new supply from scratch by inputting prompted information to create a new supply resource object. The type of information varies from resource type to resource type, but a standard template is provided for each resource type to prompt the user to input the appropriate information for each resource to be added.</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>Additionally, while the user has the option to create various container, resource and data objects from scratch for use in the information system, the user, to the extent appropriate, can reuse previously created objects. For example, the user might create a library of standard pre-configured objects which are frequently re-used in various procedural pathways. Thus, when a new pathway is being created, these library objects may be selected for inclusion in the new pathway. Likewise, information concerning a variety of resources may be maintained in various database systems maintained by a health care institution. The supply department may maintain a database of available supplies, or dealers may provide databases of available supplies, by providing standard database program interfaces for these sources of information. Data from these source may then be automatically read into the present system in order to configure resource software objects for use therein.</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>As described, the use of software objects to represent events, bundles, resources and data objects in a health care information management system allows the user to readily create software modules which represent specific health care procedures which are much more functional then with traditional health care database systems. Furthermore, the module object approach to the system makes it more readily customizable for particular installations. For example, if the standard configuration of any software object is not readily adapted for a particular installation, a programmer will not be required to modify a monolithic source code listing to implement the new configuration. For customization, the user will only have to reconfigure a particular object. As long as the standardized data interface for the object is retained, there will not need to be any change in configuration in the remaining source code for the system.</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="0"><PTEXT><PDAT>Additionally, the use of the software object framework allows for the ready implementation of new functionality, without requiring the rewrite of the majority of the code for the system. For example, if a new functionality is required, a new functional node may be added which will utilize, to the extent possible, already existing software objects. One example might be to add a scheduling node to the above described software to allow for the ready scheduling of personnel, equipment, supplies, etc. Most of the scheduling information for any given procedure will be available in the procedural pathway module for that procedure. Thus, to create a scheduling node, the user creates a software object that queries existing objects for data relevant to scheduling and organizes that data in a useful manner. In the context of the present invention, such a node could create scheduling objects for various resources indicating their utilization schedule (as received from the object representing such resources) which would automatically query scheduled resources, check their availability and establish a calendar for each. Other functionality could be created by the creation of other nodes.</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="0"><PTEXT><PDAT>For example, the functionality of tracking resource utilization in the manner described in application Ser. No. 08/846,798, filed Apr. 30, 1997, entitled Method and System for the Tracking and Profiling of Supply Usage in a Health Care Environment, may be provided as a functional node software object. In implementing such a node, each individual procedural pathway as described in that application may be copied from a procedural pathway constructed as described above with reference to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2. A</PDAT></FGREF><PDAT> further type of node functionality is described in U.S. patent application Ser. No. 08/936,780, filed Sep. 24, 1997, entitled Method for the Analysis and Standardization of Bills of Resources, which provides from the conversion of case software module objects into models which could then be analyzed for resource utilization efficiency and the standardization of bills of resource. Furthermore, the output of the node functionality described in application Ser. No. 08/936,780, could then be used to create an optimized procedural pathway under the procedural pathway node described with reference to FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="0"><PTEXT><PDAT>The functionality described above is implemented in the Meridian&trade; information management system marketed by DeRoyal Business Systems, 200 DeBusk Lane, Powell, Tenn., 37849, which is an affiliate of the assignee hereof, DeRoyal Industries, Inc.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>Description of an Exemplar Embodiment</PDAT></STEXT></H>
<PARA ID="P-00060" LVL="0"><PTEXT><PDAT>The foregoing functionality may be best described with reference to the following exemplar embodiment. The exemplar embodiment is available as the Meridian&trade; software package available from the assignee hereof, DeRoyal Industries, Inc. The software of the exemplar embodiment hereof is preferably run under the Windows 95 or Windows NT operating systems and interfaces with a SQL compliant database such as Microsoft SQL/Server or Microsoft Access. Much of the information maintained by the exemplar embodiment described herein will be maintained in tables which are created and managed using the background database software.</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>Referring now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>, there is shown the Meridian&trade; Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>. The Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> is similar in appearance to the Windows Explorer window provided in the Windows 95 and Windows NT environments and maintains similar functionality. To the left of the window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> is a Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT>, which allows the user to see the Meridian&trade; nodes, depicted as folders, and other objects. In the top right of the window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> is a Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>, which provides similar functionality. The provision of the dual tree views </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> is to allow the user to move items from one location in the tree to another location, using drag and drop, in the event that the two locations are separated by more than one window&apos;s distance (in the instance where the source folder and destination folder are not both displayed in the same window). Furthermore, this dual tree view allows the user to look at different items at the same time. In the lower right hand side of the window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> is the List view </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT>, which displays the contents of whatever item is highlighted in the tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT> or </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>. It should be further noted that the mouse functionality of Windows 95 or Windows NT is maintained in the Meridian&trade; software; that is, the standard features of highlighting selected folders, files or objects, dragging and dropping and right clicking are retained.</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="0"><PTEXT><PDAT>At the top of the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> are drop down menus File </PDAT><HIL><BOLD><PDAT>258</PDAT></BOLD></HIL><PDAT>, Edit </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT>, view </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT>, Log </PDAT><HIL><BOLD><PDAT>264</PDAT></BOLD></HIL><PDAT>, Maintenance </PDAT><HIL><BOLD><PDAT>266</PDAT></BOLD></HIL><PDAT> and Help </PDAT><HIL><BOLD><PDAT>268</PDAT></BOLD></HIL><PDAT>. The File </PDAT><HIL><BOLD><PDAT>258</PDAT></BOLD></HIL><PDAT>, Edit </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT>, view </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT> and Help </PDAT><HIL><BOLD><PDAT>268</PDAT></BOLD></HIL><PDAT> drop down menus maintain the standard functionality of any Windows&trade; program with some Meridian&trade; specific features. The remaining drop down menus deal with functions specific to the exemplar embodiment.</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="0"><PTEXT><PDAT>Below the drop down menus is the Meridian&trade; tool bar </PDAT><HIL><BOLD><PDAT>270</PDAT></BOLD></HIL><PDAT> which is provisioned with buttons to allow shortcut implementation of common functions which are also provided in the drop down menus and other menus. However, the cut </PDAT><HIL><BOLD><PDAT>272</PDAT></BOLD></HIL><PDAT>, copy </PDAT><HIL><BOLD><PDAT>274</PDAT></BOLD></HIL><PDAT>, paste </PDAT><HIL><BOLD><PDAT>276</PDAT></BOLD></HIL><PDAT> and paste shortcut </PDAT><HIL><BOLD><PDAT>278</PDAT></BOLD></HIL><PDAT> buttons function in the standard Windows&trade; environment.</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="0"><PTEXT><PDAT>In the tree views </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>, the top level is the Meridian&trade;/RCL software itself </PDAT><HIL><BOLD><PDAT>280</PDAT></BOLD></HIL><PDAT>, under this level are functional nodes relating to various information management functions to be performed by the software. The nodes shown in this embodiment are Resource Plans </PDAT><HIL><BOLD><PDAT>282</PDAT></BOLD></HIL><PDAT>, Open Cases </PDAT><HIL><BOLD><PDAT>284</PDAT></BOLD></HIL><PDAT>, Closed Cases </PDAT><HIL><BOLD><PDAT>286</PDAT></BOLD></HIL><PDAT>, Standardization Reports </PDAT><HIL><BOLD><PDAT>288</PDAT></BOLD></HIL><PDAT>, Models </PDAT><HIL><BOLD><PDAT>290</PDAT></BOLD></HIL><PDAT> and Libraries </PDAT><HIL><BOLD><PDAT>292</PDAT></BOLD></HIL><PDAT>. Each node represents a different functionality or acts as a folder for storing various information. Functional nodes (as opposed to mere folders) are provided as software objects. In most cases, the function of the node software objects is to allow for the creation, management and maintenance of additional software objects which perform specific information management tasks.</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="0"><PTEXT><PDAT>Referring now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, the Resource Plans software node </PDAT><HIL><BOLD><PDAT>282</PDAT></BOLD></HIL><PDAT> is highlighted and its menu functions activated by a right click of the mouse. As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, by right clicking on the Resource Plans node </PDAT><HIL><BOLD><PDAT>282</PDAT></BOLD></HIL><PDAT>, the Resource Plans menu </PDAT><HIL><BOLD><PDAT>294</PDAT></BOLD></HIL><PDAT> is activated. The user may then select one of the menu functions, either New Pathway Folder </PDAT><HIL><BOLD><PDAT>296</PDAT></BOLD></HIL><PDAT> or New Pathway </PDAT><HIL><BOLD><PDAT>298</PDAT></BOLD></HIL><PDAT>, to activate a function. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, the user has selected the New Pathway Folder </PDAT><HIL><BOLD><PDAT>296</PDAT></BOLD></HIL><PDAT> function, depicted as inverted text.</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="0"><PTEXT><PDAT>Referring now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>, after the user has selected the New Pathway Folder function </PDAT><HIL><BOLD><PDAT>296</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, a Custom Folder window </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> is presented, which allows the user to enter the name for the new pathway folder. The name of the new folder is entered into the description window </PDAT><HIL><BOLD><PDAT>302</PDAT></BOLD></HIL><PDAT> and the user then selects the OK button </PDAT><HIL><BOLD><PDAT>304</PDAT></BOLD></HIL><PDAT> to finish the creation of the new folder.</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="0"><PTEXT><PDAT>Referring now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT>, it can be seen that the new Cardiac Procedures folder </PDAT><HIL><BOLD><PDAT>306</PDAT></BOLD></HIL><PDAT> has appeared under the Resource Plans node </PDAT><HIL><BOLD><PDAT>282</PDAT></BOLD></HIL><PDAT>. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT>, the user has right clicked on the Cardiac Procedures folder </PDAT><HIL><BOLD><PDAT>306</PDAT></BOLD></HIL><PDAT> and activated the Resource Plans node menu </PDAT><HIL><BOLD><PDAT>294</PDAT></BOLD></HIL><PDAT> and has selected the New Pathway function </PDAT><HIL><BOLD><PDAT>298</PDAT></BOLD></HIL><PDAT>, which will allow the user to create a new procedural pathway module software object.</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="0"><PTEXT><PDAT>In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT>, the Create New Resource Plan window </PDAT><HIL><BOLD><PDAT>307</PDAT></BOLD></HIL><PDAT> has appeared in response to the user selection of the New Pathway function </PDAT><HIL><BOLD><PDAT>298</PDAT></BOLD></HIL><PDAT> described in FIG. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>. The Create New Resource Plan window </PDAT><HIL><BOLD><PDAT>307</PDAT></BOLD></HIL><PDAT> prompts the user to input information concerning the software module to be created. In the Item No. field </PDAT><HIL><BOLD><PDAT>308</PDAT></BOLD></HIL><PDAT>, the user inputs the desired identifying number for the new pathway (or, alternatively, the software will provide the next number in sequence which has not yet been used). In the Description field </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT>, the user types in the desired description for the pathway. Other fields which may be completed are the Date Created field </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT> (the default date will be the current date) and the Created By field </PDAT><HIL><BOLD><PDAT>314</PDAT></BOLD></HIL><PDAT>. Finally, the Procedure Attributes field </PDAT><HIL><BOLD><PDAT>316</PDAT></BOLD></HIL><PDAT> is provided which will allow the user to select standardized procedure codes, such as the AMA IC9 code and description, for the procedure to be represented by the pathway.</PDAT></PTEXT></PARA>
<PARA ID="P-00069" LVL="0"><PTEXT><PDAT>This function is provided with a database search capability, by the Search button </PDAT><HIL><BOLD><PDAT>318</PDAT></BOLD></HIL><PDAT>, which allows the user to search a pre-configured procedure code database for the appropriate procedure information. The Remove button </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT> allows the user to remove selected procedure codes from the Procedure Attributes field </PDAT><HIL><BOLD><PDAT>316</PDAT></BOLD></HIL><PDAT> if an inappropriate selection is made. The OK button </PDAT><HIL><BOLD><PDAT>322</PDAT></BOLD></HIL><PDAT> allows the user to approve the input and exit the Create New Resource Plan window </PDAT><HIL><BOLD><PDAT>307</PDAT></BOLD></HIL><PDAT> while saving the information. The Cancel button </PDAT><HIL><BOLD><PDAT>324</PDAT></BOLD></HIL><PDAT> allows the user to exit the Create New Resource Plan window </PDAT><HIL><BOLD><PDAT>307</PDAT></BOLD></HIL><PDAT> without saving the information. The Apply button </PDAT><HIL><BOLD><PDAT>326</PDAT></BOLD></HIL><PDAT> serves to update database records concerning the new pathway upon activation. In the present case, the user, upon completion of the information, selects the OK button </PDAT><HIL><BOLD><PDAT>322</PDAT></BOLD></HIL><PDAT> to exit the Create Resource Plan window </PDAT><HIL><BOLD><PDAT>307</PDAT></BOLD></HIL><PDAT> and return to the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="0"><PTEXT><PDAT>Once the new procedure is added, an Open Heart icon </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> appears under the appropriate Cardiac Procedures folder </PDAT><HIL><BOLD><PDAT>306</PDAT></BOLD></HIL><PDAT> to indicate the new Open Heart procedural pathway software module as is seen in FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> the user has selected the Open Heart icon </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> and right clicked on the mouse to call up the Procedural pathway module menu </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT>, which provides functions related to the creation, management and maintenance of the various procedural pathway software modules created by the user. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> the user has selected the Add function </PDAT><HIL><BOLD><PDAT>332</PDAT></BOLD></HIL><PDAT> from the Procedural pathway module menu </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT>, which will allow the user to add items to the Open Heart procedural pathway </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="0"><PTEXT><PDAT>As described previously, using the procedural pathway paradigm, a medical procedure is broken down into a series of related care events. Typically, the user of the present invention first adds the various care events to the pathway software module and provisions them later. The following description provides a walk through of how to add various care event containers to the pathway.</PDAT></PTEXT></PARA>
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>Referring now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT>, the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT> appears in response to selecting the Add function </PDAT><HIL><BOLD><PDAT>332</PDAT></BOLD></HIL><PDAT> from the Procedural pathway module menu </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT>. The Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT> has Header Information </PDAT><HIL><BOLD><PDAT>336</PDAT></BOLD></HIL><PDAT> which provides the user with information specific to the procedural pathway module which is being maintained. The remaining portions of the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT> are devoted to the creation and searching of available container resources for addition to the procedural pathway module.</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="0"><PTEXT><PDAT>In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 10</PDAT></FGREF><PDAT>, the user has selected the designation of Containers in the Class field </PDAT><HIL><BOLD><PDAT>338</PDAT></BOLD></HIL><PDAT> and the designation of Care Event in the Item Type field </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT>, and selected the New function </PDAT><HIL><BOLD><PDAT>342</PDAT></BOLD></HIL><PDAT> (depicted in FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>). These selections cause the Create a Care Event window </PDAT><HIL><BOLD><PDAT>344</PDAT></BOLD></HIL><PDAT> to appear. The Create a Care Event window </PDAT><HIL><BOLD><PDAT>344</PDAT></BOLD></HIL><PDAT> allows the user to input information into the Item No. field </PDAT><HIL><BOLD><PDAT>346</PDAT></BOLD></HIL><PDAT>, Description field </PDAT><HIL><BOLD><PDAT>348</PDAT></BOLD></HIL><PDAT> and select the type of the new care event to be added to the procedural pathway module in the Type field </PDAT><HIL><BOLD><PDAT>350</PDAT></BOLD></HIL><PDAT>. As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11</PDAT></FGREF><PDAT>, the user has entered the appropriate information into the fields, and by selecting the OK button </PDAT><HIL><BOLD><PDAT>352</PDAT></BOLD></HIL><PDAT> may proceed.</PDAT></PTEXT></PARA>
<PARA ID="P-00074" LVL="0"><PTEXT><PDAT>After selecting the OK function </PDAT><HIL><BOLD><PDAT>352</PDAT></BOLD></HIL><PDAT>, the user is returned to the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT>, shown in FIG. </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>. As can be seen in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT>, the newly created open heart anesthesia care event information is provided in the Item No. field </PDAT><HIL><BOLD><PDAT>354</PDAT></BOLD></HIL><PDAT> and Description field </PDAT><HIL><BOLD><PDAT>356</PDAT></BOLD></HIL><PDAT>. Other user configurable fields, Quantity Consumed field </PDAT><HIL><BOLD><PDAT>358</PDAT></BOLD></HIL><PDAT> and C/P field </PDAT><HIL><BOLD><PDAT>360</PDAT></BOLD></HIL><PDAT> allow the user to select the number of the selected items which will appear in the component listing. By selecting the Add New Component button </PDAT><HIL><BOLD><PDAT>362</PDAT></BOLD></HIL><PDAT>, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 13</PDAT></FGREF><PDAT>, the Open Heart Anesthesia Care Event </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT> appears in the Component Listing field </PDAT><HIL><BOLD><PDAT>366</PDAT></BOLD></HIL><PDAT>, shown in FIG. </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>. This process may be repeated as required for new care events to provision the procedural pathway module.</PDAT></PTEXT></PARA>
<PARA ID="P-00075" LVL="0"><PTEXT><PDAT>As seen in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 15</PDAT></FGREF><PDAT>, an additional new care event called the Open Heart Operative Care Event may be created in the same manner by selecting the New button </PDAT><HIL><BOLD><PDAT>342</PDAT></BOLD></HIL><PDAT> in the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT> and entering the appropriate information in the Create a Care Event window </PDAT><HIL><BOLD><PDAT>344</PDAT></BOLD></HIL><PDAT>. This new care event can then be added to the Open Heart Procedural pathway </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> as described previously for the open heart anesthesia care event.</PDAT></PTEXT></PARA>
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>Each created care event is a software object of the container type. As such, each care event is a self contained module relating to the specific care event and is designed to hold additional container, resource and data objects relating to that particular care event. As a software object, once created, care events may be re-used where appropriate. For example, if the user has created a standard anesthesia care event, and desires to use it in other procedural pathway software modules, it may be selected and used without the step of creating a new care event. In fact, the user may create libraries of re-usable software objects which allow for the faster and easier creation of new procedural pathways.</PDAT></PTEXT></PARA>
<PARA ID="P-00077" LVL="0"><PTEXT><PDAT>Referring now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 16</PDAT></FGREF><PDAT>, the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> shows the Open Heart module </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> including the added Open Heart Anesthesia Care Event object </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT> and Open Heart Operative Care Event object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT>. In the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> the user has selected the Libraries node </PDAT><HIL><BOLD><PDAT>292</PDAT></BOLD></HIL><PDAT>, and the List view </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT> shows the items and subfolders available under the Libraries node </PDAT><HIL><BOLD><PDAT>292</PDAT></BOLD></HIL><PDAT>. Shown in the List view </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT> are subfolders for Resources </PDAT><HIL><BOLD><PDAT>374</PDAT></BOLD></HIL><PDAT> and Containers </PDAT><HIL><BOLD><PDAT>376</PDAT></BOLD></HIL><PDAT> and the Product Category Tree </PDAT><HIL><BOLD><PDAT>378</PDAT></BOLD></HIL><PDAT>, which is a hierarchical taxonomy of products classified by type. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 17</PDAT></FGREF><PDAT>, the Containers folder </PDAT><HIL><BOLD><PDAT>376</PDAT></BOLD></HIL><PDAT> is expanded to show additional subfolders of different types of containers: 1) Care Events </PDAT><HIL><BOLD><PDAT>380</PDAT></BOLD></HIL><PDAT>, 2) Conditional Bundles </PDAT><HIL><BOLD><PDAT>382</PDAT></BOLD></HIL><PDAT> and 3) Resource Bundles </PDAT><HIL><BOLD><PDAT>384</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 18</PDAT></FGREF><PDAT>, the Care Events subfolder </PDAT><HIL><BOLD><PDAT>380</PDAT></BOLD></HIL><PDAT> is expanded to show the pre-configured care event objects which are available. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 19</PDAT></FGREF><PDAT>, the user has selected the Pre-Operative Care event </PDAT><HIL><BOLD><PDAT>386</PDAT></BOLD></HIL><PDAT> for addition to the Open Heart procedural pathway </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT>. By dragging and dropping using the mouse, the user may copy the Pre-Operative Care Event </PDAT><HIL><BOLD><PDAT>386</PDAT></BOLD></HIL><PDAT> into the Open Heart procedural pathway </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> where it appears in FIG. </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT>. This procedure has allowed the user to select a pre-configured care event software object and add it to a procedural pathway module without requiring the creation of a new care event from scratch. The library of pre-configured software objects allows the user to maintain a set of re-usable objects representing standard items for inclusion in procedural pathways.</PDAT></PTEXT></PARA>
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 21</PDAT></FGREF><PDAT>, the user has selected the Open Heart procedural pathway </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> and called up the Procedural pathway module menu </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT> and selected the Resequence function </PDAT><HIL><BOLD><PDAT>388</PDAT></BOLD></HIL><PDAT>. This function allows the user to change the order of the items shown under the Open Heart procedural pathway </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT>. By selecting the Resequence function </PDAT><HIL><BOLD><PDAT>388</PDAT></BOLD></HIL><PDAT>, the user is presented with the Resequence Components window </PDAT><HIL><BOLD><PDAT>390</PDAT></BOLD></HIL><PDAT>, shown in FIG. </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>. This window </PDAT><HIL><BOLD><PDAT>390</PDAT></BOLD></HIL><PDAT> shows the items under the Open Heart procedural pathway </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> and by selecting the desired care event, such as the Pre-Operative Care Event </PDAT><HIL><BOLD><PDAT>386</PDAT></BOLD></HIL><PDAT>, and using the arrow keys to the right of the window </PDAT><HIL><BOLD><PDAT>390</PDAT></BOLD></HIL><PDAT> the user may move the selected care event </PDAT><HIL><BOLD><PDAT>386</PDAT></BOLD></HIL><PDAT> to the desired location, shown in FIG. </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>. Once the desired sequence is achieved, the user exits the Resequence Components window </PDAT><HIL><BOLD><PDAT>390</PDAT></BOLD></HIL><PDAT> by selecting the OK button </PDAT><HIL><BOLD><PDAT>394</PDAT></BOLD></HIL><PDAT>. As shown in the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 24</PDAT></FGREF><PDAT>, the new care event sequence has appeared under the Open Heart procedural pathway </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> with the Pre-Operative Care Event object </PDAT><HIL><BOLD><PDAT>386</PDAT></BOLD></HIL><PDAT> appearing first, followed by the Open Heart Anesthesia Care Event object </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT> and the Open Heart Operative Care Event object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>Containers may be added by using the database search functions of the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT> as well. Shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 25</PDAT></FGREF><PDAT>, the user has entered the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT> as previously described. The Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT> displays the care events which are added to the Open Heart procedural pathway </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> in the Component Listing field </PDAT><HIL><BOLD><PDAT>366</PDAT></BOLD></HIL><PDAT>. From the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT>, the user may search the database related to the information system to add components which have already been created, by selecting the Query mode button </PDAT><HIL><BOLD><PDAT>398</PDAT></BOLD></HIL><PDAT>. By selecting the class of the object in the Class field </PDAT><HIL><BOLD><PDAT>338</PDAT></BOLD></HIL><PDAT> and the item type of the object in the Item Type field </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT> the user may search the database for all objects having those attributes by selecting the Search button </PDAT><HIL><BOLD><PDAT>318</PDAT></BOLD></HIL><PDAT>. The results of the query appear in the Query Results window </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> shown in FIG. </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>The Query Results window </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> shows all objects which meet the search criteria entered into the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT>. The user may then highlight a desired object, in this case the Post Operative Care Event </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT>, in the Query Results window </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>, as shown in FIG. </PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT>. The user adds the desired Post Operative Care Event </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> by selecting the Add New Component button </PDAT><HIL><BOLD><PDAT>362</PDAT></BOLD></HIL><PDAT> as previously described. As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 28</PDAT></FGREF><PDAT>, the newly selected Post Operative Care Event </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> is then copied to the Open Heart Procedural pathway </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> and shows up in the Component Listing window </PDAT><HIL><BOLD><PDAT>366</PDAT></BOLD></HIL><PDAT>. As is seen in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 29</PDAT></FGREF><PDAT>, the new Post Operative Care Event </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> appears under the Open Heart procedural pathway </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>One of the features of the exemplar embodiment is the fact that each of the containers, resources and data software objects, once created, are reusable with other software module objects, or even other functional nodes. For example, in the previous description, the Pre-Operative Care Event </PDAT><HIL><BOLD><PDAT>386</PDAT></BOLD></HIL><PDAT> and the Post Operative Care Event </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> each maintain their contained information upon addition to the Open Heart Procedural pathway </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 30 and 31</PDAT></FGREF><PDAT>, the Post Operative Care Event </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> is expanded to show its contents. Unlike the Open Heart Anesthesia Care Event </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT> and the Open Heart Operative Care Event </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT>, since the Post Operative Care Event </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> is retrieved from the list of pre-configured care events </PDAT><HIL><BOLD><PDAT>380</PDAT></BOLD></HIL><PDAT> in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>, it has contents that were added at the time that this care event was created. Shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 30</PDAT></FGREF><PDAT> is an expanded view of the Post Operative Care Event </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> showing its contents, which include three bundle container objects, the Dealer Supply Bundle </PDAT><HIL><BOLD><PDAT>408</PDAT></BOLD></HIL><PDAT>, the Pharmacy Supply Bundle </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> and the Personnel bundle </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT>. Each of these container objects, as will be described later, are configured by the user to group resource objects, which are commonly used together.</PDAT></PTEXT></PARA>
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 31</PDAT></FGREF><PDAT>, the various bundles </PDAT><HIL><BOLD><PDAT>408</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT> are expanded to show their contents. The Dealer Supply Bundle </PDAT><HIL><BOLD><PDAT>408</PDAT></BOLD></HIL><PDAT> contains a Warming Blanket resource object </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT>, the Pharmacy Supply Bundle </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> contains a pharmacy resource object </PDAT><HIL><BOLD><PDAT>416</PDAT></BOLD></HIL><PDAT>, which is a 30 milligram tablet of Percocet, and the Personnel bundle </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT> contains a Post Operative Nurse personnel resource object </PDAT><HIL><BOLD><PDAT>418</PDAT></BOLD></HIL><PDAT>. The objects that form the content of the Post Operative Care Event </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> all maintain their original contents from their creation by the user, and by copying the care event container to the Open Heart Procedural pathway object </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT>, the contents of the container are included as well.</PDAT></PTEXT></PARA>
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>With respect to created care event containers, once the container objects are created, the user then populates the containers with other container, resource and data objects related to the particular care event. Referring now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 32</PDAT></FGREF><PDAT>, the user has selected the Open Heart Anesthesia Care Event object </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT> and right clicked to call up the Care Event Menu </PDAT><HIL><BOLD><PDAT>420</PDAT></BOLD></HIL><PDAT> and has selected the Add function </PDAT><HIL><BOLD><PDAT>422</PDAT></BOLD></HIL><PDAT>. This function will allow the user to add other objects to the selected care event container. As is shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 33</PDAT></FGREF><PDAT>, selecting the Add function </PDAT><HIL><BOLD><PDAT>422</PDAT></BOLD></HIL><PDAT> from the Care Event Menu </PDAT><HIL><BOLD><PDAT>420</PDAT></BOLD></HIL><PDAT> will provide the user with the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT>. Previously, this window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT> was described with respect to the Open Heart Procedural pathway </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT>. Since the Open Heart Anesthesia Care Event object </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT> was selected at the time the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT> was opened, the Open Heart Anesthesia Care Event object </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT> information is reflected in the Header Information </PDAT><HIL><BOLD><PDAT>336</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>In this example of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 33</PDAT></FGREF><PDAT>, the user has selected the class type of Containers in the Class field </PDAT><HIL><BOLD><PDAT>338</PDAT></BOLD></HIL><PDAT> and the item type of Bundle in the Item Type field </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT>. The user then selects the New button </PDAT><HIL><BOLD><PDAT>342</PDAT></BOLD></HIL><PDAT> which causes the Create New Bundle window </PDAT><HIL><BOLD><PDAT>424</PDAT></BOLD></HIL><PDAT> to appear. This window </PDAT><HIL><BOLD><PDAT>424</PDAT></BOLD></HIL><PDAT> allows the user to create a new bundle container object to hold other related objects. In the example, the user provides the item number and the bundle description in the Item No. field </PDAT><HIL><BOLD><PDAT>426</PDAT></BOLD></HIL><PDAT> and Description field </PDAT><HIL><BOLD><PDAT>428</PDAT></BOLD></HIL><PDAT>, and by selecting the OK button </PDAT><HIL><BOLD><PDAT>430</PDAT></BOLD></HIL><PDAT> creates the new bundle object. As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 34</PDAT></FGREF><PDAT>, the Open Heart Anesthesia Supplies bundle object </PDAT><HIL><BOLD><PDAT>432</PDAT></BOLD></HIL><PDAT> appears in the Component Listing field </PDAT><HIL><BOLD><PDAT>366</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00087" LVL="0"><PTEXT><PDAT>Referring now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 35</PDAT></FGREF><PDAT>, once the new Open Heart Anesthesia Supplies bundle object </PDAT><HIL><BOLD><PDAT>432</PDAT></BOLD></HIL><PDAT> is created and added to the Open Heart Anesthesia Care Event container object </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT>, the new bundle object </PDAT><HIL><BOLD><PDAT>432</PDAT></BOLD></HIL><PDAT> appears under the care event object </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT> in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT> of the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>, By selecting the Open Heart Anesthesia Supplies bundle object </PDAT><HIL><BOLD><PDAT>432</PDAT></BOLD></HIL><PDAT> and right clicking, the user can call up the Bundle Object Menu </PDAT><HIL><BOLD><PDAT>434</PDAT></BOLD></HIL><PDAT> in order to maintain the bundle object </PDAT><HIL><BOLD><PDAT>432</PDAT></BOLD></HIL><PDAT>. In the example of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 35</PDAT></FGREF><PDAT>, the user selects the Add function </PDAT><HIL><BOLD><PDAT>436</PDAT></BOLD></HIL><PDAT>, which allows the user to maintain the contents of the Open Heart Anesthesia Supplies bundle object </PDAT><HIL><BOLD><PDAT>432</PDAT></BOLD></HIL><PDAT>. Selecting the Add function </PDAT><HIL><BOLD><PDAT>436</PDAT></BOLD></HIL><PDAT> calls up the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT>, with the Header Information </PDAT><HIL><BOLD><PDAT>336</PDAT></BOLD></HIL><PDAT> reflecting the maintenance of the Open Heart Anesthesia Supplies bundle object </PDAT><HIL><BOLD><PDAT>432</PDAT></BOLD></HIL><PDAT>, as shown in the Description field </PDAT><HIL><BOLD><PDAT>348</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>36</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00088" LVL="0"><PTEXT><PDAT>The user may then proceed with provisioning the bundle object </PDAT><HIL><BOLD><PDAT>432</PDAT></BOLD></HIL><PDAT> with resource objects relating to the provision of anesthesia in the open heart procedure. In the example of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 36</PDAT></FGREF><PDAT>, the user has selected the class of objects as resources in the Class field </PDAT><HIL><BOLD><PDAT>338</PDAT></BOLD></HIL><PDAT> and the item type of equipment in the Item Type field </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT>. By selecting the Query mode button </PDAT><HIL><BOLD><PDAT>398</PDAT></BOLD></HIL><PDAT> and selecting the Search button </PDAT><HIL><BOLD><PDAT>318</PDAT></BOLD></HIL><PDAT> the user retrieves a list of all previously created equipment resource objects, which allows the user to utilize pre-configured equipment resource objects in the Open Heart Anesthesia Supplies bundle object </PDAT><HIL><BOLD><PDAT>432</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00089" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 37</PDAT></FGREF><PDAT> shows the results of the database search in the Query Results window </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>. By selecting the desired equipment object, in this case a General Anesthesia Unit </PDAT><HIL><BOLD><PDAT>438</PDAT></BOLD></HIL><PDAT>, the relevant information will appear in the Item No. field </PDAT><HIL><BOLD><PDAT>354</PDAT></BOLD></HIL><PDAT> and Description field </PDAT><HIL><BOLD><PDAT>356</PDAT></BOLD></HIL><PDAT> in the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT>. By then selecting the Add New Component button </PDAT><HIL><BOLD><PDAT>362</PDAT></BOLD></HIL><PDAT> the General Anesthesia Unit object </PDAT><HIL><BOLD><PDAT>438</PDAT></BOLD></HIL><PDAT> will appear in the Component Listing field </PDAT><HIL><BOLD><PDAT>366</PDAT></BOLD></HIL><PDAT>, as shown in FIG. </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00090" LVL="0"><PTEXT><PDAT>Referring now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 39</PDAT></FGREF><PDAT> the addition of other objects to the Open Heart Anesthesia supplies bundle container object </PDAT><HIL><BOLD><PDAT>432</PDAT></BOLD></HIL><PDAT> will be described. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 39</PDAT></FGREF><PDAT> the Item Type field </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT> and the supplies object type are selected. Clicking on the New button </PDAT><HIL><BOLD><PDAT>342</PDAT></BOLD></HIL><PDAT> brings up the supply object Default Information window </PDAT><HIL><BOLD><PDAT>440</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT>. In this window </PDAT><HIL><BOLD><PDAT>440</PDAT></BOLD></HIL><PDAT> the desired supply object can be called up by either entering an existing supply object item number in the Item Number field </PDAT><HIL><BOLD><PDAT>442</PDAT></BOLD></HIL><PDAT>, or entering an existing supply object description in the Description field </PDAT><HIL><BOLD><PDAT>444</PDAT></BOLD></HIL><PDAT>. Alternately, a new item number is entered or automatically assigned in the Item Number field </PDAT><HIL><BOLD><PDAT>442</PDAT></BOLD></HIL><PDAT>, and the name of a new supply object is entered into the Description field </PDAT><HIL><BOLD><PDAT>444</PDAT></BOLD></HIL><PDAT>. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 40</PDAT></FGREF><PDAT>, the new supply object is given the name of &ldquo;Anesthesia Prep Kit,&rdquo; which is entered into the Description field </PDAT><HIL><BOLD><PDAT>444</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00091" LVL="0"><PTEXT><PDAT>The information management system of the exemplar embodiment automatically prompts the user for all of the information necessary and desirable to fully specify the new supply object. The windows to provide this information are invoked by the user by pressing the Next button </PDAT><HIL><BOLD><PDAT>446</PDAT></BOLD></HIL><PDAT>, which causes the display of the Inventory Information window </PDAT><HIL><BOLD><PDAT>448</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>41</PDAT></BOLD></HIL><PDAT>. The item number and description of the supply object are automatically carried forward from the Default Information window </PDAT><HIL><BOLD><PDAT>440</PDAT></BOLD></HIL><PDAT>, depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 40</PDAT></FGREF><PDAT>, to the Inventory Information window </PDAT><HIL><BOLD><PDAT>448</PDAT></BOLD></HIL><PDAT>, depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 41</PDAT></FGREF><PDAT>, and are displayed within the persistent Item Number field </PDAT><HIL><BOLD><PDAT>442</PDAT></BOLD></HIL><PDAT> and Description field </PDAT><HIL><BOLD><PDAT>444</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00092" LVL="0"><PTEXT><PDAT>The management information system user may enter specific inventory management information about the supply object using the Inventory Information window </PDAT><HIL><BOLD><PDAT>448</PDAT></BOLD></HIL><PDAT>. For example, a patient charge number and catalog number may be entered, as well as other information that may be necessary for the proper tracking of the supply object. The Inventory Information window </PDAT><HIL><BOLD><PDAT>448</PDAT></BOLD></HIL><PDAT> also displays other information about the supply object, which information cannot be edited by the user at this point. However, if the information is already entered, it is displayed in the Inventory Information window </PDAT><HIL><BOLD><PDAT>448</PDAT></BOLD></HIL><PDAT>. When the desired user editable information has been entered into the Inventory Information window </PDAT><HIL><BOLD><PDAT>448</PDAT></BOLD></HIL><PDAT>, the user proceeds by pressing the Next button </PDAT><HIL><BOLD><PDAT>450</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00093" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 42</PDAT></FGREF><PDAT> depicts the Secondary Information window </PDAT><HIL><BOLD><PDAT>452</PDAT></BOLD></HIL><PDAT>, in which further information about the supply object is entered. For example, a short description of the supply object may be entered. If the supply object has a shelf life, the inactive date of the supply object may also be entered. Other inventory tracking information, such as storage location, cost center, department, site, and other information may also be entered. When the user has entered all of the desired information into the Secondary Information window </PDAT><HIL><BOLD><PDAT>452</PDAT></BOLD></HIL><PDAT>, the data entry process for the supply object is resumed by pressing the Next button </PDAT><HIL><BOLD><PDAT>454</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00094" LVL="0"><PTEXT><PDAT>The next step of data entry for the supply object in the exemplar embodiment is depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 43</PDAT></FGREF><PDAT>, in which the Hospital Cost History window </PDAT><HIL><BOLD><PDAT>456</PDAT></BOLD></HIL><PDAT> is displayed. In this window, information as to the cost to the hospital of purchasing the supply object is entered. When this information has been entered, the user continues the data entry process for the supply object by pressing the Next button </PDAT><HIL><BOLD><PDAT>458</PDAT></BOLD></HIL><PDAT>, which brings up the Patient Cost History window </PDAT><HIL><BOLD><PDAT>460</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT>. In this window, information as to the cost to the patient of purchasing the supply object is entered. Thus, by using the data entered on these two windows, the user is able to track the cost of specific supply objects used in the various procedures developed and specify at what cost the supply objects will be billed out to the patients who use them.</PDAT></PTEXT></PARA>
<PARA ID="P-00095" LVL="0"><PTEXT><PDAT>Data entry for the supply object is completed by pressing the Finish button </PDAT><HIL><BOLD><PDAT>462</PDAT></BOLD></HIL><PDAT>, which redisplays the Default Information window </PDAT><HIL><BOLD><PDAT>440</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>45</PDAT></BOLD></HIL><PDAT>. The Anesthesia Prep Kit supply object is then added to the Open Heart Anesthesia Supplies Bundle container object </PDAT><HIL><BOLD><PDAT>432</PDAT></BOLD></HIL><PDAT> by pressing the Finish button </PDAT><HIL><BOLD><PDAT>464</PDAT></BOLD></HIL><PDAT>. The completed Anesthesia Prep Kit supply object </PDAT><HIL><BOLD><PDAT>466</PDAT></BOLD></HIL><PDAT> is displayed in the Component Listing field </PDAT><HIL><BOLD><PDAT>366</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>. Returning to the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 47</PDAT></FGREF><PDAT>, the two new supply objects </PDAT><HIL><BOLD><PDAT>438</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>466</PDAT></BOLD></HIL><PDAT> are displayed under the Open Heart Anesthesia Supplies container object </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00096" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 48</PDAT></FGREF><PDAT> depicts the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT> for the Open Heart Anesthesia Care Event </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT>. The Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT> has been opened from the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> as described several times above, the procedure for which will not be rehearsed at this point. The next series of figures depicts the creation of a new bundle object, which is to be made a part of the Open Heart Anesthesia Care Event </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT>. This process is initiated by selecting the Containers class within the Class field </PDAT><HIL><BOLD><PDAT>338</PDAT></BOLD></HIL><PDAT> and the Bundle type within the Item Type field </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT>, and pressing the New button </PDAT><HIL><BOLD><PDAT>342</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00097" LVL="0"><PTEXT><PDAT>This action causes the display of the Create New Bundle window </PDAT><HIL><BOLD><PDAT>424</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>49</PDAT></BOLD></HIL><PDAT>. As previously described, the Item Number field </PDAT><HIL><BOLD><PDAT>426</PDAT></BOLD></HIL><PDAT> initially contains an automatically assigned item number or, alternately, a new or existing item number can be entered, which will either create a new bundle object or pull up an existing bundle object, as described above at length. In the example of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 49</PDAT></FGREF><PDAT>, the automatically assigned new item number is displayed in the Item Number field </PDAT><HIL><BOLD><PDAT>426</PDAT></BOLD></HIL><PDAT>, and the new bundle object is given the name of &ldquo;Dr. Anderson Open Heart&rdquo; in the Description field </PDAT><HIL><BOLD><PDAT>428</PDAT></BOLD></HIL><PDAT>. Thus, the new bundle object to be created is a bundle object that is specific to a specific doctor, and may contain the items which this doctor desires to have for the specified procedure.</PDAT></PTEXT></PARA>
<PARA ID="P-00098" LVL="0"><PTEXT><PDAT>Therefore, the information management system of the exemplar embodiment provides for the preferences of individual doctors. For example, the supplies which are common to all doctors may be put into one bundle object for a given procedure, and then the additional and varying supplies that may be requested by various doctors may be provided in additional bundle objects that are specific to each doctor. Of course, this is just one example of how the information management system adapts to the particular needs and procedures of a hospital, and the user of the information management system may adapt the system according to the various methods described above as suits him best.</PDAT></PTEXT></PARA>
<PARA ID="P-00099" LVL="0"><PTEXT><PDAT>The newly described bundle object is created by pressing the OK button </PDAT><HIL><BOLD><PDAT>430</PDAT></BOLD></HIL><PDAT>, which enters the item number for the bundle object in the Item Number field </PDAT><HIL><BOLD><PDAT>354</PDAT></BOLD></HIL><PDAT> and the name of the bundle object in the Description field </PDAT><HIL><BOLD><PDAT>356</PDAT></BOLD></HIL><PDAT> of the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>. The Add New Component button </PDAT><HIL><BOLD><PDAT>362</PDAT></BOLD></HIL><PDAT> is pressed as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 51</PDAT></FGREF><PDAT>, and the Dr. Anderson Open Heart bundle object </PDAT><HIL><BOLD><PDAT>468</PDAT></BOLD></HIL><PDAT> is entered into the Component Listing field </PDAT><HIL><BOLD><PDAT>366</PDAT></BOLD></HIL><PDAT> of the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT>. By pressing the Close button </PDAT><HIL><BOLD><PDAT>469</PDAT></BOLD></HIL><PDAT> the user is returned to the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 53</PDAT></FGREF><PDAT>, where the newly created Dr. Anderson Open Heart bundle object </PDAT><HIL><BOLD><PDAT>468</PDAT></BOLD></HIL><PDAT> is depicted as an element of the Open Heart Anesthesia Care Event </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT> of the Open Heart procedural pathway </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00100" LVL="0"><PTEXT><PDAT>Specific items, such as those required by &ldquo;Dr. Anderson,&rdquo; are added to the Dr. Anderson Open Heart bundle object </PDAT><HIL><BOLD><PDAT>468</PDAT></BOLD></HIL><PDAT> by right clicking on the Dr. Anderson Open Heart bundle object </PDAT><HIL><BOLD><PDAT>468</PDAT></BOLD></HIL><PDAT>, which brings up the Bundle menu </PDAT><HIL><BOLD><PDAT>470</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT>. By selecting the Add function </PDAT><HIL><BOLD><PDAT>472</PDAT></BOLD></HIL><PDAT>, the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT> is displayed, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT>. Thus, the next series of figures depicts how specific supplies are added to the bundle object that was created.</PDAT></PTEXT></PARA>
<PARA ID="P-00101" LVL="0"><PTEXT><PDAT>In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 56</PDAT></FGREF><PDAT> the Resources class has been entered into the Class field </PDAT><HIL><BOLD><PDAT>338</PDAT></BOLD></HIL><PDAT> and the Supplies item type has been entered into the Item Type field </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT>. Further, the word &ldquo;Suture&rdquo; has been entered by the user into the Description field </PDAT><HIL><BOLD><PDAT>348</PDAT></BOLD></HIL><PDAT>. By depressing the Query Mode button </PDAT><HIL><BOLD><PDAT>398</PDAT></BOLD></HIL><PDAT>, the Search button </PDAT><HIL><BOLD><PDAT>318</PDAT></BOLD></HIL><PDAT> is enabled. By then pressing the Search button </PDAT><HIL><BOLD><PDAT>318</PDAT></BOLD></HIL><PDAT>, a search is activated which will search for all previously existing supply objects that contain the word &ldquo;suture&rdquo; in their assigned descriptions.</PDAT></PTEXT></PARA>
<PARA ID="P-00102" LVL="0"><PTEXT><PDAT>The results of the search are displayed in the Query Results window </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>57</PDAT></BOLD></HIL><PDAT>. In this example, the Suture Ethilon 5-0 P-3 BLK </PDAT><HIL><BOLD><PDAT>474</PDAT></BOLD></HIL><PDAT> is selected. This Suture </PDAT><HIL><BOLD><PDAT>474</PDAT></BOLD></HIL><PDAT> is added to the bundle object by pressing the Add New Component button </PDAT><HIL><BOLD><PDAT>362</PDAT></BOLD></HIL><PDAT> in the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT>, which enters the Suture </PDAT><HIL><BOLD><PDAT>474</PDAT></BOLD></HIL><PDAT> into the Component Listing field </PDAT><HIL><BOLD><PDAT>366</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>58</PDAT></BOLD></HIL><PDAT>. Additional sutures may also be selected from the Query Results window </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>, such as the Suture Ethilon 3/0 PSL NDL </PDAT><HIL><BOLD><PDAT>476</PDAT></BOLD></HIL><PDAT>, which is also added to the Component Listing field </PDAT><HIL><BOLD><PDAT>366</PDAT></BOLD></HIL><PDAT> by pressing the Add New Component button </PDAT><HIL><BOLD><PDAT>362</PDAT></BOLD></HIL><PDAT> as described above. The Query Results window </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> is closed by pressing the Close button </PDAT><HIL><BOLD><PDAT>477</PDAT></BOLD></HIL><PDAT>, and the two sutures </PDAT><HIL><BOLD><PDAT>474</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>476</PDAT></BOLD></HIL><PDAT> are displayed in the Component Listing field </PDAT><HIL><BOLD><PDAT>366</PDAT></BOLD></HIL><PDAT> as depicted in FIG. </PDAT><HIL><BOLD><PDAT>59</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00103" LVL="0"><PTEXT><PDAT>Beginning with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 60</PDAT></FGREF><PDAT>, the steps for adding a personnel resource object to the Open Heart Anesthesia Care Event object </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT> are described. As described above, the Open Heart Anesthesia Care Event object </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT> is selected from the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>, the Care Event menu </PDAT><HIL><BOLD><PDAT>420</PDAT></BOLD></HIL><PDAT> is invoked by right clicking, the Add function </PDAT><HIL><BOLD><PDAT>422</PDAT></BOLD></HIL><PDAT> is selected, and the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT> is displayed, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00104" LVL="0"><PTEXT><PDAT>The Component Listing field </PDAT><HIL><BOLD><PDAT>366</PDAT></BOLD></HIL><PDAT> displays the Open Heart Anesthesia Supplies bundle object </PDAT><HIL><BOLD><PDAT>432</PDAT></BOLD></HIL><PDAT> and the Dr. Anderson Open Heart supply bundle object </PDAT><HIL><BOLD><PDAT>468</PDAT></BOLD></HIL><PDAT> previously created. The Resources class is selected in the Class field </PDAT><HIL><BOLD><PDAT>338</PDAT></BOLD></HIL><PDAT> and the personnel item type is selected in the Item Type field </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT>. By pressing the New button </PDAT><HIL><BOLD><PDAT>342</PDAT></BOLD></HIL><PDAT>, the Default Information window </PDAT><HIL><BOLD><PDAT>478</PDAT></BOLD></HIL><PDAT> is displayed, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00105" LVL="0"><PTEXT><PDAT>As described above, a new default value for the item number is automatically presented in the Item Number field </PDAT><HIL><BOLD><PDAT>479</PDAT></BOLD></HIL><PDAT>, and the user may enter a name for the new personnel resource object in the Description field </PDAT><HIL><BOLD><PDAT>481</PDAT></BOLD></HIL><PDAT>. In this example, the new personnel resource object is given the name of Anesthesia Tech. Other information may also be entered into the Default Information window </PDAT><HIL><BOLD><PDAT>478</PDAT></BOLD></HIL><PDAT>, such as the amount of time that should be scheduled for the anesthesia technician to perform the care event being defined in the pathway. The entry of information is continued by pressing the Next button </PDAT><HIL><BOLD><PDAT>480</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00106" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 62</PDAT></FGREF><PDAT> depicts the Inventory Information window </PDAT><HIL><BOLD><PDAT>482</PDAT></BOLD></HIL><PDAT>. As before, the item number assigned and the description entered are carried along through the various windows in the Item Number field </PDAT><HIL><BOLD><PDAT>479</PDAT></BOLD></HIL><PDAT> and the Description field </PDAT><HIL><BOLD><PDAT>481</PDAT></BOLD></HIL><PDAT>, respectively. In the Inventory Information window </PDAT><HIL><BOLD><PDAT>482</PDAT></BOLD></HIL><PDAT>, additional information relative to the proper and orderly inventory management of the described personnel resource is entered, such as a patient charge number and a catalog number. The entry of information is continued by pressing the Next button </PDAT><HIL><BOLD><PDAT>484</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00107" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 63</PDAT></FGREF><PDAT> depicts the Secondary Information window </PDAT><HIL><BOLD><PDAT>486</PDAT></BOLD></HIL><PDAT>, in which other information relative to the personnel object being defined is entered. The information entry process is continued by pressing the Next button </PDAT><HIL><BOLD><PDAT>488</PDAT></BOLD></HIL><PDAT>, which displays the Hospital Cost History window </PDAT><HIL><BOLD><PDAT>490</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>. In this window, information relative to the cost to the hospital of the personnel resource object is entered. Pressing the Next button </PDAT><HIL><BOLD><PDAT>492</PDAT></BOLD></HIL><PDAT> continues the data entry process.</PDAT></PTEXT></PARA>
<PARA ID="P-00108" LVL="0"><PTEXT><PDAT>The Patient Cost History window </PDAT><HIL><BOLD><PDAT>494</PDAT></BOLD></HIL><PDAT> is next displayed, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT>. As described above, the Patient Cost History window </PDAT><HIL><BOLD><PDAT>494</PDAT></BOLD></HIL><PDAT> allows the information management system user to enter information about the personnel resource object relative to the billing rate of the resource or, in other words, the amount that the hospital will charge the patient for the consumed resource.</PDAT></PTEXT></PARA>
<PARA ID="P-00109" LVL="0"><PTEXT><PDAT>The data entry process is completed by pressing the Finish button </PDAT><HIL><BOLD><PDAT>496</PDAT></BOLD></HIL><PDAT>, which returns the user to the Default Information window </PDAT><HIL><BOLD><PDAT>478</PDAT></BOLD></HIL><PDAT>, depicted in FIG. </PDAT><HIL><BOLD><PDAT>66</PDAT></BOLD></HIL><PDAT>. Pressing the Finish button </PDAT><HIL><BOLD><PDAT>498</PDAT></BOLD></HIL><PDAT> returns the user to the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>67</PDAT></BOLD></HIL><PDAT>. In the Maintain Container Resource window </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT>, the newly created Anesthesia Tech personnel resource object </PDAT><HIL><BOLD><PDAT>500</PDAT></BOLD></HIL><PDAT> is now listed in the Component Listing field </PDAT><HIL><BOLD><PDAT>366</PDAT></BOLD></HIL><PDAT>. Pressing the Close button </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT> returns the user to the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00110" LVL="0"><PTEXT><PDAT>Beginning with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 68</PDAT></FGREF><PDAT>, methods of adding objects that have already been defined to container objects are described. In a first method of adding predefined objects, the Query button </PDAT><HIL><BOLD><PDAT>506</PDAT></BOLD></HIL><PDAT> on the Tool Bar </PDAT><HIL><BOLD><PDAT>270</PDAT></BOLD></HIL><PDAT> is pressed, bringing up the Query window </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT>. The Query window </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT> is used to initiate searches on predefined objects located within the Libraries folder </PDAT><HIL><BOLD><PDAT>292</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00111" LVL="0"><PTEXT><PDAT>As depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 69</PDAT></FGREF><PDAT>, the query operation can be restricted in a variety of different ways. For example, typing a specific item number into the Item field </PDAT><HIL><BOLD><PDAT>516</PDAT></BOLD></HIL><PDAT> will search for a specific item number. In addition, the Query Operators </PDAT><HIL><BOLD><PDAT>518</PDAT></BOLD></HIL><PDAT> are used in association with the item number typed into the Item field </PDAT><HIL><BOLD><PDAT>516</PDAT></BOLD></HIL><PDAT>, or any of the other fields mentioned below, to enable greater flexibility in the query operation. For example, the wildcard character &ldquo;%&rdquo; is used to represent any value that is within the position where the wildcard character is placed. Thus, performing a query on the item number 12345% finds item numbers 123450-123459. The wildcard character can be placed in other positions within the item number as well, and can also be placed in multiple positions within a single item number. Other Query Operators </PDAT><HIL><BOLD><PDAT>518</PDAT></BOLD></HIL><PDAT> include a Greater Than operator &ldquo;&gt;&rdquo; that returns all item numbers greater than the item number entered, and a Less Than operator &ldquo;&lt;&rdquo; that returns all item numbers less than the item number entered.</PDAT></PTEXT></PARA>
<PARA ID="P-00112" LVL="0"><PTEXT><PDAT>The query operation can also be restricted by the description of the object, which is entered in the Description field </PDAT><HIL><BOLD><PDAT>514</PDAT></BOLD></HIL><PDAT>, the class of the object, which is entered in the Class field </PDAT><HIL><BOLD><PDAT>508</PDAT></BOLD></HIL><PDAT>, or the type of the object, which is entered in the Type field </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT>. As mentioned above, the Query Operators </PDAT><HIL><BOLD><PDAT>518</PDAT></BOLD></HIL><PDAT> are used in conjunction with any or all of these fields. In addition, query restrictions may be entered within several of the fields described, providing a wide breadth of ability to finely restrict the query operation to just those objects desired.</PDAT></PTEXT></PARA>
<PARA ID="P-00113" LVL="0"><PTEXT><PDAT>In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 69</PDAT></FGREF><PDAT>, two query criteria have been entered into the Query window </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT>. The class of the objects for which the query is being performed is restricted to the resources class by selecting Resources from the drop down menu within the Class field </PDAT><HIL><BOLD><PDAT>508</PDAT></BOLD></HIL><PDAT>. In addition, the type of the objects for which the query is being performed is restricted to the personnel class by selecting Personnel from the drop down menu within the Type field </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT>. When the desired query criteria have been entered, the query operation is initiated by pressing the Query button </PDAT><HIL><BOLD><PDAT>512</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00114" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 70</PDAT></FGREF><PDAT> depicts the Query Results window </PDAT><HIL><BOLD><PDAT>520</PDAT></BOLD></HIL><PDAT>, from which two objects, the Scrub Nurse personnel resource object </PDAT><HIL><BOLD><PDAT>522</PDAT></BOLD></HIL><PDAT> and the Circulating Nurse personnel resource object </PDAT><HIL><BOLD><PDAT>524</PDAT></BOLD></HIL><PDAT>, are selected as depicted in FIG. </PDAT><HIL><BOLD><PDAT>71</PDAT></BOLD></HIL><PDAT>. Pressing the OK button </PDAT><HIL><BOLD><PDAT>526</PDAT></BOLD></HIL><PDAT> confirms the addition of the selected objects to the container object previously selected in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT>. By pressing the OK button </PDAT><HIL><BOLD><PDAT>526</PDAT></BOLD></HIL><PDAT>, the Referenced Item window </PDAT><HIL><BOLD><PDAT>528</PDAT></BOLD></HIL><PDAT> is invoked, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 72</PDAT></FGREF><PDAT>, and the user is given the opportunity to add the selected objects as either custom or standard objects to the previously selected container object.</PDAT></PTEXT></PARA>
<PARA ID="P-00115" LVL="0"><PTEXT><PDAT>By pressing the Yes button </PDAT><HIL><BOLD><PDAT>530</PDAT></BOLD></HIL><PDAT>, the selected objects are added as standard objects to the container. When added in this manner, any changes made to the general template for the selected objects will be reflected in the objects as they reside within the container to which they have been added. By pressing the No button </PDAT><HIL><BOLD><PDAT>532</PDAT></BOLD></HIL><PDAT>, the selected objects are added as custom objects to the container. When added in this manner, any changes made to the general template for the selected objects will not be reflected in the objects as they reside within the container to which they have been added. By pressing the Cancel button </PDAT><HIL><BOLD><PDAT>534</PDAT></BOLD></HIL><PDAT>, the operation of adding the selected objects to the container is cancelled.</PDAT></PTEXT></PARA>
<PARA ID="P-00116" LVL="0"><PTEXT><PDAT>In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 72</PDAT></FGREF><PDAT>, the Yes button </PDAT><HIL><BOLD><PDAT>530</PDAT></BOLD></HIL><PDAT> of the Referenced Item window </PDAT><HIL><BOLD><PDAT>528</PDAT></BOLD></HIL><PDAT> is pressed, which causes the display of the Enter In Quantity window </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>73</PDAT></BOLD></HIL><PDAT>. In the Enter In Quantity window </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT>, the user is presented with the opportunity to indicate the quantity desired for the specific object to be added to the container. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 73</PDAT></FGREF><PDAT>, the first object to be added to the container is a personnel resource object, thus, the quantity to be designated is the number of minutes for which the person indicated by the personnel resource object will be required for the operative care event container object. A value is entered by the user into the Quantity field </PDAT><HIL><BOLD><PDAT>538</PDAT></BOLD></HIL><PDAT>, and the Close button </PDAT><HIL><BOLD><PDAT>540</PDAT></BOLD></HIL><PDAT> is pressed.</PDAT></PTEXT></PARA>
<PARA ID="P-00117" LVL="0"><PTEXT><PDAT>In the current example, because two objects have been selected for addition to the container, pressing the Close button </PDAT><HIL><BOLD><PDAT>540</PDAT></BOLD></HIL><PDAT> invokes a second occurrence of the Enter In Quantity window </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT>, and the user is presented with an opportunity to enter the desired quantity for the second object in the Quantity field </PDAT><HIL><BOLD><PDAT>538</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT>. Pressing the Close button </PDAT><HIL><BOLD><PDAT>540</PDAT></BOLD></HIL><PDAT> again accepts the added object with the designed quantity. If a third object had been selected for addition to the container, then a third occurrence of the Enter In Quantity window </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT> is invoked. Thus, the number of Enter In Quantity windows </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT> invoked is preferably equal to the number of objects selected for addition to the container. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 75</PDAT></FGREF><PDAT> depicts the previously selected Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> with the newly added Scrub Nurse personnel resource object </PDAT><HIL><BOLD><PDAT>522</PDAT></BOLD></HIL><PDAT> and Circulating Nurse personnel resource object </PDAT><HIL><BOLD><PDAT>524</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00118" LVL="0"><PTEXT><PDAT>Beginning with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 75</PDAT></FGREF><PDAT>, a second method of adding previously defined objects to a container object is described. In this example, new resource objects are added to the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT>. This second method is commenced by opening the Resources folder </PDAT><HIL><BOLD><PDAT>374</PDAT></BOLD></HIL><PDAT> in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> of the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>. The Resources folder </PDAT><HIL><BOLD><PDAT>374</PDAT></BOLD></HIL><PDAT> contains different types of predefined resources, which in the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 75</PDAT></FGREF><PDAT> include Supplies </PDAT><HIL><BOLD><PDAT>542</PDAT></BOLD></HIL><PDAT>, Personnel </PDAT><HIL><BOLD><PDAT>544</PDAT></BOLD></HIL><PDAT>, Equipment </PDAT><HIL><BOLD><PDAT>546</PDAT></BOLD></HIL><PDAT>, and Pharmacy/Medications </PDAT><HIL><BOLD><PDAT>548</PDAT></BOLD></HIL><PDAT>. All of these different resource types are preferably contained within folders.</PDAT></PTEXT></PARA>
<PARA ID="P-00119" LVL="0"><PTEXT><PDAT>In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 76</PDAT></FGREF><PDAT>, the Supplies folder </PDAT><HIL><BOLD><PDAT>542</PDAT></BOLD></HIL><PDAT> has been selected and opened, revealing the various supply resource objects located within the folder. These supply resource objects are displayed both in a hierarchical tree view within the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>, and in a list view within the List view </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT>. The desired supply resource object depicted in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> to be added to the container object depicted in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT> is selected. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 77</PDAT></FGREF><PDAT>, the desired supply resource object is a COBE Oxygenator </PDAT><HIL><BOLD><PDAT>550</PDAT></BOLD></HIL><PDAT>. The List view </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT> depicts the contents of the previously selected container object, which in this example is the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT>. Thus, the List view </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT> depicts the Scrub Nurse personnel resource object </PDAT><HIL><BOLD><PDAT>522</PDAT></BOLD></HIL><PDAT> and the Circulating Nurse personnel resource object </PDAT><HIL><BOLD><PDAT>524</PDAT></BOLD></HIL><PDAT> that were previously added to the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00120" LVL="0"><PTEXT><PDAT>The COBE Oxygenator supply resource object </PDAT><HIL><BOLD><PDAT>550</PDAT></BOLD></HIL><PDAT> is copied from the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> to the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT> by dragging it with the mouse to the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT>, and dropping it there. Upon doing so, the Referenced Item window </PDAT><HIL><BOLD><PDAT>528</PDAT></BOLD></HIL><PDAT> appears, previously described during the recitation of the first method for adding predefined objects to a container, and the user is given the opportunity to add the selected object as either a custom or a standard object to the previously selected container object, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>78</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00121" LVL="0"><PTEXT><PDAT>By pressing the Yes button </PDAT><HIL><BOLD><PDAT>530</PDAT></BOLD></HIL><PDAT>, the selected object is added as a standard object to the container. When added in this manner, any changes made to the general template for the selected object will be reflected in the object as it resides within the container to which it has been added. By pressing the No button </PDAT><HIL><BOLD><PDAT>532</PDAT></BOLD></HIL><PDAT>, the selected object is added as a custom object to the container. When added in this manner, any changes made to the general template for the selected object will not be reflected in the object as it resides within the container to which it has been added. By pressing the Cancel button </PDAT><HIL><BOLD><PDAT>534</PDAT></BOLD></HIL><PDAT>, the operation of adding the selected object to the container is cancelled.</PDAT></PTEXT></PARA>
<PARA ID="P-00122" LVL="0"><PTEXT><PDAT>In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 78</PDAT></FGREF><PDAT>, the Yes button </PDAT><HIL><BOLD><PDAT>530</PDAT></BOLD></HIL><PDAT> of the Referenced Item window </PDAT><HIL><BOLD><PDAT>528</PDAT></BOLD></HIL><PDAT> is pressed, which causes the display of the Enter In Quantity window </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT>, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 79</PDAT></FGREF><PDAT>, and as previously described. In the Enter In Quantity window </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT>, the user is presented with the opportunity to indicate the quantity desired for the specific object to be added to the container. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 79</PDAT></FGREF><PDAT>, the object to be added to the container is a supplies resource object, thus, the quantity to be designated is the number of the items indicated by the supplies resource object that are required for the operative care event container object. A value is entered by the user into the Quantity field </PDAT><HIL><BOLD><PDAT>538</PDAT></BOLD></HIL><PDAT>, and the Close button </PDAT><HIL><BOLD><PDAT>540</PDAT></BOLD></HIL><PDAT> is pressed.</PDAT></PTEXT></PARA>
<PARA ID="P-00123" LVL="0"><PTEXT><PDAT>In the current example, because only one object has been selected for addition to the container, pressing the Close button </PDAT><HIL><BOLD><PDAT>540</PDAT></BOLD></HIL><PDAT> does not invoke a second occurrence of the Enter In Quantity window </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT>. However, as previously described, the number of Enter In Quantity windows </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT> invoked is preferably equal to the number of objects selected for addition to the container. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 80</PDAT></FGREF><PDAT> depicts the previously selected Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> with the newly added COBE Oxygenator supply resource object </PDAT><HIL><BOLD><PDAT>550</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00124" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 80</PDAT></FGREF><PDAT> also depicts how the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT>, the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>, and the List view </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT> of the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> interrelate. The COBE Oxygenator supply resource object </PDAT><HIL><BOLD><PDAT>550</PDAT></BOLD></HIL><PDAT>, originally depicted in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>, is still depicted in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>, but has been additionally copied to the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT>. The objects within the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT>, being the Scrub Nurse personnel resource object </PDAT><HIL><BOLD><PDAT>522</PDAT></BOLD></HIL><PDAT>, the Circulating Nurse personnel resource object </PDAT><HIL><BOLD><PDAT>524</PDAT></BOLD></HIL><PDAT>, and the COBE Oxygenator supply resource object </PDAT><HIL><BOLD><PDAT>550</PDAT></BOLD></HIL><PDAT>, are depicted both within the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT> and the List view </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT>. In this exemplar embodiment, the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT> and the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> display identical hierarchical lists that can be independently expanded, contracted, and accessed.</PDAT></PTEXT></PARA>
<PARA ID="P-00125" LVL="0"><PTEXT><PDAT>Beginning with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 81</PDAT></FGREF><PDAT>, a method for adding a personnel resource object to the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> is described. The container object to which the resource object is to be added is selected in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT>, and then the appropriate folder for the resource object is selected in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 81</PDAT></FGREF><PDAT>, the appropriate folder is the Personnel folder </PDAT><HIL><BOLD><PDAT>544</PDAT></BOLD></HIL><PDAT>. Opening the Personnel folder </PDAT><HIL><BOLD><PDAT>544</PDAT></BOLD></HIL><PDAT> displays the various predefined personnel objects within the Personnel folder </PDAT><HIL><BOLD><PDAT>544</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>82</PDAT></BOLD></HIL><PDAT>. The predefined personnel objects within the Personnel folder </PDAT><HIL><BOLD><PDAT>544</PDAT></BOLD></HIL><PDAT> are depicted in a hierarchical tree form in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> and in a list form in the List view </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00126" LVL="0"><PTEXT><PDAT>The personnel resource object to be added to the previously selected container object is selected in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 82</PDAT></FGREF><PDAT>, the selected object is the Scrub Technician personnel resource object </PDAT><HIL><BOLD><PDAT>552</PDAT></BOLD></HIL><PDAT>, which is dragged with the mouse and dropped onto the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT>. As previously described, this action brings up the Referenced Item window </PDAT><HIL><BOLD><PDAT>528</PDAT></BOLD></HIL><PDAT>, previously described, and the user is given the opportunity to add the selected object as either a custom or a standard object to the previously selected container object, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>83</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00127" LVL="0"><PTEXT><PDAT>By pressing the Yes button </PDAT><HIL><BOLD><PDAT>530</PDAT></BOLD></HIL><PDAT>, the selected object is added as a standard object to the container. When added in this manner, any changes made to the general template for the selected object will be reflected in the object as it resides within the container to which it has been added. By pressing the No button </PDAT><HIL><BOLD><PDAT>532</PDAT></BOLD></HIL><PDAT>, the selected object is added as a custom object to the container. When added in this manner, any changes made to the general template for the selected object will not be reflected in the object as it resides within the container to which it has been added. By pressing the Cancel button </PDAT><HIL><BOLD><PDAT>534</PDAT></BOLD></HIL><PDAT>, the operation of adding the selected object to the container is cancelled.</PDAT></PTEXT></PARA>
<PARA ID="P-00128" LVL="0"><PTEXT><PDAT>In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 83</PDAT></FGREF><PDAT>, the Yes button </PDAT><HIL><BOLD><PDAT>530</PDAT></BOLD></HIL><PDAT> of the Referenced Item window </PDAT><HIL><BOLD><PDAT>528</PDAT></BOLD></HIL><PDAT> is pressed, which causes the display of the Enter In Quantity window </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT>, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 84</PDAT></FGREF><PDAT>, and as previously described. In the Enter In Quantity window </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT>, the user is presented with the opportunity to indicate the quantity desired for the specific object to be added to the container. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 84</PDAT></FGREF><PDAT>, the object to be added to the container is a personnel resource object, thus, the quantity to be designated is the amount of time from the person indicated by the personnel resource object that is required for the operative care event container object. A value is entered by the user into the Quantity field </PDAT><HIL><BOLD><PDAT>538</PDAT></BOLD></HIL><PDAT>, and the Close button </PDAT><HIL><BOLD><PDAT>540</PDAT></BOLD></HIL><PDAT> is pressed. As depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 85</PDAT></FGREF><PDAT>, the newly added Scrub Technician personnel resource object </PDAT><HIL><BOLD><PDAT>552</PDAT></BOLD></HIL><PDAT> is depicted under the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT> of the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00129" LVL="0"><PTEXT><PDAT>Beginning with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 85</PDAT></FGREF><PDAT>, a method for adding an equipment resource object to the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> is described. The container object to which the resource object is to be added is selected in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT>, and then the appropriate folder for the resource object is selected in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 85</PDAT></FGREF><PDAT>, the appropriate folder is the Equipment folder </PDAT><HIL><BOLD><PDAT>546</PDAT></BOLD></HIL><PDAT>. Opening the Equipment folder </PDAT><HIL><BOLD><PDAT>546</PDAT></BOLD></HIL><PDAT> displays the various predefined equipment objects within the Equipment folder </PDAT><HIL><BOLD><PDAT>546</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>85</PDAT></BOLD></HIL><PDAT>. The predefined equipment objects within the Equipment folder </PDAT><HIL><BOLD><PDAT>546</PDAT></BOLD></HIL><PDAT> are depicted in a hierarchical tree form in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> and in a list form in the List view </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00130" LVL="0"><PTEXT><PDAT>The equipment resource object to be added to the previously selected container object is selected in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 86</PDAT></FGREF><PDAT>, the selected object is the Pulse Oximetry Unit equipment resource object </PDAT><HIL><BOLD><PDAT>554</PDAT></BOLD></HIL><PDAT>, which is dragged with the mouse and dropped onto the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT>. As previously described, this action brings up the Referenced Item window </PDAT><HIL><BOLD><PDAT>528</PDAT></BOLD></HIL><PDAT>, previously described, and the user is given the opportunity to add the selected object as either a custom or a standard object to the previously selected container object, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>87</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00131" LVL="0"><PTEXT><PDAT>By pressing the Yes button </PDAT><HIL><BOLD><PDAT>530</PDAT></BOLD></HIL><PDAT>, the selected object is added as a standard object to the container. When added in this manner, any changes made to the general template for the selected object will be reflected in the object as it resides within the container to which it has been added. By pressing the No button </PDAT><HIL><BOLD><PDAT>532</PDAT></BOLD></HIL><PDAT>, the selected object is added as a custom object to the container. When added in this manner, any changes made to the general template for the selected object will not be reflected in the object as it resides within the container to which it has been added. By pressing the Cancel button </PDAT><HIL><BOLD><PDAT>534</PDAT></BOLD></HIL><PDAT>, the operation of adding the selected object to the container is cancelled.</PDAT></PTEXT></PARA>
<PARA ID="P-00132" LVL="0"><PTEXT><PDAT>In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 87</PDAT></FGREF><PDAT>, the Yes button </PDAT><HIL><BOLD><PDAT>530</PDAT></BOLD></HIL><PDAT> of the Referenced Item window </PDAT><HIL><BOLD><PDAT>528</PDAT></BOLD></HIL><PDAT> is pressed, which causes the display of the Enter In Quantity window </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT>, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 88</PDAT></FGREF><PDAT>, and as previously described. In the Enter In Quantity window </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT>, the user is presented with the opportunity to indicate the quantity desired for the specific object to be added to the container. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 88</PDAT></FGREF><PDAT>, the object to be added to the container is an equipment resource object, thus, the quantity to be designated is the amount of time on the equipment indicated by the equipment resource object that is required for the operative care event container object. A value is entered by the user into the Quantity field </PDAT><HIL><BOLD><PDAT>538</PDAT></BOLD></HIL><PDAT>, and the Close button </PDAT><HIL><BOLD><PDAT>540</PDAT></BOLD></HIL><PDAT> is pressed. The newly added Pulse Oximetry equipment resource object </PDAT><HIL><BOLD><PDAT>554</PDAT></BOLD></HIL><PDAT> is depicted under the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT> of the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>89</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00133" LVL="0"><PTEXT><PDAT>Beginning with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 90</PDAT></FGREF><PDAT>, a method for adding a pharmacy/medication resource object to the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> is described. The container object to which the resource object is to be added is selected in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT>, and then the appropriate folder for the resource object is selected in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 90</PDAT></FGREF><PDAT>, the appropriate folder is the Pharmacy/Medications folder </PDAT><HIL><BOLD><PDAT>548</PDAT></BOLD></HIL><PDAT>. Opening the Pharmacy/Medications folder </PDAT><HIL><BOLD><PDAT>548</PDAT></BOLD></HIL><PDAT> displays the various predefined equipment objects within the Pharmacy/Medications folder </PDAT><HIL><BOLD><PDAT>548</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>90</PDAT></BOLD></HIL><PDAT>. The predefined objects within the Pharmacy/Medications folder </PDAT><HIL><BOLD><PDAT>548</PDAT></BOLD></HIL><PDAT> are depicted in a hierarchical tree form in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> and in a list form in the List view </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT>, and include the Anesthetic Agents folder </PDAT><HIL><BOLD><PDAT>556</PDAT></BOLD></HIL><PDAT>, the Antibiotics folder </PDAT><HIL><BOLD><PDAT>558</PDAT></BOLD></HIL><PDAT>, and the Pain Medications folder </PDAT><HIL><BOLD><PDAT>560</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00134" LVL="0"><PTEXT><PDAT>Opening the Pain Medications folder </PDAT><HIL><BOLD><PDAT>560</PDAT></BOLD></HIL><PDAT> in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> displays the additional objects located within that folder. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 91</PDAT></FGREF><PDAT>, these additional items include Fentanyl </PDAT><HIL><BOLD><PDAT>562</PDAT></BOLD></HIL><PDAT>, Lortab </PDAT><HIL><BOLD><PDAT>564</PDAT></BOLD></HIL><PDAT>, Morphine </PDAT><HIL><BOLD><PDAT>566</PDAT></BOLD></HIL><PDAT>, and Percocet </PDAT><HIL><BOLD><PDAT>568</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00135" LVL="0"><PTEXT><PDAT>The pharmacy/medication resource object to be added to the previously selected container object is selected in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 92</PDAT></FGREF><PDAT>, the selected object is the Morphine (IV) pain medication pharmacy/medication resource object </PDAT><HIL><BOLD><PDAT>566</PDAT></BOLD></HIL><PDAT>, which is dragged with the mouse and dropped onto the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT>. As previously described, this action brings up the Referenced Item window </PDAT><HIL><BOLD><PDAT>528</PDAT></BOLD></HIL><PDAT>, and the user is given the opportunity to add the selected object as either a custom or a standard object to the previously selected container object, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>93</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00136" LVL="0"><PTEXT><PDAT>By pressing the Yes button </PDAT><HIL><BOLD><PDAT>530</PDAT></BOLD></HIL><PDAT>, the selected object is added as a standard object to the container. When added in this manner, any changes made to the general template for the selected object will be reflected in the object as it resides within the container to which it has been added. By pressing the No button </PDAT><HIL><BOLD><PDAT>532</PDAT></BOLD></HIL><PDAT>, the selected object is added as a custom object to the container. When added in this manner, any changes made to the general template for the selected object will not be reflected in the object as it resides within the container to which it has been added. By pressing the Cancel button </PDAT><HIL><BOLD><PDAT>534</PDAT></BOLD></HIL><PDAT>, the operation of adding the selected object to the container is cancelled.</PDAT></PTEXT></PARA>
<PARA ID="P-00137" LVL="0"><PTEXT><PDAT>In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 93</PDAT></FGREF><PDAT>, the Yes button </PDAT><HIL><BOLD><PDAT>530</PDAT></BOLD></HIL><PDAT> of the Referenced Item window </PDAT><HIL><BOLD><PDAT>528</PDAT></BOLD></HIL><PDAT> is pressed, which causes the display of the Enter In Quantity window </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT>, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 94</PDAT></FGREF><PDAT>, and as previously described. In the Enter In Quantity window </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT>, the user is presented with the opportunity to indicate the quantity desired for the specific object to be added to the container. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 94</PDAT></FGREF><PDAT>, the object to be added to the container is a pharmacy/medication resource object, thus, the quantity to be designated is the amount of medication indicated by the pharmacy/medication resource object that is required for the operative care event container object. A value is entered by the user into the Quantity field </PDAT><HIL><BOLD><PDAT>538</PDAT></BOLD></HIL><PDAT>, and the Close button </PDAT><HIL><BOLD><PDAT>540</PDAT></BOLD></HIL><PDAT> is pressed. The newly added Morphine (IV) pain medication pharmacy/medication resource object </PDAT><HIL><BOLD><PDAT>566</PDAT></BOLD></HIL><PDAT> is depicted under the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT> of the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>95</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00138" LVL="0"><PTEXT><PDAT>Beginning with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 96</PDAT></FGREF><PDAT>, a method for adding an object from the Product Category Tree </PDAT><HIL><BOLD><PDAT>378</PDAT></BOLD></HIL><PDAT> to the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> is described. The Product Category Tree </PDAT><HIL><BOLD><PDAT>378</PDAT></BOLD></HIL><PDAT> is a special container object, or folder, that contains a special selection of objects. In the example next explained, the Product Category Tree </PDAT><HIL><BOLD><PDAT>378</PDAT></BOLD></HIL><PDAT> contains predefined objects representing items that are available from DeRoyal Industries, Inc. Thus, the Product Category Tree </PDAT><HIL><BOLD><PDAT>378</PDAT></BOLD></HIL><PDAT> is representative of other special collections that could be available, such as product catalogs of other vendors.</PDAT></PTEXT></PARA>
<PARA ID="P-00139" LVL="0"><PTEXT><PDAT>The container object to which the product category tree object is to be added is selected in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT>, and then the appropriate folder is selected in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>. Opening the Product Category Tree folder </PDAT><HIL><BOLD><PDAT>378</PDAT></BOLD></HIL><PDAT> displays the items inside of the Product Category Tree folder </PDAT><HIL><BOLD><PDAT>378</PDAT></BOLD></HIL><PDAT>, which in the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 97</PDAT></FGREF><PDAT> is a selection of additional container objects, including the Blades &amp; Scalpels folder </PDAT><HIL><BOLD><PDAT>570</PDAT></BOLD></HIL><PDAT>. Opening the Blades &amp; Scalpels folder </PDAT><HIL><BOLD><PDAT>570</PDAT></BOLD></HIL><PDAT> displays the various predefined equipment objects within the Blades &amp; Scalpels folder </PDAT><HIL><BOLD><PDAT>570</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>98</PDAT></BOLD></HIL><PDAT>. The predefined blades &amp; scalpels objects within the Blades &amp; Scalpels folder </PDAT><HIL><BOLD><PDAT>570</PDAT></BOLD></HIL><PDAT> are depicted in a hierarchical tree form in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> and in a list form in the List view </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT>, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 98</PDAT></FGREF><PDAT>, and include the Specialty Blades &amp; Scalpels folder </PDAT><HIL><BOLD><PDAT>572</PDAT></BOLD></HIL><PDAT>. It is noted that these items are also folders, or in other words container objects, which themselves hold additional objects.</PDAT></PTEXT></PARA>
<PARA ID="P-00140" LVL="0"><PTEXT><PDAT>As depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 99</PDAT></FGREF><PDAT>, opening the Specialty Blades &amp; Scalpels folder </PDAT><HIL><BOLD><PDAT>572</PDAT></BOLD></HIL><PDAT> in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> displays the additional objects located within that folder. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 99</PDAT></FGREF><PDAT>, these additional items include more container objects, including the Debakey Blades folder </PDAT><HIL><BOLD><PDAT>574</PDAT></BOLD></HIL><PDAT>. The Debakey Blades folder </PDAT><HIL><BOLD><PDAT>574</PDAT></BOLD></HIL><PDAT> is selected and opened in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 100</PDAT></FGREF><PDAT>, displaying additional container objects within the Debakey Blades folder </PDAT><HIL><BOLD><PDAT>574</PDAT></BOLD></HIL><PDAT>, including the 8 mm container object </PDAT><HIL><BOLD><PDAT>576</PDAT></BOLD></HIL><PDAT>. The 8 mm container object </PDAT><HIL><BOLD><PDAT>576</PDAT></BOLD></HIL><PDAT> is selected and opened as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 101</PDAT></FGREF><PDAT>, displaying the Bld, Debakey, 8 mm Width supply resource object </PDAT><HIL><BOLD><PDAT>578</PDAT></BOLD></HIL><PDAT> located within the 8 mm container object </PDAT><HIL><BOLD><PDAT>576</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00141" LVL="0"><PTEXT><PDAT>The supply resource object to be added to the previously selected container object is selected in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT>. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 102</PDAT></FGREF><PDAT>, the selected object is the Bld, Debakey, 8 mm Width supply resource object </PDAT><HIL><BOLD><PDAT>578</PDAT></BOLD></HIL><PDAT>, which is dragged with the mouse and dropped onto the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT>. As previously described, this action brings up the Referenced Item window </PDAT><HIL><BOLD><PDAT>528</PDAT></BOLD></HIL><PDAT>, and the user is given the opportunity to add the selected object as either a custom or a standard object to the previously selected container object, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00142" LVL="0"><PTEXT><PDAT>By pressing the Yes button </PDAT><HIL><BOLD><PDAT>530</PDAT></BOLD></HIL><PDAT>, the selected object is added as a standard object to the container. When added in this manner, any changes made to the general template for the selected object will be reflected in the object as it resides within the container to which it has been added. By pressing the No button </PDAT><HIL><BOLD><PDAT>532</PDAT></BOLD></HIL><PDAT>, the selected object is added as a custom object to the container. When added in this manner, any changes made to the general template for the selected object will not be reflected in the object as it resides within the container to which it has been added. By pressing the Cancel button </PDAT><HIL><BOLD><PDAT>534</PDAT></BOLD></HIL><PDAT>, the operation of adding the selected object to the container is cancelled.</PDAT></PTEXT></PARA>
<PARA ID="P-00143" LVL="0"><PTEXT><PDAT>In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 103</PDAT></FGREF><PDAT>, the Yes button </PDAT><HIL><BOLD><PDAT>530</PDAT></BOLD></HIL><PDAT> of the Referenced Item window </PDAT><HIL><BOLD><PDAT>528</PDAT></BOLD></HIL><PDAT> is pressed, which causes the display of the Enter In Quantity window </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT>, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 104</PDAT></FGREF><PDAT>, and as previously described. In the Enter In Quantity window </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT>, the user is presented with the opportunity to indicate the quantity desired for the specific object to be added to the container. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 104</PDAT></FGREF><PDAT>, the object to be added to the container is a supply resource object, thus, the quantity to be designated is the number of items indicated by the supply resource object that is required for the operative care event container object. A value is entered by the user into the Quantity field </PDAT><HIL><BOLD><PDAT>538</PDAT></BOLD></HIL><PDAT>, and the Close button </PDAT><HIL><BOLD><PDAT>540</PDAT></BOLD></HIL><PDAT> is pressed. The newly added Bld, Debakey, 8 mm Width supply resource object </PDAT><HIL><BOLD><PDAT>578</PDAT></BOLD></HIL><PDAT> is depicted under the Open Heart Operative Care Event container object </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT> of the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00144" LVL="0"><PTEXT><PDAT>The discussion above has briefly described some of the aspects of creating and working with procedural pathways. As a part of this discussion, the creation of different types of container objects has been described, including care event container objects and bundle container objects. In addition, the creation and maintenance of resource objects has been described, including supply resource objects, personnel resource objects, and equipment resource objects. Further, the nesting of these objects, one within another, has also been briefly described.</PDAT></PTEXT></PARA>
<PARA ID="P-00145" LVL="0"><PTEXT><PDAT>A third type of object, a data object, is depicted in FIG. </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>. In this example, Inter-Operative Data Collection data object </PDAT><HIL><BOLD><PDAT>580</PDAT></BOLD></HIL><PDAT> is selected in the Second Tree view </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> of the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>. The Inter-Operative Data Collection data object </PDAT><HIL><BOLD><PDAT>580</PDAT></BOLD></HIL><PDAT> is representative of other data objects, which are not depicted in the figures. Data objects are used to hold information, such as may be necessary for the completion of a procedural pathway, or gathered during the performance of a procedural pathway.</PDAT></PTEXT></PARA>
<PARA ID="P-00146" LVL="0"><PTEXT><PDAT>For example, when a patient is admitted to the hospital, a data object could be created for the patient&apos;s demographic and clinical information. This data object could be a part of the admitting procedural pathway container object. As a part of the performance of the procedural pathway, a nurse, doctor, technician, or staff member could request or otherwise gather information from the patient and enter it into the management system. The information stored within the data object can be used to select various options within the current or later procedural pathways.</PDAT></PTEXT></PARA>
<PARA ID="P-00147" LVL="0"><PTEXT><PDAT>For example, the reason for admittance, such as a specific type of hip surgery, can be stored in the data object and used to select the correct procedural pathway for hip surgery. The patient&apos;s sex, also stored in the data object, can select the appropriate type of catheter, a supply resource object, in a bundle container object. The patient&apos;s height and weight can select the appropriate medication in a similar manner. Further, the designation of the patient&apos;s doctor, stored within the data object, can select the appropriate bundle container object specific to the designated physician. Thus, the data objects provide the management system with the ability to optionally select conditional branching routes within the various available procedural pathways, as well as with a location to store the data taken during the performance of those procedural pathways.</PDAT></PTEXT></PARA>
<PARA ID="P-00148" LVL="0"><PTEXT><PDAT>Commencing with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 107</PDAT></FGREF><PDAT>, we turn aside from the description of creating pathways, and move now towards a description of the various ways in which the pathways can be used. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 107</PDAT></FGREF><PDAT>, the Open Heart Operative care event </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> is selected in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT> and the Procedural pathway Module menu </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT> is invoked, such as by right clicking on the Open Heart Operative care event </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT>. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 108</PDAT></FGREF><PDAT> depicts the selection of the New function </PDAT><HIL><BOLD><PDAT>582</PDAT></BOLD></HIL><PDAT>, which invokes the New submenu </PDAT><HIL><BOLD><PDAT>584</PDAT></BOLD></HIL><PDAT>. Selecting the Case function </PDAT><HIL><BOLD><PDAT>586</PDAT></BOLD></HIL><PDAT> from the New submenu </PDAT><HIL><BOLD><PDAT>584</PDAT></BOLD></HIL><PDAT> invokes the Create New Case window </PDAT><HIL><BOLD><PDAT>588</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00149" LVL="0"><PTEXT><PDAT>The Create New Case window </PDAT><HIL><BOLD><PDAT>588</PDAT></BOLD></HIL><PDAT> receives information about a specific case that will follow the selected procedural pathway, which in this example is the Open Heart Operative care event </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT>. Thus, the Create New Case window </PDAT><HIL><BOLD><PDAT>588</PDAT></BOLD></HIL><PDAT> is used to copy the general template of the procedural pathway to an actual case, wherein the procedural pathway to be followed by an actual patient is charted, and where the procedural pathway as actually performed for the patient is recorded. The Action palette </PDAT><HIL><BOLD><PDAT>590</PDAT></BOLD></HIL><PDAT> allows the case to be logged, such as by selecting the Log Case function </PDAT><HIL><BOLD><PDAT>592</PDAT></BOLD></HIL><PDAT>, or scheduled, such as by selecting the Schedule Case function </PDAT><HIL><BOLD><PDAT>594</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00150" LVL="0"><PTEXT><PDAT>Logging a case indicates that the patient has already completed the procedural pathway, the data has been gathered, and the case is being created to provide a record of what has already been accomplished. Scheduling a case indicates that the patient has not yet completed the procedural pathway, and the case is being created to provide a prompt for the data that needs to be gathered and the supplies, personnel, and equipment that need to be scheduled or consumed. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 109</PDAT></FGREF><PDAT>, the case is being logged after the procedural pathway has been completed, and so the Log Case function </PDAT><HIL><BOLD><PDAT>592</PDAT></BOLD></HIL><PDAT> is selected.</PDAT></PTEXT></PARA>
<PARA ID="P-00151" LVL="0"><PTEXT><PDAT>A case number is assigned to the case, which number is depicted in the Case &num; field </PDAT><HIL><BOLD><PDAT>596</PDAT></BOLD></HIL><PDAT>. In the example depicted the case number has been automatically assigned by the management system. However, in alternate embodiments the user is able to select any case number desired, preferably a case number that has not been assigned to any other case. The patient&apos;s physician is selected from the Physician field </PDAT><HIL><BOLD><PDAT>598</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>. The correct physician can be selected in a variety of ways. For example, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 110</PDAT></FGREF><PDAT>, the Drop List button </PDAT><HIL><BOLD><PDAT>600</PDAT></BOLD></HIL><PDAT> is selected, invoking an alphabetized list of available physicians.</PDAT></PTEXT></PARA>
<PARA ID="P-00152" LVL="0"><PTEXT><PDAT>Alternately, the first few letters of the name of the correct physician can be typed into the Physician field </PDAT><HIL><BOLD><PDAT>598</PDAT></BOLD></HIL><PDAT> prior to or after selecting the Drop List button, which will cause the list of available physicians to automatically scroll to a position in the alphabetized list corresponding to the first few letters so typed. Further, the Criteria Selection button </PDAT><HIL><BOLD><PDAT>602</PDAT></BOLD></HIL><PDAT> may be selected to display additional selection criteria for selecting the appropriate physician. Once the correct physician has been identified, clicking on the name enters it in the Physician field </PDAT><HIL><BOLD><PDAT>598</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00153" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 111</PDAT></FGREF><PDAT> also depicts the method of selecting the appropriate anesthesiologist in the Anesthesiologist field </PDAT><HIL><BOLD><PDAT>604</PDAT></BOLD></HIL><PDAT>. Preferably, this is done in the same manner as that used to select the correct physician. Thus, the same options for locating the correct anesthesiologist are available, such as invoking the alphabetized list with the Drop List button </PDAT><HIL><BOLD><PDAT>600</PDAT></BOLD></HIL><PDAT> and displaying additional selection criteria with the Criteria Selection button </PDAT><HIL><BOLD><PDAT>602</PDAT></BOLD></HIL><PDAT>. As before, when the correct anesthesiologist is located, the name is displayed in the Anesthesiologist field </PDAT><HIL><BOLD><PDAT>604</PDAT></BOLD></HIL><PDAT> by selecting it, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>. The account number, associating the patient with this specific case, is entered into the Account field </PDAT><HIL><BOLD><PDAT>606</PDAT></BOLD></HIL><PDAT>, also as depicted in FIG. </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00154" LVL="0"><PTEXT><PDAT>Selecting the Criteria Selection button </PDAT><HIL><BOLD><PDAT>602</PDAT></BOLD></HIL><PDAT> associated with the Patient field </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> invokes the Patient Master Table window </PDAT><HIL><BOLD><PDAT>608</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>113</PDAT></BOLD></HIL><PDAT>. The Patient Master Table window </PDAT><HIL><BOLD><PDAT>608</PDAT></BOLD></HIL><PDAT> is used to locate the correct patient by matching one or more of a variety of identification information, such as medical record number, account number, last name, first name, middle initial, address, city, zip code, state, or other information, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>113</PDAT></BOLD></HIL><PDAT>. In this manner, a variety of information that may be more readily known or remembered about the patient may be used to select the correct patient. This screen may also be used to create a new patient designation that did not exist previously.</PDAT></PTEXT></PARA>
<PARA ID="P-00155" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 114</PDAT></FGREF><PDAT> depicts an alternate method of selecting the correct patient, by typing in the first few letters of the patient&apos;s name, as described above. As depicted, typing in the first two letters of the patient&apos;s name scrolls the alphabetized list of patient names to the first such name satisfying the search criteria. In this manner, the user can quickly scroll to the relevant portion of the patient name list, and thereby more readily locate and enter the correct name.</PDAT></PTEXT></PARA>
<PARA ID="P-00156" LVL="0"><PTEXT><PDAT>The Description field </PDAT><HIL><BOLD><PDAT>612</PDAT></BOLD></HIL><PDAT>, depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 115</PDAT></FGREF><PDAT>, accepts a user defined description for the case. However, in many instances it may be better to have a standardized description for the cases that are created, rather than to allow each individual user to enter case descriptions that conform to the whim of each such user. Thus, the Retrieve Standard Description button </PDAT><HIL><BOLD><PDAT>614</PDAT></BOLD></HIL><PDAT> is provided, which operates to parse a selection of the information that is previously entered into the Create New Case window </PDAT><HIL><BOLD><PDAT>588</PDAT></BOLD></HIL><PDAT>, and enter the parsed selection into the Description field </PDAT><HIL><BOLD><PDAT>612</PDAT></BOLD></HIL><PDAT>. In this manner, all case descriptions contain a standardized selection of case information, allowing the cases to be more readily identified when using the description of the case. In a most preferred embodiment, the specific parsing and selection of information to be used as the description is user definable across the management system.</PDAT></PTEXT></PARA>
<PARA ID="P-00157" LVL="0"><PTEXT><PDAT>Other information about the case is selectively entered in the Other Case Attributes field </PDAT><HIL><BOLD><PDAT>618</PDAT></BOLD></HIL><PDAT>. One especially convenient method of entering such information is by pressing the Data Wizard button </PDAT><HIL><BOLD><PDAT>616</PDAT></BOLD></HIL><PDAT>, which invokes the Data Wizard window </PDAT><HIL><BOLD><PDAT>620</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT>. The Data Wizard window </PDAT><HIL><BOLD><PDAT>620</PDAT></BOLD></HIL><PDAT> is preferably configured to allow for the convenient selection of standardized insurance carrier ICD9 codes, which codes the insurance carriers insist on receiving prior to authorizing payment for services. Thus, the Data Wizard window </PDAT><HIL><BOLD><PDAT>620</PDAT></BOLD></HIL><PDAT> presents an alphabetized scroll list of the ICD9 codes, from which the proper code can be selected and entered into the Other Case Attributes field </PDAT><HIL><BOLD><PDAT>618</PDAT></BOLD></HIL><PDAT> by pressing the Finish button </PDAT><HIL><BOLD><PDAT>498</PDAT></BOLD></HIL><PDAT>, which procedure has been accomplished as depicted in FIG. </PDAT><HIL><BOLD><PDAT>117</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00158" LVL="0"><PTEXT><PDAT>When the OK button </PDAT><HIL><BOLD><PDAT>526</PDAT></BOLD></HIL><PDAT> is pressed, signaling the completion of case data entry in the Create New Case window </PDAT><HIL><BOLD><PDAT>588</PDAT></BOLD></HIL><PDAT>, the Resolve Preferences window </PDAT><HIL><BOLD><PDAT>622</PDAT></BOLD></HIL><PDAT> is invoked, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT>. The Resolve Preferences window </PDAT><HIL><BOLD><PDAT>622</PDAT></BOLD></HIL><PDAT> presents the user with the opportunity to selectively indicate or override the conditional branching that may otherwise be specified by the procedural pathway. For example, if the procedural pathway suggests that one or more of several bundle container objects may be required for the procedure, the user is presented with the opportunity to select the desired bundles from within the Resolve Preferences window </PDAT><HIL><BOLD><PDAT>622</PDAT></BOLD></HIL><PDAT>. Most preferably, those preferences which are resolved by data that has already been entered in a data object are preselected by the management system and placed within the Selected Bundles field </PDAT><HIL><BOLD><PDAT>626</PDAT></BOLD></HIL><PDAT>. However, all bundles related to the procedural pathway are preferably visible within the Available Bundles field </PDAT><HIL><BOLD><PDAT>624</PDAT></BOLD></HIL><PDAT>, so that the user may override the automated selection made by the management system.</PDAT></PTEXT></PARA>
<PARA ID="P-00159" LVL="0"><PTEXT><PDAT>The user transfers bundle objects from the Available Bundles field </PDAT><HIL><BOLD><PDAT>624</PDAT></BOLD></HIL><PDAT> to the Selected Bundles field </PDAT><HIL><BOLD><PDAT>626</PDAT></BOLD></HIL><PDAT> by clicking on the desired bundle to highlight it, and then pressing the Add Selected Bundle button </PDAT><HIL><BOLD><PDAT>628</PDAT></BOLD></HIL><PDAT>. Alternately, all bundle objects listed in the Available Bundles field </PDAT><HIL><BOLD><PDAT>624</PDAT></BOLD></HIL><PDAT> may be added to the Selected Bundles field </PDAT><HIL><BOLD><PDAT>626</PDAT></BOLD></HIL><PDAT> by pressing the Add All Bundles button </PDAT><HIL><BOLD><PDAT>630</PDAT></BOLD></HIL><PDAT>. When the Add All Bundles button </PDAT><HIL><BOLD><PDAT>630</PDAT></BOLD></HIL><PDAT> is used, the individual bundle objects in the Available Bundles field </PDAT><HIL><BOLD><PDAT>624</PDAT></BOLD></HIL><PDAT> do not need to be highlighted, as all bundle objects will be transferred to the Selected Bundles field </PDAT><HIL><BOLD><PDAT>626</PDAT></BOLD></HIL><PDAT>, whether they are highlighted or not.</PDAT></PTEXT></PARA>
<PARA ID="P-00160" LVL="0"><PTEXT><PDAT>Similarly, bundle objects displayed in the Selected Bundles field </PDAT><HIL><BOLD><PDAT>626</PDAT></BOLD></HIL><PDAT> may be transferred back to the Available Bundles field </PDAT><HIL><BOLD><PDAT>624</PDAT></BOLD></HIL><PDAT> by first clicking on the bundle object to be so transferred and then pressing the Remove Selected Bundle button </PDAT><HIL><BOLD><PDAT>632</PDAT></BOLD></HIL><PDAT>, which removes the highlighted bundle object from the Selected Bundles field </PDAT><HIL><BOLD><PDAT>626</PDAT></BOLD></HIL><PDAT> and places it back within the Available Bundles field </PDAT><HIL><BOLD><PDAT>624</PDAT></BOLD></HIL><PDAT>. Alternately, all bundle objects listed in the Selected Bundles field </PDAT><HIL><BOLD><PDAT>626</PDAT></BOLD></HIL><PDAT> may be transferred back to the Available Bundles field </PDAT><HIL><BOLD><PDAT>624</PDAT></BOLD></HIL><PDAT> by pressing the Remove All bundles button </PDAT><HIL><BOLD><PDAT>634</PDAT></BOLD></HIL><PDAT>. When the Remove All Bundles button </PDAT><HIL><BOLD><PDAT>634</PDAT></BOLD></HIL><PDAT> is used, the individual bundle objects in the Selected Bundles field </PDAT><HIL><BOLD><PDAT>626</PDAT></BOLD></HIL><PDAT> do not need to be highlighted, as all bundle objects will be transferred to the Available Bundles field </PDAT><HIL><BOLD><PDAT>624</PDAT></BOLD></HIL><PDAT>, whether they are highlighted or not. Pressing the Finish button </PDAT><HIL><BOLD><PDAT>498</PDAT></BOLD></HIL><PDAT> signals the management system that all bundle object preferences have been resolved and the user is ready to continue.</PDAT></PTEXT></PARA>
<PARA ID="P-00161" LVL="0"><PTEXT><PDAT>Upon clicking the Finish button </PDAT><HIL><BOLD><PDAT>498</PDAT></BOLD></HIL><PDAT>, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 118</PDAT></FGREF><PDAT>, the Resource Consumption Log window </PDAT><HIL><BOLD><PDAT>636</PDAT></BOLD></HIL><PDAT> is invoked, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>119</PDAT></BOLD></HIL><PDAT>. In the Resource Consumption Log window </PDAT><HIL><BOLD><PDAT>636</PDAT></BOLD></HIL><PDAT>, the user is presented with the opportunity to account for the various resources that were allocated to the procedural pathway during the bundle object selection just completed. The Resource Consumption Log window </PDAT><HIL><BOLD><PDAT>636</PDAT></BOLD></HIL><PDAT> is preferably presented at this point only when the case is being logged, or in other words, only when the procedural pathway has already been completed and the actual disposition of the resources is actually known. If the case is being creating as a scheduled case, then the procedural pathway has not as yet been completed, the disposition of the resources is not actually known, and the Resource Consumption Log window </PDAT><HIL><BOLD><PDAT>636</PDAT></BOLD></HIL><PDAT> is irrelevant at this point in time.</PDAT></PTEXT></PARA>
<PARA ID="P-00162" LVL="0"><PTEXT><PDAT>All of the resources allocated to the procedural pathway are depicted in a scrolling list within the Resource Consumption Log window </PDAT><HIL><BOLD><PDAT>636</PDAT></BOLD></HIL><PDAT>. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 119</PDAT></FGREF><PDAT>, the list of allocated resources is quite short, and so there is no need to scroll the display in order to see the entire list. However, in a typical procedural pathway that would be used in an actual procedure, the list of allocated resources would tend to be much more lengthy.</PDAT></PTEXT></PARA>
<PARA ID="P-00163" LVL="0"><PTEXT><PDAT>The allocated resources are logged by confirming the actual disposition of the resources. The management system starts with the basic assumption that all of the resources allocated to the procedural pathway have been consumed. Thus, for each resource listed in the Description field </PDAT><HIL><BOLD><PDAT>638</PDAT></BOLD></HIL><PDAT> there is an associated value listed in the Consume Value field </PDAT><HIL><BOLD><PDAT>640</PDAT></BOLD></HIL><PDAT>. The value listed in the Consume Value field </PDAT><HIL><BOLD><PDAT>640</PDAT></BOLD></HIL><PDAT> is a default value that is preferable equal to the value originally specified as the desired quantity of the resource when it was originally added to the container object.</PDAT></PTEXT></PARA>
<PARA ID="P-00164" LVL="0"><PTEXT><PDAT>However, not all of the resources may have been consumed. Some of the resources may have been scrapped, in which case they were not productively used. For example, the allocated number of resources may have been packaged together in a sterile package that, once it was opened, exposed all of the contents to the environment. Thus, any of that package contents that were not productively consumed had to be scrapped, or in other words, just thrown away. This, of course, is wasteful and leads to unnecessary expense, and so is a condition that is preferably tracked by the management system.</PDAT></PTEXT></PARA>
<PARA ID="P-00165" LVL="0"><PTEXT><PDAT>Other resources do not necessarily need to be scrapped if not productively consumed. In this case, the allocated resource can be returned to a stocking area, where it can be restaged for use in a subsequent clinical procedure. However, even though the resource itself is not needlessly destroyed, there is still wasted expense involved with preparing the resource for the clinical procedure when it was not actually required. Further, there is wasted expense involved with returning the unnecessary resource to the storage area, and making it available for alternate use. Therefore, this situation is also one that the management system preferably tracks. In either case, whether the allocated resource is scrapped or returned, the management system preferably analyzes the data and is able to suggest to the user that the allocated amount of the resource be adjusted to a value more nearly resembling the actual productive consumption of the resource in the procedural pathway described.</PDAT></PTEXT></PARA>
<PARA ID="P-00166" LVL="0"><PTEXT><PDAT>The disposition of the resource is depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 120</PDAT></FGREF><PDAT>, in which an entry in the Consume Value field </PDAT><HIL><BOLD><PDAT>640</PDAT></BOLD></HIL><PDAT> has been selected and altered. The original value for the entry, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 119</PDAT></FGREF><PDAT>, was 4. However, in the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 120</PDAT></FGREF><PDAT>, only 2 of the items were actually productively consumed, and so this value has been entered in the Consume Value field </PDAT><HIL><BOLD><PDAT>640</PDAT></BOLD></HIL><PDAT>. The other two units of the resource, those of the four allocated that were not consumed, are preferably accounted for. Thus, the user selects the appropriate of either the Scrap Value field </PDAT><HIL><BOLD><PDAT>642</PDAT></BOLD></HIL><PDAT> or the Return Value field </PDAT><HIL><BOLD><PDAT>644</PDAT></BOLD></HIL><PDAT>, or both, and enters the appropriate value in the fields according to the actual disposition of the resources. In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 121</PDAT></FGREF><PDAT>, the Return Value field </PDAT><HIL><BOLD><PDAT>644</PDAT></BOLD></HIL><PDAT> has been selected, in which the user may enter the number of units of the resource that have been returned to stores.</PDAT></PTEXT></PARA>
<PARA ID="P-00167" LVL="0"><PTEXT><PDAT>When all such corrections to the actual disposition of the several resources allocated to the procedural pathway have been completed, the user may next confirm utilization of the allocated personnel resources in a manner similar to that described above, by pressing the Personnel Utilization button </PDAT><HIL><BOLD><PDAT>646</PDAT></BOLD></HIL><PDAT>, which invokes the Logged Information window </PDAT><HIL><BOLD><PDAT>648</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>. In the Logged Information window </PDAT><HIL><BOLD><PDAT>648</PDAT></BOLD></HIL><PDAT> the user is presented with the opportunity to account for the actual amount of time used of the various personnel that were allocated to the procedural pathway. The Description field </PDAT><HIL><BOLD><PDAT>650</PDAT></BOLD></HIL><PDAT> displays the description of the first personnel resource specified in the procedural pathway. The Scheduled Total field </PDAT><HIL><BOLD><PDAT>652</PDAT></BOLD></HIL><PDAT> indicates the total number of minutes of personnel resource time that were allocated to the procedure. The Consumed Totals field </PDAT><HIL><BOLD><PDAT>654</PDAT></BOLD></HIL><PDAT> allows the user to enter in the actual amount of time that was productively consumed in the course of the procedure.</PDAT></PTEXT></PARA>
<PARA ID="P-00168" LVL="0"><PTEXT><PDAT>In the example depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 122</PDAT></FGREF><PDAT>, the consumed value equals the scheduled value, indicating that all of the scheduled time was productively used. However, the user could also enter a value in the Consumed Total field </PDAT><HIL><BOLD><PDAT>654</PDAT></BOLD></HIL><PDAT> that is either greater than or less than the value displayed in the Scheduled Totals field </PDAT><HIL><BOLD><PDAT>652</PDAT></BOLD></HIL><PDAT>. If the value entered into the Consumed Total field </PDAT><HIL><BOLD><PDAT>654</PDAT></BOLD></HIL><PDAT> is greater than the value displayed in the Scheduled Totals field </PDAT><HIL><BOLD><PDAT>652</PDAT></BOLD></HIL><PDAT>, then it is an indication that the procedure demanded a greater amount of time from the personnel resource than was initially allocated. Such a situation may create severe scheduling problems, if the person represented by the personnel resource has another procedure to participate in, and the current procedure is taking longer than originally anticipated. This is a situation that is preferably tracked by the management system, so that personnel time management and scheduling can be optimized.</PDAT></PTEXT></PARA>
<PARA ID="P-00169" LVL="0"><PTEXT><PDAT>Alternately, if the value entered into the Consumed Total field </PDAT><HIL><BOLD><PDAT>654</PDAT></BOLD></HIL><PDAT> is less than the value displayed in the Scheduled Totals field </PDAT><HIL><BOLD><PDAT>652</PDAT></BOLD></HIL><PDAT>, then it is an indication that the procedure required a lesser amount of time from the personnel resource than was initially allocated. Although it is hoped that the excess time not consumed for the procedure was &ldquo;returned&rdquo; and productive use was made thereof, it is far more likely that the excess time was &ldquo;scrapped.&rdquo; Therefore, the management system assumes that the time was lost in an unproductive manner, and there is, in the embodiment depicted, no provision for specifying the actual disposition of the scheduled time that was not consumed. This too is a situation that is preferably tracked by the management system, so that personnel resources are used to their fullest, thus reducing the excess expense associated with under utilized personnel resources.</PDAT></PTEXT></PARA>
<PARA ID="P-00170" LVL="0"><PTEXT><PDAT>When the consumed time for the personnel resource indicated in the Description field </PDAT><HIL><BOLD><PDAT>650</PDAT></BOLD></HIL><PDAT> has been entered into the Consumed Totals field </PDAT><HIL><BOLD><PDAT>654</PDAT></BOLD></HIL><PDAT>, the Next button </PDAT><HIL><BOLD><PDAT>656</PDAT></BOLD></HIL><PDAT> is clicked, and the user is brought to a second instance of the Logged Information window </PDAT><HIL><BOLD><PDAT>648</PDAT></BOLD></HIL><PDAT>, which represents a second personnel resource, if such has been allocated to the procedural pathway. Thus, a separate personnel Logged Information window </PDAT><HIL><BOLD><PDAT>648</PDAT></BOLD></HIL><PDAT> is depicted for each personnel resource that has been allocated to the procedural pathway. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 123</PDAT></FGREF><PDAT> depicts the second instance of the Logged Information window </PDAT><HIL><BOLD><PDAT>648</PDAT></BOLD></HIL><PDAT>, in which the time actually consumed by the next personnel resource, listed in the Description field </PDAT><HIL><BOLD><PDAT>650</PDAT></BOLD></HIL><PDAT>, is entered into the Consumed Totals field </PDAT><HIL><BOLD><PDAT>654</PDAT></BOLD></HIL><PDAT>, in a manner the same as that described above. When this time has been entered, the Next button </PDAT><HIL><BOLD><PDAT>656</PDAT></BOLD></HIL><PDAT> is clicked.</PDAT></PTEXT></PARA>
<PARA ID="P-00171" LVL="0"><PTEXT><PDAT>In the example depicted, only two personnel resources have been allocated to the procedural pathway, and so no more personnel Logged Information windows </PDAT><HIL><BOLD><PDAT>648</PDAT></BOLD></HIL><PDAT> are required. Thus, pressing the Next button </PDAT><HIL><BOLD><PDAT>656</PDAT></BOLD></HIL><PDAT> as described above invokes an instance of the Logged Information window </PDAT><HIL><BOLD><PDAT>648</PDAT></BOLD></HIL><PDAT> that displays an equipment resource in the Description field </PDAT><HIL><BOLD><PDAT>650</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT>. It is possible to enter the consumed time for the various equipment resources directly from the Resource Consumption Log window </PDAT><HIL><BOLD><PDAT>636</PDAT></BOLD></HIL><PDAT>, by pressing the Equipment Utilization button </PDAT><HIL><BOLD><PDAT>647</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>121</PDAT></BOLD></HIL><PDAT>. By so doing, the Logged Information windows </PDAT><HIL><BOLD><PDAT>648</PDAT></BOLD></HIL><PDAT> associated with personnel resources may be bypassed. The amount of allocated time for the equipment resource that was actually consumed is entered in the Consumed Totals field </PDAT><HIL><BOLD><PDAT>654</PDAT></BOLD></HIL><PDAT>, in a manner similar to that described above, and the Next button </PDAT><HIL><BOLD><PDAT>656</PDAT></BOLD></HIL><PDAT> is clicked.</PDAT></PTEXT></PARA>
<PARA ID="P-00172" LVL="0"><PTEXT><PDAT>Had there been additional equipment resources allocated to the procedural pathway, then additional instances of the equipment Logged Information window </PDAT><HIL><BOLD><PDAT>648</PDAT></BOLD></HIL><PDAT> would preferably have been invoked. However, in the example depicted, only one such equipment resource was allocated. Thus, clicking the Next button </PDAT><HIL><BOLD><PDAT>656</PDAT></BOLD></HIL><PDAT> invokes the Logged Event window </PDAT><HIL><BOLD><PDAT>662</PDAT></BOLD></HIL><PDAT>, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 125</PDAT></FGREF><PDAT>, in which the total time for the procedural pathway, as described in the Description field </PDAT><HIL><BOLD><PDAT>650</PDAT></BOLD></HIL><PDAT>, is accounted for. The name of the procedural pathway is depicted in the Description field </PDAT><HIL><BOLD><PDAT>650</PDAT></BOLD></HIL><PDAT>, and the user is given the opportunity to add, update, remove, or set the times for the procedure represented by the procedural pathway.</PDAT></PTEXT></PARA>
<PARA ID="P-00173" LVL="0"><PTEXT><PDAT>For example, pressing the Add button </PDAT><HIL><BOLD><PDAT>664</PDAT></BOLD></HIL><PDAT> adds all of the time previously described in the Logged Information windows </PDAT><HIL><BOLD><PDAT>648</PDAT></BOLD></HIL><PDAT> described above. This creates an entry in the Logged Event window </PDAT><HIL><BOLD><PDAT>662</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT>. The entry so created by clicking the Add button </PDAT><HIL><BOLD><PDAT>664</PDAT></BOLD></HIL><PDAT> can be deleted by pressing the Remove button </PDAT><HIL><BOLD><PDAT>668</PDAT></BOLD></HIL><PDAT>. Additionally, the start and stop times listed in the entry can be changed by clicking on the Set Times button </PDAT><HIL><BOLD><PDAT>670</PDAT></BOLD></HIL><PDAT>, which preferably invokes a dialog for accomplishing the task. If all of the allocated time for the personnel resources and equipment resources had been productively consumed, such that no adjustment to the allocated times had been necessary, then the user could have by passed all of the Logged Information windows </PDAT><HIL><BOLD><PDAT>648</PDAT></BOLD></HIL><PDAT> described above and gone directly to the Logged Event window </PDAT><HIL><BOLD><PDAT>662</PDAT></BOLD></HIL><PDAT> by pressing the Event Times button </PDAT><HIL><BOLD><PDAT>649</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>121</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00174" LVL="0"><PTEXT><PDAT>The event set times are updated with the information specified in the Logged Event window </PDAT><HIL><BOLD><PDAT>662</PDAT></BOLD></HIL><PDAT> by pressing the Update button </PDAT><HIL><BOLD><PDAT>666</PDAT></BOLD></HIL><PDAT>, which invokes the Times Manager dialog box </PDAT><HIL><BOLD><PDAT>672</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>127</PDAT></BOLD></HIL><PDAT>. The Times Manger dialog box </PDAT><HIL><BOLD><PDAT>672</PDAT></BOLD></HIL><PDAT> confirms that the times have been updated. The user proceeds by clicking the OK button </PDAT><HIL><BOLD><PDAT>674</PDAT></BOLD></HIL><PDAT>, which returns control to the Logged Event window </PDAT><HIL><BOLD><PDAT>662</PDAT></BOLD></HIL><PDAT>. Clicking the Next button </PDAT><HIL><BOLD><PDAT>566</PDAT></BOLD></HIL><PDAT> in the Logged Event window </PDAT><HIL><BOLD><PDAT>662</PDAT></BOLD></HIL><PDAT> invokes the Set Care Event Times dialog box </PDAT><HIL><BOLD><PDAT>658</PDAT></BOLD></HIL><PDAT>, depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 128</PDAT></FGREF><PDAT>, in which all of the times specified in the above procedures are posted to the management system by pressing the Yes button </PDAT><HIL><BOLD><PDAT>660</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00175" LVL="0"><PTEXT><PDAT>The new case </PDAT><HIL><BOLD><PDAT>676</PDAT></BOLD></HIL><PDAT> created by the procedure specified above is placed within the Open Cases node </PDAT><HIL><BOLD><PDAT>284</PDAT></BOLD></HIL><PDAT> in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT> of the Browser window </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>129</PDAT></BOLD></HIL><PDAT>. As a preferable default, the new case </PDAT><HIL><BOLD><PDAT>676</PDAT></BOLD></HIL><PDAT> is given the default description that was specified in the Description field </PDAT><HIL><BOLD><PDAT>612</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT>. Cases listed under the Open Cases node </PDAT><HIL><BOLD><PDAT>284</PDAT></BOLD></HIL><PDAT> preferably differ from those listed under the Closed Cases node </PDAT><HIL><BOLD><PDAT>286</PDAT></BOLD></HIL><PDAT> in several respects. As a point of conception, open cases are those that are scheduled but pending, still in progress, or completed but not yet logged. Closed cases are those that have been completed and logged. Thus, changes may still be made to an open case, whereas changes cannot be made to a closed case, unless it is reopened. The management system preferably uses only closed cases in its automated analysis routines, so as to not base results and conclusions on cases that have not been fully logged.</PDAT></PTEXT></PARA>
<PARA ID="P-00176" LVL="0"><PTEXT><PDAT>Resources allocated to a specific case can be designated as having been consumed, scraped, or returned in a quicker manner than the more complete logging method described above. This quicker procedure may be used when, for example, only a specific portion of the procedural pathway of the case has been accomplished, and only the resources specified for that portion of the pathway are to be accounted for. This procedure is initiated by expanding the case </PDAT><HIL><BOLD><PDAT>676</PDAT></BOLD></HIL><PDAT> in the Nested Tree view </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT>. The case </PDAT><HIL><BOLD><PDAT>676</PDAT></BOLD></HIL><PDAT> can be expanded in any one of several different ways, such as by selecting the case by clicking on it and then pressing the enter key on the keyboard, double clicking on the case </PDAT><HIL><BOLD><PDAT>676</PDAT></BOLD></HIL><PDAT>, or clicking on the plus sign next to the name of the case </PDAT><HIL><BOLD><PDAT>676</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00177" LVL="0"><PTEXT><PDAT>Once the case </PDAT><HIL><BOLD><PDAT>676</PDAT></BOLD></HIL><PDAT> has been opened, the resource to be accounted for is selected, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT>. In the example of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 131</PDAT></FGREF><PDAT>, the Anesthesia Prep Kit supply resource object </PDAT><HIL><BOLD><PDAT>466</PDAT></BOLD></HIL><PDAT> has been selected, and the Supply Resource menu has been invoked, such as by right clicking on the Anesthesia Prep Kit supply resource object </PDAT><HIL><BOLD><PDAT>466</PDAT></BOLD></HIL><PDAT>. It is noted at this point that the menu associated with the Anesthesia Prep Kit supply resource object </PDAT><HIL><BOLD><PDAT>466</PDAT></BOLD></HIL><PDAT> under the Open Cases node </PDAT><HIL><BOLD><PDAT>284</PDAT></BOLD></HIL><PDAT> is a different menu than that associated with the Anesthesia Prep Kit supply resource object </PDAT><HIL><BOLD><PDAT>466</PDAT></BOLD></HIL><PDAT> under the Resource Plans node </PDAT><HIL><BOLD><PDAT>282</PDAT></BOLD></HIL><PDAT>. Thus, even though the Anesthesia Prep Kit supply resource object </PDAT><HIL><BOLD><PDAT>466</PDAT></BOLD></HIL><PDAT> has been copied from one node to another, the management system treats the objects differently according to the location of the object, and presents menu options that are context sensitive to the location of the object. Selecting the Quick Consume function </PDAT><HIL><BOLD><PDAT>680</PDAT></BOLD></HIL><PDAT> invokes the Supplies Manager </PDAT><HIL><BOLD><PDAT>682</PDAT></BOLD></HIL><PDAT>, depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 132</PDAT></FGREF><PDAT>, in which information about the number of units allocated to the case, and the disposition of the number of units allocated, is depicted.</PDAT></PTEXT></PARA>
<PARA ID="P-00178" LVL="0"><PTEXT><PDAT>The number of units allocated, as described in the procedural pathway, is initially displayed in the Consumed field </PDAT><HIL><BOLD><PDAT>684</PDAT></BOLD></HIL><PDAT>. Thus, the management system initially assumes that the scheduled number of units will all be consumed. If, however, such is not the case, then the user merely changes the value entered in the Consumed field </PDAT><HIL><BOLD><PDAT>684</PDAT></BOLD></HIL><PDAT>. As soon as this event occurs, the Scrapped field </PDAT><HIL><BOLD><PDAT>686</PDAT></BOLD></HIL><PDAT> and the Returned field </PDAT><HIL><BOLD><PDAT>688</PDAT></BOLD></HIL><PDAT> become active and editable, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>133</PDAT></BOLD></HIL><PDAT>. Thus, the user can specify the number of units that are either scrapped or returned. Pressing the OK button </PDAT><HIL><BOLD><PDAT>690</PDAT></BOLD></HIL><PDAT> completes the procedure and posts the disposition of the resources to the management system.</PDAT></PTEXT></PARA>
<PARA ID="P-00179" LVL="0"><PTEXT><PDAT>One of the many tremendous benefits of the management system according to the present invention is the ability to extract detailed information and analysis from the data that is collected from the cases. As an overview in retrospect, the initial description provided herein was of creating procedural pathways within the Resource Plans node </PDAT><HIL><BOLD><PDAT>282</PDAT></BOLD></HIL><PDAT>. These procedural pathways represented standard templates that are used to schedule and allocate the various available resources required to complete the procedure represented by the procedural pathway.</PDAT></PTEXT></PARA>
<PARA ID="P-00180" LVL="0"><PTEXT><PDAT>After a procedural pathway is constructed, an actual case is copied from the procedural pathway to the Open Cases node </PDAT><HIL><BOLD><PDAT>284</PDAT></BOLD></HIL><PDAT>. The actual disposition of the resources allocated to the case, as based on the procedural pathway, is specified. Once the disposition of the resources has been accomplished, the case can be used in a model to analyze the efficiency of the procedural pathway and the utilization of resources. This analysis procedure is commenced by invoking the Open Case menu </PDAT><HIL><BOLD><PDAT>692</PDAT></BOLD></HIL><PDAT>, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 134</PDAT></FGREF><PDAT>, such as by right clicking on the new case </PDAT><HIL><BOLD><PDAT>676</PDAT></BOLD></HIL><PDAT>, and selecting the Build Analysis Model function </PDAT><HIL><BOLD><PDAT>694</PDAT></BOLD></HIL><PDAT>, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 135. A</PDAT></FGREF><PDAT> new model </PDAT><HIL><BOLD><PDAT>696</PDAT></BOLD></HIL><PDAT> is thereby created under the Models node </PDAT><HIL><BOLD><PDAT>290</PDAT></BOLD></HIL><PDAT>, which new model </PDAT><HIL><BOLD><PDAT>696</PDAT></BOLD></HIL><PDAT> is preferably given a standardized name by the management system, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00181" LVL="0"><PTEXT><PDAT>A more descriptive name is given to the new model </PDAT><HIL><BOLD><PDAT>696</PDAT></BOLD></HIL><PDAT> by invoking the Update Description dialog box </PDAT><HIL><BOLD><PDAT>698</PDAT></BOLD></HIL><PDAT>, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 137</PDAT></FGREF><PDAT>, such as by pressing the F</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> key on the keyboard when the new model </PDAT><HIL><BOLD><PDAT>696</PDAT></BOLD></HIL><PDAT> is highlighted. The desired description for the new model </PDAT><HIL><BOLD><PDAT>696</PDAT></BOLD></HIL><PDAT> is entered into the Description field </PDAT><HIL><BOLD><PDAT>700</PDAT></BOLD></HIL><PDAT>, and the selection of the new description is posted to the management system by clicking the Close button </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT>. The renamed model </PDAT><HIL><BOLD><PDAT>696</PDAT></BOLD></HIL><PDAT> is depicted in FIG. </PDAT><HIL><BOLD><PDAT>138</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00182" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 139</PDAT></FGREF><PDAT> depicts the contents of the model </PDAT><HIL><BOLD><PDAT>696</PDAT></BOLD></HIL><PDAT>, which appear identical to the contents of the corresponding case </PDAT><HIL><BOLD><PDAT>676</PDAT></BOLD></HIL><PDAT>, on which the model is based, the contents of which case </PDAT><HIL><BOLD><PDAT>676</PDAT></BOLD></HIL><PDAT> appear similar to the contents of the corresponding procedural pathway </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT>. However, in reality, the various objects which are the contents of the model </PDAT><HIL><BOLD><PDAT>696</PDAT></BOLD></HIL><PDAT>, case </PDAT><HIL><BOLD><PDAT>676</PDAT></BOLD></HIL><PDAT>, and pathway </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> are not identical. One evidence of this is that the contextual menus for the corresponding objects within the model </PDAT><HIL><BOLD><PDAT>696</PDAT></BOLD></HIL><PDAT>, case </PDAT><HIL><BOLD><PDAT>676</PDAT></BOLD></HIL><PDAT>, and pathway </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT> are not the same. Each of the contextual menus provide a different set of functions, which functions are specifically related to the purpose and character of the objects. Further, while the objects in one node do correlate and track with their counterpart objects in other nodes, they contain different types of data, specific to their intended functions. This becomes further evident in the discussion below, which describes more of the analysis functions of the management system.</PDAT></PTEXT></PARA>
<PARA ID="P-00183" LVL="0"><PTEXT><PDAT>A discussion of the preferred method of creating a new study, in which an analysis can be performed, is commenced with reference to FIG. </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT>. The Standardization Reports node </PDAT><HIL><BOLD><PDAT>288</PDAT></BOLD></HIL><PDAT> is selected, and the Standardization Reports menu is invoked in one of the methods described above. The New Study function </PDAT><HIL><BOLD><PDAT>706</PDAT></BOLD></HIL><PDAT> is selected from the Standardization Reports menu </PDAT><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><PDAT>, as depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 141</PDAT></FGREF><PDAT>, and a new study </PDAT><HIL><BOLD><PDAT>708</PDAT></BOLD></HIL><PDAT> is created, with a default name as preferably determined by the management system, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>142</PDAT></BOLD></HIL><PDAT>. The new study is given a new name by invoking the Update Description dialog box </PDAT><HIL><BOLD><PDAT>698</PDAT></BOLD></HIL><PDAT>, as described above, entering the desired new name, and clicking the Close button </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>143</PDAT></BOLD></HIL><PDAT>. The renamed study is displayed as depicted in FIG. </PDAT><HIL><BOLD><PDAT>144</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00184" LVL="0"><PTEXT><PDAT>The model on which the study is to be based is selected, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>145</PDAT></BOLD></HIL><PDAT>. In the example of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 145</PDAT></FGREF><PDAT>, the Anderson Open Heart Analysis Model </PDAT><HIL><BOLD><PDAT>696</PDAT></BOLD></HIL><PDAT> is selected for the new Open Heart Study </PDAT><HIL><BOLD><PDAT>708</PDAT></BOLD></HIL><PDAT>. The study is created by moving the Open Heart Analysis Model </PDAT><HIL><BOLD><PDAT>696</PDAT></BOLD></HIL><PDAT> from the Models node </PDAT><HIL><BOLD><PDAT>290</PDAT></BOLD></HIL><PDAT> to the appropriate study </PDAT><HIL><BOLD><PDAT>708</PDAT></BOLD></HIL><PDAT> within the Standardization Reports node </PDAT><HIL><BOLD><PDAT>288</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>146</PDAT></BOLD></HIL><PDAT>. Again it is mentioned at this juncture, that although the objects that are copied and moved from one node to another appear to retain their exact identity and function, this is not the case. Copying and moving the objects from one node to another modifies the object to retain a portion of its prior characteristics, and a link to the prior associated object, but endows the new object with additional functionality, as described throughout this discussion. It is this ability to retain specific aspects of the precursor object while accepting aspects of the successor object that allows the management system according to the present invention to provide such power with such an easily understood interface.</PDAT></PTEXT></PARA>
<PARA ID="P-00185" LVL="0"><PTEXT><PDAT>The analysis is commenced by invoking the Analysis menu </PDAT><HIL><BOLD><PDAT>710</PDAT></BOLD></HIL><PDAT> from the selected model </PDAT><HIL><BOLD><PDAT>696</PDAT></BOLD></HIL><PDAT> inside of the appropriate study </PDAT><HIL><BOLD><PDAT>708</PDAT></BOLD></HIL><PDAT>, as depicted in FIG. </PDAT><HIL><BOLD><PDAT>147</PDAT></BOLD></HIL><PDAT>. From this menu, the management system of the exemplar embodiment provides the ability for the user to create many different kinds of reports. For example, reports can be generated which track how well the resources allocated to a given procedural pathway correlate to the actual usage of those resources.</PDAT></PTEXT></PARA>
<PARA ID="P-00186" LVL="0"><PTEXT><PDAT>The foregoing description of the preferred and exemplar embodiments of the present invention is for the purposes of illustration and not limitation. The preferred and exemplar embodiments are capable of numerous modifications, substitutions and deletions without departing from the scope of the invention as set forth in the following claims. For example, while the preferred and exemplar embodiments are described as being implemented in the Windows 95 or Windows NT environment using ActiveX or OLE controls from Microsoft Corp., the modular software object approach described could be implemented in other standards or operating environments such as Delphi. Furthermore, while the objects described above are preferentially written in Visual C&plus;&plus;, any other common programming language may be used as well. Finally, while the computer environment is preferentially a PC environment, either networked or stand alone, other computer systems such as RISC servers, workstations, mainframes, or access to processors through the Internet may be substituted.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00187" LVL="0"><PTEXT><PDAT>1. A system for managing health care services, comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a) computing means having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) input means for receiving patient health care information, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) storage means for storing data corresponding to the patient health care information, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iii) processing means for processing software objects corresponding to health care services management instructions and the patient health care information and producing health care services management output, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iv) display means for visually presenting the health care services output, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>b) the software objects including data software objects having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) means for receiving the patient health care information, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) means for providing the patient health care information through a standardized interface, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>c) the software objects including resource software objects for associating resources with information relating to the resources, including; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) personnel resource software objects having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(1) means for associating a health care personnel resource with information relating to the health care personnel resource, including at least one of a personnel resource billing rate, a personnel resource pay rate, and a personnel resource time requirement, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(2) means for providing the information relating to the health care personnel resource through the standardized interface, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) equipment resource software objects having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(1) means for associating a health care equipment resource with information relating to the health care equipment resource, including at least one of an equipment resource billing rate, an equipment resource cost, and an equipment resource time requirement, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(2) means for providing the information relating to the health care equipment resource through the standardized interface, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iii) supply resource software objects including; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(1) bundle supply resource software objects having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="5"><PTEXT><PDAT>(a) means for associating health care supply resources with information relating to health care supply resources, including at least one of a supply resource billing rate and a supply resource cost, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="5"><PTEXT><PDAT>(b) means for providing the information relating to health care supply resources through the standardized interface, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(2) conditional bundle supply resource software objects having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="5"><PTEXT><PDAT>(a) means for associating health care supply resources with information relating to health care supply resources, including at least one of supply resource billing rates and supply resource costs, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="5"><PTEXT><PDAT>(b) means for selectively providing the information relating to health care supply resources through the standardized interface based at least in part on the patient health care information provided by at least one of the data software objects, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>d) the software objects including node software objects including at least a pathway node software object having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) means for selectively creating the data software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) means for selectively creating the resource software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iii) means for selectively linking the standardized interface of the data software objects and resource software objects into configurable procedural pathways associated with health care treatment plans, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iv) means for selectively adapting the information provided through the standardized interface of the data software objects, and resource software objects, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>v) means for providing the data software objects, and resource software objects, with a first set of functions specifically adapted to the pathway node software object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00188" LVL="0"><PTEXT><PDAT>2. The system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, further comprising container software objects having;</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a) means for selectively associating groups of data software objects, resource software objects, and container software objects, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>b) means for associating the groups with information relating to at least one of a health care procedure and a health care resource kit. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00189" LVL="0"><PTEXT><PDAT>3. The system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein the node software objects further comprise a case node software object having:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a) means for receiving the procedural pathways from the pathway node software object and converting the procedural pathways into at least one of an open case software object and a closed case software object, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>b) means for providing open case software objects and closed case software objects to the pathway node software object, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>c) means for selectively adapting the information provided through the standardized interface of the data software objects and resource software objects, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>d) means for providing the data software objects and resource software objects with a second set of functions specifically adapted to the case node software object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00190" LVL="0"><PTEXT><PDAT>4. The system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein the node software objects further comprise a model node software object having:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a) means for receiving the closed case software objects from the case node software object and converting the closed case software objects into analysis model software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>b) means for providing analysis model software objects to the case node software object, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>c) means for selectively adapting the information provided through the standardized interface of the data software objects and resource software objects, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>d) means for providing the data software objects and resource software objects with a third set of functions specifically adapted to the model node software object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00191" LVL="0"><PTEXT><PDAT>5. The system of claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, wherein the node software objects further comprise a report node software object having:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a) means for receiving the analysis model software objects from the model node software object and converting the analysis model software objects into configurable report software objects </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>b) means for providing configurable report software objects to the model node software object, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>c) means for selectively adapting the information provided through the standardized interface of the data software objects and resource software objects, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>d) means for providing the data software objects and resource software objects with a fourth set of functions specifically adapted to the model node software object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00192" LVL="0"><PTEXT><PDAT>6. The system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein the node software objects further comprise a library node software object having;</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a) means for selectively creating the data software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>b) means for selectively creating the resource software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>c) means for selectively creating container software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>d) means for selectively linking the standardized interface of the data software objects, resource software objects, and container software objects into configurable sets associated with the health care services, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>e) means for selectively adapting the information provided through the standardized interface of the data software objects, resource software objects, and container software objects, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>f) means for providing the data software objects, resource software objects, and container software objects with a fifth set of functions specifically adapted to the model node software object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00193" LVL="0"><PTEXT><PDAT>7. The system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, further comprising means for scheduling health care services resources based at least in part on the health care services management output.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00194" LVL="0"><PTEXT><PDAT>8. The system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, further comprising means for billing patients based at least in part on the health care services management output.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00195" LVL="0"><PTEXT><PDAT>9. The system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, further comprising means for ordering supplies based at least in part on the health care services management output.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00196" LVL="0"><PTEXT><PDAT>10. A system for managing health care services, comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a) computing means having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) input means for receiving health care services information and health care services management instructions, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) storage means for storing data corresponding to the health care services information, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iii) processing means for selectively processing commands corresponding to the health care services management instructions based on the health care services information and producing health care services management output, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iv) display means for visually presenting the health care services output, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>b) data software objects having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) means for receiving patient health care information, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) means for providing the patient health care information through a standardized interface, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>c) resource software objects for associating resources with information relating to the resources, including; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) personnel resource software objects having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(1) means for associating a health care personnel resource with information relating to the health care personnel resource, including at least one of a personnel resource billing rate, a personnel resource pay rate, and a personnel resource time requirement, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(2) means for providing the information relating to the health care personnel resource through the standardized interface, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) equipment resource software objects having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(1) means for associating a health care equipment resource with information relating to the health care equipment resource, including at least one of an equipment resource billing rate, an equipment resource cost, and an equipment resource time requirement, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(2) means for providing the information relating to the health care equipment resource through the standardized interface, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iii) supply resource software objects including; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(1) bundle supply resource software objects having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="5"><PTEXT><PDAT>(a) means for associating health care supply resources with information relating to health care supply resources, including at least one of a supply resource billing rate and a supply resource cost, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="5"><PTEXT><PDAT>(b) means for providing the information relating to health care supply resources through the standardized interface, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(2) conditional bundle supply resource software objects having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="5"><PTEXT><PDAT>(a) means for associating health care supply resources with information relating to health care supply resources, including at least one of supply resource billing rates and supply resource costs, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="5"><PTEXT><PDAT>(b) means for selectively providing the information relating to health care supply resources through the standardized interface based at least in part on the patient health care information provided by at least one of the data software objects, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>d) container software objects having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) means for selectively associating groups of data software objects, resource software objects, and container software objects, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) means for associating the groups with information relating to at least one of a health care procedure and a health care resource kit, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>e) node software objects including; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a pathway node software object having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(1) means for selectively creating the data software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(2) means for selectively creating the resource software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(3) means for selectively creating the container software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(4) means for selectively linking the standardized interface of the data software objects, resource software objects, and container software objects into configurable procedural pathways associated with health care treatment plans, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(5) means for selectively adapting the information provided through the standardized interface of the data software objects, resource software objects, and container software objects, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(6) means for providing the data software objects, resource software objects, and container software objects with a first set of functions specifically adapted to the pathway node software object, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) a case node software object having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(1) means for receiving the procedural pathways from the pathway node software object and converting the procedural pathways into at least one of an open case software object and a closed case software object, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(2) means for providing open case software objects and closed case software objects to the pathway node software object, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(3) means for selectively adapting the information provided through the standardized interface of the data software objects, resource software objects, and container software objects, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(4) means for providing the data software objects, resource software objects, and container software objects with a second set of functions specifically adapted to the case node software object, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iii) a model node software object having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(1) means for receiving the closed case software objects from the case node software object and converting the closed case software objects into analysis model software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(2) means for providing analysis model software objects to the case node software object, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(3) means for selectively adapting the information provided through the standardized interface of the data software objects, resource software objects, and container software objects, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(4) means for providing the data software objects, resource software objects, and container software objects with a third set of functions specifically adapted to the model node software object, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iv) a report node software object having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(1) means for receiving the analysis model software objects from the model node software object and converting the analysis model software objects into configurable report software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(2) means for providing configurable report software objects to the model </PDAT><HIL><BOLD><PDAT>95</PDAT></BOLD></HIL><PDAT> node software object, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(3) means for selectively adapting the information provided through the standardized interface of the data software objects, resource software objects, and container software objects, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(4) means for providing the data software objects, resource software objects, and container software objects with a fourth set of functions specifically adapted to the model node software object, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>v) a library node software object having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(1) means for selectively creating the data software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(2) means for selectively creating the resource software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(3) means for selectively creating the container software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(4) means for selectively linking the standardized interface of the data software objects, resource software objects, and container software objects into configurable sets associated with the health care services, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(5) means for selectively adapting the information provided through the standardized interface of the data software objects, resource software objects, and container software objects, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>(6) means for providing the data software objects, resource software objects, and container software objects with a fifth set of functions specifically adapted to the model node software object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00197" LVL="0"><PTEXT><PDAT>11. An information management system for managing information relating to providing health care services, comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a) a general purpose computer system having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) storage means for storing data corresponding to the information, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) processing means for processing management instructions, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iii) display means for visually presenting the information, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iv) input means for receiving the management instructions and the information; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>b) information management software installed on the general purpose computer system and having software objects, each of the software objects providing a health care information management function and corresponding to an aspect of providing health care services, wherein the software objects are combined in procedural pathways corresponding to sets of health care procedures. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00198" LVL="0"><PTEXT><PDAT>12. The information management system of claim </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>, wherein the software objects further comprise node software objects for creating, altering characteristics of, and the management of the software objects.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00199" LVL="0"><PTEXT><PDAT>13. The information management system of claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, wherein the characteristics of the software objects further comprise predefined options for modifying or manipulating a selected one of the software objects.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00200" LVL="0"><PTEXT><PDAT>14. The information management system of claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, wherein the management of the software objects further comprises analyzing health care information associated with a selected one of the software objects.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00201" LVL="0"><PTEXT><PDAT>15. The information management system of claim </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>, wherein the software objects further comprise container software objects for containing the software objects, and corresponding to at least one of health care procedures, health care information, and health care resource groups.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00202" LVL="0"><PTEXT><PDAT>16. The information management system of claim </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT>, wherein the container software objects further comprise care event container software objects for containing the software objects, and corresponding to health care procedures.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00017">
<PARA ID="P-00203" LVL="0"><PTEXT><PDAT>17. The information management system of claim </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT>, wherein the container software objects further comprise bundle container software objects for containing the software objects, and corresponding to health care resource groups.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00018">
<PARA ID="P-00204" LVL="0"><PTEXT><PDAT>18. The information management system of claim </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>, wherein the software objects further comprise resource software objects corresponding to resources to be used in the provision of health care services.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00019">
<PARA ID="P-00205" LVL="0"><PTEXT><PDAT>19. The information management system of claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT>, wherein the resource software objects further comprise equipment resource software objects corresponding to equipment to be used in the provision of health care services.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00020">
<PARA ID="P-00206" LVL="0"><PTEXT><PDAT>20. The information management system of claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT>, wherein the resource software objects further comprise personnel resource software objects corresponding to personnel to be used in the provision of health care services.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00021">
<PARA ID="P-00207" LVL="0"><PTEXT><PDAT>21. The information management system of claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT>, wherein the resource software objects further comprise supply resource software objects corresponding to supplies to be used in the provision of health care services.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00022">
<PARA ID="P-00208" LVL="0"><PTEXT><PDAT>22. The information management system of claim </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>, wherein the software objects further comprise data software objects corresponding to health care information associated with the provision of health care services.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00023">
<PARA ID="P-00209" LVL="0"><PTEXT><PDAT>23. The information management system of claim </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>, wherein the software objects further comprise:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a) node software objects for creating, altering characteristics of, and managing the software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>b) container software objects for containing the software objects, and corresponding to at least one of health care procedures, health care information, and health care resource groups, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>c) resource software objects corresponding to resources to be used in the provision of health care services, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>d) data software objects corresponding to health care information. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00024">
<PARA ID="P-00210" LVL="0"><PTEXT><PDAT>24. The information management system of claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, wherein the node software objects, container software objects, resource software objects, and data software objects are combined in cases corresponding to sets of health care procedures designated for a patient.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00025">
<PARA ID="P-00211" LVL="0"><PTEXT><PDAT>25. The information management system of claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>, wherein the cases are selectively designated as open, corresponding to sets of health care procedures that are planned for a patient.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00026">
<PARA ID="P-00212" LVL="0"><PTEXT><PDAT>26. The information management system of claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>, wherein the cases are selectively designated as closed, corresponding to sets of health care procedures that are completed for a patient.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00027">
<PARA ID="P-00213" LVL="0"><PTEXT><PDAT>27. The information management system of claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, wherein the node software objects, container software objects, resource software objects, and data software objects are combined in a library of predefined care event containers corresponding to predefined health care procedures.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00028">
<PARA ID="P-00214" LVL="0"><PTEXT><PDAT>28. The information management system of claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, wherein the node software objects, container software objects, resource software objects, and data software objects are combined in a library of predefined bundle containers corresponding to predefined health care resource groups.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00029">
<PARA ID="P-00215" LVL="0"><PTEXT><PDAT>29. The information management system of claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, wherein the node software objects, container software objects, resource software objects, and data software objects are combined in a library of procedural pathways having predefined care event containers corresponding to predefined health care procedures and predefined bundle containers corresponding to predefined health care resource groups, corresponding to predefined sets of health care procedures.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00030">
<PARA ID="P-00216" LVL="0"><PTEXT><PDAT>30. The information management system of claim </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT>, wherein at least a portion of the predefined bundle containers are selectively included based at least in part on the health care information in the data software objects.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00031">
<PARA ID="P-00217" LVL="0"><PTEXT><PDAT>31. The information management system of claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, wherein at least a portion of the resource software objects are selectively included within a procedural pathway node software object based at least in part upon user entered information in the data software objects.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00032">
<PARA ID="P-00218" LVL="0"><PTEXT><PDAT>32. An information management system for managing information relating to providing health care services, comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a) a general purpose computer system having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) storage means for storing data corresponding to the information, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) processing means for processing management instructions, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iii) display means for visually presenting the information, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iv) input means for receiving the management instructions and the information; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>b) information management software installed on the general purpose computer system and having software objects, each of the software objects providing a health care information management function and corresponding to an aspect of providing health care services, the software objects including; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) node software objects for creating, altering characteristics of, and managing the software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) container software objects for containing the software objects, and corresponding to at least one of health care procedures, health care information, and health care resource groups, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iii) resource software objects corresponding to resources to be used in the provision of health care services, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iv) data software objects corresponding to health care information; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>c) the node software objects, container software objects, resource software objects, and data software objects combined in procedural pathways corresponding to sets of health care procedures. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00033">
<PARA ID="P-00219" LVL="0"><PTEXT><PDAT>33. The information management system of claim </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT>, wherein at least a portion of the resource software objects are selectively combined within the procedural pathways based at least in part upon user entered information in the data software objects.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00034">
<PARA ID="P-00220" LVL="0"><PTEXT><PDAT>34. An information management system for managing information relating to providing health care services, comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a) a general purpose computer system having; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) storage means for storing data corresponding to the information, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) processing means for processing management instructions, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iii) display means for visually presenting the information, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iv) input means for receiving the management instructions and the information; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>b) information management software installed on the general purpose computer system and having software objects, each of the software objects providing a health care information management function and corresponding to an aspect of providing health care services, the software objects including; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) node software objects for creating, altering characteristics of, and managing the software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) container software objects for containing the software objects, and corresponding to at least one of health care procedures, health care information, and health care resource groups, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iii) resource software objects corresponding to resources to be used in the provision of health care services, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iv) data software objects corresponding to health care information; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>c) the node software objects, container software objects, resource software objects, and data software objects provided in a hierarchical form, corresponding to a sequential order of health care procedures to be performed, health care resources to be provided, and health care information to be gathered and recorded. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00035">
<PARA ID="P-00221" LVL="0"><PTEXT><PDAT>35. The information management system of claim </PDAT><HIL><BOLD><PDAT>34</PDAT></BOLD></HIL><PDAT>, wherein at least a portion of the resource software objects are selectively provided based at least in part on the health care information recorded within the data software objects.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00036">
<PARA ID="P-00222" LVL="0"><PTEXT><PDAT>36. A method for managing health care services, comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a) entering patient health care information into a computing means with an input means, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>b) storing data corresponding to the patient health care information in a storage means, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>c) processing software objects corresponding to health care services management instructions and the patient health care information on a processing means, and thereby producing health care services management output with the processing means, the processing further including; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) selectively creating data software objects, equipment resource software objects, personnel resource software objects, bundle supply resource software objects, and conditional bundle supply resource software objects with a pathway node software object, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) receiving the patient health care information with the data software object, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iii) providing the patient health care information through a standardized interface, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>iv) associating a health care equipment resource with information relating to the health care equipment resource with the equipment resource software object, the information relating to the health care equipment resource including at least one or an equipment resource billing rate, and equipment resource cost, and an equipment resource time requirement, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>v) providing the information relating to the health care equipment resource through the standardized interface, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>vi) associating a health care personnel resource with information relating to the health care personnel resource with the personnel resource software object, the information relating to the health care personnel resource including at least one of a personnel resource billing rate, a personnel resource pay rate, and a personnel resource time requirement, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>vii)providing the information relating to the health care personnel resource through the standardized interface, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>viii) associating health care supply resources with information relating to health care supply resources with the bundle supply resource software object, the information relating to health care supply resources including at least one of a supply resource billing rate and a supply resource cost, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ix) providing the information relating to the health care supply resources through the standardized interface, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>x) associating health care supply resources with information relating to health care supply resources with the conditional bundle supply resource software object, the information relating to health care supply resources including at least one of supply resource billing rates and supply resource costs, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>xi) selectively providing the information relating to health care supply resources through the standardized interface based at least in part on the patient health care information provided by at least one of the data software objects, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>xii)selectively linking the standardized interface of the data software objects, equipment resource software objects, personnel resource software objects, bundle supply resource software objects, and conditional bundle supply resource software objects with the pathway node software object, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>xiii) selectively adapting the information provided through the standardized interface of the data software objects, equipment resource software objects, personnel resource software objects, bundle supply resource software objects, and conditional bundle supply resource software objects with the pathway node software object, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>xiv) providing the data software objects, equipment resource software objects, personnel resource software objects, bundle supply resource software objects, and conditional bundle supply resource software objects with a first set of function specifically adapted to the pathway node software object, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>d) visually presenting the health care services output on a display means.</PDAT></PTEXT></CLMSTEP>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314556-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314556-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314556-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314556-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314556-20011106-D00004.TIF">
<EMI ID="EMI-D00005" FILE="US06314556-20011106-D00005.TIF">
<EMI ID="EMI-D00006" FILE="US06314556-20011106-D00006.TIF">
<EMI ID="EMI-D00007" FILE="US06314556-20011106-D00007.TIF">
<EMI ID="EMI-D00008" FILE="US06314556-20011106-D00008.TIF">
<EMI ID="EMI-D00009" FILE="US06314556-20011106-D00009.TIF">
<EMI ID="EMI-D00010" FILE="US06314556-20011106-D00010.TIF">
<EMI ID="EMI-D00011" FILE="US06314556-20011106-D00011.TIF">
<EMI ID="EMI-D00012" FILE="US06314556-20011106-D00012.TIF">
<EMI ID="EMI-D00013" FILE="US06314556-20011106-D00013.TIF">
<EMI ID="EMI-D00014" FILE="US06314556-20011106-D00014.TIF">
<EMI ID="EMI-D00015" FILE="US06314556-20011106-D00015.TIF">
<EMI ID="EMI-D00016" FILE="US06314556-20011106-D00016.TIF">
<EMI ID="EMI-D00017" FILE="US06314556-20011106-D00017.TIF">
<EMI ID="EMI-D00018" FILE="US06314556-20011106-D00018.TIF">
<EMI ID="EMI-D00019" FILE="US06314556-20011106-D00019.TIF">
<EMI ID="EMI-D00020" FILE="US06314556-20011106-D00020.TIF">
<EMI ID="EMI-D00021" FILE="US06314556-20011106-D00021.TIF">
<EMI ID="EMI-D00022" FILE="US06314556-20011106-D00022.TIF">
<EMI ID="EMI-D00023" FILE="US06314556-20011106-D00023.TIF">
<EMI ID="EMI-D00024" FILE="US06314556-20011106-D00024.TIF">
<EMI ID="EMI-D00025" FILE="US06314556-20011106-D00025.TIF">
<EMI ID="EMI-D00026" FILE="US06314556-20011106-D00026.TIF">
<EMI ID="EMI-D00027" FILE="US06314556-20011106-D00027.TIF">
<EMI ID="EMI-D00028" FILE="US06314556-20011106-D00028.TIF">
<EMI ID="EMI-D00029" FILE="US06314556-20011106-D00029.TIF">
<EMI ID="EMI-D00030" FILE="US06314556-20011106-D00030.TIF">
<EMI ID="EMI-D00031" FILE="US06314556-20011106-D00031.TIF">
<EMI ID="EMI-D00032" FILE="US06314556-20011106-D00032.TIF">
<EMI ID="EMI-D00033" FILE="US06314556-20011106-D00033.TIF">
<EMI ID="EMI-D00034" FILE="US06314556-20011106-D00034.TIF">
<EMI ID="EMI-D00035" FILE="US06314556-20011106-D00035.TIF">
<EMI ID="EMI-D00036" FILE="US06314556-20011106-D00036.TIF">
<EMI ID="EMI-D00037" FILE="US06314556-20011106-D00037.TIF">
<EMI ID="EMI-D00038" FILE="US06314556-20011106-D00038.TIF">
<EMI ID="EMI-D00039" FILE="US06314556-20011106-D00039.TIF">
<EMI ID="EMI-D00040" FILE="US06314556-20011106-D00040.TIF">
<EMI ID="EMI-D00041" FILE="US06314556-20011106-D00041.TIF">
<EMI ID="EMI-D00042" FILE="US06314556-20011106-D00042.TIF">
<EMI ID="EMI-D00043" FILE="US06314556-20011106-D00043.TIF">
<EMI ID="EMI-D00044" FILE="US06314556-20011106-D00044.TIF">
<EMI ID="EMI-D00045" FILE="US06314556-20011106-D00045.TIF">
<EMI ID="EMI-D00046" FILE="US06314556-20011106-D00046.TIF">
<EMI ID="EMI-D00047" FILE="US06314556-20011106-D00047.TIF">
<EMI ID="EMI-D00048" FILE="US06314556-20011106-D00048.TIF">
<EMI ID="EMI-D00049" FILE="US06314556-20011106-D00049.TIF">
<EMI ID="EMI-D00050" FILE="US06314556-20011106-D00050.TIF">
<EMI ID="EMI-D00051" FILE="US06314556-20011106-D00051.TIF">
<EMI ID="EMI-D00052" FILE="US06314556-20011106-D00052.TIF">
<EMI ID="EMI-D00053" FILE="US06314556-20011106-D00053.TIF">
<EMI ID="EMI-D00054" FILE="US06314556-20011106-D00054.TIF">
<EMI ID="EMI-D00055" FILE="US06314556-20011106-D00055.TIF">
<EMI ID="EMI-D00056" FILE="US06314556-20011106-D00056.TIF">
<EMI ID="EMI-D00057" FILE="US06314556-20011106-D00057.TIF">
<EMI ID="EMI-D00058" FILE="US06314556-20011106-D00058.TIF">
<EMI ID="EMI-D00059" FILE="US06314556-20011106-D00059.TIF">
<EMI ID="EMI-D00060" FILE="US06314556-20011106-D00060.TIF">
<EMI ID="EMI-D00061" FILE="US06314556-20011106-D00061.TIF">
<EMI ID="EMI-D00062" FILE="US06314556-20011106-D00062.TIF">
<EMI ID="EMI-D00063" FILE="US06314556-20011106-D00063.TIF">
<EMI ID="EMI-D00064" FILE="US06314556-20011106-D00064.TIF">
<EMI ID="EMI-D00065" FILE="US06314556-20011106-D00065.TIF">
<EMI ID="EMI-D00066" FILE="US06314556-20011106-D00066.TIF">
<EMI ID="EMI-D00067" FILE="US06314556-20011106-D00067.TIF">
<EMI ID="EMI-D00068" FILE="US06314556-20011106-D00068.TIF">
<EMI ID="EMI-D00069" FILE="US06314556-20011106-D00069.TIF">
<EMI ID="EMI-D00070" FILE="US06314556-20011106-D00070.TIF">
<EMI ID="EMI-D00071" FILE="US06314556-20011106-D00071.TIF">
<EMI ID="EMI-D00072" FILE="US06314556-20011106-D00072.TIF">
<EMI ID="EMI-D00073" FILE="US06314556-20011106-D00073.TIF">
<EMI ID="EMI-D00074" FILE="US06314556-20011106-D00074.TIF">
<EMI ID="EMI-D00075" FILE="US06314556-20011106-D00075.TIF">
<EMI ID="EMI-D00076" FILE="US06314556-20011106-D00076.TIF">
<EMI ID="EMI-D00077" FILE="US06314556-20011106-D00077.TIF">
<EMI ID="EMI-D00078" FILE="US06314556-20011106-D00078.TIF">
<EMI ID="EMI-D00079" FILE="US06314556-20011106-D00079.TIF">
<EMI ID="EMI-D00080" FILE="US06314556-20011106-D00080.TIF">
<EMI ID="EMI-D00081" FILE="US06314556-20011106-D00081.TIF">
<EMI ID="EMI-D00082" FILE="US06314556-20011106-D00082.TIF">
<EMI ID="EMI-D00083" FILE="US06314556-20011106-D00083.TIF">
<EMI ID="EMI-D00084" FILE="US06314556-20011106-D00084.TIF">
<EMI ID="EMI-D00085" FILE="US06314556-20011106-D00085.TIF">
<EMI ID="EMI-D00086" FILE="US06314556-20011106-D00086.TIF">
<EMI ID="EMI-D00087" FILE="US06314556-20011106-D00087.TIF">
<EMI ID="EMI-D00088" FILE="US06314556-20011106-D00088.TIF">
<EMI ID="EMI-D00089" FILE="US06314556-20011106-D00089.TIF">
<EMI ID="EMI-D00090" FILE="US06314556-20011106-D00090.TIF">
<EMI ID="EMI-D00091" FILE="US06314556-20011106-D00091.TIF">
<EMI ID="EMI-D00092" FILE="US06314556-20011106-D00092.TIF">
<EMI ID="EMI-D00093" FILE="US06314556-20011106-D00093.TIF">
<EMI ID="EMI-D00094" FILE="US06314556-20011106-D00094.TIF">
<EMI ID="EMI-D00095" FILE="US06314556-20011106-D00095.TIF">
<EMI ID="EMI-D00096" FILE="US06314556-20011106-D00096.TIF">
<EMI ID="EMI-D00097" FILE="US06314556-20011106-D00097.TIF">
<EMI ID="EMI-D00098" FILE="US06314556-20011106-D00098.TIF">
<EMI ID="EMI-D00099" FILE="US06314556-20011106-D00099.TIF">
<EMI ID="EMI-D00100" FILE="US06314556-20011106-D00100.TIF">
<EMI ID="EMI-D00101" FILE="US06314556-20011106-D00101.TIF">
<EMI ID="EMI-D00102" FILE="US06314556-20011106-D00102.TIF">
<EMI ID="EMI-D00103" FILE="US06314556-20011106-D00103.TIF">
<EMI ID="EMI-D00104" FILE="US06314556-20011106-D00104.TIF">
<EMI ID="EMI-D00105" FILE="US06314556-20011106-D00105.TIF">
<EMI ID="EMI-D00106" FILE="US06314556-20011106-D00106.TIF">
<EMI ID="EMI-D00107" FILE="US06314556-20011106-D00107.TIF">
<EMI ID="EMI-D00108" FILE="US06314556-20011106-D00108.TIF">
<EMI ID="EMI-D00109" FILE="US06314556-20011106-D00109.TIF">
<EMI ID="EMI-D00110" FILE="US06314556-20011106-D00110.TIF">
<EMI ID="EMI-D00111" FILE="US06314556-20011106-D00111.TIF">
<EMI ID="EMI-D00112" FILE="US06314556-20011106-D00112.TIF">
<EMI ID="EMI-D00113" FILE="US06314556-20011106-D00113.TIF">
<EMI ID="EMI-D00114" FILE="US06314556-20011106-D00114.TIF">
<EMI ID="EMI-D00115" FILE="US06314556-20011106-D00115.TIF">
<EMI ID="EMI-D00116" FILE="US06314556-20011106-D00116.TIF">
<EMI ID="EMI-D00117" FILE="US06314556-20011106-D00117.TIF">
<EMI ID="EMI-D00118" FILE="US06314556-20011106-D00118.TIF">
<EMI ID="EMI-D00119" FILE="US06314556-20011106-D00119.TIF">
<EMI ID="EMI-D00120" FILE="US06314556-20011106-D00120.TIF">
<EMI ID="EMI-D00121" FILE="US06314556-20011106-D00121.TIF">
<EMI ID="EMI-D00122" FILE="US06314556-20011106-D00122.TIF">
<EMI ID="EMI-D00123" FILE="US06314556-20011106-D00123.TIF">
<EMI ID="EMI-D00124" FILE="US06314556-20011106-D00124.TIF">
<EMI ID="EMI-D00125" FILE="US06314556-20011106-D00125.TIF">
<EMI ID="EMI-D00126" FILE="US06314556-20011106-D00126.TIF">
<EMI ID="EMI-D00127" FILE="US06314556-20011106-D00127.TIF">
<EMI ID="EMI-D00128" FILE="US06314556-20011106-D00128.TIF">
<EMI ID="EMI-D00129" FILE="US06314556-20011106-D00129.TIF">
<EMI ID="EMI-D00130" FILE="US06314556-20011106-D00130.TIF">
<EMI ID="EMI-D00131" FILE="US06314556-20011106-D00131.TIF">
<EMI ID="EMI-D00132" FILE="US06314556-20011106-D00132.TIF">
<EMI ID="EMI-D00133" FILE="US06314556-20011106-D00133.TIF">
<EMI ID="EMI-D00134" FILE="US06314556-20011106-D00134.TIF">
<EMI ID="EMI-D00135" FILE="US06314556-20011106-D00135.TIF">
<EMI ID="EMI-D00136" FILE="US06314556-20011106-D00136.TIF">
<EMI ID="EMI-D00137" FILE="US06314556-20011106-D00137.TIF">
<EMI ID="EMI-D00138" FILE="US06314556-20011106-D00138.TIF">
<EMI ID="EMI-D00139" FILE="US06314556-20011106-D00139.TIF">
<EMI ID="EMI-D00140" FILE="US06314556-20011106-D00140.TIF">
<EMI ID="EMI-D00141" FILE="US06314556-20011106-D00141.TIF">
<EMI ID="EMI-D00142" FILE="US06314556-20011106-D00142.TIF">
<EMI ID="EMI-D00143" FILE="US06314556-20011106-D00143.TIF">
<EMI ID="EMI-D00144" FILE="US06314556-20011106-D00144.TIF">
<EMI ID="EMI-D00145" FILE="US06314556-20011106-D00145.TIF">
<EMI ID="EMI-D00146" FILE="US06314556-20011106-D00146.TIF">
<EMI ID="EMI-D00147" FILE="US06314556-20011106-D00147.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314557-20011106-D00000.TIF SYSTEM "US06314557-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314557-20011106-D00001.TIF SYSTEM "US06314557-20011106-D00001.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314557</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>09210542</PDAT></DNUM></B210>
<B211US><PDAT>09</PDAT></B211US>
<B220><DATE><PDAT>19981214</PDAT></DATE></B220>
</B200>
<B500>
<B510>
<B511><PDAT>G06F  945</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>717  4</PDAT></B521>
<B522><PDAT>717  2</PDAT></B522>
<B522><PDAT>717  5</PDAT></B522>
<B522><PDAT>717  9</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Hybrid computer programming environment</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5132972</PDAT></DNUM>
<DATE><PDAT>19920700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hansen</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>714 38</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5175856</PDAT></DNUM>
<DATE><PDAT>19921200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Dyke et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  4</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5179702</PDAT></DNUM>
<DATE><PDAT>19930100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Spix et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709102</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5261055</PDAT></DNUM>
<DATE><PDAT>19931100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Moran et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>710 38</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5392036</PDAT></DNUM>
<DATE><PDAT>19950200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Klein</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>341 51</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5404485</PDAT></DNUM>
<DATE><PDAT>19950400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Ban</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>711202</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5408637</PDAT></DNUM>
<DATE><PDAT>19950400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Shimizu</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>703 25</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5430862</PDAT></DNUM>
<DATE><PDAT>19950700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Smith et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>703 26</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5594890</PDAT></DNUM>
<DATE><PDAT>19970100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Yamaura et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>703 23</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5668989</PDAT></DNUM>
<DATE><PDAT>19970900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Mao</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>707101</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5740469</PDAT></DNUM>
<DATE><PDAT>19980400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Yin et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>710 65</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5805893</PDAT></DNUM>
<DATE><PDAT>19980900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Sproul et la.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  5</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5832273</PDAT></DNUM>
<DATE><PDAT>19981100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Mizuse</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  9</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5860008</PDAT></DNUM>
<DATE><PDAT>19990100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Bradley</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  4</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5933642</PDAT></DNUM>
<DATE><PDAT>19990800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Greenbaum et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  9</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6014513</PDAT></DNUM>
<DATE><PDAT>20000100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Voelker et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  3</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6021275</PDAT></DNUM>
<DATE><PDAT>20000200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Horwat</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6083278</PDAT></DNUM>
<DATE><PDAT>20000700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Olson et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  2</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6141791</PDAT></DNUM>
<DATE><PDAT>20001000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Takuma et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  4</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6173441</PDAT></DNUM>
<DATE><PDAT>20010100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Klein</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  5</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6233545</PDAT></DNUM>
<DATE><PDAT>20010500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Datig</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>704  2</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>90114711.6</PDAT></DNUM>
<DATE><PDAT>19900700</PDAT></DATE>
<CTRY><PDAT>EP</PDAT></CTRY>
</DOC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B562><NCIT><STEXT><PDAT>Title: Emulation Shortens time-to-market, Source Electronic Engineering Times, Jul., 1993, AN: 93: 751457.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Title: Memory Efficient Software Synthesis from Data flow Graph, Dec., 1998. Source ACM, Author: Sng et al.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Title: A Software Engineering experiment in Software Component Generation. author: Kieburtz et al, source; ACM, 1996.</PDAT></STEXT></NCIT><CITED-BY-EXAMINER></B562>
</B560>
<B570>
<B577><PDAT>2</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>717  4</PDAT></B582>
<B582><PDAT>717  2</PDAT></B582>
<B582><PDAT>717  5</PDAT></B582>
<B582><PDAT>717  9</PDAT></B582>
<B582><PDAT>717  6</PDAT></B582>
<B582><PDAT>717  7</PDAT></B582>
<B582><PDAT>714 38</PDAT></B582>
</B580>
<B590><B595><PDAT>1</PDAT></B595><B596><PDAT>1</PDAT></B596><B597US>
</B590>
</B500>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Georgiy</PDAT></FNM><SNM><STEXT><PDAT>Shenderovich</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Petah-Tikva</PDAT></CITY>
<CTRY><PDAT>IL</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Infineon Technologies Development Center Tel Aviv LTD</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Tel Aviv</PDAT></CITY><CTRY><PDAT>IL</PDAT></CTRY></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>03</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><FNM><PDAT>Mark M.</PDAT></FNM><SNM><STEXT><PDAT>Friedman</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Mark R.</PDAT></FNM><SNM><STEXT><PDAT>Powell</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Chameli C.</PDAT></FNM><SNM><STEXT><PDAT>Das</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2122</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A system for facilitating assembly language programming by providing a sophisticated hybrid programming environment comprising a module to parse input hybrid source code files containing at least one high-level instruction; a library of functions for defining at least one assembly-language instruction in the hybrid source code file from a corresponding high-level instruction; a module for translating the high-level instructions into machine language instructions according to the library; and a module to output the translated machine language instructions into an object file.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>FIELD AND BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>The present invention relates to computer programming language environments, and in particular, it concerns a system to facilitate the writing and debugging of assembly language programs.</PDAT></PTEXT></PARA>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>Assembly language programming is a particularly difficult task for both the code writing and debugging phases of the programming process. High-level languages, such as C&plus;&plus;, can be used to write programs which describe algorithms in terms of abstract symbols which are relatively close to human languages. Assembly languages, on the other hand, are mechanical in nature, and describe algorithms only in terms of simple microprocessor instructions. Therefore, assembly language programs are usually longer and more difficult to understand than programs written in high-level languages.</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>The debugging process is especially difficult for assembly language programming. Debugging is a process which involves testing a computer program for errors (bugs) which cause the program to give results not in accordance with its design specifications. Errors can result from flaws in the underlying algorithm used as the basis of a program, or from the incorrect execution of the algorithm. On seeing such erroneous results, software engineers find the sections of the computer program which contain the errors and rewrite them. The engineers then recompile the program and test it again. This debugging process is repeated until the errors are removed from the program.</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>The debugging process is relatively difficult for assembly language programs because the underlying algorithm is obscured by the large number of mechanical, microprocessor-specific instructions, whereas in high-level languages the underlying algorithm is easy to identify. Also, current assembly language programming environments do not provide many of the features commonly found in high-level programming environments. As an example, high-level languages and programming environments have numerous features that facilitate the handling of files stored on hard disks. These files can be used to store the results of test output produced by programs as they are being debugged.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>Another problem with the debugging process for assembly language programs is that each assembly language has its own set of debugging programs, requiring software engineers to learn how to use a new set of debugging programs each time a new microprocessor is developed.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>The most accurate tool to examine the execution of assembly language programs, an emulator, is a special hardware device that attaches directly to the microprocessor in which the assembly language is used, in order to continuously monitor the state of the inputs and outputs of the microprocessor. These devices are expensive, and are not always available in the early stages of microprocessor development, causing delays in software development.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>European Patent Application 90114711 describes a specialized development computer which is used to translate control programs written in high-level languages to machine language, and transfer the machine language control programs to a development microprocessor. Although this does facilitate the development process somewhat, it does not provide for the writing, testing, and debugging of programs which include both high-level language and assembly language instructions in a single program. In addition, this development method requires specialized hardware and an extra development computer for the interface.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>A more efficient system would require less specialized electronic hardware. Such a system would be implemented for use on general purpose personal computers, allowing companies to apply and take advantage of the existing personal computer skills of their staff for the tasks of writing and debugging assembly language programs. A more efficient system would also make all the tools in the competitive high-level programming language market available for use in assembly language programming.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>There is therefore a need for a system that brings the ease of writing and debugging high-level language programs to assembly language programs.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>It is an object of the present invention to provide a sophisticated assembly language programming environment that facilitates the writing and debugging of assembly language programs. This object is attained by providing a hybrid programming environment which can compile programs containing both high-level programming language instructions and assembly language programming instructions.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>According to the teachings of the present invention there is provided a system for facilitating assembly language programming by providing a sophisticated hybrid programming environment comprising a module to parse input hybrid source code files containing at least one high-level instruction; a library of functions for defining at least one assembly-language instruction in the hybrid source code file from a corresponding high-level instruction; a module for translating the high-level instructions into machine language instructions according to said library; and a module to output the translated machine language instructions into an object file.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>According to the teachings of the present invention there is also provided a method for handling hybrid source code files containing any number of high-level and assembly language instructions, comprising parsing input hybrid source code files containing at least one high-level instruction; converting assembly language instructions in a hybrid source code file into high-level language instructions; translating high-level instructions into machine language instructions; and compiling the translated machine language instructions into an object file.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>According to the teachings of the present invention there is also provided a method for writing and debugging assembly language programs, comprising writing a source code file containing at least one high-level instruction; debugging a source code file containing at least one high-level instruction; substituting high-level instructions in the source code file with assembly language instructions; and debugging the resultant hybrid source code file containing both high-level and assembly language instructions.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>The invention is herein described, by way of example only, with reference to the accompanying drawings, wherein:</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a block diagram illustrating the steps in the assembly language programming process provided by the present invention.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>In the present invention, the programmer first uses a high-level compiler and programming environment to compile and debug a program written in a high-level language. The programmer debugs the high-level program code until the programmer is satisfied with the resultant high-level code. The programmer then gradually substitutes assembly language instructions for high level instructions, and debugs the results, until all the high level instructions have been replaced with assembly language instructions.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>The hybrid programming environment of the present invention is a high-level language compiler that is provided with a library of functions that emulate assembly language instructions. These functions are written as groups of the compiler&apos;s standard high-level language instructions, and therefore can be used together with the standard high-level language instructions. The functions in the special library provided by the present invention mimic the operations of assembly language instructions. The library is made available to the compiler, along with any other libraries, by adding it to the list of libraries recognized by the compiler, and requires no specialized hardware.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><PDAT>The computer programmer starts the programming process by entering a program, written in high-level programming language instructions, into a computer file. This file is called the source code. The programmer then compiles the source code using a standard high-level programming language compiler. After correcting any errors, the programmer recompiles the source code. This process is repeated until a compiled file is produced.</PDAT></PTEXT></PARA>
<PARA ID="P-00020" LVL="0"><PTEXT><PDAT>The programmer then links the compiled file using a standard linker, to produce an executable program. The programmer tests this program for conformance with the design specifications. The programmer corrects any deviations from the design specifications by modifying the source code, and then repeating the compiling and linking steps. The programmer repeats this process until the programmer is satisfied that the source code correctly implements the design specifications.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><PDAT>The programmer then substitutes some of the high-level instructions with assembly language instructions, producing hybrid source code containing both high-level and assembly language instructions. The programmer compiles and links the hybrid source code, using the special library of functions which allow the compiler to compile the assembly language instructions together with the high-level instructions. After testing the resultant executable program, the programmer makes any necessary modifications to the assembly language instructions introduced into the hybrid source code, and repeats the compiling and linking steps.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><PDAT>In this manner, the programmer gradually replaces all high-level instructions with assembly language instructions.</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><PDAT>In the final step in the process, the programmer assembles and debugs the assembly language program using the normal assembler for the contemplated microprocessor.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>DESCRIPTION OF THE PREFERRED EMBODIMENTS</PDAT></STEXT></H>
<PARA ID="P-00024" LVL="0"><PTEXT><PDAT>The present invention is a hybrid programming environment which enables programmers to write programs containing both high-level and assembly language instructions.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><PDAT>The principles and operation of a hybrid programming environment according to the present invention may be better understood with reference to the drawings and the accompanying description.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><PDAT>Referring now to the drawings, </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> shows the present invention used in a hybrid high-level and assembly language programming process.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>Blocks </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> represent prior art. They show the traditional high-level computer language programming process, wherein a programmer writes a high-level source code program, and uses a traditional high-level language compiler and programming environment to compile and debug the source code, producing a debugged high-level source code program.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><PDAT>Block </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> represents the program written by the programmer in a high-level programming language (such as C or C&plus;&plus;) to implement the underlying algorithm of the desired program. This program is referred to as the source code.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><PDAT>Block </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT> represents the compiler and programming environment used by the programmer to compile and debug the high-level source code program represented by Block </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>. This could be a normal compiler and programming environment, or it could be the compiler and programming environment offered by the present invention. In either case, the compiler and programming environment can be common software tools used on standard personal computers used for software development.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><PDAT>The compiler contains a library of industry-standard functions, as well as other specialized libraries purchased or defined by the programmer. As an example, a specialized library might contain functions useful for programming word processing software. Such a library would contain functions that display letters and words in various orientations on the page, or that search for words in a document, or that correct the spelling of words in a document.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><PDAT>The compiler is a program that reads the source code file line by line, translating each instruction into assembly language instructions. The compiler then places those assembly language instructions into a file called an object file. The assembly language instructions generated by the compiler would be matched to the microprocessor in the development personal computer.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>Other parts of the programming environment, notably the linker, are used to produce an executable program from the object file produced by the compiler. The result of this compiling and linking process is an executable program.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>Block </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> represents the high-level debugging process. This process consists of testing the executable program compiled in the compilation process of Block </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT>, and comparing the results with those intended by the programmer. If the results do not match those intended by the programmer, the programmer finds the high-level instructions in the source code responsible for that behavior and modifies it.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><PDAT>In order to find the high-level instructions responsible for unwanted behavior, the programmer makes use of common high-level debugging tools. One such tool is the setting of break points in the program. At these points, execution stops, enabling the programmer to inspect the values of variables used in the program. Another such tool is the setting of breaks in program execution triggered when variables are set to values specified by the programmer. Another debugging tool is the ability of the programmer to execute a program instruction by instruction, allowing the programmer to inspect both the values of variables and the flow of execution of instructions through the program.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><PDAT>The programmer then re-compiles the source code. The programmer repeats this debugging process until the programmer is satisfied with the resultant source code.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><PDAT>Block </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> shows the debugged high-level programming language code that is the result of the high-level debugging process shown in Block </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT>. This is where the normal high-level language programming process stops.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><PDAT>Block </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> shows the process where the programmer starts to substitute assembly language instructions for high-level programming language instructions. The result is a hybrid source code file, containing both assembly and high-level language instructions.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>Block </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT> shows the present invention, which is a standard high-level programming language compiler with a library of functions which define assembly language instructions in terms of the high-level programming language compiled by the compiler. This library enables the compiler to compile hybrid source code files consisting of both high-level language and assembly language instructions. The programmer uses the compiler to compile an executable program from the hybrid program code containing both high-level and assembly language instructions resulting from the process represented in Block </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>Block </PDAT><HIL><BOLD><PDAT>70</PDAT></BOLD></HIL><PDAT> represents the debugging process for the hybrid code resulting from the process shown in Block </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>. As with the high-level debugging process represented by Block </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT>, the programmer compares the results of the executable program prepared using the hybrid programming environment in Block </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT> with those intended by the programmer, makes the appropriate corrections to the source code in Block </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>, and then re-compiles the source code. In debugging the hybrid code, the programmer makes use of the rich set of debugging tools available in the high-level programming environment.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>These processes are repeated until the executable program derived from the hybrid source code performs as intended by the programmer.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>The programmer then returns to the process shown in Block </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>, replacing other high-level programming instructions with assembly language programming instructions, and repeats the processes shown in Blocks </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>70</PDAT></BOLD></HIL><PDAT>, until all high-level code has been replaced with assembly language code and the resultant source code file, containing assembly language instructions only, has been completely debugged.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>Block </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT>, showing the assembly language assembler program, and Block </PDAT><HIL><BOLD><PDAT>90</PDAT></BOLD></HIL><PDAT>, showing the assembly language debugger, represent the final steps in the process, wherein the programmer assembles and debugs the assembly language program in the source code file using the normal assembler and debugging tools for the contemplated microprocessor.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>It will be appreciated that the above descriptions are desired only to serve as examples, and that many other embodiments are possible within the spirit and the scope of the present invention.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>1. An assembly language design method for writing and debugging assembly language programs comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(a) providing a function library of functions, which emulate assembly language instructions in terms of a plurality of high-level programming language instructions; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(b) writing a high-level language source code file containing at least one of said plurality of high-level programming language instructions; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(c) debugging said high-level language source code file until at least one of said plurality of high-level programming language instructions functions correctly; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(d) replacing said at least one high-level programming language instruction with assembly language instructions to generate a hybrid source code file containing both assembly and high-level language instructions; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(e) compiling said hybrid source code file by means of a high level programming language compiler and a predetermined function library, wherein said hybrid source code file is parsed, said assembly language instructions in said hybrid source code file are converted into high-level programming language instructions, and said high-level programming language instructions are translated into machine language instructions of an executable program; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(f) debugging said executable program. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>2. A system for writing and debugging assembly language programs, comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(a) a predetermined function library of functions, which emulate assembly language instructions in terms of a plurality of high-level programming language instructions; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(b) a high-level language source code file containing at least one of said plurality of high-level programming language instructions; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(c) debugging means for debugging said high-level language source code file and for producing at least one correctly functioning high-level programming language instruction; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(d) a hybrid source code file generated by replacing said at least one correctly functioning high-level programming language instruction with assembly language instructions; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(e) a high level programming language compiler for compiling said hybrid source code using said predetermined library of functions, and for generating an executable program; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(f) an executable program debugger for debugging said executable program.</PDAT></PTEXT></CLMSTEP>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314557-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314557-20011106-D00001.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314558-20011106-D00000.TIF SYSTEM "US06314558-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00001.TIF SYSTEM "US06314558-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00002.TIF SYSTEM "US06314558-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00003.TIF SYSTEM "US06314558-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00004.TIF SYSTEM "US06314558-20011106-D00004.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00005.TIF SYSTEM "US06314558-20011106-D00005.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00006.TIF SYSTEM "US06314558-20011106-D00006.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00007.TIF SYSTEM "US06314558-20011106-D00007.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00008.TIF SYSTEM "US06314558-20011106-D00008.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00009.TIF SYSTEM "US06314558-20011106-D00009.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00010.TIF SYSTEM "US06314558-20011106-D00010.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00011.TIF SYSTEM "US06314558-20011106-D00011.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00012.TIF SYSTEM "US06314558-20011106-D00012.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00013.TIF SYSTEM "US06314558-20011106-D00013.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00014.TIF SYSTEM "US06314558-20011106-D00014.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00015.TIF SYSTEM "US06314558-20011106-D00015.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00016.TIF SYSTEM "US06314558-20011106-D00016.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00017.TIF SYSTEM "US06314558-20011106-D00017.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00018.TIF SYSTEM "US06314558-20011106-D00018.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00019.TIF SYSTEM "US06314558-20011106-D00019.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00020.TIF SYSTEM "US06314558-20011106-D00020.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00021.TIF SYSTEM "US06314558-20011106-D00021.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00022.TIF SYSTEM "US06314558-20011106-D00022.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00023.TIF SYSTEM "US06314558-20011106-D00023.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00024.TIF SYSTEM "US06314558-20011106-D00024.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00025.TIF SYSTEM "US06314558-20011106-D00025.TIF" NDATA TIF>
<!ENTITY US06314558-20011106-D00026.TIF SYSTEM "US06314558-20011106-D00026.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314558</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>09250626</PDAT></DNUM></B210>
<B211US><PDAT>09</PDAT></B211US>
<B220><DATE><PDAT>19990216</PDAT></DATE></B220>
</B200>
<B500>
<B510>
<B511><PDAT>G06F  944</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>717  4</PDAT></B521>
<B522><PDAT>714 35</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Byte code instrumentation</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4667290</PDAT></DNUM>
<DATE><PDAT>19870500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Goss et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5297284</PDAT></DNUM>
<DATE><PDAT>19940300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Jones et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  5</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5432795</PDAT></DNUM>
<DATE><PDAT>19950700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Robinson et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5432936</PDAT></DNUM>
<DATE><PDAT>19950700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Gray et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  5</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5487158</PDAT></DNUM>
<DATE><PDAT>19960100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Amelina et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  5</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5528753</PDAT></DNUM>
<DATE><PDAT>19960600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Fortin</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5581696</PDAT></DNUM>
<DATE><PDAT>19961200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Kolawa et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5617569</PDAT></DNUM>
<DATE><PDAT>19970400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Gray et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>707103</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5628017</PDAT></DNUM>
<DATE><PDAT>19970500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Kimmerly et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  4</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5790858</PDAT></DNUM>
<DATE><PDAT>19980800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Vogel</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5987249</PDAT></DNUM>
<DATE><PDAT>19991100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Grossman et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  4</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6016466</PDAT></DNUM>
<DATE><PDAT>20000100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Guinther et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>702187</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6026237</PDAT></DNUM>
<DATE><PDAT>20000200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Berry et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  4</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6186677</PDAT></DNUM>
<DATE><PDAT>20010200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Angel et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  4</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B562><NCIT><STEXT><PDAT>IBM Technical Disclosure Bulletin, Memory Protection Software Facility for OS/2 Shared Data Applications, Vol. No. 34, Issue No. 4A, Sep. 1991, 8 pages.</PDAT></STEXT></NCIT><CITED-BY-EXAMINER></B562>
</B560>
<B570>
<B577><PDAT>32</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>717  4</PDAT></B582>
<B582><PDAT>717  5</PDAT></B582>
<B582><PDAT>717  7</PDAT></B582>
<B582><PDAT>714 35</PDAT></B582>
<B582><PDAT>714 38</PDAT></B582>
<B582><PDAT>713  2</PDAT></B582>
</B580>
<B590><B595><PDAT>26</PDAT></B595><B596><PDAT>31</PDAT></B596><B597US>
</B590>
</B500>
<B600>
<B630><B632><PARENT-US><CDOC><DOC><DNUM><PDAT>09/250626</PDAT></DNUM></DOC></CDOC><PDOC><DOC><DNUM><PDAT>09/066988</PDAT></DNUM><DATE><PDAT>19980423</PDAT></DATE><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>00</PDAT></KIND></DOC></PDOC><PSTA><PDAT>01</PDAT></PSTA><PPUB><DOC><DNUM><PDAT>6186677</PDAT></DNUM><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>A </PDAT></KIND></DOC></PPUB></PARENT-US></B632></B630>
<B630><B632><PARENT-US><CDOC><DOC><DNUM><PDAT>09/066988</PDAT></DNUM></DOC></CDOC><PDOC><DOC><DNUM><PDAT>08/916125</PDAT></DNUM><DATE><PDAT>19970821</PDAT></DATE><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>00</PDAT></KIND></DOC></PDOC><PSTA><PDAT>01</PDAT></PSTA><PPUB><DOC><DNUM><PDAT>5987249</PDAT></DNUM><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>A </PDAT></KIND></DOC></PPUB></PARENT-US></B632></B630>
<B680US><DOC><DNUM><PDAT>60/045018</PDAT></DNUM><DATE><PDAT>19970428</PDAT></DATE><KIND><PDAT>00</PDAT></KIND></DOC></B680US>
<B680US><DOC><DNUM><PDAT>60/024624</PDAT></DNUM><DATE><PDAT>19960827</PDAT></DATE><KIND><PDAT>00</PDAT></KIND></DOC></B680US>
<B680US><DOC><DNUM><PDAT>60/036250</PDAT></DNUM><DATE><PDAT>19970124</PDAT></DATE><KIND><PDAT>00</PDAT></KIND></DOC></B680US>
</B600>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>David J.</PDAT></FNM><SNM><STEXT><PDAT>Angel</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Hudson</PDAT></CITY>
<STATE><PDAT>NH</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>James R.</PDAT></FNM><SNM><STEXT><PDAT>Kumorek</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Nashua</PDAT></CITY>
<STATE><PDAT>NH</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Farokh</PDAT></FNM><SNM><STEXT><PDAT>Morshed</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Amherst</PDAT></CITY>
<STATE><PDAT>NH</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>David A.</PDAT></FNM><SNM><STEXT><PDAT>Seidel</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Peterborough</PDAT></CITY>
<STATE><PDAT>NH</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Compuware Corporation</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Farmington Hills</PDAT></CITY><STATE><PDAT>MI</PDAT></STATE></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>02</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Hutchins, Wheeler &amp; Dittmar</PDAT></STEXT></ONM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Tuan Q.</PDAT></FNM><SNM><STEXT><PDAT>Dam</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B748US><PDAT>2122</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>Instrumenting a computer program to provide instrumented byte code includes examining the byte code, selecting portions of the byte code for instrumentation, and instrumenting the portions to provide instrumented byte code. Selecting the portions may include choosing portions of the byte code corresponding to method entry, method exit, a throw, a method call, or a new line number. Instrumenting a portion of the byte code corresponding to a method call may include instrumenting a local line number of source code corresponding to the byte code being instrumented. Instrumenting the portions may include adding calls to instrumentation runtime functions that pass parameters indicative of the portions being instrumented. At least one of the parameters that is passed may include a line number of the source code corresponding to the portion being instrumented or a object pointer for the method corresponding to the portion being instrumented. Data from instrumentation may be passed via a message stream that is viewed as the data is being generated and/or stored.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<RELAPP>
<BTEXT>
<H LVL="1"><STEXT><PDAT>CROSS-REFERENCE TO RELATED APPLICATIONS</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>This application is a continuation-in-part of U.S. patent application Ser. No. 09/066,988 filed on Apr. 23, 1998, now U.S. Pat. No. 6,186,677 B1, which is based on U.S. Provisional Patent Application No. 60/045,018 filed on Apr. 28, 1997 and which is also a continuation-in-part of U.S. patent application Ser. No. 08/916,125, filed on Aug. 21, 1997, now U.S. Pat. No. 5,987,249, which is based on U.S. Provisional Patent Applications Nos. 60/024,624 and 60/036,250 filed on Aug. 27, 1996 and Jan. 24, 1997, respectively.</PDAT></PTEXT></PARA>
</BTEXT>
</RELAPP>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>1. Field of the Invention</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>This application relates to the field of computer software and more particularly to the field of computer software for instrumentation of code in order to facilitate debugging.</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>2. Description of Related Art</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>Code instrumentation is performed by adding statements to software in order to monitor performance and operation of the software during run time. Code instrumentation is sometimes used to facilitate debugging of run time errors relating to memory accesses. Specifically, since many run time errors are the result of improperly accessing or using memory (e.g., writing beyond an array&apos;s boundaries, not freeing dynamically allocated memory, etc.), then instrumentation may be used to supplement memory accessing portions of the software with additional software that monitors memory accesses and provides an indication when it appears that an improper access has occurred.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>Instrumentation may be performed manually by having the programmer insert source code statements that intermittently output or record values related to memory variables, such as array indices and amounts of free space left in the allocation heap. However, such manual instrumentation is often inefficient for a number of reasons. Manual instrumentation requires the programmer to recognize possible sources of error in order to be able to insert the appropriate source code to perform the instrumentation. However, once the programmer has identified possible sources of error, it may be more straight-forward to simply examine the potentially errant code and fix the error rather than perform the additional steps associated with adding source code instrumentation statements. In addition, manually adding source code instrumentation statements requires repeated recompiling of the source code before execution, which adds time and effort to the debugging process. Also, the programmer must remember which statements are instrumentation statements in order to remove those statements once the added debugging statements are no longer needed.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>Various systems exist for automating the debugging process. U.S. Pat. No. 5,581,696 to Kolawa et. al (the &apos;696 patent) is directed to a method of using a computer for automatically instrumenting a computer program for dynamic debugging. In the system disclosed in the &apos;696 patent, the instrumentation software examines and supplements a parse tree intermediate stage produced by the compiler. The parse tree is a tree having nodes corresponding to tokens that represent individual source code statements. The system described in the &apos;696 patent traverses the parse tree to locate tokens of interest (e.g., tokens corresponding to memory accesses) and supplements those tokens with additional tokens corresponding to code that monitors the memory accesses. However, since the contents of the parse tree depend upon the particular source programming language used, the system disclosed in the &apos;696 patent is also source dependent.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>U.S. Pat. Nos. 5,193,180, 5,335,344, and 5,535,329, all to Hastings (the Hastings patents), disclose a system for instrumenting computer object code to detect memory access errors. The instrumentation includes providing additional code that maintains the status of each and every program memory location along with supplementing object code instructions that access the program memory with additional code that facilitates maintaining status of the memory locations. To the extent that the object code is independent of the particular source code that is used, the system disclosed in the Hastings patents is also independent of the source code language used.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>However, since the system disclosed in the Hastings patents involves modifying object code, then the system is target dependent in that it may only be configured to work with object code that executes a particular target processor&apos;s native language. Although it may be desirable to adapt the Hastings system to work with object code for a variety of target processors, such an adaptation would require significant modifications to the system since object code instructions that access memory may vary significantly between different target processor languages. In addition, monitoring program memory accesses by maintaining the status of program memory locations allows some improper operations to be performed by the software without being detected. For example, reading a memory location beyond an array&apos;s boundaries may not be detected if the memory location that is read has been allocated and initialized in connection with another memory variable.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>Other systems for facilitating debugging exist. For example, U.S. Pat. No. 4,667,290 to Goss et al. is directed to compilers that create intermediate representation (IR) code that is both source and target independent. Column 5, lines 57-60 disclose using the IR code to facilitate debugging by retaining portions of the IR code that would otherwise be eliminated in the course of optimization if debugging is not being performed. Similarly, U.S. Pat. No. 5,175,856 to Van Dyke et al. discloses a compiler that produces an IR code where debugging is facilitated by passing information through the intermediate code file.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>U.S. Pat. Nos. 5,276,881, 5,280,613, and 5,339,419, all to Chan et al., disclose a compiler system that produces an IR code. U.S. Pat. No. 5,276,881 is illustrative of the three patents and discloses symbolic debugging support provided in connection with the compiler system described in the patent. Column 59, lines 15-19 indicate that if the symbolic debug option is specified, &ldquo; . . . then the Low-level Code Generator 1322 writes additional information to the Low Level CIR 1338.&rdquo;. (CIR is an acronym for Compiler Intermediate Representation.) Column 57, lines 59-63 indicate that the Low-Level CIR 1338 is analogous to the compiler intermediate representation 212, but the low level CIR 1338 is not architecturally neutral (i.e., is target dependent). Column 57, lines 63-65 state specifically that the Low-Level CIR 1338 is dependent upon the particular architecture of the target computer platform.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>In addition, various systems compile source code into an interpretive language, such as byte code. Ideally, the byte code is machine independent so that it may be run on a computer that uses an interpreter to perform the operations indicated by the byte code. The interpreter is, of course, machine dependent. However, once an interpreter has been provided for a particular machine, it only needs to be subsequently modified or updated when changes to the byte code standard occur.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>Note that an interpreted byte code is, ideally, independent of the particular underlying source code. Thus one particular byte code could be used for multiple source code languages. An example of this is P-Code, which is an interpreted byte code that is provided by Fortran, C, and Pascal compilers. Thus, since a byte code may be both machine and source code independent, it would be advantageous to be able to instrument the byte code to provide instrumentation for a plurality of source code languages and a plurality of machines that all make use of the byte code.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>According to the present invention, instrumenting a byte code computer program includes examining the byte code, selecting portions of the byte code for instrumentation, and instrumenting the portions to provide instrumented byte code. Selecting the portions may include choosing portions of the byte code corresponding to method entry, method exit, a throw, a method call, or a new line number. Instrumenting a portion of the byte code corresponding to a method call may include instrumenting a local line number of source code corresponding to the byte code being instrumented. Instrumenting the portions may include adding calls to instrumentation runtime functions that pass parameters indicative of the portions being instrumented. At least one of the parameters that is passed may include a line number of the source code corresponding to the portion being instrumented or a this pointer for the method corresponding to the portion being instrumented. As is known in the art, the thispointer is a pointer to an address where data for an object is stored.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>At least one of the parameters that is passed may include at least one method parameter provided to a method containing byte code that is being instrumented. The at least one method parameter may be passed in a message buffer from an instrumentation runtime function to at least one viewer routine that displays the data to a user. The message buffer may include scalar data, array data, and object data. An object header or an array header may be placed in the message buffer. The message buffer may be limited to a predetermined size. The data indicative of the parameters may be stored in a message buffer. Data from the message buffer may be passed to at least one viewer routine that displays the data to a user.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>A method may be instrumented to provide instrumentation for handling an abort. A native function call may be instrumented by adding a byte code wrapper to the native function and then instrumenting the wrapper. The wrapper may include byte code corresponding to method entry and exit portions. Instrumenting a call to a native function may include providing an native assembly language thunk that captures data passed to and from the native function. The assembly language thunk may be hooked between the virtual machine and the call to the native function. Hooking the assembly language thunk may include intercepting a call that provides an address for a procedure.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>The data that is generated by instrumentation may be provided to a routine to pass data via a message stream. A data storage may be provided to store data provided via the message stream and/or a viewer may be provided to allow viewing at least a subset of data from the message stream as the data is being generated.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><PDAT>According further to the present invention, instrumenting a computer program includes examining an initial byte code representation of the program, creating a program counter mapping table corresponding to the byte code representation, selecting portions of the byte code representation for instrumentation using the program counter mapping table, instrumenting the portions by adding calls to instrumentation runtime functions at at least some of the portions, and modifying the program counter mapping table according to modifications to the byte code. According further to the present invention, uniquely identifying an object in an object oriented programming language includes obtaining a unique identifier, such as a hash code, corresponding to the object, creating a data structure having a least a first and a second storage location, storing an identifier for the object class in the first storage location, and storing the unique identifier in the second storage location.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00020" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> shows a computer system that may be used to implement IR code instrumentation according to the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a data flow diagram illustrating a compiler operating in conjunction with IR code instrumentation according to the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> is a data flow diagram illustrating interaction between various stages of the compiler and the IR code instrumentation according to the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> is a data flow diagram illustrating in detail operation of the software for IR instrumentation.</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> illustrates a tree data structure corresponding IR code operators and operands.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is a flow chart illustrating steps used to construct the tree data structure of FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is a flow chart illustrating instrumentation of the tree data structure of FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> is a flow chart illustrating construction of an effective scope table used in connection with instrumenting the tree data structure of FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 9A and 9B</PDAT></FGREF><PDAT> are flow charts illustrating scope optimization used in connection with instrumenting the tree data structure of FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 10</PDAT></FGREF><PDAT> is a flow chart illustrating in detail a portion of the flow chart of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> where nodes arc selected for instrumentation.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 11A</PDAT></FGREF><PDAT>, </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>B, and </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>C illustrate insertion of nodes in connection with instrumentation of the tree data structure of FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT> is a data flow diagram illustrating instrumentation of byte code according to the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 13</PDAT></FGREF><PDAT> is a flowchart illustrating steps for instrumenting byte code and executing the instrumented byte code according to the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 14</PDAT></FGREF><PDAT> is a flowchart illustrating instrumenting a method of a class according to the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 15</PDAT></FGREF><PDAT> is a flowchart illustrating in more detail a portion of the flowchart of FIG. </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 16</PDAT></FGREF><PDAT> is a flowchart illustrating in more detail a portion of the flowchart of FIG. </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 17</PDAT></FGREF><PDAT> is a flowchart illustrating in more detail a portion of the flowchart of FIG. </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 18</PDAT></FGREF><PDAT> is a flowchart illustrating in more detail a portion of the flowchart of FIG. </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 19</PDAT></FGREF><PDAT> is a flowchart illustrating in more detail a portion of the flowchart of FIG. </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 20</PDAT></FGREF><PDAT> is a flowchart illustrating instrumenting a class according to the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 21</PDAT></FGREF><PDAT> is a flowchart illustrating passing data collected by instrumentation according to the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 22</PDAT></FGREF><PDAT> is a flowchart illustrating in more detail a portion of the flowchart of FIG. </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 23</PDAT></FGREF><PDAT> is a flowchart illustrating in more detail a portion of the flowchart of FIG. </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 24</PDAT></FGREF><PDAT> is a flowchart illustrating in more detail a portion of the flowchart of FIG. </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 25</PDAT></FGREF><PDAT> is a flowchart illustrating in more detail a portion of the flowchart of FIG. </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 26</PDAT></FGREF><PDAT> is a flowchart illustrating in more detail a portion of the flowchart of FIG. </PDAT><HIL><BOLD><PDAT>25</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 27</PDAT></FGREF><PDAT> is a flowchart illustrating in more detail a portion of the flowchart of FIG. </PDAT><HIL><BOLD><PDAT>25</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 28</PDAT></FGREF><PDAT> is a flowchart illustrating in more detail a portion of the flowchart of FIG. </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS(S)</PDAT></STEXT></H>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, a computer system </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT> includes a processor </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, a display unit </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>, a keyboard </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> and (optionally) a mouse input device </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT>. The user provides input to the processor </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> via the keyboard </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> and the mouse </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> and views output from the processor </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> via the display unit </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>. The computer system may be a model P5-166 manufactured by Gateway Computer of Sioux City, S. Dak.</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>The computer system </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT> may include a connection </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> to a conventional computer network (not shown), such as the Microsoft NT network. The computer system </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT> may receive data and/or other network services, in a conventional manner, through the connection </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> to the network. The processor </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> may include conventional local storage or may use conventional storage available on the network wherein the processor </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> sends and receives data to and from the network via the network connection </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT>. The computer system </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT> may use a combination of local storage and network storage in a conventional manner. In the discussion that follows, no specific reference is made to the type of storage device (i.e., local, network, or a combination thereof) since the system described herein does not depend on the type of computer data storage used.</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, a data flow diagram </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT>, illustrates relationships between various executable code and data segments stored using the storage device of the processor </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>. A software compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> includes executable code that converts data representing computer source code </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> into data representing computer object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>. The compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> may be any one of a variety of conventional, commercially available, software compilers, such as the Microsoft C&plus;&plus; compiler manufactured by Microsoft Corporation of Redmond, Wash. If the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> is a C&plus;&plus; compiler, then the source code </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> represents C&plus;&plus; source code information entered by a user in a conventional manner such as, for example, entering the C&plus;&plus; source code statements into a text file in the computer system </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT> using the keyboard </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> and mouse </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT>. The source code </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> may also be generated by any one of a variety of alternative techniques, such as other conventional, commercially available software that automatically generates the source code </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>The object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> includes low-level code that is executable on a target processor (not shown). Accordingly, the object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> is target-specific. Note that the target processor may be the same type of processor as the processor </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> used in the computer system </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT> or, alternatively, the target processor may be a different processor. The object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> is provided by the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> in a conventional manner.</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>In the course of compiling the source code </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> into object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>, the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> may generate a plurality of transitional representations </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> that correspond to intermediate stages of the compile process. The transitional representations </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> may include a plurality of (usually temporary) data files that are created and accessed by the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>. Each stage of the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> may access and/or create a particular one of the transitional representations that is provided by the previous stage of the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>. Features of some of the transitional representations </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> are described in more detail hereinafter.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>Code instrumentation software </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>, that executes on the processor </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, accesses the transitional representations </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> and adds instrumentation instructions that ultimately provide instrumentation functionality to the object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>. When the object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> is executed, the thus-added instrumentation functionality facilitates debugging in a manner described in more detail hereinafter.</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>, the data flow diagram </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is illustrated with additional details included for the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> and for the transitional representation </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT>. The compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> is shown herein as having four stages </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> that each perform a different phase in the process of transforming the source code </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> into the object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>. The transitional representations </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> are shown as including various data elements that are created and/or accessed by the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>. Note that other compilers may have more or less stages and that portions of the transitional representations </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> may be stored in a file, a computer memory, a combination thereof, or a variety of other means for maintaining computer data.</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>For the embodiment illustrated herein, the first stage </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> of the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> accesses the source code </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> and, in a conventional manner, converts the source code into tokens stored in a token stream data element </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT>. The token stream data element </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> contains symbols that represent individual source code statements. The symbols may be ordered according to the order of source code statements in the source code </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT>. The token stream </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> is provided to the second stage </PDAT><HIL><BOLD><PDAT>53</PDAT></BOLD></HIL><PDAT> of the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>, which, in a conventional manner, converts the tokens from the token stream data element </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> into data stored in a parse tree data element </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT>. The parse tree data element </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> is a tree-like data structure that is constructed in a conventional manner using nodes corresponding to tokens from the token stream data element </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> that are interconnected in a directed graph according to entry and exit points of portions of the source code.</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>The parse tree data element </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> is provided to the third stage </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> of the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> which uses the data from the parse tree data element </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> to produce Intermediate Representation (IR) data that is stored in an IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>. As described in more detail hereinafter, the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> contains an intermediate representation of the program that is independent of the particular language used for the source code </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> and is also independent of the target processor on which the object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> will execute.</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="0"><PTEXT><PDAT>The fourth stage </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> of the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> converts IR data from the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> into the object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>. Without the code instrumentation unit </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>, the fourth stage </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> of the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> could access the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> (as indicated by the dashed line connecting the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> to the fourth stage </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT>) and convert IR data from the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> into the object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>. However, in the system described herein, the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> is provided to the code instrumentation </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> which, in a manner described in more detail below, instruments the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> to provide an instrumented IR data element </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT>. In the system described herein, the fourth stage </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> of the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> accesses the instrumented IR data element </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> to provide the object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>. Note that since the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> and the instrumented IR data element </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> have the same basic structure, it is virtually transparent to the fourth stage </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> of the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> that the instrumented IR data element </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT>, instead of the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>, is being accessed to create the object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="0"><PTEXT><PDAT>The IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> and the instrumented IR data element </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> contain conventional IR data that is both source and destination independent. The IR data represents the logical flow and operation of the program independent of the particular source code that is used in the source program to describe the logical flow and operation. In addition, the IR data is independent of the specific form of the object code (i.e., the specific target processor). Such IR data is well known in the prior art and will not be described in detail herein except as necessary to describe the invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, the code instrumentation </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> includes tree construction software </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> for constructing an IR tree, instrumentation software </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> for instrumenting both the IR tree and other IR data, and tree deconstruction software </PDAT><HIL><BOLD><PDAT>70</PDAT></BOLD></HIL><PDAT> for converting the thus-instrumented IR tree and other IR data into the instrumented IR data element </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT>. The tree construction software </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> receives input from the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> and, in a manner described in more detail below, constructs an IR tree to provide to an IR tree data element </PDAT><HIL><BOLD><PDAT>66</PDAT></BOLD></HIL><PDAT>. The instrumentation software </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> uses the IR tree data element </PDAT><HIL><BOLD><PDAT>66</PDAT></BOLD></HIL><PDAT> and other IR data from the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> to provide an instrumented IR tree </PDAT><HIL><BOLD><PDAT>67</PDAT></BOLD></HIL><PDAT> and other IR data </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="0"><PTEXT><PDAT>The instrumentation software </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> may also be provided with instrumentation data from an instrumentation data element </PDAT><HIL><BOLD><PDAT>69</PDAT></BOLD></HIL><PDAT>. The instrumentation data element </PDAT><HIL><BOLD><PDAT>69</PDAT></BOLD></HIL><PDAT> may contain run time instrumentation routines and other IR data that is inserted by the instrumentation software </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> into the instrumented IR tree data element </PDAT><HIL><BOLD><PDAT>67</PDAT></BOLD></HIL><PDAT>, the other IR data </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT>, or a combination thereof. The instrumentation software </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> and the instrumentation data element </PDAT><HIL><BOLD><PDAT>69</PDAT></BOLD></HIL><PDAT> are described in more detail hereinafter. The tree deconstruction software </PDAT><HIL><BOLD><PDAT>70</PDAT></BOLD></HIL><PDAT> uses the instrumented IR tree data element </PDAT><HIL><BOLD><PDAT>67</PDAT></BOLD></HIL><PDAT> and the other IR data </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> to create the instrumented IR data element </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT>. The tree deconstruction software </PDAT><HIL><BOLD><PDAT>70</PDAT></BOLD></HIL><PDAT> is described in more detail hereinafter.</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>The IR data consists of a plurality of operations and operands that correspond to the logic of the underlying source computer program. Note that the terms &ldquo;operation&rdquo; and &ldquo;operand&rdquo; may be defined broadly in this instance to include any type of statements found within IR data, including program transition statements such as call and goto, and static information such as line numbers. An operand can be a simple operand (e.g., a single variable or constant) or can be a complex operand (e.g., an expression) that corresponds to additional suboperations and operands. For example, IR data may indicate that the left side of an expression is to be set equal to the right side of an expression. The left side of the equation could be a single variable (i.e., a simple operand). The right side of the equation could also be simple operand (e.g., a constant) or could be a complex operand (e.g., an expression) that must be further evaluated in the context of additional operators and operands (e.g., addition of two variables).</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="0"><PTEXT><PDAT>Note that the IR data is both source language independent and target machine independent so that, for example, a source code statement written in a first source language could generate IR data that is identical to a programatically equivalent source language statement in a second source language if the underlying operations are identical. Similarly, a particular set of IR data can be converted by a compiler into many different object codes depending on the target machine. Although a specific IR representation may be particular to a specific compiler manufacturer, IR data and IR representations are generally known in the art. See, for example, a section titled &ldquo;Graphical Representations&rdquo; at pages 464-465 of Aho, Seth &amp; Ullman, </PDAT><HIL><ITALIC><PDAT>Compilers, Principles, Techniques, and Tools, </PDAT></ITALIC></HIL><PDAT>published by Addison-Wesley of Reading Mass., 1986.</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>, a tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> corresponds to the IR tree data element </PDAT><HIL><BOLD><PDAT>66</PDAT></BOLD></HIL><PDAT> provided by the tree construction software </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> shown in FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> and discussed above. The tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> includes a plurality of nodes </PDAT><HIL><BOLD><PDAT>82</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>. The nodes </PDAT><HIL><BOLD><PDAT>82</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> have different types and are labeled according to type as follows:</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="2"><PTEXT><PDAT>T: terminal node</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="2"><PTEXT><PDAT>U: unary node</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="2"><PTEXT><PDAT>B: binary node</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="2"><PTEXT><PDAT>3: ternary node</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="2"><PTEXT><PDAT>C: combination node</PDAT></PTEXT></PARA>
<PARA ID="P-00069" LVL="2"><PTEXT><PDAT>E: end of list indicator node</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="2"><PTEXT><PDAT>X: indeterminate node, one of the above listed types of nodes</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="0"><PTEXT><PDAT>The terminal nodes </PDAT><HIL><BOLD><PDAT>88</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>90</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>93</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>99</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> are nodes of the tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> having no children. The unary nodes </PDAT><HIL><BOLD><PDAT>86</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>92</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>95</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT> have only one child. The binary nodes </PDAT><HIL><BOLD><PDAT>89</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>91</PDAT></BOLD></HIL><PDAT> have two children. The ternary node </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> has three children. The combination nodes </PDAT><HIL><BOLD><PDAT>82</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> have two children wherein one of the children is a list terminated by the end of list nodes </PDAT><HIL><BOLD><PDAT>87</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>98</PDAT></BOLD></HIL><PDAT>. The indeterminate nodes </PDAT><HIL><BOLD><PDAT>83</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>85</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>96</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>97</PDAT></BOLD></HIL><PDAT> represent nodes that could be any one of the other types of nodes and have been included in the tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> to facilitate illustration of the structure of the tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>Each of the nodes </PDAT><HIL><BOLD><PDAT>82</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> represents an IR operation and/or an IR operand within the IR data. For any particular one of the nodes </PDAT><HIL><BOLD><PDAT>82</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>, the children thereof represent the operators and the operands used to evaluate the parent. For example, the binary node </PDAT><HIL><BOLD><PDAT>89</PDAT></BOLD></HIL><PDAT> could represent an operation having two operands corresponding to the two children of the binary node </PDAT><HIL><BOLD><PDAT>89</PDAT></BOLD></HIL><PDAT>: the terminal node </PDAT><HIL><BOLD><PDAT>90</PDAT></BOLD></HIL><PDAT> and the binary node </PDAT><HIL><BOLD><PDAT>91</PDAT></BOLD></HIL><PDAT>. The terminal node </PDAT><HIL><BOLD><PDAT>90</PDAT></BOLD></HIL><PDAT> does not have any children and thus may correspond to a simple operand (e.g., a constant). The binary node </PDAT><HIL><BOLD><PDAT>91</PDAT></BOLD></HIL><PDAT> is a complex operand having children (the unary node </PDAT><HIL><BOLD><PDAT>92</PDAT></BOLD></HIL><PDAT> and the combination node </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT>) which are evaluated in order to evaluate the complex operand represented by the binary node </PDAT><HIL><BOLD><PDAT>91</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="0"><PTEXT><PDAT>For the combination nodes </PDAT><HIL><BOLD><PDAT>82</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT>, the attached list elements are shown as being linked together so that, for example, the node </PDAT><HIL><BOLD><PDAT>83</PDAT></BOLD></HIL><PDAT> is shown being linked to the node </PDAT><HIL><BOLD><PDAT>84</PDAT></BOLD></HIL><PDAT> and the node </PDAT><HIL><BOLD><PDAT>84</PDAT></BOLD></HIL><PDAT> is shown as being linked to the node </PDAT><HIL><BOLD><PDAT>85</PDAT></BOLD></HIL><PDAT>. Another possible way to construct the list is to have the combination node </PDAT><HIL><BOLD><PDAT>82</PDAT></BOLD></HIL><PDAT> point to a separate list data structure </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> that contains pointers to the remaining nodes </PDAT><HIL><BOLD><PDAT>83</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>87</PDAT></BOLD></HIL><PDAT> that represent elements of the list. In that case, there would be no need for the connections between members of the list so that the node </PDAT><HIL><BOLD><PDAT>83</PDAT></BOLD></HIL><PDAT> would not contain a pointer to the node </PDAT><HIL><BOLD><PDAT>84</PDAT></BOLD></HIL><PDAT>, nor would the node </PDAT><HIL><BOLD><PDAT>84</PDAT></BOLD></HIL><PDAT> contain pointers to the nodes </PDAT><HIL><BOLD><PDAT>83</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>85</PDAT></BOLD></HIL><PDAT>, nor would the node </PDAT><HIL><BOLD><PDAT>85</PDAT></BOLD></HIL><PDAT> contain a pointer to the node </PDAT><HIL><BOLD><PDAT>84</PDAT></BOLD></HIL><PDAT>. The advantage of such a construction is that none of the nodes </PDAT><HIL><BOLD><PDAT>83</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>87</PDAT></BOLD></HIL><PDAT> would use extra storage space for pointers to the peers thereof. Of course, separately constructing the list </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> may add complexity and possibly additional processor time in connection with manipulating the combination node </PDAT><HIL><BOLD><PDAT>82</PDAT></BOLD></HIL><PDAT>. Note that irrespective of whether the list nodes </PDAT><HIL><BOLD><PDAT>83</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>87</PDAT></BOLD></HIL><PDAT> are connected peer to peer or are simply pointed to by the separate list </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>, the end of list may conveniently be indicated by the end of list node </PDAT><HIL><BOLD><PDAT>87</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00074" LVL="0"><PTEXT><PDAT>The tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> illustrates that the underlying program corresponding to the IR data can be represented as a list of root nodes of a plurality of subtrees. That is, the program may be represented by a list of nodes </PDAT><HIL><BOLD><PDAT>82</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>87</PDAT></BOLD></HIL><PDAT> that correspond to root nodes of a plurality of subtrees. Of course, some of these subtrees may simply have a root node without substructure while other subtrees, such as the subtree emanating from the node </PDAT><HIL><BOLD><PDAT>86</PDAT></BOLD></HIL><PDAT>, may have a more involved structure. Note also that, in some embodiments, the tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> may represent a single function among a plurality of functions contained in the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00075" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT>, a flowchart </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> illustrates operation of the tree construction software </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> that uses data from the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> to provide the IR tree data clement </PDAT><HIL><BOLD><PDAT>66</PDAT></BOLD></HIL><PDAT>. The flowchart includes an entry point </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> and an exit point </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT>. A connector </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT> labeled &ldquo;TOP&rdquo; is used to simplify the flowchart </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> by decreasing the number of flow lines thereon. All points on the flowchart labeled with the connector </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT> represent the same logical point in the flow of the code.</PDAT></PTEXT></PARA>
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>The data that is read from the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> and processed by the tree construction software </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> could be stored in a computer file. In other embodiments, data may be stored in computer memory or stored using any one of a variety of means sufficient for providing the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>. Each node may be represented by a variable length record having conventional type and size indicators. In the embodiment illustrated herein, it is assumed that the data is stored in a conventional computer file with the operands corresponding to a node being at an earlier point in the file than the node itself. For example, if a particular node representing the addition operation has two children representing the first and second operands that are being added, then the three nodes (parent and two children) may be stored in the file with the first and second operands being located sequentially prior to the node indicating the addition operation. Accordingly, for any tree or subtree, the root node may be located in the file following all of the children nodes. In a preferred embodiment, the data from the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> is first read into a flat list (such as a linked list or an array). Then the flat list is processed to provide the tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT>. The nodes that are part of the flat list may be the same nodes stored in the tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> (i.e., the same data), with the tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> being constructed by simply adding links to the nodes in the flat list to form the tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT>. Alternatively, the flat list may be part of the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00077" LVL="0"><PTEXT><PDAT>Processing for the routine illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> begins at a test step </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> which determines if there is more data to be processed. If not, then processing is complete and control passes to the exit point </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> to exit the tree construction software. Otherwise, control passes to a step </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT> where the current node (CN) is read in. The CN represents the node that is processed by the remainder of the software. Note that if a separate flat list of nodes is used, then &ldquo;reading in&rdquo; CN may simply refer to examining the next node in the list. Otherwise, the CN may be read directly from the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT> where the node type of the CN is determined. Note that there are many conventional techniques known in the art for associating a type with a portion of data such as, for example, using a unique numeric code to differentiate between types. Once the node type is determined at the step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT>, control passes to one of a plurality of code branches that process the particular node type.</PDAT></PTEXT></PARA>
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>If it is determined at the step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT> that the CN is a terminal node, then control passes from the step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> where the CN is pushed onto a stack. As discussed in more detail below, the tree construction software </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> uses a local stack to construct the tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT>. Following with step </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT>, control passes back to the beginning of the routine (as indicated by the connector </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT>) to the steps </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT> (discussed above) that check to see if there is more data to be processed and, if so, then read that data into the CN.</PDAT></PTEXT></PARA>
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>If it is determined at the step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT> that the CN is a unary node (i.e., a node with one child), then control passes from the step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> where the child (CH) of the unary node is popped off the local stack. Note that the child of the unary node would have been read in previously, per the convention adopted for storing the IR data, discussed above. Following the step </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>142</PDAT></BOLD></HIL><PDAT> where the child of the unary node (i.e., the child of the CN) is linked to the CN. Following the step </PDAT><HIL><BOLD><PDAT>142</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>144</PDAT></BOLD></HIL><PDAT> where the CN is pushed onto the local stack. Note that the CN may be a child of another node that will be subsequently read in. Following the step </PDAT><HIL><BOLD><PDAT>144</PDAT></BOLD></HIL><PDAT>, control passes back to the beginning of the routine, as indicated by the connector </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>If it is determined at the step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT> that the CN is a binary node (i.e., a node having two children), then control passes from the step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>150</PDAT></BOLD></HIL><PDAT> where the left child (LC) and the right child (RC) of the CN are popped off the local stack. Following the step </PDAT><HIL><BOLD><PDAT>150</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>152</PDAT></BOLD></HIL><PDAT> where the left child and right child are linked to the CN. Following the step </PDAT><HIL><BOLD><PDAT>152</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>154</PDAT></BOLD></HIL><PDAT> where the CN is pushed onto the local stack. Following step </PDAT><HIL><BOLD><PDAT>154</PDAT></BOLD></HIL><PDAT>, control transfers back to the beginning of the routine, as indicated by the connector </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>If it is determined at the step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT> that the CN is a ternary node, then control transfers from the step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> where the three children of the ternary node, the left child (LC), middle child (MC), and right child (RC), are popped off the local stack. Following the step </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>162</PDAT></BOLD></HIL><PDAT> where the left child, middle child, and right child are linked to the CN. Following the step </PDAT><HIL><BOLD><PDAT>162</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>164</PDAT></BOLD></HIL><PDAT> where the CN is pushed onto the local stack. Following the step </PDAT><HIL><BOLD><PDAT>164</PDAT></BOLD></HIL><PDAT>, control transfers back to the beginning of the routine, as indicated by the connector </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>If it is determined at the step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT> that the CN is a combination node, then control transfers from the step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>170</PDAT></BOLD></HIL><PDAT> where the child node (CH) is popped off the local stack. As discussed above in connection with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>, a combination node has two children where the first child is a single node and the second child is a list of nodes. In tens of storage of the IR data associated with a combination node, the first child may be stored prior to the combination node but the second child (the list elements) may be stored immediately after the combination node. Note also that, as discussed above, the end of the list is indicated by an end of list node.</PDAT></PTEXT></PARA>
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>170</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>172</PDAT></BOLD></HIL><PDAT> where the child node is linked to the CN. Following the step </PDAT><HIL><BOLD><PDAT>172</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>174</PDAT></BOLD></HIL><PDAT> where the routine is recursively called to process the elements of the list to be attached to the CN. As discussed in detail below, the return from the recursive call to the routine occurs when the end of list indicator is reached. Also, by convention, the routine may return a list containing items remaining on the local stack used by the routine.</PDAT></PTEXT></PARA>
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>174</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>176</PDAT></BOLD></HIL><PDAT> where the list returned by the call to the routine at the step </PDAT><HIL><BOLD><PDAT>174</PDAT></BOLD></HIL><PDAT> is linked to the CN to become the attached list of the combination node. Note that the call to the routine at step </PDAT><HIL><BOLD><PDAT>174</PDAT></BOLD></HIL><PDAT> causes each of the elements of the list for the combination node to be processed and placed on the local stack. Accordingly, the list of local stack elements may be returned upon returning from the call to the routine at the step </PDAT><HIL><BOLD><PDAT>174</PDAT></BOLD></HIL><PDAT>. Following the step </PDAT><HIL><BOLD><PDAT>176</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>178</PDAT></BOLD></HIL><PDAT> where the CN (i.e., the combination node) is pushed onto the stack. Following step </PDAT><HIL><BOLD><PDAT>178</PDAT></BOLD></HIL><PDAT>, control passes back to the beginning of the routine, as indicated by the connector </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>If it is determined at the step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT> that the CN is an end of list indicator node, then control passes from the step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>180</PDAT></BOLD></HIL><PDAT> where the CN is pushed onto the local stack. Following the step </PDAT><HIL><BOLD><PDAT>180</PDAT></BOLD></HIL><PDAT>, control passes back to the step </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> to return from the routine. Note that, in many instances, the return from the routine at this point is a return from a previous recursive call to the routine that was made when the corresponding combination node (the parent for the current list) was first encountered, as described above in connection with the steps </PDAT><HIL><BOLD><PDAT>174</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>176</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00087" LVL="0"><PTEXT><PDAT>As discussed above, the instrumentation software </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> operates on the IR tree data element </PDAT><HIL><BOLD><PDAT>66</PDAT></BOLD></HIL><PDAT> to provide the instrumented IR tree data element </PDAT><HIL><BOLD><PDAT>67</PDAT></BOLD></HIL><PDAT>. The instrumentation software </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> also uses data from the other instrumentation data element </PDAT><HIL><BOLD><PDAT>69</PDAT></BOLD></HIL><PDAT> which, as discussed in detail below, includes a plurality of run time instrumentation routines that may be added to the IR tree to facilitate run time debugging. In addition, as discussed in more detail below, the instrumentation software </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> instruments other IR data to provide the other IR data element </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> that includes instrumented versions of IR data. Once the instrumentation software </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> has provided the instrumented IR tree data element </PDAT><HIL><BOLD><PDAT>67</PDAT></BOLD></HIL><PDAT>, the tree deconstruction routine </PDAT><HIL><BOLD><PDAT>70</PDAT></BOLD></HIL><PDAT> uses the instrumented IR tree data element </PDAT><HIL><BOLD><PDAT>67</PDAT></BOLD></HIL><PDAT> and the other IR data element </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> to provide the instrumented IR data element </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00088" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT>, a flowchart </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> illustrates operation of the instrumentation software </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>. The instrumentation software </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> examines data found within the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> and, in a manner discussed in more detail below, provides instrumentation. Processing begins at a test step </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> where it is determined if there is more data (i.e., more nodes) to examine. Note that the data that is processed could be either directly from the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> or could be from the flat list of IR nodes, discussed above, that may be created in connection with creating the IR tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT>. If it is determined at the test step </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> that there is no more data to process (i.e., the end of the list or the end of the file containing the data has been reached), then processing is complete and the routine of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is exited.</PDAT></PTEXT></PARA>
<PARA ID="P-00089" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> that there is more data to be processed, then control passes from the test step </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> where the current node (CN) is obtained. In a manner similar to that discussed above in connection with construction of the IR tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT>, obtaining the CN may include reading the CN directly from the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> or simply obtaining the next node in the flat list of nodes that may have been constructed prior to building the IR tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00090" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> is a test step </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> where it is determined if the CN is a node of interest. As discussed in more detail below, a node of interest includes any node that is to be instrumented or which indicates that instrumentation is appropriate. Identifying which nodes are nodes of interest at the test step </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> is discussed in more detail hereinafter.</PDAT></PTEXT></PARA>
<PARA ID="P-00091" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> that the CN is not a node of interest, then control passes from the test step </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> back up to the step </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> where it is determined if there is more data to be processed, as discussed above. Otherwise, if it is determined at the test step </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> that the CN is a node of interest, then control passes from the test step </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> where a portion of the IR tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> is instrumented, either by replacing the CN and/or adding additional nodes the near location of the CN in the tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT>. Following the step </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> where other IR data is modified, as appropriate. Following the step </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>, control passes back to the step </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> to determine if there is more data to be processed.</PDAT></PTEXT></PARA>
<PARA ID="P-00092" LVL="0"><PTEXT><PDAT>Generally, it is possible to instrument any one or any subset of a variety of the nodes found in the IR tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT>. In many instances, however it is useful to instrument memory access instructions in order to detect illegal memory operations at run time. In addition, for many higher-level languages, variables that may be defined locally within a particular code block (such as a function) become undefined once that code block is exited. Accordingly, monitoring the variables of a program that access memory may necessitate monitoring exiting and entering blocks of code where variables become defined and undefined. For instance, a pointer variable may be defined within a particular block of code and used to allocate memory from the heap. If that block of code is exited before the memory is released, this would, in many instances, constitute an error since there would be no way to free the memory allocated using the (subsequently undefined) pointer variable.</PDAT></PTEXT></PARA>
<PARA ID="P-00093" LVL="0"><PTEXT><PDAT>In a preferred embodiment, the system described herein determines nodes of interest at the test step </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> by determining if the CN corresponds to one of: a pointer arithmetic operation that compares pointers or does pointer arithmetic, an operation that reads memory locations, an operation that changes memory locations, or an operation that causes variables to become defined or undefined, such as a scope change, a goto statement, a function call or a return from a function call. In the case of memory variable operations, whenever a variable is used to read memory, the run time instrumentation routines determine if the variable corresponds to memory that has been allocated and initialized. Similarly, if a variable is being used to write memory, the run time instrumentation routines determine if the variable corresponds to memory that has been allocated. Pointer comparisons are instrumented since it is often not proper to compare pointers that point to blocks of memory allocated by separate calls to the allocation routine(s). Operations that read or write to memory locations are instrumented to ensure that the memory variable(s) being used point to the memory allocated for the variable(s) during the read or write operation (e.g., an array index does not cause an access to an array to point beyond the end of the array).</PDAT></PTEXT></PARA>
<PARA ID="P-00094" LVL="0"><PTEXT><PDAT>Function calls and returns may be instrumented for a variety of purposes, including keeping track of variables becoming defined or undefined in connection with function calls and returns. In addition, note that it is possible to pass a variable pointer to a function and have that pointer be assigned to another variable within the function. These types of operations are instrumented since, even if a local variable is used to allocate memory, if that local variable corresponds to a passed variable, then it may not be improper to return from the function before freeing the memory allocated using the local variable.</PDAT></PTEXT></PARA>
<PARA ID="P-00095" LVL="0"><PTEXT><PDAT>Each block of code has a particular &ldquo;scope&rdquo; associated therewith. Transition from a block of code having one scope to a block of code having another scope is called a &ldquo;scope change&rdquo;. One reason scope changing instructions are instrumented is to detect memory leaks (i.e., allocating memory that is not subsequently freed). As discussed above, it is an error to allocate memory to a local variable and then return or exit out of the scope which defines the local variable without first freeing the memory or copying a pointer for the memory to a variable that is not going out of scope. Another reason that scope changes are instrumented is to detect read accesses to unitialized variables. Note that associating blocks of code with particular scopes is known in the art. See, for example, a section titled &ldquo;Representing Scope Information&rdquo; at pages 438-440 of Aho, Seth &amp; Ullman, </PDAT><HIL><ITALIC><PDAT>Compilers, Principles, Techniques, and Tools, </PDAT></ITALIC></HIL><PDAT>published by Addison-Wesley of Reading Mass., 1986.</PDAT></PTEXT></PARA>
<PARA ID="P-00096" LVL="0"><PTEXT><PDAT>One possible optimization is to not instrument scope changes that have minimal effect on monitoring variable operations. This optimization may be performed by first determining the scope of each portion of the IR code and then setting an effective scope of appropriate portions of the code to the effective scope of the immediately preceding block of code. In some instances, the block of code that immediately precedes the current block of code is the &ldquo;parent&rdquo; block of code. A preceding block of code is said to have a &ldquo;preceding scope&rdquo; relative to the current scope. For instance, in some higher level languages, a FOR loop will cause a scope change in connection with transition from the head of the loop to the body of the code that is executed within the loop. Thus, the scope of the head of the FOR loop is the preceding scope of the body of the FOR loop.</PDAT></PTEXT></PARA>
<PARA ID="P-00097" LVL="0"><PTEXT><PDAT>An effective scope table indicates the effective scope of each block of IR code. As discussed in more detail below, the effective scope of a portion of IR code is deemed to be the scope of that portion for purposes of instrumenting operations that use program variables. The effective scope table creates a mapping between the actual scope and the effective scope of blocks of the IR code.</PDAT></PTEXT></PARA>
<PARA ID="P-00098" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> illustrates using the IR code to construct the effective scope table. Processing begins at a test step </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> which determines if there is more data to be processed, in a manner similar to that discussed above in connection with other processing. If it is determined at the test step </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> that there is no more data, then processing is complete. Otherwise, control passes from the test step </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT> which determines if the data that has been read in and is being processed indicates a scope change. Note that, depending on the specific IR implementation, a scope change may be indicated explicitly within the IR data or may be indicated implicitly, in which case the processing at the test step </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT> would use conventional means for detecting a scope change, such as examining the data for the type of instructions that cause a scope change.</PDAT></PTEXT></PARA>
<PARA ID="P-00099" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT> that there is no scope change, then control passes back to the test step </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> to determine if there is more data to be processed. Otherwise, if a scope change is detected at the test step </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT>, then control passes from the step </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT> where a unique scope identifier is defined and assigned to the code block being processed. Construction of the effective scope table includes providing a unique scope identifier for each block of IR code having the same scope. Accordingly, one of the entries in the effective scope table is the unique scope identifier associated with each of the IR code blocks.</PDAT></PTEXT></PARA>
<PARA ID="P-00100" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT> is a test step </PDAT><HIL><BOLD><PDAT>228</PDAT></BOLD></HIL><PDAT> which determines if new variables are being defined within the block of code corresponding to the current scope. The variable definitions may be stored in the IR tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> or may be stored elsewhere, depending upon the specific implementation of the IR. If no new variables are defined within the current scope, then, for purposes of instrumenting memory variable accesses, it is not necessary to instrument the scope change. Accordingly, if it is determined at the test step </PDAT><HIL><BOLD><PDAT>228</PDAT></BOLD></HIL><PDAT> that no new variables are defined within the block of code corresponding to the current scope, then control passes from the step </PDAT><HIL><BOLD><PDAT>228</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT> where the effective scope of the current block of code is set equal to the effective scope of to the preceding block of code by associating the effective scope of the preceding block with the current scope. Note that setting the effective scope of the current block of code to the effective scope of the preceding block of code indicates that the scope change from the preceding block of code to the current block of code is not especially significant for purposes of instrumenting variable accesses. Note also that the effective scope of a preceding block may have been previously set to the effective scope of the preceding block of the preceding block. In this way, many scopes may be set to the same effective scope.</PDAT></PTEXT></PARA>
<PARA ID="P-00101" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>228</PDAT></BOLD></HIL><PDAT> that new variables are defined within the current block of IR code, then control passes from the step </PDAT><HIL><BOLD><PDAT>228</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>232</PDAT></BOLD></HIL><PDAT> where the effective scope table is modified to indicate that the effective scope of the current block of code is equal to the actual scope assigned to that block of code. Following either the step </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT> or the step </PDAT><HIL><BOLD><PDAT>232</PDAT></BOLD></HIL><PDAT>, control passes back to the beginning of the routine. The thus-constructed effective scope table may be used to provide instrumentation optimizations, as discussed below.</PDAT></PTEXT></PARA>
<PARA ID="P-00102" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9A</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>240</PDAT></BOLD></HIL><PDAT> illustrates code for identifying labels and jumps to labels within the IR code. Note that, in many conventional IR implementations, symbolic labels are used to identify locations within the code so that control flow instructions within the IR code may jump to those labels. In some instances, a jump to a label could cause a scope change and, therefore, could be instrumented if the jump causes program variables to become defined or become undefined. However, a possible optimization includes identifying labels that do not require instrumentation either because there are no jumps to those labels or because all jumps to those labels are from code having the same effective scope as the code corresponding to the label.</PDAT></PTEXT></PARA>
<PARA ID="P-00103" LVL="0"><PTEXT><PDAT>Processing begins at a test step </PDAT><HIL><BOLD><PDAT>242</PDAT></BOLD></HIL><PDAT> which determines if there is more data to be processed in a manner similar to that discussed above. If there is no more data, then processing is complete. Otherwise, control passes from the test step </PDAT><HIL><BOLD><PDAT>242</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>244</PDAT></BOLD></HIL><PDAT> which determines if the current IR node being processed is a label for a block of IR code. If so, then control passes from the test step </PDAT><HIL><BOLD><PDAT>244</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>246</PDAT></BOLD></HIL><PDAT> where the label is added to a label table that is used by follow on processing, as discussed in more detail below.</PDAT></PTEXT></PARA>
<PARA ID="P-00104" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>244</PDAT></BOLD></HIL><PDAT> that the data being processed is not a label, then control passes from the step </PDAT><HIL><BOLD><PDAT>244</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>248</PDAT></BOLD></HIL><PDAT> which determines if the current data being processed includes IR code that jumps to a label. If not, then control passes from the test step </PDAT><HIL><BOLD><PDAT>248</PDAT></BOLD></HIL><PDAT> back to the step </PDAT><HIL><BOLD><PDAT>242</PDAT></BOLD></HIL><PDAT> to process additional data. Otherwise, if it is determined at the test step </PDAT><HIL><BOLD><PDAT>248</PDAT></BOLD></HIL><PDAT> that the current data being processed includes IR code that jumps to a label, then control passes from the step </PDAT><HIL><BOLD><PDAT>248</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>, where an entry is made to the label table. Following the step </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>, control passes back to the beginning of the routine to process additional data. The processing illustrated in the flowchart </PDAT><HIL><BOLD><PDAT>240</PDAT></BOLD></HIL><PDAT> creates the label table to identify all labels and all jumps to labels within the IR code. Note that the term &ldquo;table&rdquo;, as used herein, should be understood in its broader sense to include other equivalent data structures such as linked lists, storage in a temporary file, etc., familiar to one of ordinary skill in the art.</PDAT></PTEXT></PARA>
<PARA ID="P-00105" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9B</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT> illustrates optimization operations that use the label table. Each label that is identified in the label table is examined to determine if there are any jumps to that label or if any of the jumps to the label are from IR code blocks having a different effective scope. Processing begins at a test step </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT> which, in a manner similar to that discussed above, determines if there is more data to be processed. Note that, in this instance, the test for more data at the test step </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT> is directed to processing each of the label entries in the label table.</PDAT></PTEXT></PARA>
<PARA ID="P-00106" LVL="0"><PTEXT><PDAT>If it is determined at the step </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT> that there is no more data (i.e., there are no more labels to be processed), then processing is complete. Otherwise, if there are more labels to be processed, then control passes from the test step </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>264</PDAT></BOLD></HIL><PDAT> which examines the label table to determine if there are any jumps to the current label being processed. Note that, generally, it is possible for the compiler to generate IR code having labels that are ultimately not used (i.e., there is no IR code that jumps to the labels). Accordingly, if such labels exist, they arc detected at the test step </PDAT><HIL><BOLD><PDAT>264</PDAT></BOLD></HIL><PDAT> and control passes to a step </PDAT><HIL><BOLD><PDAT>266</PDAT></BOLD></HIL><PDAT> where the label is marked (in a conventional manner) to indicate that the label is not to be instrumented. Following the step </PDAT><HIL><BOLD><PDAT>266</PDAT></BOLD></HIL><PDAT>, control passes back to the beginning of the routine.</PDAT></PTEXT></PARA>
<PARA ID="P-00107" LVL="0"><PTEXT><PDAT>If, on the other hand, it is determined at the test step </PDAT><HIL><BOLD><PDAT>264</PDAT></BOLD></HIL><PDAT> that there are jumps to the label being processed, then control passes from the step </PDAT><HIL><BOLD><PDAT>264</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>268</PDAT></BOLD></HIL><PDAT> where it is determined if any of the jumps to the label are from IR code having a different effective scope than that of the label. Note that at the steps </PDAT><HIL><BOLD><PDAT>246</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9A</PDAT></FGREF><PDAT>, the label table entries may be made to include the effective scope (from the effective scope table) of IR code corresponding to the labels and the jumps to the labels. Accordingly, at the step </PDAT><HIL><BOLD><PDAT>268</PDAT></BOLD></HIL><PDAT>, the effective scope of the IR code corresponding to the label is compared with the effective scopes of all of the code containing jumps to the label. If it is determined at the step </PDAT><HIL><BOLD><PDAT>268</PDAT></BOLD></HIL><PDAT> that none of the jumps to the label are from IR code having a different effective scope than the code associated with the label, then control passes from the step </PDAT><HIL><BOLD><PDAT>268</PDAT></BOLD></HIL><PDAT> to the step </PDAT><HIL><BOLD><PDAT>266</PDAT></BOLD></HIL><PDAT>, where the label is marked to indicate that the label is not to be instrumented. Since the effective scope tracks variables becoming defined and undefined within a code block and between different code blocks, then marking certain labels at the step </PDAT><HIL><BOLD><PDAT>266</PDAT></BOLD></HIL><PDAT> provides a worthwhile optimization when instrumenting code in connection with run time variable accesses.</PDAT></PTEXT></PARA>
<PARA ID="P-00108" LVL="0"><PTEXT><PDAT>If it is determined at the step </PDAT><HIL><BOLD><PDAT>268</PDAT></BOLD></HIL><PDAT> that there are jumps to the label that cause a change in effective scope, then control passes from the test step </PDAT><HIL><BOLD><PDAT>268</PDAT></BOLD></HIL><PDAT> back to the beginning of the routine. Once all the labels have been thus marked, it is possible to perform the remainder of the processing indicated by the step </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> where the nodes of interest are identified for subsequent instrumentation. Note that it is possible to use a boolean variable to indicate whether a label node is to be instrumented.</PDAT></PTEXT></PARA>
<PARA ID="P-00109" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 10</PDAT></FGREF><PDAT>, a flowchart </PDAT><HIL><BOLD><PDAT>280</PDAT></BOLD></HIL><PDAT> illustrates a portion of the processing at the step </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> that determines which nodes in the IR code arc to be instrumented. Processing begins at a test step </PDAT><HIL><BOLD><PDAT>284</PDAT></BOLD></HIL><PDAT>, which is reached from the step </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>. At the test step </PDAT><HIL><BOLD><PDAT>284</PDAT></BOLD></HIL><PDAT>, it is determined if the data being processed corresponds to a label in the IR code. If so, then control passes from the test step </PDAT><HIL><BOLD><PDAT>284</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>286</PDAT></BOLD></HIL><PDAT> to determine if the label has been marked to indicate that the label is not to be instrumented, as discussed above in connection with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 9A and 9B</PDAT></FGREF><PDAT>. If it is determined at the test step </PDAT><HIL><BOLD><PDAT>286</PDAT></BOLD></HIL><PDAT> that the label being processed has been marked to indicate that the label is not to be instrumented, then control passes from the test step </PDAT><HIL><BOLD><PDAT>286</PDAT></BOLD></HIL><PDAT> to the step </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>. Otherwise, if it is determined that the test step </PDAT><HIL><BOLD><PDAT>286</PDAT></BOLD></HIL><PDAT> that the label is to be instrumented, then control passes from the step </PDAT><HIL><BOLD><PDAT>286</PDAT></BOLD></HIL><PDAT> to the step </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> where the IR tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> is instrumented.</PDAT></PTEXT></PARA>
<PARA ID="P-00110" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>284</PDAT></BOLD></HIL><PDAT> that the data being processed is not a label, then control passes from the step </PDAT><HIL><BOLD><PDAT>284</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>288</PDAT></BOLD></HIL><PDAT> where it is determined if the data being processed indicates a scope change. If so, then control passes from the step </PDAT><HIL><BOLD><PDAT>288</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>290</PDAT></BOLD></HIL><PDAT> to determine if the old effective scope (i.e., the effective scope before the scope change) equals the new effective scope (i.e., the effective scope after the scope change). The effective scope is discussed above in connection with construction of the effective scope table. If it is determined that the scope changed detected at the test step </PDAT><HIL><BOLD><PDAT>288</PDAT></BOLD></HIL><PDAT> does not cause a change in the effective scope, then control passes from the test step </PDAT><HIL><BOLD><PDAT>290</PDAT></BOLD></HIL><PDAT> to the step </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>. Otherwise, if it is determined at the test step </PDAT><HIL><BOLD><PDAT>290</PDAT></BOLD></HIL><PDAT> that the old effective scope does not equal the new effective scope, then control passes from the step </PDAT><HIL><BOLD><PDAT>290</PDAT></BOLD></HIL><PDAT> to the step </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> where the tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> is instrumented.</PDAT></PTEXT></PARA>
<PARA ID="P-00111" LVL="0"><PTEXT><PDAT>If it is determined at the step </PDAT><HIL><BOLD><PDAT>288</PDAT></BOLD></HIL><PDAT> that the data being processed does not cause a scope change, then control passes from the step </PDAT><HIL><BOLD><PDAT>288</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>292</PDAT></BOLD></HIL><PDAT> where is determined if the data being processed is a function call. If so, then control passes from the test step </PDAT><HIL><BOLD><PDAT>292</PDAT></BOLD></HIL><PDAT> to the step </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>. Otherwise, control passes from the test step </PDAT><HIL><BOLD><PDAT>292</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>294</PDAT></BOLD></HIL><PDAT> which determines if the data being processed is a pointer operation. If so, then control passes from the test step </PDAT><HIL><BOLD><PDAT>294</PDAT></BOLD></HIL><PDAT> to the step </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>. Otherwise, control passes from the test step </PDAT><HIL><BOLD><PDAT>294</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>296</PDAT></BOLD></HIL><PDAT> where it is determined if the data being processed is a memory write operation (i.e. an operation with a program variable causing a write to memory). If so, then control passes from the test step </PDAT><HIL><BOLD><PDAT>296</PDAT></BOLD></HIL><PDAT> to the step </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>. Otherwise, control passes from the step </PDAT><HIL><BOLD><PDAT>296</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>298</PDAT></BOLD></HIL><PDAT> which determines if the data being processed relates to a memory read (i.e., is an operation with a program variable causing a read from memory). If so, then control passes from the test step </PDAT><HIL><BOLD><PDAT>298</PDAT></BOLD></HIL><PDAT> to the step </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>. Otherwise, control transfers from the step </PDAT><HIL><BOLD><PDAT>298</PDAT></BOLD></HIL><PDAT> to the step </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00112" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 10</PDAT></FGREF><PDAT> illustrates an embodiment of the invention where the instructions being instrumented relate to memory variable accesses and scope changes. In other embodiments of the invention, it is possible to instrument other types of IR instructions, depending upon which instructions are deemed appropriate for monitoring program operation at run time. For example, it may be possible to add instrumentation to monitor run time performance of the program. Other examples of possible uses of instrumentation include, but are not limited to, code coverage analysis and run time error handling.</PDAT></PTEXT></PARA>
<PARA ID="P-00113" LVL="0"><PTEXT><PDAT>Instrumenting memory variable accesses and scope changes, as disclosed herein, facilitates uncovering program errors relating to memory read and write operations that occurred during run time. Note that the specific IR operations, and the arguments thereof, vary depending upon the particular implementation of the IR. In addition, as discussed above, the choice of which operations to instrument varies depending upon the needs of the user of the instrumentation program.</PDAT></PTEXT></PARA>
<PARA ID="P-00114" LVL="0"><PTEXT><PDAT>The step </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> of instrumenting the IR tree, which is shown as </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT>, involves adding nodes to the tree that assist in the performance of the run time instrumentation. As discussed in more detail below, each of the specific run time instrumentation routines that is provided may include a function that is called to perform the instrumentation operation. Note that the instrumentation calls are added in a way that has no net effect on the underlying, uninstrumented, program. That is, the behavior of the IR code with the run time instrumentation routines added thereto has to be the same as the behavior of the original IR code without the instrumentation routines added. Thus, the instrumentation routines may add new variables, but do not change any of the program variables except in instances where the value of a program variable is undefined. The additional nodes, instrumentation function calls, etc. may be provided by the instrumentation data element </PDAT><HIL><BOLD><PDAT>69</PDAT></BOLD></HIL><PDAT> shown in FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00115" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11A</PDAT></FGREF><PDAT>, a portion of an IR tree is shown containing a unary operation node </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT> and a child node </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT> thereof. The operation node </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT> represents a node of interest that is to be instrumented. The child node </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT> represents the sole child of the operation node </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT>. In order to instrument the operation node </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT>, a run time instrumentation node </PDAT><HIL><BOLD><PDAT>314</PDAT></BOLD></HIL><PDAT> is interjected between the operation node </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT> and the child node </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT>. The run time instrumentation node </PDAT><HIL><BOLD><PDAT>314</PDAT></BOLD></HIL><PDAT> may be a function call to a run time instrumentation function that uses the child node </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT> as one of the arguments and returns the value of the child node </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT> from the function call to make the value available for the operation node </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT>. Interjecting the run time instrumentation node </PDAT><HIL><BOLD><PDAT>314</PDAT></BOLD></HIL><PDAT> between the operation node </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT> and the child node </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT> in this manner is virtually transparent to the operation node </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT>, since the value returned by the run time instrumentation node </PDAT><HIL><BOLD><PDAT>314</PDAT></BOLD></HIL><PDAT> is the value of the child node </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT>. Note that other arguments may be provided in a conventional manner to the function corresponding to the run time instrumentation node.</PDAT></PTEXT></PARA>
<PARA ID="P-00116" LVL="0"><PTEXT><PDAT>Refer to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11B</PDAT></FGREF><PDAT>, a binary operation node </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT> has a left child </PDAT><HIL><BOLD><PDAT>322</PDAT></BOLD></HIL><PDAT>, a right child </PDAT><HIL><BOLD><PDAT>324</PDAT></BOLD></HIL><PDAT>, and a parent node </PDAT><HIL><BOLD><PDAT>326</PDAT></BOLD></HIL><PDAT>. If the operation node </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT> is a node of interest, then it may be instrumented by interjecting various nodes that are effectively transparent to the operation node </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT> as well as effectively transparent to the left child </PDAT><HIL><BOLD><PDAT>322</PDAT></BOLD></HIL><PDAT>, the right child </PDAT><HIL><BOLD><PDAT>324</PDAT></BOLD></HIL><PDAT> and the parent node </PDAT><HIL><BOLD><PDAT>326</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00117" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11C</PDAT></FGREF><PDAT>, the operation node </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT> is instrumented by adding a variety of other nodes. One of the other nodes that is added is a temporary node </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> that is used to store the value of the left child </PDAT><HIL><BOLD><PDAT>322</PDAT></BOLD></HIL><PDAT>. An assignment node </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT> is used to assign the value that results from evaluating the left child </PDAT><HIL><BOLD><PDAT>322</PDAT></BOLD></HIL><PDAT> to the value of the temporary node </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT>. As discussed below, right subtree is evaluated before the left subtree. Thus, the operation that evaluates the value of the left child and assigns the value to the temporary node </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> will occur before other operations shown in FIG. </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>C.</PDAT></PTEXT></PARA>
<PARA ID="P-00118" LVL="0"><PTEXT><PDAT>An instrumentation node </PDAT><HIL><BOLD><PDAT>332</PDAT></BOLD></HIL><PDAT> is represented in the sub-tree of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11C</PDAT></FGREF><PDAT> as a function having arguments that include the temporary node </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> and the right child </PDAT><HIL><BOLD><PDAT>324</PDAT></BOLD></HIL><PDAT>. Since the arguments to the function that corresponds to the instrumentation node </PDAT><HIL><BOLD><PDAT>332</PDAT></BOLD></HIL><PDAT> are illustrated as a list, then a list end node </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT> is shown at the end of the list. Other arguments to the instrumentation node </PDAT><HIL><BOLD><PDAT>332</PDAT></BOLD></HIL><PDAT>, as well as arguments to the instrumentation node </PDAT><HIL><BOLD><PDAT>314</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11A</PDAT></FGREF><PDAT> may include a variety of other conventional compile time and run time parameters that facilitate debugging.</PDAT></PTEXT></PARA>
<PARA ID="P-00119" LVL="0"><PTEXT><PDAT>The function defined by the instrumentation node </PDAT><HIL><BOLD><PDAT>332</PDAT></BOLD></HIL><PDAT> returns the result of evaluating the right child </PDAT><HIL><BOLD><PDAT>324</PDAT></BOLD></HIL><PDAT>. Thus, the next operation is the operation of the instrumented node </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT>, which receives the value of the temporary node </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> and the value of the instrumentation function </PDAT><HIL><BOLD><PDAT>332</PDAT></BOLD></HIL><PDAT>. Note that, as discussed above, the value of the temporary node </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> is the value of the left child </PDAT><HIL><BOLD><PDAT>322</PDAT></BOLD></HIL><PDAT> and the value of the function defined by the instrumentation node </PDAT><HIL><BOLD><PDAT>332</PDAT></BOLD></HIL><PDAT> is the value of the right child </PDAT><HIL><BOLD><PDAT>324</PDAT></BOLD></HIL><PDAT>. Thus, the operation node </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT> is provided with values for children that are the same as those provided to the operation node </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT> shown in FIG. </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>B. The node labeled &ldquo;C&rdquo; </PDAT><HIL><BOLD><PDAT>336</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11C</PDAT></FGREF><PDAT> simply causes execution of the right sub-tree (in this case having a root node </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT> that does the assignment of the value of the left child </PDAT><HIL><BOLD><PDAT>322</PDAT></BOLD></HIL><PDAT> to the temporary node </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT>) followed by the operation of the left sub-tree (in this case the operation being instrumented </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT>). The node labeled &ldquo;C&rdquo; </PDAT><HIL><BOLD><PDAT>336</PDAT></BOLD></HIL><PDAT> provides the value derived from the operation node </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT> to the parent node </PDAT><HIL><BOLD><PDAT>326</PDAT></BOLD></HIL><PDAT>. Thus, the parent node </PDAT><HIL><BOLD><PDAT>326</PDAT></BOLD></HIL><PDAT> in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11C</PDAT></FGREF><PDAT> receives the same value provided to the parent node </PDAT><HIL><BOLD><PDAT>326</PDAT></BOLD></HIL><PDAT> in the configuration show in FIG. </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>B. Instrumentation of the binary node illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 11B and 11C</PDAT></FGREF><PDAT> is expandable to ternary and to nodes having even more children using this same basic methodology described herein.</PDAT></PTEXT></PARA>
<PARA ID="P-00120" LVL="0"><PTEXT><PDAT>The run time instrumentation code may be implemented by using a separate set of routines (such as a DLL under the Windows environment) that is linkable to the code being instrumented via the function calls provided to the IR code in the course of instrumentation. In a preferred embodiment, the function calls are performed by indirectly calling functions that are initially set to an initialization routine that initializes the run time instrumentation system. The initialization routine determines if an executable library corresponding to the run time instrumentation routine is available. If not, then the addresses of the functions that are called indirectly by the indirect function calls added by instrumentation are set to &ldquo;stub&rdquo; routines that simply return without executing anything. Accordingly, even if the user program has been instrumented, if the run time instrumentation program is not also available during run time, then the instrumented code will simply return from the instrumentation function calls.</PDAT></PTEXT></PARA>
<PARA ID="P-00121" LVL="0"><PTEXT><PDAT>If, on the other hand, the initialization routine determines that the executable library for providing instrumentation during run time is available, then the addresses of the functions that are called indirectly by the instrumentation nodes are set to the instrumentation routines. The run time instrumentation routines that are used depend on the nature of the IR code being instrumented. Generally, the instrumentation routines may be fairly conventional and test for run time error conditions such as memory leaks (i.e., a scope change that causes a pointer variable to become undefined prior to freeing the allocated memory associated with the pointed variable). Other detected errors may include memory write operations that use variables that do not point to memory that is allocated to the variable, memory read operations that use memory variables that do not point to memory that is either allocated for the variable or, if allocated, then is not initialized. In addition, modifications to pointer variables may be instrumented to ensure that the pointer variables point to the proper allocated block of memory. Other run time instrumentation routines may test and compare the size of variables in connection with a data read from one memory location into another, test for indirect calls to assure that the pointer used points to executable code, and test that pointers that are compared are allocated to the same block of memory.</PDAT></PTEXT></PARA>
<PARA ID="P-00122" LVL="0"><PTEXT><PDAT>Once the IR tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> has been instrumented in the manner discussed above to create the instrumented IR tree data element </PDAT><HIL><BOLD><PDAT>67</PDAT></BOLD></HIL><PDAT>, the tree deconstruction software </PDAT><HIL><BOLD><PDAT>70</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> collapses the IR tree stored in the instrumented IR tree data element </PDAT><HIL><BOLD><PDAT>67</PDAT></BOLD></HIL><PDAT> and uses the other IR data element </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> to provide the instrumental IR Data Element </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT>. Collapsing the IR tree back into a flat file is a simple matter of using the conventional post order traversal algorithm to first write the right child sub-tree of each node, then the left child sub-tree, then the actual node. For the combo node, after the child tree is written, the list is processed, treating each item in the list as a top-level node in its own tree. This process is essentially the inverse of the process used to construct the IR tree, discussed above.</PDAT></PTEXT></PARA>
<PARA ID="P-00123" LVL="0"><PTEXT><PDAT>The other IR data element </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> may include a global symbol table that contains locations of each function contained in the IR code. Note that since IR code is being supplemented (i.e., increased in size) by the instrumentation process, then generally, the location of each of the functions within the IR code is likely to move. The locations of each of the functions are stored in the other IR data element </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> and are written back to the other IR data element </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> as the IR tree </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> is collapsed into a flat list by the tree deconstruction software </PDAT><HIL><BOLD><PDAT>70</PDAT></BOLD></HIL><PDAT> shown in FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>. Note that global function symbols within the global symbol table, and corresponding functions within the IR tree, may be correlated in a conventional manner by using symbol keys that cross-reference items between the IR code and the items in global symbols table.</PDAT></PTEXT></PARA>
<PARA ID="P-00124" LVL="0"><PTEXT><PDAT>Once the instrumented IR data element </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> is provided, then, as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>, the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> may continue the compile process by accessing the instrumented IR data element </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> to provide the object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>. Instrumenting the IR code in this way is virtually transparent to the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> since the IR data element </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> and the instrumented IR data element </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> have virtually the same structure. The thus-provided object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> contains the additional nodes added during instrumentation, including the run time function calls that call the run time debugging routines.</PDAT></PTEXT></PARA>
<PARA ID="P-00125" LVL="0"><PTEXT><PDAT>During execution of the object code, errors may be indicated by the run time debugging routines in any one of a variety of conventional manners, including providing an indication on the screen and stopping execution of the code when the error occurs, logging errors to a file, or any one of a variety of other ways for indicating to a user that a run time error condition, or a potential run time error condition, has occurred.</PDAT></PTEXT></PARA>
<PARA ID="P-00126" LVL="0"><PTEXT><PDAT>Other embodiments also exist. Described below are methods of automatically editing the executable byte code representation of a computer program or other methods for generating instrumented byte code. In one embodiment, the byte code is altered by the addition of new instructions and/or the deletion or modification of existing instructions.</PDAT></PTEXT></PARA>
<PARA ID="P-00127" LVL="0"><PTEXT><PDAT>Byte code is a generic term for a family of binary (i.e., non-textual) file formats for computer software programs created by compiling source code written in a computer programming language. Byte code is a format that is usually independent of the source language from which it was compiled, and which is intended to be independent of any computer hardware and/or operating system on which it might run. Byte code programs are executed by a software program sometimes referred to as a virtual machine, byte-code interpreter or p-code interpreter, a separate version of which must be implemented for each computer hardware and/or operating system. One type of byte code, Java byte code, may be provided by compiling a Java source language program. The Java byte code may then be run on a computer having an appropriate program for interpreting the Java byte code. A detailed description of this may be found, for example, in </PDAT><HIL><ITALIC><PDAT>The Java Virtual Machine Specification, </PDAT></ITALIC></HIL><PDAT>by Tim Lindholm and Frank Yellin and published by Addison Wesley, of Reading Mass., 1997, which is incorporated by reference herein.</PDAT></PTEXT></PARA>
<PARA ID="P-00128" LVL="0"><PTEXT><PDAT>One objective of the instrumentation process is to alter the program to facilitate the gathering of diagnostic and statistical information on the program when it is executed; i.e., dynamic analysis. This allows the program&apos;s internal state to be monitored for variety of purposes. These purposes include, but are not limited to: diagnosing error conditions that occur at run time, creating a record of the inner details of program execution, measuring program execution to provide code coverage analysis and performance profiling, or providing additional run time error or exception handling.</PDAT></PTEXT></PARA>
<PARA ID="P-00129" LVL="0"><PTEXT><PDAT>Another objective of the editing process is to examine the byte code according to various heuristics; i.e., static analysis. Through static analysis, several types of useful information may be derived. These include, but are not limited to: code metrics and complexity analysis, usage information (including library usage), and enhanced symbolic information for debugging.</PDAT></PTEXT></PARA>
<PARA ID="P-00130" LVL="0"><PTEXT><PDAT>Static analysis also makes it possible to detect some types of errors that might not be caught at runtime, since it is difficult to guarantee that all code will actually be executed under all circumstances. These errors include, but are not limited to: improper parameter lists passed to functions, methods or procedures, and use of uninitialized variables.</PDAT></PTEXT></PARA>
<PARA ID="P-00131" LVL="0"><PTEXT><PDAT>There are many different ways to instrument byte code. In one embodiment, the editing is performed automatically as a separate post-compile process before the byte code is executed. In another embodiment, the editing is performed automatically by the run time environment itself, which has been modified to alter the code before it is executed. In a third embodiment, the final stage </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> of the compiler </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> generates instrumented byte code from the instrumented IR data </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> rather than generating the object code </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>, as described above.</PDAT></PTEXT></PARA>
<PARA ID="P-00132" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT>, a data flow diagram </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> illustrates operation of a virtual machine (VM) runtime system that interprets and runs byte code, such as Java byte code. In the data flow diagram </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>, the VM runtime system has been broken up into two modules, a class instantiator </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> and a VM runtime module </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT>. The class instantiator </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> may receive a class input from any one of a variety of possible sources, including a file, over a local area network, from the Internet, from a zip file, from a CAB file, from another program that dynamically generates a class, or by any one of another variety of sources for computer data.</PDAT></PTEXT></PARA>
<PARA ID="P-00133" LVL="0"><PTEXT><PDAT>The class instantiator </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> generates a class instance </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT>, which, in a preferred embodiment, is a memory image representing a class that can be accessed by the VM runtime module </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT> to perform operations indicated by the class instance </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT>. Absent any instrumentation, the class instance </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT> is provided as an input to the VM runtime module </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT> which interprets and executes the executable steps of the class instance </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT> as well as performing any other operations indicated thereby.</PDAT></PTEXT></PARA>
<PARA ID="P-00134" LVL="0"><PTEXT><PDAT>In many implementations, a user can supplement the byte code provided in the class instance </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT> with separate native code that may be used in conjunction with the byte code. In the case of the VM runtime module provided by Microsoft Corporation of Redmond, Wash., one of the interfaces between byte code and native code is called the Raw Native Interface (RNI). In the case of the VM runtime module provided by Sun Corporation of Burlington, Mass., an interface between byte code and native code is called Java Native Interface (JNI).</PDAT></PTEXT></PARA>
<PARA ID="P-00135" LVL="0"><PTEXT><PDAT>The interface may be provided by allowing declarations of method names and parameters in the byte code and by having a special designator indicating that the executable portions corresponding to the declared methods are found in one or more blocks of native code </PDAT><HIL><BOLD><PDAT>408</PDAT></BOLD></HIL><PDAT> that are separate from the VM runtime module </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT>. The native code runtime mechanism is described in more detail hereinafter in connection with describing instrumentation of native code.</PDAT></PTEXT></PARA>
<PARA ID="P-00136" LVL="0"><PTEXT><PDAT>Byte code may be instrumented by instrumenting each class as the class is loaded by the VM runtime system. As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT>, the class instance </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT> is provided to an instrumentation DLL </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> which instruments the byte code of the class instance </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT> to provide an instrumented class instance </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT>. The instrumented class instance </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT> is provided as an input to the VM runtime module </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT> instead of the class instance </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT>. That is, the VM runtime module </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT> uses the instrumented class instance </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT> instead of the class instance </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT>. The mechanism for providing the instrumented class instance </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT> to the VM runtime module </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT> is described in more detail hereinafter.</PDAT></PTEXT></PARA>
<PARA ID="P-00137" LVL="0"><PTEXT><PDAT>The instrumented class instance </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT> contains native calls to a monitoring DLL </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT> which provides a message stream to a plurality of analyzers/viewers </PDAT><HIL><BOLD><PDAT>416</PDAT></BOLD></HIL><PDAT> that are used to view the results of the instrumentation. In some instances, the monitoring DLL </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT> may make calls in to the VM runtime module </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT> to obtain more information for the message stream. Also note that it is possible to optionally store the message stream data in a message data storage </PDAT><HIL><BOLD><PDAT>417</PDAT></BOLD></HIL><PDAT>. Storage of data in the message data storage </PDAT><HIL><BOLD><PDAT>417</PDAT></BOLD></HIL><PDAT> may be in addition to, or alternative to, providing the data to the analyzers/viewers </PDAT><HIL><BOLD><PDAT>416</PDAT></BOLD></HIL><PDAT>. The monitoring DLL </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT>, the analyzer/viewers </PDAT><HIL><BOLD><PDAT>416</PDAT></BOLD></HIL><PDAT>, and the message data storage </PDAT><HIL><BOLD><PDAT>417</PDAT></BOLD></HIL><PDAT> are described in more detail hereinafter.</PDAT></PTEXT></PARA>
<PARA ID="P-00138" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 13</PDAT></FGREF><PDAT>, a flowchart </PDAT><HIL><BOLD><PDAT>420</PDAT></BOLD></HIL><PDAT> illustrates basic operation of the instrumentation DLL </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT>. The instrumentation program </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> operates in cooperation with the VM runtime system and may take advantage of particular hooks or calls provided by the vendors of the VM runtime system.</PDAT></PTEXT></PARA>
<PARA ID="P-00139" LVL="0"><PTEXT><PDAT>The flowchart </PDAT><HIL><BOLD><PDAT>420</PDAT></BOLD></HIL><PDAT> shows a first step </PDAT><HIL><BOLD><PDAT>422</PDAT></BOLD></HIL><PDAT> where the instrumentation DLL </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> receives a pointer and a size value for the class instance </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT>, which allows the instrumentation DLL </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> to access the class instance </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT> in connection with providing instrumentation. Following the step </PDAT><HIL><BOLD><PDAT>422</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>424</PDAT></BOLD></HIL><PDAT> where the instrumentation DLL </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> allocates space for providing the instrumented class instance </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT>. In some embodiments, this allocation may be performed using conventional memory allocation routines. In other instances, the vendor of a VM runtime system may provide specialized memory allocation routines to be used. Following the step </PDAT><HIL><BOLD><PDAT>424</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>426</PDAT></BOLD></HIL><PDAT> where the class is instrumented to provide the instrumented class instance </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT>. Instrumentation of the class is described in more detail hereinafter. Following the step </PDAT><HIL><BOLD><PDAT>426</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>428</PDAT></BOLD></HIL><PDAT> where a pointer to the space that was allocated at the step </PDAT><HIL><BOLD><PDAT>424</PDAT></BOLD></HIL><PDAT>, as well as a size value, are passed back to the VM runtime system in order to allow the VM runtime module </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT> to use the instrumented class instance </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00140" LVL="0"><PTEXT><PDAT>In embodiments where a specialized space allocation routine is used at the step </PDAT><HIL><BOLD><PDAT>424</PDAT></BOLD></HIL><PDAT>, processing may be complete after the step </PDAT><HIL><BOLD><PDAT>428</PDAT></BOLD></HIL><PDAT>. In those cases, the VM runtime module </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT>, or other portions of the VM runtime system, handle deallocation of the space allocated at the step </PDAT><HIL><BOLD><PDAT>424</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00141" LVL="0"><PTEXT><PDAT>In other embodiments, the instrumentation DLL </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> waits for the VM runtime module </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT> to use the instrumented class instance </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT>. This is represented by the test step </PDAT><HIL><BOLD><PDAT>430</PDAT></BOLD></HIL><PDAT> which shows the instrumentation DLL </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> waiting for the VM runtime module </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT> to signal the VM routine module </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT> is done with the instrumented class instance </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT>. Of course, this may be implemented in a conventional fashion by having the VM call a particular entry point in the instrumentation DLL </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> so that the instrumentation DLL </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> does not have to poll the VM runtime module </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT>. Following the step </PDAT><HIL><BOLD><PDAT>430</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>432</PDAT></BOLD></HIL><PDAT> where the instrumentation program </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> deallocates the space that was allocated at the step </PDAT><HIL><BOLD><PDAT>424</PDAT></BOLD></HIL><PDAT>. As discussed above, the steps </PDAT><HIL><BOLD><PDAT>430</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>432</PDAT></BOLD></HIL><PDAT> may not be necessary in instances where a specialized memory allocation routine is used at the step </PDAT><HIL><BOLD><PDAT>424</PDAT></BOLD></HIL><PDAT> and the VM runtime system handles deallocation of the allocated memory.</PDAT></PTEXT></PARA>
<PARA ID="P-00142" LVL="0"><PTEXT><PDAT>The hooks in to the VM for providing the capabilities described above are provided by each VM vendor. For example, for the VM provided by Microsoft, the hooks are provided in the Microsoft Software Development Kit (SDK) for Java, Version 3.0, which is freely available from the Internet at http://www.microsoft.com/java. The hook used to intercept Java classes as they get loaded into the VM is declared in a C&plus;&plus; header file called &ldquo;jclshook.h&rdquo;. In an installed version of the SDK, this file resides in the include directory called &ldquo;include/jclshook.h&rdquo;. The mechanism that is used to cause the instrumentation DLL to be loaded into the Microsoft VM is part of Microsoft&apos;s Java Language Profiler Interface, which is discussed in detail in the SDK documentation. The SDK documentation is shipped as HTML. Two main files that provide information about the hook mechanism are Docs/htm/jprf_nar.htm and Docs/htm/jprf_ref.htm.</PDAT></PTEXT></PARA>
<PARA ID="P-00143" LVL="0"><PTEXT><PDAT>In a preferred embodiment, not all classes that are loaded are necessarily instrumented. As discussed in detail below, there are special cases of classes that are not instrumented at all. In addition, there are other special cases of classes that are only partially instrumented, as described in more detail below.</PDAT></PTEXT></PARA>
<PARA ID="P-00144" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 14</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>440</PDAT></BOLD></HIL><PDAT> illustrates in more detail the step of instrumenting the class </PDAT><HIL><BOLD><PDAT>426</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>. All methods of the class, both static and non-static, are instrumented, with a few exceptions set forth below. The flow chart </PDAT><HIL><BOLD><PDAT>440</PDAT></BOLD></HIL><PDAT> illustrates instrumentation of a method.</PDAT></PTEXT></PARA>
<PARA ID="P-00145" LVL="0"><PTEXT><PDAT>Processing begins at a step </PDAT><HIL><BOLD><PDAT>442</PDAT></BOLD></HIL><PDAT> where the entry of the method is instrumented. Instrumentation of the method entry point at the step </PDAT><HIL><BOLD><PDAT>442</PDAT></BOLD></HIL><PDAT> is described in more detail hereinafter. Following step </PDAT><HIL><BOLD><PDAT>442</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>444</PDAT></BOLD></HIL><PDAT> where the next byte code instruction of the method is examined. The step </PDAT><HIL><BOLD><PDAT>444</PDAT></BOLD></HIL><PDAT> represents reading through each byte code instruction of the method and thus, each time the step </PDAT><HIL><BOLD><PDAT>444</PDAT></BOLD></HIL><PDAT> is performed, the next instruction of the method byte code is examined.</PDAT></PTEXT></PARA>
<PARA ID="P-00146" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>444</PDAT></BOLD></HIL><PDAT> is a test step </PDAT><HIL><BOLD><PDAT>446</PDAT></BOLD></HIL><PDAT> where it is determined if the end of the method has been reached. If it is determined at the test step </PDAT><HIL><BOLD><PDAT>446</PDAT></BOLD></HIL><PDAT> that the end of the method has been reached, then control passes to a step </PDAT><HIL><BOLD><PDAT>448</PDAT></BOLD></HIL><PDAT> where the method is instrumented to catch any aborts that occur while the method is being executed. Instrumenting for aborts at the step </PDAT><HIL><BOLD><PDAT>448</PDAT></BOLD></HIL><PDAT> is described in more detail hereinafter. Following the step </PDAT><HIL><BOLD><PDAT>448</PDAT></BOLD></HIL><PDAT>, processing is complete since the end of the method has been reached.</PDAT></PTEXT></PARA>
<PARA ID="P-00147" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>446</PDAT></BOLD></HIL><PDAT> that the end of the method has not been reached, then control passes from the test step </PDAT><HIL><BOLD><PDAT>446</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>450</PDAT></BOLD></HIL><PDAT> where it is determined if a new line number has been reached. Note that, in many conventional byte code compilers, there is a switch allowing the user to obtain line number information correlating the source code line numbers with the byte code generated from that source code. The line number information may be provided in the form of a table. If line number information is available, then the test step </PDAT><HIL><BOLD><PDAT>450</PDAT></BOLD></HIL><PDAT> determines if the byte code being examined corresponds to a new line number in the source code by comparing the entries in the line number table with the byte code offset.</PDAT></PTEXT></PARA>
<PARA ID="P-00148" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>450</PDAT></BOLD></HIL><PDAT> that byte code corresponding to a new source code line number has been reached, then control passes from the test step </PDAT><HIL><BOLD><PDAT>450</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>452</PDAT></BOLD></HIL><PDAT> where byte code is inserted into the method to cause a local line number variable to be set to the new line number when the method runs. The local line number variable, which is created at the method entry step </PDAT><HIL><BOLD><PDAT>442</PDAT></BOLD></HIL><PDAT>, is described in more detail hereinafter.</PDAT></PTEXT></PARA>
<PARA ID="P-00149" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>452</PDAT></BOLD></HIL><PDAT> or the step </PDAT><HIL><BOLD><PDAT>450</PDAT></BOLD></HIL><PDAT> is a test step </PDAT><HIL><BOLD><PDAT>454</PDAT></BOLD></HIL><PDAT> where it is determined if a throw instruction has been reached. If so, then control passes from the test step </PDAT><HIL><BOLD><PDAT>454</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>456</PDAT></BOLD></HIL><PDAT> where the throw instruction is instrumented. Instrumenting the throw instruction at the step </PDAT><HIL><BOLD><PDAT>456</PDAT></BOLD></HIL><PDAT> is described in more detail hereinafter. Following the step </PDAT><HIL><BOLD><PDAT>456</PDAT></BOLD></HIL><PDAT>, control passes back to the step </PDAT><HIL><BOLD><PDAT>444</PDAT></BOLD></HIL><PDAT> where the next byte code instruction is examined.</PDAT></PTEXT></PARA>
<PARA ID="P-00150" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>454</PDAT></BOLD></HIL><PDAT> that a throw instruction has not been reached, then control passes from the test step </PDAT><HIL><BOLD><PDAT>454</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>458</PDAT></BOLD></HIL><PDAT> where it is determined if an exit point for the method has been reached. An exit point for the method at the step </PDAT><HIL><BOLD><PDAT>458</PDAT></BOLD></HIL><PDAT> may be detected by, for example, detecting a return instruction in the byte code. If it is determined at the test step </PDAT><HIL><BOLD><PDAT>458</PDAT></BOLD></HIL><PDAT> that an exit point for the method has been reached, then control passes from the test step </PDAT><HIL><BOLD><PDAT>458</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>460</PDAT></BOLD></HIL><PDAT> where the exit point is instrumented. Instrumentation of the exit point at the step </PDAT><HIL><BOLD><PDAT>460</PDAT></BOLD></HIL><PDAT> is described in more detail hereinafter. Following the step </PDAT><HIL><BOLD><PDAT>460</PDAT></BOLD></HIL><PDAT>, control passes back to the step </PDAT><HIL><BOLD><PDAT>444</PDAT></BOLD></HIL><PDAT> where the next byte code instruction of the method is examined.</PDAT></PTEXT></PARA>
<PARA ID="P-00151" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>458</PDAT></BOLD></HIL><PDAT> that an exit point for the method has not been reached, then control passes from the test step </PDAT><HIL><BOLD><PDAT>458</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>462</PDAT></BOLD></HIL><PDAT> where it is determined if the byte code instructions that are being examined correspond to a call to another method. If it is determined at the test step </PDAT><HIL><BOLD><PDAT>462</PDAT></BOLD></HIL><PDAT> that a method call has been reached, then control passes from the test step </PDAT><HIL><BOLD><PDAT>462</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>464</PDAT></BOLD></HIL><PDAT> where the line number of the current method is instrumented. Instrumenting the line number at the step </PDAT><HIL><BOLD><PDAT>464</PDAT></BOLD></HIL><PDAT> is described in more detail hereinafter. Following the step </PDAT><HIL><BOLD><PDAT>464</PDAT></BOLD></HIL><PDAT>, control passes back to the step </PDAT><HIL><BOLD><PDAT>444</PDAT></BOLD></HIL><PDAT> where the next instruction is examined. The step </PDAT><HIL><BOLD><PDAT>444</PDAT></BOLD></HIL><PDAT> is also reached if it is determined at the step </PDAT><HIL><BOLD><PDAT>462</PDAT></BOLD></HIL><PDAT> that the byte code being examined does not correspond to a method call.</PDAT></PTEXT></PARA>
<PARA ID="P-00152" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 15</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>470</PDAT></BOLD></HIL><PDAT> illustrates in more detail the instrumentation of the method entry step </PDAT><HIL><BOLD><PDAT>442</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>. Processing begins at a first step </PDAT><HIL><BOLD><PDAT>472</PDAT></BOLD></HIL><PDAT> where a local line number variable for the method is created in a conventional manner by incrementing max_locals for the function and providing storage space for the local line number variable. The local line number variable is used during instrumentation to keep track of lines of source code that correspond to the byte code and is set during run time to correlate the byte code and the source code line numbers of the method being instrumented. The local line number is also used in connection with other instrumentation that is described elsewhere herein.</PDAT></PTEXT></PARA>
<PARA ID="P-00153" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>472</PDAT></BOLD></HIL><PDAT> is a test step </PDAT><HIL><BOLD><PDAT>474</PDAT></BOLD></HIL><PDAT> where it is determined if the method being instrumented is a static method. The indication as to whether or not a method is a static method is provided in the access_flags byte associated with the method. If it is determined at the test step </PDAT><HIL><BOLD><PDAT>474</PDAT></BOLD></HIL><PDAT> that the method being instrumented is not a static method, then control passes from the step </PDAT><HIL><BOLD><PDAT>474</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>476</PDAT></BOLD></HIL><PDAT> where byte code instructions are inserted to push the thispointer of the non-static method on to the stack. For non-static methods, the thispointer may be used to identify the object on which the method was invoked.</PDAT></PTEXT></PARA>
<PARA ID="P-00154" LVL="0"><PTEXT><PDAT>Note that parameters that are passed during instrumentation are passed in a conventional fashion using the stack. Thus, the parameters are pushed on to the stack prior to invocation of the monitoring function being called.</PDAT></PTEXT></PARA>
<PARA ID="P-00155" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>476</PDAT></BOLD></HIL><PDAT>, or following the step </PDAT><HIL><BOLD><PDAT>474</PDAT></BOLD></HIL><PDAT> if the method being instrumented is a static method, is a step </PDAT><HIL><BOLD><PDAT>478</PDAT></BOLD></HIL><PDAT> where instructions are inserted to push the method parameters that were passed to the method when the method was invoked. Note that the number and type of parameters passed to the method when the method was invoked may vary. Thus, the instructions that are inserted to push the parameters at the step </PDAT><HIL><BOLD><PDAT>478</PDAT></BOLD></HIL><PDAT> may similarly vary.</PDAT></PTEXT></PARA>
<PARA ID="P-00156" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>478</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>480</PDAT></BOLD></HIL><PDAT> where the byte code is instrumented by inserting instructions that push method information. In a preferred embodiment, the method information is a record that includes a method identifier, information identifying the number and types of parameters of the method, the local line number, and the type of instrumentation being performed. The same monitoring function may be called for instrumenting enter, exit, and abort. Thus, the type of instrumentation information differentiates among the three types within a generic monitoring function that is called.</PDAT></PTEXT></PARA>
<PARA ID="P-00157" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>480</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>482</PDAT></BOLD></HIL><PDAT> where instructions are inserted to call the monitoring function. The result of the call to the monitoring function that is inserted at the step </PDAT><HIL><BOLD><PDAT>482</PDAT></BOLD></HIL><PDAT> is described in more detail hereinafter. Following the step </PDAT><HIL><BOLD><PDAT>482</PDAT></BOLD></HIL><PDAT>, processing is complete.</PDAT></PTEXT></PARA>
<PARA ID="P-00158" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 16</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>490</PDAT></BOLD></HIL><PDAT> illustrates in more detail the instrumentation for an abort step </PDAT><HIL><BOLD><PDAT>448</PDAT></BOLD></HIL><PDAT> from the flow chart of FIG. </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>. As discussed above, this instrumentation code is inserted at the end of the method being instrumented.</PDAT></PTEXT></PARA>
<PARA ID="P-00159" LVL="0"><PTEXT><PDAT>Processing begins at a first step </PDAT><HIL><BOLD><PDAT>492</PDAT></BOLD></HIL><PDAT> where the exception table is modified to indicate that the code being added in connection with instrumenting for abort is to be executed whenever an otherwise uncaught exception occurs. Following the step </PDAT><HIL><BOLD><PDAT>492</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>494</PDAT></BOLD></HIL><PDAT> where instructions are inserted to cause the object that is thrown in connection with the exception to be on the stack. Note that, in this instance, it is sufficient to duplicate (DUP) the item at the top of the stack since the thrown object is already at the top of the stack. In a preferred embodiment, both a pointer to the object, and what Microsoft refers to as the object&apos;s &ldquo;hash code&rdquo; are provided. The hash code is a unique identifier for an object. Use of the unique identifier is described in more detail hereinafter. Note that, unless indicated otherwise, all objects are pushed on to the stack along with the corresponding unique identifier (e.g., the hash code) therefor. For example, in instances where the thispointer is pushed on to the stack, a unique identifier (e.g., the hash code) for the thispointer is also pushed.</PDAT></PTEXT></PARA>
<PARA ID="P-00160" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>494</PDAT></BOLD></HIL><PDAT> is a test step </PDAT><HIL><BOLD><PDAT>496</PDAT></BOLD></HIL><PDAT> where it is determined if the method being instrumented is static and a step </PDAT><HIL><BOLD><PDAT>498</PDAT></BOLD></HIL><PDAT> for pushing the thispointer on to the stack. The steps </PDAT><HIL><BOLD><PDAT>496</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>498</PDAT></BOLD></HIL><PDAT> are similar to the steps </PDAT><HIL><BOLD><PDAT>474</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>476</PDAT></BOLD></HIL><PDAT>, described above in connection with FIG. </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT>. Following either the step </PDAT><HIL><BOLD><PDAT>496</PDAT></BOLD></HIL><PDAT> or the step </PDAT><HIL><BOLD><PDAT>498</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>500</PDAT></BOLD></HIL><PDAT>, which inserts instructions to push the method parameters on to the stack in a manner analogous to that discussed above in connection with the step </PDAT><HIL><BOLD><PDAT>478</PDAT></BOLD></HIL><PDAT>. Following the step </PDAT><HIL><BOLD><PDAT>500</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT> that inserts instructions to push the method information on to the stack.</PDAT></PTEXT></PARA>
<PARA ID="P-00161" LVL="0"><PTEXT><PDAT>Following step </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT> where byte code instructions are inserted to call the monitoring function. Following the step </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>506</PDAT></BOLD></HIL><PDAT> where instructions are inserted to throw the object associated with the abort. Throwing the object in this manner causes execution of the code to be, more or less, the same as it would have been had the exception table not been modified at the step </PDAT><HIL><BOLD><PDAT>492</PDAT></BOLD></HIL><PDAT>. Following step </PDAT><HIL><BOLD><PDAT>506</PDAT></BOLD></HIL><PDAT>, processing is complete.</PDAT></PTEXT></PARA>
<PARA ID="P-00162" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 17</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT> illustrates in more detail the processing at the step </PDAT><HIL><BOLD><PDAT>460</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 14</PDAT></FGREF><PDAT> where the method exit is instrumented. Processing begins at a test step </PDAT><HIL><BOLD><PDAT>512</PDAT></BOLD></HIL><PDAT> where it is determined if the method being instrumented has a return value. The determination at the step </PDAT><HIL><BOLD><PDAT>512</PDAT></BOLD></HIL><PDAT> may be made in a conventional manner by examining the signature of the method, which is retrieved from the constant pool of the class instance that contains the method being instrumented. If it is determined at the test step </PDAT><HIL><BOLD><PDAT>512</PDAT></BOLD></HIL><PDAT> that the method being instrumented has a return value, then control passes from the test step </PDAT><HIL><BOLD><PDAT>512</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>514</PDAT></BOLD></HIL><PDAT> where instructions are inserted to cause a copy of the return value to be on the top of the stack. In this instance, it is sufficient to duplicate the value at the top of the stack since the return value of the method will already be at the top of the stack.</PDAT></PTEXT></PARA>
<PARA ID="P-00163" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>514</PDAT></BOLD></HIL><PDAT>, or following the step </PDAT><HIL><BOLD><PDAT>512</PDAT></BOLD></HIL><PDAT> if the method does not have a return value is a test step </PDAT><HIL><BOLD><PDAT>516</PDAT></BOLD></HIL><PDAT> where it is determined if the method being instrumented is static and a step </PDAT><HIL><BOLD><PDAT>518</PDAT></BOLD></HIL><PDAT> for pushing the thispointer on to the stack. The steps </PDAT><HIL><BOLD><PDAT>516</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>518</PDAT></BOLD></HIL><PDAT> are similar to the steps </PDAT><HIL><BOLD><PDAT>474</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>476</PDAT></BOLD></HIL><PDAT>, described above in connection with FIG. </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT>. Following step </PDAT><HIL><BOLD><PDAT>518</PDAT></BOLD></HIL><PDAT>, or following the step </PDAT><HIL><BOLD><PDAT>516</PDAT></BOLD></HIL><PDAT> for static methods, control passes to a step </PDAT><HIL><BOLD><PDAT>520</PDAT></BOLD></HIL><PDAT> where instructions are inserted to push the method parameters in a manner analogous to that discussed above in connection with other instrumentation. Following the step </PDAT><HIL><BOLD><PDAT>520</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>522</PDAT></BOLD></HIL><PDAT> instruction are inserted to push the method information on to the stack. Following the step </PDAT><HIL><BOLD><PDAT>522</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>524</PDAT></BOLD></HIL><PDAT> where instructions are inserted to call the monitoring function. Following the step </PDAT><HIL><BOLD><PDAT>524</PDAT></BOLD></HIL><PDAT>, processing is complete.</PDAT></PTEXT></PARA>
<PARA ID="P-00164" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 18</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>530</PDAT></BOLD></HIL><PDAT> illustrates in more detail the step </PDAT><HIL><BOLD><PDAT>456</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 14</PDAT></FGREF><PDAT> of instrumenting a throw instruction. Processing begins at a step </PDAT><HIL><BOLD><PDAT>532</PDAT></BOLD></HIL><PDAT> where instructions are inserted to cause the object being thrown to be on the top of the stack. In this instance, it is sufficient to duplicate the item at the top of the stack, which is the object being thrown. The step </PDAT><HIL><BOLD><PDAT>532</PDAT></BOLD></HIL><PDAT> is similar to the step </PDAT><HIL><BOLD><PDAT>494</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 16</PDAT></FGREF><PDAT>, described above. Following step </PDAT><HIL><BOLD><PDAT>532</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>534</PDAT></BOLD></HIL><PDAT> where instructions are inserted to push the method identifier (not the method information discussed above in connection with FIGS. </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT>). Following step </PDAT><HIL><BOLD><PDAT>534</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT> where instructions are inserted to push the line number on to the stack. Following step </PDAT><HIL><BOLD><PDAT>536</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>538</PDAT></BOLD></HIL><PDAT> where instructions are inserted to call the monitoring function. Following step </PDAT><HIL><BOLD><PDAT>538</PDAT></BOLD></HIL><PDAT>, processing is complete.</PDAT></PTEXT></PARA>
<PARA ID="P-00165" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 19</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>550</PDAT></BOLD></HIL><PDAT> illustrates in more detail the step </PDAT><HIL><BOLD><PDAT>464</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 14</PDAT></FGREF><PDAT> where the line number is instrumented. Processing begins at a first step </PDAT><HIL><BOLD><PDAT>552</PDAT></BOLD></HIL><PDAT> where instructions are inserted to push the line number. Following step </PDAT><HIL><BOLD><PDAT>552</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>554</PDAT></BOLD></HIL><PDAT> where instructions are inserted to call the monitoring function. Following the step </PDAT><HIL><BOLD><PDAT>554</PDAT></BOLD></HIL><PDAT>, processing is complete.</PDAT></PTEXT></PARA>
<PARA ID="P-00166" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 20</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>600</PDAT></BOLD></HIL><PDAT> illustrates instrumenting the class </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT> to provide the instrumented class </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT>. Processing begins at a test step </PDAT><HIL><BOLD><PDAT>602</PDAT></BOLD></HIL><PDAT> where it is determined if the class being instrumented is a special class. Special classes are particular classes that either are not instrumented or are instrumented in a special way. Examples include classes containing low level byte code methods provided by the VM vendor where instrumenting the methods would not provide useful information to the user. In most instances, deciding whether to instrument various methods is a design choice based on a variety of functional factors familiar to one of ordinary skill in the art. If the class being instrumented is a special class, control passes from the test step </PDAT><HIL><BOLD><PDAT>602</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>604</PDAT></BOLD></HIL><PDAT> where the special class is handled in a manner described in more detail below. Following the step </PDAT><HIL><BOLD><PDAT>604</PDAT></BOLD></HIL><PDAT>, processing is complete.</PDAT></PTEXT></PARA>
<PARA ID="P-00167" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>602</PDAT></BOLD></HIL><PDAT> that the class being instrumented is not a special class, then control passes from the test step </PDAT><HIL><BOLD><PDAT>602</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>606</PDAT></BOLD></HIL><PDAT> where an index of the class instance is created. The index of the class instance may be a table containing entries indicating the offsets, in the class instance, of various items in the class instance, such as the offsets of each of the methods in the class. The class index is a convenient mechanism that can be used in a conventional manner to assist in providing the functionality described hereinafter.</PDAT></PTEXT></PARA>
<PARA ID="P-00168" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>606</PDAT></BOLD></HIL><PDAT> is a test step </PDAT><HIL><BOLD><PDAT>608</PDAT></BOLD></HIL><PDAT>, which represents iterating through the methods of the class to instrument each method. If it is determined at the test step </PDAT><HIL><BOLD><PDAT>608</PDAT></BOLD></HIL><PDAT> that there are more methods to instrument, control passes from the test step </PDAT><HIL><BOLD><PDAT>608</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>610</PDAT></BOLD></HIL><PDAT> where it is determined if the method being processed is implemented in native code. As discussed above, different VM vendors provide different mechanisms for allowing native code to be called from byte code. In many instances, the interface involves declaring the native method in the source code and providing a specific identifier with the declaration indicating that the executable portion of the native function is provided in a routine external to the resulting byte code.</PDAT></PTEXT></PARA>
<PARA ID="P-00169" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>610</PDAT></BOLD></HIL><PDAT> that the method is implemented in native code (by examining the access_flags in the class), control passes from the step </PDAT><HIL><BOLD><PDAT>610</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>612</PDAT></BOLD></HIL><PDAT> where instrumenting the native code is handled by, for example, adding a byte code wrapper to the method. The wrapper causes the VM (and the instrumentation software) to treat the native method as a conventional byte code method. Processing at the step </PDAT><HIL><BOLD><PDAT>612</PDAT></BOLD></HIL><PDAT> may include modifying the native attribute of the method to convert the method to a byte code method, creating a new name for the native method and adding the new name as a private native method declaration, and adding byte code instructions to call the native method under the new name. At runtime, part of the initialization of the instrumentation DLL </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> is to patch the operating system&apos;s GetProcAddress API (or its equivalent for the particular operating system being used) to intercept calls to the new name and return the address of the native method&apos;s code.</PDAT></PTEXT></PARA>
<PARA ID="P-00170" LVL="0"><PTEXT><PDAT>Alternatively, a native code method may be handled by first adding the name of the native code method to a special list of pending methods. The GetProcAddress( ) routine is then patched so that, at runtime, each call from the VM to GetProcAddress( ) is intercepted to first determine if the called method is on the special list.</PDAT></PTEXT></PARA>
<PARA ID="P-00171" LVL="0"><PTEXT><PDAT>The patch uses an assembly code thunk that includes a small amount of assembly code and a class instance (data structure) that lets the patch code get control before the native code routine starts, and also gets control back when the native code routine exits. The class instance may consist of the following, or information that allows derivation of the following:</PDAT></PTEXT></PARA>
<PARA ID="P-00172" LVL="2"><PTEXT><PDAT>Hsymbol for the particular method</PDAT></PTEXT></PARA>
<PARA ID="P-00173" LVL="2"><PTEXT><PDAT>Signature of the particular method</PDAT></PTEXT></PARA>
<PARA ID="P-00174" LVL="2"><PTEXT><PDAT>Pointer to the actual native code routine (presumably in a user-supplied DLL)</PDAT></PTEXT></PARA>
<PARA ID="P-00175" LVL="0"><PTEXT><PDAT>The assembly thunk code may put a pointer to the class instance into whichever register the C&plus;&plus; compiler uses for its thispointer, and jump to a common class member function. As is known in the art, the thispointer is a pointer to an address where data for an object is stored. The thispointer is implicitly passed to all non-static class methods as the first parameter to the method. When the compiler sees an unqualified reference to a field in the class that the method being compiled belongs to, the thispointer is used to locate the storage location for the field.</PDAT></PTEXT></PARA>
<PARA ID="P-00176" LVL="0"><PTEXT><PDAT>This common class member function will build data structures equivalent to what is described elsewhere herein for the instrumentation of a regular Java method. These structures may be built by interpreting the signature of the method, which is straightforward. The function may call the runtime routine corresponding to method entry. The function may then make a copy of the parameter list, and invoke the actual native code routine. Upon return, it is possible to use the ExceptionOccurred( ) function (or equivalent, depending upon the VM implementation), to determine if a Java exception was thrown by the actual native function. If not, the function will then call the method exit logic in a manner similar to method entry. If an exception has occurred, the function will call appropriate method abort logic, as described elsewhere herein. Finally, the function will restore the stack and return to the VM.</PDAT></PTEXT></PARA>
<PARA ID="P-00177" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>610</PDAT></BOLD></HIL><PDAT> or the step </PDAT><HIL><BOLD><PDAT>612</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>614</PDAT></BOLD></HIL><PDAT> where a code table is created. The code table is an array of records that is indexed by the offset in the class instance of each byte code instruction in the uninstrumented class instance. The records contain the new offset of the byte code instructions, which are moved due to insertion of instrumentation instructions. In addition, as described in more detail below, the records of the code Program counter mapping table contain a field indicating the line of source code corresponding to the instrumented byte code.</PDAT></PTEXT></PARA>
<PARA ID="P-00178" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>614</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>616</PDAT></BOLD></HIL><PDAT> where the method is instrumented in a manner described above in connection with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 14-19</PDAT></FGREF><PDAT>. Note that part of the instrumentation process includes modifying the byte code to add calls to the monitoring functions. The native declarations for the monitoring functions are provided in a separate class which is not instrumented, and thus is one of the special classes discussed above in connection with the steps </PDAT><HIL><BOLD><PDAT>602</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>604</PDAT></BOLD></HIL><PDAT>. The code for the monitoring functions is provided in the monitoring DLL </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT> shown in FIG. </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>. Operation of the monitoring DLL </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT> is described in more detail hereinafter.</PDAT></PTEXT></PARA>
<PARA ID="P-00179" LVL="0"><PTEXT><PDAT>Note also that some VM&apos;s are type sensitive with respect to method parameters. Thus, selection of a particular monitoring function may depend, in part, on the number and type of method parameters that are passed to the monitoring function. Thus, one monitoring function may be used to instrument the entry point of a method that is passed two objects while a different monitoring function may be used to instrument the entry point of a method that is passed two integers.</PDAT></PTEXT></PARA>
<PARA ID="P-00180" LVL="0"><PTEXT><PDAT>As an alternative, it may be possible to create and insert calls to monitoring functions that are designated as private native functions. Then, each of the created functions may be intercepted by patching, in any one of a variety of conventional manners, the API GetProcAddress( ) (or its equivalent) to detect when the VM obtains an address for one of the created functions. This alternative technique eliminates the need to have a separate class for the monitoring functions.</PDAT></PTEXT></PARA>
<PARA ID="P-00181" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>616</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>618</PDAT></BOLD></HIL><PDAT> where names and signatures (types) of the monitoring functions that are added to the method in connection with instrumenting the method are added to a list. As described in more detail below, the list is used to modify the constant pool of the class after all of the methods have been instrumented.</PDAT></PTEXT></PARA>
<PARA ID="P-00182" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>618</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>620</PDAT></BOLD></HIL><PDAT> where various tables are modified as a result of the instrumentation. At the step </PDAT><HIL><BOLD><PDAT>620</PDAT></BOLD></HIL><PDAT>, the code table, created at the step </PDAT><HIL><BOLD><PDAT>614</PDAT></BOLD></HIL><PDAT>, is modified to reflect the new offsets of the instrumented byte code. The offsets change because of the instrumentation byte code that is inserted. The code table is used in a manner described below to modify the instrumented byte code to update any control flow instructions that become invalid because of the change in the offsets. The line number table is also modified at the step </PDAT><HIL><BOLD><PDAT>620</PDAT></BOLD></HIL><PDAT>. As discussed above, the line number table correlates source code line numbers with byte code offsets. Since instrumentation modifies the byte code offsets, then the line number table requires modification at the step </PDAT><HIL><BOLD><PDAT>620</PDAT></BOLD></HIL><PDAT> to reflect the offset change. The class exception table is also modified at the step </PDAT><HIL><BOLD><PDAT>620</PDAT></BOLD></HIL><PDAT>. The exception table is updated to reflect the new byte code offsets in a manner similar to modification of the line number table.</PDAT></PTEXT></PARA>
<PARA ID="P-00183" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>620</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>622</PDAT></BOLD></HIL><PDAT> where the byte code is modified to update branch instructions to reflect the new offsets of the instrumented byte code. This may be performed using the code table, discussed above in connection with the steps </PDAT><HIL><BOLD><PDAT>614</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>620</PDAT></BOLD></HIL><PDAT>. Control flows from the step </PDAT><HIL><BOLD><PDAT>622</PDAT></BOLD></HIL><PDAT> back to the step </PDAT><HIL><BOLD><PDAT>608</PDAT></BOLD></HIL><PDAT> to instrument the next method.</PDAT></PTEXT></PARA>
<PARA ID="P-00184" LVL="0"><PTEXT><PDAT>If it is determined at the step </PDAT><HIL><BOLD><PDAT>608</PDAT></BOLD></HIL><PDAT> that there are no more methods to instrument, control passes from the step </PDAT><HIL><BOLD><PDAT>608</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>624</PDAT></BOLD></HIL><PDAT> where the monitoring functions are added to the constant pool of the class. The constant pool contains information about all of the methods that are called from methods within the class being instrumented. Thus, when the methods are instrumented by adding calls to the monitoring functions, information about the monitoring functions is added to the constant pool, which is performed in a conventional fashion at the step </PDAT><HIL><BOLD><PDAT>624</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00185" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 21</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>640</PDAT></BOLD></HIL><PDAT> illustrates in more detail steps performed by the monitoring DLL </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT> in connection with providing data to the analyzer/viewers </PDAT><HIL><BOLD><PDAT>416</PDAT></BOLD></HIL><PDAT> and/or the message data storage </PDAT><HIL><BOLD><PDAT>417</PDAT></BOLD></HIL><PDAT> via the message stream therebetween. As discussed above, the monitoring DLL </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT> may be implemented as native code that is called via the monitoring function calls that are inserted into the instrumented class </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT> by the instrumentation DLL </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00186" LVL="0"><PTEXT><PDAT>Note that much of the processing of the monitoring DLL </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT> may be performed by having the monitoring DLL </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT> call byte code functions that are being handled by the VM run-time module </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT>. For example, it may be useful to call various byte code functions that provide additional information about array elements or object fields. The names and parameters of these functions may vary depending on the VM vendor. Thus, the discussion that follows does not identify the particular functions called to perform the operations and tests described herein. However, one of ordinary skill in the art will recognize where these function calls belong in connection to the description that follows.</PDAT></PTEXT></PARA>
<PARA ID="P-00187" LVL="0"><PTEXT><PDAT>Processing begins at a first-step </PDAT><HIL><BOLD><PDAT>642</PDAT></BOLD></HIL><PDAT> where a message header is added to a buffer that contains data transmitted via the message stream. The information that is passed from the monitoring DLL </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT> to the analyzer/viewers </PDAT><HIL><BOLD><PDAT>416</PDAT></BOLD></HIL><PDAT> and/or the message data storage </PDAT><HIL><BOLD><PDAT>417</PDAT></BOLD></HIL><PDAT> may be passed using a fixed-length buffer having, in a preferred embodiment, 2100 bytes. Thus, all of the parameter information from the monitoring function calls is added to the 2100 bytes in a manner described in more detail below.</PDAT></PTEXT></PARA>
<PARA ID="P-00188" LVL="0"><PTEXT><PDAT>Following step </PDAT><HIL><BOLD><PDAT>642</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>644</PDAT></BOLD></HIL><PDAT> where the remaining space of the buffer is allocated among the parameters of the monitoring function that is called. This is done by simply dividing the number of bytes left in the buffer by the number of parameters that remain to be sent. For example, if there are 2,000 bytes left in the buffer, and if there are 5 parameters, then each parameter is allocated 400 bytes. As discussed in more detail below, this allocation may change depending on how many bytes each parameter actually uses as it is provided to the message buffer.</PDAT></PTEXT></PARA>
<PARA ID="P-00189" LVL="0"><PTEXT><PDAT>Following step </PDAT><HIL><BOLD><PDAT>644</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>646</PDAT></BOLD></HIL><PDAT> where each parameter is encoded. The encode parameter step </PDAT><HIL><BOLD><PDAT>646</PDAT></BOLD></HIL><PDAT> is described in more detail hereinafter. However, generally, the step </PDAT><HIL><BOLD><PDAT>646</PDAT></BOLD></HIL><PDAT> represents placing the parameter information into the buffer.</PDAT></PTEXT></PARA>
<PARA ID="P-00190" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>646</PDAT></BOLD></HIL><PDAT> is a test step </PDAT><HIL><BOLD><PDAT>648</PDAT></BOLD></HIL><PDAT> where it is determined if there are more parameters to be encoded and placed in the buffer. If not, then processing is complete. Otherwise, control passes from the step </PDAT><HIL><BOLD><PDAT>648</PDAT></BOLD></HIL><PDAT> back to the step </PDAT><HIL><BOLD><PDAT>644</PDAT></BOLD></HIL><PDAT> where the remaining buffer space is allocated among the remaining parameters. Note that it is possible that the amount of space allocated per parameter will increase as parameters are placed into the message buffer. This occurs because, if a parameter uses less than the allocated space, then, at the step </PDAT><HIL><BOLD><PDAT>644</PDAT></BOLD></HIL><PDAT>, the allocated buffer space that was not used by the previous parameter is added to the buffer space for the other parameters. For example, assume that initially a function call has 5 parameters and there are 2,000 bytes at the step </PDAT><HIL><BOLD><PDAT>644</PDAT></BOLD></HIL><PDAT> when the first parameter is processed. If the first parameter only uses 100 bytes, then, for the next iteration, at the step </PDAT><HIL><BOLD><PDAT>644</PDAT></BOLD></HIL><PDAT> there will be 4 parameters and 1900 bytes. Thus, for the next iteration, each parameter is allocated 475 bytes. Note also that it is possible that all of the parameters do not use all of the buffer space.</PDAT></PTEXT></PARA>
<PARA ID="P-00191" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 22</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>650</PDAT></BOLD></HIL><PDAT> illustrates in more detail the step </PDAT><HIL><BOLD><PDAT>646</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 21</PDAT></FGREF><PDAT> where each parameter is encoded and placed onto the buffer. Processing begins at a first step step </PDAT><HIL><BOLD><PDAT>652</PDAT></BOLD></HIL><PDAT> where it is determined if the parameter is a scalar (i.e., an integer, a character, a boolean, etc.). If it is determined at the test step </PDAT><HIL><BOLD><PDAT>652</PDAT></BOLD></HIL><PDAT> that the parameter is a scalar, then control passes from the step </PDAT><HIL><BOLD><PDAT>652</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>654</PDAT></BOLD></HIL><PDAT> where the scalar is added to the buffer by simply placing a number of bytes corresponding to the scalar onto the message buffer. Following step </PDAT><HIL><BOLD><PDAT>654</PDAT></BOLD></HIL><PDAT>, processing is complete and the parameter has been encoded.</PDAT></PTEXT></PARA>
<PARA ID="P-00192" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>652</PDAT></BOLD></HIL><PDAT> that the parameter is not a scalar, control passes from the test step </PDAT><HIL><BOLD><PDAT>652</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>656</PDAT></BOLD></HIL><PDAT> where it is determined if the parameter is an array. If so, then control passes from the step </PDAT><HIL><BOLD><PDAT>656</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>658</PDAT></BOLD></HIL><PDAT> where the array is encoded. Encoding the array onto the message buffer at the step </PDAT><HIL><BOLD><PDAT>658</PDAT></BOLD></HIL><PDAT> is described in more detail hereinafter. Following the step </PDAT><HIL><BOLD><PDAT>658</PDAT></BOLD></HIL><PDAT>, processing is complete.</PDAT></PTEXT></PARA>
<PARA ID="P-00193" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>656</PDAT></BOLD></HIL><PDAT> that the parameter is not an array, control passes from the test step </PDAT><HIL><BOLD><PDAT>656</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>660</PDAT></BOLD></HIL><PDAT> where the parameter (which, by default, is an object) is encoded. Encoding the object parameter at the step </PDAT><HIL><BOLD><PDAT>660</PDAT></BOLD></HIL><PDAT> is described in more detail hereinafter. Following the step </PDAT><HIL><BOLD><PDAT>660</PDAT></BOLD></HIL><PDAT>, processing is complete.</PDAT></PTEXT></PARA>
<PARA ID="P-00194" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 23</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>670</PDAT></BOLD></HIL><PDAT> illustrates in more detail the array encoding step </PDAT><HIL><BOLD><PDAT>658</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>. Processing begins at a first step </PDAT><HIL><BOLD><PDAT>672</PDAT></BOLD></HIL><PDAT> where header information for the array is added to the message buffer. Following step </PDAT><HIL><BOLD><PDAT>672</PDAT></BOLD></HIL><PDAT> is a test step </PDAT><HIL><BOLD><PDAT>674</PDAT></BOLD></HIL><PDAT> where it is determined if the array is an array of scalars. If so, then control passes from the step </PDAT><HIL><BOLD><PDAT>674</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>676</PDAT></BOLD></HIL><PDAT> where the values of each of the scalar elements is added to the message buffer. Note that, at the step </PDAT><HIL><BOLD><PDAT>676</PDAT></BOLD></HIL><PDAT>, the number of scalar values that are added to the message buffer may be limited according to the amount of message buffer space allocated for the array parameter. Thus, if each scalar element of the array uses, for example, four bytes, and there are one hundred bytes set aside in the message buffer for the array parameter, then the first twenty five array elements will be placed in the message buffer at the step </PDAT><HIL><BOLD><PDAT>676</PDAT></BOLD></HIL><PDAT>. If there are less than twenty five array elements, then all of the array elements are placed in the message buffer.</PDAT></PTEXT></PARA>
<PARA ID="P-00195" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>674</PDAT></BOLD></HIL><PDAT> that the array elements are not scalars, then control passes from the step </PDAT><HIL><BOLD><PDAT>674</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>678</PDAT></BOLD></HIL><PDAT> where it is determined if the recursion limit has been reached. As discussed in detail below, arrays of arrays and arrays of objects are placed into the message buffer using recursion. However, it is desirable to limit the depth of the recursion to, for example, three. Thus, it is determined at the test step </PDAT><HIL><BOLD><PDAT>678</PDAT></BOLD></HIL><PDAT> if the recursion limit has been reached and, if so, then processing is complete.</PDAT></PTEXT></PARA>
<PARA ID="P-00196" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>678</PDAT></BOLD></HIL><PDAT> that the recursion limit has not been reached, then control passes from the test step </PDAT><HIL><BOLD><PDAT>678</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>679</PDAT></BOLD></HIL><PDAT> where it is determined if there are any remaining array elements in the array that have not been processed. If there are no more array elements, then processing is complete. Otherwise, control passes from the test step </PDAT><HIL><BOLD><PDAT>679</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>680</PDAT></BOLD></HIL><PDAT> where it is determined if the current array element is, itself, an array. If so, then control passes from the test step </PDAT><HIL><BOLD><PDAT>680</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>682</PDAT></BOLD></HIL><PDAT> where the array encoding routine shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 23</PDAT></FGREF><PDAT> is recursively called for the array element. Following the step </PDAT><HIL><BOLD><PDAT>682</PDAT></BOLD></HIL><PDAT>, control passes back to the step </PDAT><HIL><BOLD><PDAT>679</PDAT></BOLD></HIL><PDAT> to process the next array element.</PDAT></PTEXT></PARA>
<PARA ID="P-00197" LVL="0"><PTEXT><PDAT>If it is determined at the step </PDAT><HIL><BOLD><PDAT>680</PDAT></BOLD></HIL><PDAT> that the element being processed is not an array, then, control passes from the step </PDAT><HIL><BOLD><PDAT>680</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>684</PDAT></BOLD></HIL><PDAT> where an encode object routine is called for each element of the array. Note that it cannot be assumed that an array of objects will consist of elements that are objects, because, in some byte code languages (such as Java), an array can be stored in a field or array element that is declared as being an object. Therefore, the runtime check at the step </PDAT><HIL><BOLD><PDAT>680</PDAT></BOLD></HIL><PDAT> is useful. Following the step </PDAT><HIL><BOLD><PDAT>684</PDAT></BOLD></HIL><PDAT>, control passes back to the step </PDAT><HIL><BOLD><PDAT>679</PDAT></BOLD></HIL><PDAT> to process the next array element.</PDAT></PTEXT></PARA>
<PARA ID="P-00198" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 24</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>700</PDAT></BOLD></HIL><PDAT> illustrates adding an object to the message buffer. At a first step </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT>, the buffer space is allocated for the fields of the object (scalars and headers of array and object subfields) as well as for some of the data in the array and object subfields, as described below. At the allocation step </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT>, the data that will be placed into the buffer is marked for later copying into the message buffer. Following the step </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><PDAT> where the message buffer is filled according to the data that is marked at the step </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT>. The steps </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><PDAT> are described in more detail hereinafter.</PDAT></PTEXT></PARA>
<PARA ID="P-00199" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 25</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>710</PDAT></BOLD></HIL><PDAT> illustrates the allocate buffer step </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>. Processing begins at a first step </PDAT><HIL><BOLD><PDAT>712</PDAT></BOLD></HIL><PDAT> where a first pass of buffer allocation takes place. The first pass of buffer allocation at the step </PDAT><HIL><BOLD><PDAT>712</PDAT></BOLD></HIL><PDAT> is described in more detail hereinafter.</PDAT></PTEXT></PARA>
<PARA ID="P-00200" LVL="0"><PTEXT><PDAT>Following the step </PDAT><HIL><BOLD><PDAT>712</PDAT></BOLD></HIL><PDAT> is a test step </PDAT><HIL><BOLD><PDAT>714</PDAT></BOLD></HIL><PDAT> where it is determined whether all of the fields of the object are scalars. If so, then processing is complete. Otherwise, control passes from the test step </PDAT><HIL><BOLD><PDAT>714</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>716</PDAT></BOLD></HIL><PDAT> where a second pass of buffer allocation is performed. The second pass of buffer allocation at step </PDAT><HIL><BOLD><PDAT>716</PDAT></BOLD></HIL><PDAT> is described in more detail hereinafter.</PDAT></PTEXT></PARA>
<PARA ID="P-00201" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 26</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>720</PDAT></BOLD></HIL><PDAT> illustrates the first pass of buffer allocation at the step </PDAT><HIL><BOLD><PDAT>712</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>25</PDAT></BOLD></HIL><PDAT>. Processing begins at a first step </PDAT><HIL><BOLD><PDAT>722</PDAT></BOLD></HIL><PDAT> where a pointer is set to point to the first field of the object. Following step </PDAT><HIL><BOLD><PDAT>722</PDAT></BOLD></HIL><PDAT> is a test step </PDAT><HIL><BOLD><PDAT>724</PDAT></BOLD></HIL><PDAT> which determines if the current field (i.e., the field that is pointed to by the pointer) is a scalar. If so, then control passes from the test step </PDAT><HIL><BOLD><PDAT>724</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>726</PDAT></BOLD></HIL><PDAT> where the space needed for the size of the scalar is determined. Alternatively, if it is determined at the step </PDAT><HIL><BOLD><PDAT>724</PDAT></BOLD></HIL><PDAT> that the current field is not a scalar, then control passes from the test step </PDAT><HIL><BOLD><PDAT>724</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>728</PDAT></BOLD></HIL><PDAT> where the space needed for an object header or array header (as appropriate) is reserved.</PDAT></PTEXT></PARA>
<PARA ID="P-00202" LVL="0"><PTEXT><PDAT>Following either the step </PDAT><HIL><BOLD><PDAT>726</PDAT></BOLD></HIL><PDAT> or the </PDAT><HIL><BOLD><PDAT>728</PDAT></BOLD></HIL><PDAT> is a test step </PDAT><HIL><BOLD><PDAT>730</PDAT></BOLD></HIL><PDAT> which determines if the amount of space allocated at one of the steps </PDAT><HIL><BOLD><PDAT>726</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>728</PDAT></BOLD></HIL><PDAT> will fit in (i.e., be less than) the remaining space of the message buffer. If not, then processing for the first pass is complete. Otherwise, control passes from the test step </PDAT><HIL><BOLD><PDAT>730</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>732</PDAT></BOLD></HIL><PDAT> where the field that is being processed is marked to be placed in the buffer. Following the step </PDAT><HIL><BOLD><PDAT>732</PDAT></BOLD></HIL><PDAT> is a test step </PDAT><HIL><BOLD><PDAT>734</PDAT></BOLD></HIL><PDAT> which determines if there arc more fields in the object to be processed. If not, then processing for the first allocation pass is complete. Otherwise, control passes from the test step </PDAT><HIL><BOLD><PDAT>734</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>736</PDAT></BOLD></HIL><PDAT> where the pointer is set to point at the next field of the object. Following the step </PDAT><HIL><BOLD><PDAT>736</PDAT></BOLD></HIL><PDAT>, control passes back to the test step </PDAT><HIL><BOLD><PDAT>724</PDAT></BOLD></HIL><PDAT>, discussed above.</PDAT></PTEXT></PARA>
<PARA ID="P-00203" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 27</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>740</PDAT></BOLD></HIL><PDAT> illustrates the second pass of buffer allocation at the step </PDAT><HIL><BOLD><PDAT>716</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>25</PDAT></BOLD></HIL><PDAT>. Processing begins at a first step </PDAT><HIL><BOLD><PDAT>742</PDAT></BOLD></HIL><PDAT> where a pointer is set to point to the first field of the object. Following the step </PDAT><HIL><BOLD><PDAT>742</PDAT></BOLD></HIL><PDAT> is the test step </PDAT><HIL><BOLD><PDAT>744</PDAT></BOLD></HIL><PDAT> which determines if there is space left in the buffer. If not, then processing is complete. Otherwise, control passes from the test step </PDAT><HIL><BOLD><PDAT>744</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>746</PDAT></BOLD></HIL><PDAT> which determines if the current field (i.e., the field that is pointed to by the pointer) is a scalar. If not, then control passes from the test step </PDAT><HIL><BOLD><PDAT>746</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>748</PDAT></BOLD></HIL><PDAT> which determines if the field being pointed to is an array.</PDAT></PTEXT></PARA>
<PARA ID="P-00204" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>748</PDAT></BOLD></HIL><PDAT> that the field being pointed to is an array, then control passes from the step </PDAT><HIL><BOLD><PDAT>748</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>750</PDAT></BOLD></HIL><PDAT> where additional space for the array is allocated. Allocating additional space for the array at the step </PDAT><HIL><BOLD><PDAT>750</PDAT></BOLD></HIL><PDAT> may include, for example, allocating enough space to store the values of each element of the array.</PDAT></PTEXT></PARA>
<PARA ID="P-00205" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>748</PDAT></BOLD></HIL><PDAT> that the current field is not an array, then control passes from the step </PDAT><HIL><BOLD><PDAT>748</PDAT></BOLD></HIL><PDAT> to the step </PDAT><HIL><BOLD><PDAT>752</PDAT></BOLD></HIL><PDAT> where additional space for an object is allocated. Note that the step </PDAT><HIL><BOLD><PDAT>752</PDAT></BOLD></HIL><PDAT> is reached if the field being pointed to is an object because of the combination of the test steps </PDAT><HIL><BOLD><PDAT>746</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>748</PDAT></BOLD></HIL><PDAT> causes the control to flow elsewhere if the field being pointed to is either a scalar or an array. At the step </PDAT><HIL><BOLD><PDAT>752</PDAT></BOLD></HIL><PDAT>, the object allocation routine of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 25</PDAT></FGREF><PDAT> is called. That is, the step </PDAT><HIL><BOLD><PDAT>752</PDAT></BOLD></HIL><PDAT> represents a recursive call to the space allocation routine illustrated by the flow chart </PDAT><HIL><BOLD><PDAT>710</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>25</PDAT></BOLD></HIL><PDAT>. Following either the step </PDAT><HIL><BOLD><PDAT>750</PDAT></BOLD></HIL><PDAT> or the step </PDAT><HIL><BOLD><PDAT>752</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>754</PDAT></BOLD></HIL><PDAT> where the pointer is incremented to point to the next field. Note that the step </PDAT><HIL><BOLD><PDAT>754</PDAT></BOLD></HIL><PDAT> is also reached if it is determined at the test step </PDAT><HIL><BOLD><PDAT>746</PDAT></BOLD></HIL><PDAT> that the field being pointed to is a scalar. This is because, if the field is a scalar, there is no additional processing needed for the field in the second pass since all of the space for the scalar was allocated at the step </PDAT><HIL><BOLD><PDAT>726</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>. Following step </PDAT><HIL><BOLD><PDAT>754</PDAT></BOLD></HIL><PDAT>, control passes back to the step </PDAT><HIL><BOLD><PDAT>744</PDAT></BOLD></HIL><PDAT> to process the next field.</PDAT></PTEXT></PARA>
<PARA ID="P-00206" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 28</PDAT></FGREF><PDAT>, a flow chart </PDAT><HIL><BOLD><PDAT>760</PDAT></BOLD></HIL><PDAT> illustrates the fill buffer step </PDAT><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>. Processing begins at a first step </PDAT><HIL><BOLD><PDAT>762</PDAT></BOLD></HIL><PDAT> where the object/array header is added to the message buffer. Following the step </PDAT><HIL><BOLD><PDAT>762</PDAT></BOLD></HIL><PDAT> is a step </PDAT><HIL><BOLD><PDAT>764</PDAT></BOLD></HIL><PDAT> where a pointer is set to point to the first field or array element. Following the step </PDAT><HIL><BOLD><PDAT>764</PDAT></BOLD></HIL><PDAT> is a test step </PDAT><HIL><BOLD><PDAT>766</PDAT></BOLD></HIL><PDAT> where it is determined if the field being pointed to is marked for encoding. If so, then control passes from the step </PDAT><HIL><BOLD><PDAT>766</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>768</PDAT></BOLD></HIL><PDAT> where it is determined if the field being pointed to is a scalar.</PDAT></PTEXT></PARA>
<PARA ID="P-00207" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>768</PDAT></BOLD></HIL><PDAT> that the field being pointed to is a scalar, then control passes from the step </PDAT><HIL><BOLD><PDAT>768</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>770</PDAT></BOLD></HIL><PDAT> where the scalar is added to the buffer. If it is determined at the test step </PDAT><HIL><BOLD><PDAT>768</PDAT></BOLD></HIL><PDAT> that the field being pointed to is not a scalar, then control passes from the test step </PDAT><HIL><BOLD><PDAT>768</PDAT></BOLD></HIL><PDAT> to a test step </PDAT><HIL><BOLD><PDAT>772</PDAT></BOLD></HIL><PDAT> where it is determined if the field being pointed to is an array. If so, then control passes from the test step </PDAT><HIL><BOLD><PDAT>772</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>774</PDAT></BOLD></HIL><PDAT> where the fill buffer routine, illustrated by the flow charts </PDAT><HIL><BOLD><PDAT>760</PDAT></BOLD></HIL><PDAT> is recursively called for the array element.</PDAT></PTEXT></PARA>
<PARA ID="P-00208" LVL="0"><PTEXT><PDAT>If it is determined at the test step </PDAT><HIL><BOLD><PDAT>772</PDAT></BOLD></HIL><PDAT> that the current pointer does not point to an array, then control passes from the test step </PDAT><HIL><BOLD><PDAT>772</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>776</PDAT></BOLD></HIL><PDAT> where the fill buffer routine is performed on the object that the pointer points to. Note that, the step </PDAT><HIL><BOLD><PDAT>776</PDAT></BOLD></HIL><PDAT> is reached only if the field being pointed to is an object. Following the step </PDAT><HIL><BOLD><PDAT>776</PDAT></BOLD></HIL><PDAT> is a test step </PDAT><HIL><BOLD><PDAT>778</PDAT></BOLD></HIL><PDAT> which determines if there are more fields to be processed. If not, then processing is complete. Otherwise, control passes from the test step </PDAT><HIL><BOLD><PDAT>778</PDAT></BOLD></HIL><PDAT> to a step </PDAT><HIL><BOLD><PDAT>780</PDAT></BOLD></HIL><PDAT> where the pointer is set to point to the next field. Note that the step </PDAT><HIL><BOLD><PDAT>780</PDAT></BOLD></HIL><PDAT> is also reached if it is determined at the test step </PDAT><HIL><BOLD><PDAT>776</PDAT></BOLD></HIL><PDAT> that the field being processed is not marked for encoding. The step </PDAT><HIL><BOLD><PDAT>780</PDAT></BOLD></HIL><PDAT> is also reached after the steps </PDAT><HIL><BOLD><PDAT>770</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>774</PDAT></BOLD></HIL><PDAT>. Following the step </PDAT><HIL><BOLD><PDAT>780</PDAT></BOLD></HIL><PDAT>, processing loops back to the test step </PDAT><HIL><BOLD><PDAT>766</PDAT></BOLD></HIL><PDAT> in order to process the next field.</PDAT></PTEXT></PARA>
<PARA ID="P-00209" LVL="0"><PTEXT><PDAT>Note that the data that is passed via the message stream may be viewed and/or additionally processed in any one of a variety of conventional fashions, including using an appropriate graphical user interface to display various parameters, function calls, and other values that are passed via instrumentation. It is also possible to first store all of the passed data in the message data storage </PDAT><HIL><BOLD><PDAT>417</PDAT></BOLD></HIL><PDAT> and then display the data at a later time using either the analyzers/viewers </PDAT><HIL><BOLD><PDAT>416</PDAT></BOLD></HIL><PDAT> or other appropriate software. Another possibility is to simply display, using conventional text display and/or printing, alphanumerical values corresponding to the data stream.</PDAT></PTEXT></PARA>
<PARA ID="P-00210" LVL="0"><PTEXT><PDAT>It is also noted that the description of what is instrumented, set forth above, may be appropriate for debugging byte code. Instrumenting in a slightly different fashion may be appropriate when, for example, performance and/or code coverage measurements are being performed. In that case, as each class is opened for instrumentation, each class and methods therefore may be registered with the runtime instrumentation code. In the registration, information such as the name of the class, name of the methods, and the line numbers of each method, may recorded.</PDAT></PTEXT></PARA>
<PARA ID="P-00211" LVL="0"><PTEXT><PDAT>In the case of performance measurement, the instrumentation inserts a call to a runtime function that determines a current timestamp and that is associated with a corresponding line number. Then the timestamp for the previous line number is subtracted from the current timestamp. Hence, it is possible to calculate a duration value for each line.</PDAT></PTEXT></PARA>
<PARA ID="P-00212" LVL="0"><PTEXT><PDAT>In the case of instrumenting for code coverage, the instrumentation code and the runtime code may work together in a conventional fashion to denote each line in the program as being in one of three states: Non-executable, executable but not executed, and executed. To accomplish this, a call to a special runtime function is inserted in the prolog of each function. The special runtime function, among other things, uses the registered information for this method, to record each line number in the instrumented function. Then, a call to another runtime function is inserted for each line. The other runtime function indicates that the program source line corresponding thereto has been executed. As the instrumented program executes, each executable line is marked as actually executed. Hence, after the conclusion of the program, the executable line numbers that are not marked as executed are marked as executable but not executed. All other non-executed lines of the method are marked as non-executable. Using this technique, coverage information by class, by method, and by line, is collected.</PDAT></PTEXT></PARA>
<PARA ID="P-00213" LVL="0"><PTEXT><PDAT>While the invention has been disclosed in connection with the preferred embodiments shown and described in detail, various modifications and improvements thereon will become readily apparent to those skilled in the art. Accordingly, the spirit and scope of the present invention is to be limited only by the following claims.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00214" LVL="0"><PTEXT><PDAT>1. A method of instrumenting an initial byte code computer program, comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(a) examining the initial byte code to determine an identifier associated with at least one block of code included in the initial byte code; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(b) selecting portions of the initial byte code for instrumentation; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(c) instrumenting, while loading the initial byte code, the portions by supplementing the initial byte code with additional byte code for instrumentation that facilitates runtime data gathering to monitor execution of the computer program, wherein a portion of the additional byte code uses the identifier to instrument portions of the initial byte code associated with said at least one block of code. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00215" LVL="0"><PTEXT><PDAT>2. A method according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein selecting the portions includes choosing portions of the byte code corresponding to at least one of: method entry, method exit, a throw, a method call, and a new line number.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00216" LVL="0"><PTEXT><PDAT>3. A method according to claim </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, wherein instrumenting a portion of the byte code corresponding to a method call includes instrumenting a local line number of source code corresponding to the byte code being instrumented.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00217" LVL="0"><PTEXT><PDAT>4. A method, according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein instrumenting the portions includes adding calls to instrumentation runtime functions that pass parameters indicative of the portions being instrumented.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00218" LVL="0"><PTEXT><PDAT>5. A method, according to claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, wherein at least one of the parameters that is passed includes a line number of the source code corresponding to the portion being instrumented.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00219" LVL="0"><PTEXT><PDAT>6. A method, according to claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, wherein at least one of the parameters that is passed includes a thispointer for the method corresponding to the portion being instrumented.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00220" LVL="0"><PTEXT><PDAT>7. A method, according to claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, wherein at least one of the parameters that is passed corresponds to at least one method parameter provided to a method containing byte code that is being instrumented.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00221" LVL="0"><PTEXT><PDAT>8. A method, according to claim </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>, wherein data indicative of the at least one method parameter is passed in a message buffer from an instrumentation runtime function to at least one viewer routine that displays the data to a user.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00222" LVL="0"><PTEXT><PDAT>9. A method, according to claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>, wherein the message buffer includes scalar data, array data, and object data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00223" LVL="0"><PTEXT><PDAT>10. A method, according to claim </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(d) placing an object header in the message buffer; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(e) placing an array header in the message buffer. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00224" LVL="0"><PTEXT><PDAT>11. A method, according to claim </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(f) limiting the message buffer to a predetermined size. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00225" LVL="0"><PTEXT><PDAT>12. A method, according to claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, wherein data indicative of the parameters are stored in a message buffer.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00226" LVL="0"><PTEXT><PDAT>13. A method, according to claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, wherein data from the message buffer is passed to at least one viewer routine that displays the data to a user.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00227" LVL="0"><PTEXT><PDAT>14. A method, according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(d) instrumenting an end of a method to provide instrumentation for handling an abort. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00228" LVL="0"><PTEXT><PDAT>15. A method according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(d) instrumenting a call to a native function by adding a byte code wrapper to the native function and then instrumenting the wrapper. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00229" LVL="0"><PTEXT><PDAT>16. A method, according to claim </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT>, wherein the wrapper includes byte code corresponding to method entry and exit portions.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00017">
<PARA ID="P-00230" LVL="0"><PTEXT><PDAT>17. A method, according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(d) instrumenting a call to a native function by providing an native assembly language thunk that captures data passed to and from the native function. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00018">
<PARA ID="P-00231" LVL="0"><PTEXT><PDAT>18. A method, according to claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(e) hooking the assembly language thunk between a virtual machine and the call to the native function. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00019">
<PARA ID="P-00232" LVL="0"><PTEXT><PDAT>19. A method, according to claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT>, wherein hooking the assembly language thunk includes intercepting a call that provides an address for a procedure.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00020">
<PARA ID="P-00233" LVL="0"><PTEXT><PDAT>20. A method, according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(d) providing a routine to pass data via a message stream. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00021">
<PARA ID="P-00234" LVL="0"><PTEXT><PDAT>21. A method, according to claim </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(e) providing a data storage to store data provided via the message stream. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00022">
<PARA ID="P-00235" LVL="0"><PTEXT><PDAT>22. A method, according to claim </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(e) providing a viewer to allow viewing at least a subset of data from the message stream as the data is being generated. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00023">
<PARA ID="P-00236" LVL="0"><PTEXT><PDAT>23. A method of instrumenting a computer program, comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(a) examining an initial byte code representation of the program to determine an identifier associated with at least one block of code included in the initial byte code; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(b) creating a program counter mapping table corresponding to the byte code representation; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(c) selecting portions of the initial byte code representation for instrumenting using the program counter mapping table; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(d) instrumenting, while loading the initial byte code representation, the portions by supplementing the initial byte code with calls to instrumentation runtime functions at at least some of the portions to facilitate runtime data gathering for monitoring execution of the computer program, wherein a portion of the additional byte code uses the identifier to instrument portions of the initial byte code representation associated with said at least one block of code; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>(e) modifying the program counter mapping table according to original byte code and supplemented byte code. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00024">
<PARA ID="P-00237" LVL="0"><PTEXT><PDAT>24. A method according to claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, wherein selecting the portions includes choosing portions of the initial intermediate representation corresponding to at least one of: method entry, method exit, a throw, a method call, and a new line number.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00025">
<PARA ID="P-00238" LVL="0"><PTEXT><PDAT>25. A method, according to claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, wherein instrumenting the portions includes adding calls to instrumentation runtime functions that pass parameters indicative of the portions being instrumented.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00026">
<PARA ID="P-00239" LVL="0"><PTEXT><PDAT>26. A method according to claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(f) instrumenting a call to a native function by adding a byte code wrapper to the native function and then instrumenting the wrapper. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00027">
<PARA ID="P-00240" LVL="0"><PTEXT><PDAT>27. A method, according to claim </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>, wherein the wrapper includes byte code instrumentation corresponding to method entry and exit portions.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00028">
<PARA ID="P-00241" LVL="0"><PTEXT><PDAT>28. A method, according to claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(f) instrumenting a call to a native function by providing an native assembly language thunk that captures data passed to and from the native function. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00029">
<PARA ID="P-00242" LVL="0"><PTEXT><PDAT>29. A method, according to claim </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(g) hooking the assembly language thunk between a virtual machine and the call to the native function. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00030">
<PARA ID="P-00243" LVL="0"><PTEXT><PDAT>30. A method, according to claim </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT>, wherein hooking the assembly language thunk includes intercepting a call that provides an address for a procedure.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00031">
<PARA ID="P-00244" LVL="0"><PTEXT><PDAT>31. A method, according to claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>(f) following examining an initial byte code representation of the program, registering each of the methods and corresponding line numbers thereof with runtime instrumentation code. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00032">
<PARA ID="P-00245" LVL="0"><PTEXT><PDAT>32. A method, according to claim </PDAT><HIL><BOLD><PDAT>31</PDAT></BOLD></HIL><PDAT>, wherein registering each of the methods and corresponding line numbers thereof facilitates determining the source code being executed during run time debugging.</PDAT></PTEXT></PARA>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314558-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314558-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314558-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314558-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314558-20011106-D00004.TIF">
<EMI ID="EMI-D00005" FILE="US06314558-20011106-D00005.TIF">
<EMI ID="EMI-D00006" FILE="US06314558-20011106-D00006.TIF">
<EMI ID="EMI-D00007" FILE="US06314558-20011106-D00007.TIF">
<EMI ID="EMI-D00008" FILE="US06314558-20011106-D00008.TIF">
<EMI ID="EMI-D00009" FILE="US06314558-20011106-D00009.TIF">
<EMI ID="EMI-D00010" FILE="US06314558-20011106-D00010.TIF">
<EMI ID="EMI-D00011" FILE="US06314558-20011106-D00011.TIF">
<EMI ID="EMI-D00012" FILE="US06314558-20011106-D00012.TIF">
<EMI ID="EMI-D00013" FILE="US06314558-20011106-D00013.TIF">
<EMI ID="EMI-D00014" FILE="US06314558-20011106-D00014.TIF">
<EMI ID="EMI-D00015" FILE="US06314558-20011106-D00015.TIF">
<EMI ID="EMI-D00016" FILE="US06314558-20011106-D00016.TIF">
<EMI ID="EMI-D00017" FILE="US06314558-20011106-D00017.TIF">
<EMI ID="EMI-D00018" FILE="US06314558-20011106-D00018.TIF">
<EMI ID="EMI-D00019" FILE="US06314558-20011106-D00019.TIF">
<EMI ID="EMI-D00020" FILE="US06314558-20011106-D00020.TIF">
<EMI ID="EMI-D00021" FILE="US06314558-20011106-D00021.TIF">
<EMI ID="EMI-D00022" FILE="US06314558-20011106-D00022.TIF">
<EMI ID="EMI-D00023" FILE="US06314558-20011106-D00023.TIF">
<EMI ID="EMI-D00024" FILE="US06314558-20011106-D00024.TIF">
<EMI ID="EMI-D00025" FILE="US06314558-20011106-D00025.TIF">
<EMI ID="EMI-D00026" FILE="US06314558-20011106-D00026.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314559-20011106-D00000.TIF SYSTEM "US06314559-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00001.TIF SYSTEM "US06314559-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00002.TIF SYSTEM "US06314559-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00003.TIF SYSTEM "US06314559-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00004.TIF SYSTEM "US06314559-20011106-D00004.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00005.TIF SYSTEM "US06314559-20011106-D00005.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00006.TIF SYSTEM "US06314559-20011106-D00006.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00007.TIF SYSTEM "US06314559-20011106-D00007.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00008.TIF SYSTEM "US06314559-20011106-D00008.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00009.TIF SYSTEM "US06314559-20011106-D00009.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00010.TIF SYSTEM "US06314559-20011106-D00010.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00011.TIF SYSTEM "US06314559-20011106-D00011.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00012.TIF SYSTEM "US06314559-20011106-D00012.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00013.TIF SYSTEM "US06314559-20011106-D00013.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00014.TIF SYSTEM "US06314559-20011106-D00014.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00015.TIF SYSTEM "US06314559-20011106-D00015.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00016.TIF SYSTEM "US06314559-20011106-D00016.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00017.TIF SYSTEM "US06314559-20011106-D00017.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00018.TIF SYSTEM "US06314559-20011106-D00018.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00019.TIF SYSTEM "US06314559-20011106-D00019.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00020.TIF SYSTEM "US06314559-20011106-D00020.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00021.TIF SYSTEM "US06314559-20011106-D00021.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00022.TIF SYSTEM "US06314559-20011106-D00022.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00023.TIF SYSTEM "US06314559-20011106-D00023.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00024.TIF SYSTEM "US06314559-20011106-D00024.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00025.TIF SYSTEM "US06314559-20011106-D00025.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00026.TIF SYSTEM "US06314559-20011106-D00026.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00027.TIF SYSTEM "US06314559-20011106-D00027.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00028.TIF SYSTEM "US06314559-20011106-D00028.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00029.TIF SYSTEM "US06314559-20011106-D00029.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00030.TIF SYSTEM "US06314559-20011106-D00030.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00031.TIF SYSTEM "US06314559-20011106-D00031.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00032.TIF SYSTEM "US06314559-20011106-D00032.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00033.TIF SYSTEM "US06314559-20011106-D00033.TIF" NDATA TIF>
<!ENTITY US06314559-20011106-D00034.TIF SYSTEM "US06314559-20011106-D00034.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314559</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>08942782</PDAT></DNUM></B210>
<B211US><PDAT>08</PDAT></B211US>
<B220><DATE><PDAT>19971002</PDAT></DATE></B220>
</B200>
<B500>
<B510>
<B511><PDAT>G06F  945</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>717  5</PDAT></B521>
<B522><PDAT>717 10</PDAT></B522>
<B522><PDAT>717 11</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Development system with methods for assisting a user with inputting source code</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4617643</PDAT></DNUM>
<DATE><PDAT>19861000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Klock et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>364900</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5339433</PDAT></DNUM>
<DATE><PDAT>19940800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Frid-Nielsen</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395700</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5408665</PDAT></DNUM>
<DATE><PDAT>19950400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Fitzgerald</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395700</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5450545</PDAT></DNUM>
<DATE><PDAT>19950900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Martin et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5485618</PDAT></DNUM>
<DATE><PDAT>19960100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Smith</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395700</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5557730</PDAT></DNUM>
<DATE><PDAT>19960900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Frid-Nielsen</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395159</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5579520</PDAT></DNUM>
<DATE><PDAT>19961100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Bennett</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395704</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5603021</PDAT></DNUM>
<DATE><PDAT>19970200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Spencer et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345604</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5724589</PDAT></DNUM>
<DATE><PDAT>19980300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Wold</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395701</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5737608</PDAT></DNUM>
<DATE><PDAT>19980400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Van De Vanter</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  1</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5740444</PDAT></DNUM>
<DATE><PDAT>19980400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Frid-Nielsen</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395705</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5748963</PDAT></DNUM>
<DATE><PDAT>19980500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Orr</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395704</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5754737</PDAT></DNUM>
<DATE><PDAT>19980500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Gipson</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395 12</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5778402</PDAT></DNUM>
<DATE><PDAT>19980700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Gipson</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>707530</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5787431</PDAT></DNUM>
<DATE><PDAT>19980700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Shaughnessy</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>707100</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5854936</PDAT></DNUM>
<DATE><PDAT>19981200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Pickett</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395710</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B562><NCIT><STEXT><PDAT>McFedries, P.; Visual Basic for Applications Unleashed. Sams, Macmillian Computer Publishing, New York, NY, Chapter 1, Mar. 1997.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Rubenking, N.; &ldquo;Delphi 4 delivers potent programming&rdquo;. PC Magazine, v16, n15, p64(1), Sep. 1997.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Nicolaisen, N.; &ldquo;Go beyond text editing, using the advances in Source Insight&rdquo;. Computer Shopper, v16, n4, p584(3), Apr. 1996.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Parker, T.; &ldquo;TakeFive&apos;s SNiFF plus lets you tailor your own development environment&rdquo;. UNIX Review, v15, n4, p61(2), Apr. 1997.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Mann, T.; Visual Basic 5 Developer&apos;s Guide. Sams, Macmillian Computer Publishing, New York, NY, Chapter 1, Jun. 1997.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Powell, J.; &ldquo;Delphi 3 Client/Server Suite-Delphi&apos;s RAD New Features Shine&rdquo;. Windows Magazine, n806, p158, Jun. 1997.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Windows Magazine; &ldquo;Application Development-Programmers need to meet more demands than ever. These products can help&rdquo;. Windows Magazine, n806A, p123, Jun. 1997.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Coffee, P.; &ldquo;Delphi 3.0: Proof that Pascal lives&rdquo;. Windows Sources, v5, n6, p92, Jun. 1997.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Nesbitt, K.; &ldquo;Borland Delphi: third time&apos;s a charm&rdquo;. Database Web Advisor, v15, n7, p70(6), Jul. 1997.</PDAT></STEXT></NCIT><CITED-BY-EXAMINER></B562>
</B560>
<B570>
<B577><PDAT>5</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>395705</PDAT></B582>
<B582><PDAT>395710</PDAT></B582>
<B582><PDAT>717  5</PDAT></B582>
<B582><PDAT>717 10</PDAT></B582>
</B580>
<B590><B595><PDAT>34</PDAT></B595><B596><PDAT>35</PDAT></B596><B597US>
</B590>
</B500>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Peter Franz Valentin</PDAT></FNM><SNM><STEXT><PDAT>Sollich</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Santa Cruz</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Barland Software Corporation</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Scotts Valley</PDAT></CITY><STATE><PDAT>CA</PDAT></STATE></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>02</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Darby &amp; Darby</PDAT></STEXT></ONM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Mark R.</PDAT></FNM><SNM><STEXT><PDAT>Powell</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Kelvin</PDAT></FNM><SNM><STEXT><PDAT>Booker</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2122</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A visual development system having an interface which assists a user with input of source code expressions and statements during creation of a computer program is described. The interface includes an Integrated Development Environment (IDE) interface having a code editor with &ldquo;Code Completion&rdquo; and &ldquo;Code Parameter&rdquo; features for displaying context sensitive pop-up windows within a source code file. Code Completion is implemented at the user interface level by displaying a Code Completion dialog box after the user enters a record or class name followed by a period. For a class, the dialog lists the properties, methods and events appropriate to the class. For a record or structure, the dialog lists the data members of the record. To complete entry of the expression, the user need only select an item from the dialog list, whereupon the system automatically enters the selected item in the code. Code completion also operates during input of assignment statements. When the user enters an assignment statement for a variable and presses a hot key (e.g., &lt;ctrl&gt;&lt;space_bar&gt;), a list of arguments valid for the variable is displayed. Here, the user can simply select an argument to be entered in the code. Similarly, the user can bring up a list of arguments when typing a procedure, function, or method call and needs to add an argument. In this manner, the user can view the required arguments for a method as he or she enters a method, function, or procedure call.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>COPYRIGHT NOTICE</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>The present invention relates generally to system and methods for creating software programs. More particularly, the present invention relates to a visual development system and methods for assisting users with the task of creating source code during development of software programs.</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>Before a digital computer may accomplish a desired task, it must receive an appropriate set of instructions. Executed by the computer&apos;s microprocessor, these instructions, collectively referred to as a &ldquo;computer program,&rdquo; direct the operation of the computer. Expectedly, the computer must understand the instructions which it receives before it may undertake the specified activity.</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>Owing to their digital nature, computers essentially only understand &ldquo;machine code,&rdquo; i.e., the low-level, minute instructions for performing specific tasks&mdash;the sequence of ones and zeros that are interpreted as specific instructions by the computer&apos;s microprocessor. Since machine language or machine code is the only language computers actually understand, all other programming languages represent ways of structuring human language so that humans can get computers to perform specific tasks.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>While it is possible for humans to compose meaningful programs in machine code, practically all software development today employs one or more of the available programming languages. The most widely used programming languages are the &ldquo;high-level&rdquo; languages, such as C or Pascal. These languages allow data structures and algorithms to be expressed in a style of writing which is easily read and understood by fellow programmers.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>A program called a &ldquo;compiler&rdquo; translates these instructions into the requisite machine language. In the context of this translation, the program written in the high-level language is called the &ldquo;source code&rdquo; or source program. The ultimate output of the compiler is an intermediate module or &ldquo;object module,&rdquo; which includes instructions for execution by a target processor. In the context of Borland&apos;s Turbo Pascal and Object Pascal, the intermediate module is a Pascal &ldquo;unit&rdquo; (e.g., .TPU file). Although an object module includes code for instructing the operation of a computer, the object module itself is not usually in a form which may be directly executed by a computer. Instead, it must undergo a &ldquo;linking&rdquo; operation before the final executable program is created.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>Linking may be thought of as the general process of combining or linking together one or more compiled object modules or units to create an executable program. This task usually falls to a program called a &ldquo;linker.&rdquo; In typical operation, a linker receives, either from the user or from an integrated compiler, a list of modules desired to be included in the link operation. The linker scans the object modules from the object and library files specified. After resolving interconnecting references as needed, the linker constructs an executable image by organizing the object code from the modules of the program in a format understood by the operating system program loader. The end result of linking is executable code (typically an .EXE file) which, after testing and quality assurance, is passed to the user with appropriate installation and usage instructions.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>&ldquo;Visual&rdquo; development environments, such as Borland&apos;s Delphi&trade;, Microsoft&reg; Visual Basic, and Powersoft&apos;s PowerBuilder&reg;, are rapidly becoming preferred development tools for quickly creating production applications. Such environments are characterized by an Integrated Development Environment (IDE) providing a form designer or painter, a property getter/setter manager (&ldquo;inspector&rdquo;), a project manager, a tool palette (with objects which the user can drag and drop on forms), an editor, a compiler, and a linker. In general operation, the user &ldquo;paints&rdquo; objects on one or more forms, using the form painter. Attributes and properties of the objects on the forms can be modified using the property manager or inspector. In conjunction with this operation, the user attaches or associates program code with particular objects on screen (e.g., button object); the editor is used to edit program code which has been attached to particular objects.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>At various points during this development process, the user &ldquo;compiles&rdquo; the project into a program which is executable on a target platform. For Microsoft Visual Basic and Powersoft PowerBuilder, programs are &ldquo;pseudo-compiled&rdquo; into p-code (&ldquo;pseudo&rdquo; codes) modules. Each p-code module comprises byte codes which, for execution of the program, are interpreted at runtime by a runtime interpreter. Runtime interpreters themselves are usually large programs (e.g., VBRUNxx.DLL for Visual Basic) which must be distributed with the programs in order for them to run. In the instance of Delphi&trade;, on the other hand, programs are compiled and linked into true machine code, thus yielding standalone executable programs; no runtime interpreter is needed.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>To a large extent, the progress of a particular software development project is tied to the progress of the task of writing source code or &ldquo;coding.&rdquo; It is highly desirable, therefore, to facilitate this task. Although there has been some effort to address this task by increasing code reuse, one nevertheless finds that core functionality of a program must often at some point still be coded by hand. Since software components are often constructed from complex classes comprising numerous class members and methods, the developer user typically spends a lot of time looking up help information (e.g., class definitions) for such components before he or she can use such a component. Thus even with the high degree of reuse provided by component-based visual development environments, developers still must spend substantial amounts of time coding functionality to suit a new project, and of that, developers spend substantial amounts of time referencing on-line help information for understanding how to use numerous components.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>What is needed is a system providing methods for assisting users with inputting source code&mdash;that is, the fundamental task of writing the individual code statements and expressions which comprise a software program. Such a system should free developers from having to repeatedly reference on-line reference or help materials. The present invention fulfills this and other needs.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>A visual development system of the present invention includes a compiler, a linker, and an interface. Through the interface, the developer user &ldquo;paints&rdquo; forms with objects and supplies source listings (i.e., enters source code) for the compiler. From the source code or listings, once compiled by the compiler and linked with other run-time or support files by the linker, the system generates a computer program, which may be executed by a target processor(s).</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>The interface includes an Integrated Development Environment (IDE) interface having a code editor. The IDE provides &ldquo;Code Insight&rdquo; functionality to the code editor for displaying context sensitive pop-up windows within a source code file. Of particular interest to the present invention are Code Completion and Code Parameter features of Code Insight.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>Code Completion is implemented at the user interface level by displaying a Code Completion dialog box after the user enters a record or class name followed by a period. For a class, the dialog lists the properties, methods and events appropriate to the class. For a record or structure, the dialog lists the data members of the record. To complete entry of the expression, the user need only select an item from the dialog list, whereupon the system automatically enters the selected item in the code.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>Code Completion also operates during input of assignment statements. When the user enters an assignment statement for a variable and presses a hot key (e.g., &lt;ctrl&gt;&lt;space_bar&gt;), a list of arguments valid for the variable is displayed. Here, the user can simply select an argument to be entered in the code. Additionally, the user can select a type which itself is not appropriate (e.g., record type) but nevertheless includes a nested data member having a type which is valid. In an integer assignment statement, for example, the user can select a type variable SMTP</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, a structure of type TSMTP which contains an integer data member. Upon the user entering the dot operator after SMTP</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the system displays a list of valid data members for SMTP</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, that is, the data members which are assignment compatible for the integer assignment. Now, the user can simply select a valid member to be entered in the code.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>Similarly, the user can bring up a list of arguments when typing a procedure, function, or method call and needs to add an argument. Consider, for instance, a scenario where the user has begun entry of a SendFile method call. The SendFile method itself is defined elsewhere in the code as follows.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="1"><PTEXT><PDAT>procedure SendFile(Filename: string);</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="7"><PTEXT><PDAT>Upon the user entering the opening parenthesis, the system automatically displays parameter information for the call. In this manner, the user can view the required arguments for a method as he or she enters a method, function, or procedure call.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00020" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1A</PDAT></FGREF><PDAT> is a block diagram of a computer system in which the present invention may be embodied.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1B</PDAT></FGREF><PDAT> is a block diagram of a software system provided for directing the operation of the computer system of FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>A.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a block diagram of a visual development system of the present invention which includes a compiler, a linker, and an interface.</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3A-D</PDAT></FGREF><PDAT> are together a screen shot illustrating a preferred interface of an application development environment in which the present invention is embodied.</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 4A-D</PDAT></FGREF><PDAT> are together a screen shot illustrating an Environment Options dialog box, for configuring operation of &ldquo;Code Insight&rdquo; features of the system.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><PDAT>FIGS. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>A(</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>)-(</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>), </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>B(</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>)-(</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>), </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>C(</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>)-(</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>), </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>D(</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>)-(</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>), and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>E(</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>)-(</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>) are screen shots illustrating a &ldquo;Code Completion&rdquo; user interface methodology of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><PDAT>FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>F(</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>)-(</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>) are together a screen shot illustrating a Code Parameters user interface methodology of the present invention.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION OF A PREFERRED EMBODIMENT</PDAT></STEXT></H>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>The following description will focus on a preferred embodiment of the present invention (and certain alternatives) embodied in a visual development environment running on an Intel 80&times;86-compatible computer operating under an event-driven operating system, such as the Microsoft&reg; Windows NT or 9x environment. The present invention, however, is not limited to any particular application or any particular environment. Instead, those skilled in the art will find that the system and methods of the present invention may be advantageously applied to a variety of platforms and environments, whether command-line or GUI based, including MS-DOS, Macintosh, UNIX, NextStep, and the like. Therefore, the description of the exemplary embodiments which follows is for purposes of illustration and not limitation.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="7"><PTEXT><PDAT>General Architecture</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><PDAT>A. System Hardware</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><PDAT>The present invention may be embodied on a computer system such as the system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1A</PDAT></FGREF><PDAT>, which includes a central processor </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT>, a main memory </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT>, an input/output controller </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>, a keyboard </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>, a pointing device </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> (e.g., mouse, track ball, pen device, or the like), a display device </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>, and a mass storage </PDAT><HIL><BOLD><PDAT>107</PDAT></BOLD></HIL><PDAT> (e.g., removable disk, floppy disk, fixed disk, optical disk (including CD-ROM), and the like). Additional input/output devices, such as a printing device </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT>, may be provided with the system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> as desired. As shown, the various components of the system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> communicate through a system bus </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> or similar architecture. In a preferred embodiment, the system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> includes an IBM-compatible personal computer, available from a variety of vendors (including IBM of Armonk, N.Y.).</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><PDAT>B. System Software</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>Illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1B</PDAT></FGREF><PDAT>, a computer software system </PDAT><HIL><BOLD><PDAT>150</PDAT></BOLD></HIL><PDAT> is provided for directing the operation of the computer system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>. Software system </PDAT><HIL><BOLD><PDAT>150</PDAT></BOLD></HIL><PDAT>, which is stored in system memory </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> and/or on disk storage </PDAT><HIL><BOLD><PDAT>107</PDAT></BOLD></HIL><PDAT>, includes a kernel or operating system (OS) </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> and a windows shell or interface </PDAT><HIL><BOLD><PDAT>180</PDAT></BOLD></HIL><PDAT>. One or more application programs, such as application programs </PDAT><HIL><BOLD><PDAT>170</PDAT></BOLD></HIL><PDAT> or windows application programs </PDAT><HIL><BOLD><PDAT>190</PDAT></BOLD></HIL><PDAT>, may be &ldquo;loaded&rdquo; (i.e., transferred from storage </PDAT><HIL><BOLD><PDAT>107</PDAT></BOLD></HIL><PDAT> into memory </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT>) for execution by the system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>. OS </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> and shell </PDAT><HIL><BOLD><PDAT>180</PDAT></BOLD></HIL><PDAT>, as well as application software </PDAT><HIL><BOLD><PDAT>170</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>190</PDAT></BOLD></HIL><PDAT>, include an interface for receiving user commands and data and displaying results and other useful information. Software system </PDAT><HIL><BOLD><PDAT>150</PDAT></BOLD></HIL><PDAT> also includes a visual development system </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> of the present invention for developing system and application programs. As shown, the development system </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> includes components which interface with the system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> through windows shell </PDAT><HIL><BOLD><PDAT>180</PDAT></BOLD></HIL><PDAT>, as well as components which interface directly through OS </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>In a preferred embodiment, operating system </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> includes MS-DOS and shell </PDAT><HIL><BOLD><PDAT>180</PDAT></BOLD></HIL><PDAT> includes Microsoft&reg; Windows, both of which are available from Microsoft Corporation of Redmond, Wash. Alternatively, components </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>180</PDAT></BOLD></HIL><PDAT> can be provided by Microsoft Windows 9x/Windows NT. Those skilled in the art will appreciate that the system may be implemented in other platforms, including Macintosh, UNIX, and the like. Application software </PDAT><HIL><BOLD><PDAT>170</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>190</PDAT></BOLD></HIL><PDAT> can be any one of a variety of software applications, such as word processing, database, spreadsheet, text editors, and the like, including those created by the development system </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, which is now described in greater detail.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><PDAT>C. Development System</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><PDAT>Shown in further detail in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, the visual development system </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> of the present invention includes a compiler </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT>, a linker </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>, an interface </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>, and (optional) debugger </PDAT><HIL><BOLD><PDAT>270</PDAT></BOLD></HIL><PDAT>. Through the interface, the developer user &ldquo;paints&rdquo; forms </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> with objects and supplies source listings </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT> to the compiler </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT>. Interface </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> includes both command-line driven </PDAT><HIL><BOLD><PDAT>213</PDAT></BOLD></HIL><PDAT> and Integrated Development Environment (IDE) </PDAT><HIL><BOLD><PDAT>211</PDAT></BOLD></HIL><PDAT> interfaces, the former accepting user commands through command-line parameters, the latter providing menu equivalents thereof. From the source code or listings </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT>, forms </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT>, and headers/includes files </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT>, the compiler </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> &ldquo;compiles&rdquo; or generates object module(s) or &ldquo;units&rdquo; </PDAT><HIL><BOLD><PDAT>203</PDAT></BOLD></HIL><PDAT>. In turn, linker </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT> &ldquo;links&rdquo; or combines the units </PDAT><HIL><BOLD><PDAT>203</PDAT></BOLD></HIL><PDAT> with runtime libraries </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT> (e.g., standard runtime library functions) to generate program(s) </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT>, which may be executed by a target processor (e.g., processor </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>A). The runtime libraries </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT> include previously-compiled standard routines, such as graphics, I/O routines, startup code, math libraries and the like.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><PDAT>A description of the general operation of development system </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> is provided in the manuals accompanying Delphi&trade;: Users Guide (Part No. HDA1330WW21770), and Developer&apos;s Guide (Part No. HDA1330WW21772). Further description can be found in Object Pascal Language Guide (Part No. HDA1330WW21771) and Visual Component Library Reference, Volumes 1 and 2 (Part Nos. HDA1330WW21773, HDA1330WW21774). The disclosures of each of the foregoing (which are available directly from Borland International of Scotts Valley, Calif.) are hereby incorporated by reference. Description of the use of &ldquo;method pointers&rdquo; in the system, for implementing event handling, can be found in the commonly-owned, co-pending application entitled DEVELOPMENT SYSTEMS WITH METHODS FOR TYPE-SAFE DELEGATION OF OBJECT EVENTS TO EVENT HANDLERS OF OTHER OBJECTS, U.S. patent application Ser. No. 08/594,928, filed Jan. 31, 1996, the disclosure of which is hereby incorporated by reference.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><PDAT>Operation (i.e., &ldquo;compilation&rdquo;) by a compiler, such as compiler </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT>, is generally driven by its two main components: a front end and a back end. The &ldquo;front end&rdquo; of the compiler parses the source program and builds a parse tree&mdash;a well known tree data structure representing parsed source code. The &ldquo;back end&rdquo; traverses the tree and generates code (if necessary) for each node of the tree, in a post-order fashion. For an introduction to the general construction and operation of compilers, see Fischer et al., Crafting a Compiler with C, Benjamin/Cummings Publishing Company, Inc., 1991, the disclosure of which is hereby incorporated by reference. Further description of the back end of the compiler is provided in commonly-owned U.S. Pat. No. 5,481,708, issued Jan. 2, 1996. Description of a linker, such as Borland&apos;s TurboLinker, is provided in commonly-owned U.S. Pat. No. 5,408,665, issued Apr. 18, 1995. The disclosures of each of the foregoing patents are hereby incorporated by reference.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>D. General development interface</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>The present invention is embodied in Delphi&trade;, a component-based, rapid application development (RAD) environment available from Borland International of Scotts Valley, Calif. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> illustrates an application development environment </PDAT><HIL><BOLD><PDAT>360</PDAT></BOLD></HIL><PDAT>, which is provided by Delphi. Many of the traditional requirements of programming, particularly for Windows applications, are handled for the programmer automatically by Delphi.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>As shown, the programming environment </PDAT><HIL><BOLD><PDAT>360</PDAT></BOLD></HIL><PDAT> comprises a main window </PDAT><HIL><BOLD><PDAT>361</PDAT></BOLD></HIL><PDAT>, a form </PDAT><HIL><BOLD><PDAT>371</PDAT></BOLD></HIL><PDAT>, a code editor window </PDAT><HIL><BOLD><PDAT>381</PDAT></BOLD></HIL><PDAT>, and an object manager or &ldquo;inspector&rdquo; window </PDAT><HIL><BOLD><PDAT>391</PDAT></BOLD></HIL><PDAT>. The main window </PDAT><HIL><BOLD><PDAT>361</PDAT></BOLD></HIL><PDAT> itself comprises main menu </PDAT><HIL><BOLD><PDAT>362</PDAT></BOLD></HIL><PDAT>, tool bar buttons </PDAT><HIL><BOLD><PDAT>363</PDAT></BOLD></HIL><PDAT>, and component palette </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT>. Main menu </PDAT><HIL><BOLD><PDAT>362</PDAT></BOLD></HIL><PDAT> lists user-selectable commands, in a conventional manner. For instance, the main menu invokes File, Edit, View submenus, and the like. Each submenu lists particular choices which the user can select. Working in conjunction with the main menu, toolbar </PDAT><HIL><BOLD><PDAT>363</PDAT></BOLD></HIL><PDAT> provides the user with shortcuts to the most common commands from the main menu. The toolbar is configurable by the user for including icons for most of the menu commands.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>Forms, such as form </PDAT><HIL><BOLD><PDAT>371</PDAT></BOLD></HIL><PDAT>, are the focal point of nearly every application which one develops in the environment. In typical operation, the user employs the form like a canvas, placing and arranging &ldquo;components&rdquo; on it to design the parts of one&apos;s user interface. The components themselves are the basic building blocks of applications developed within the environment. Available components appear on the component palette </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT>, which is displayed as part of the main window </PDAT><HIL><BOLD><PDAT>361</PDAT></BOLD></HIL><PDAT>. The form can be thought of as a component that contains other components. One form serves as the main form for the application; its components interact with other forms and their components to create the interface for an application under development. In this manner, the main form serves as the main interface for an application, while other forms typically serve as dialog boxes, data entry screens, and the like.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>During &ldquo;design&rdquo; mode operation of the system, the user can change the properties of the form, including resizing the form and moving it anywhere on screen. The form itself includes standard features such as a control menu, minimize and maximize buttons, title bar, and resizeable borders. The user can change these features, as well as other &ldquo;properties&rdquo; of the form, by using the object inspector window </PDAT><HIL><BOLD><PDAT>391</PDAT></BOLD></HIL><PDAT> to edit the form during design time. Thus, properties define a component&apos;s appearance and behavior.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>Components are the elements which a user employs to build his or her applications. They include all of the visible parts of an application, such as dialog boxes and buttons, as well as those which are not visible while the application is running (e.g., system timers). In the programming environment </PDAT><HIL><BOLD><PDAT>360</PDAT></BOLD></HIL><PDAT>, components are grouped functionally on different pages of the component palette </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT>. Each functional group is identified by a tab member, which includes a label indicating the particular nature of the group. For example, components that represent the Microsoft Windows common dialog boxes are grouped on the &ldquo;Dialogs&rdquo; page of the palette. The palette can incorporate user-created custom controls, which the user installs onto the palette. Additionally, the user can install third-party components.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>The object inspector window </PDAT><HIL><BOLD><PDAT>391</PDAT></BOLD></HIL><PDAT> enables the user to easily customize the way a component appears and behaves in the application under development. The inspector </PDAT><HIL><BOLD><PDAT>391</PDAT></BOLD></HIL><PDAT> comprises an object selector field </PDAT><HIL><BOLD><PDAT>392</PDAT></BOLD></HIL><PDAT>, a properties page </PDAT><HIL><BOLD><PDAT>393</PDAT></BOLD></HIL><PDAT>, and an events page </PDAT><HIL><BOLD><PDAT>394</PDAT></BOLD></HIL><PDAT>. The object selector </PDAT><HIL><BOLD><PDAT>392</PDAT></BOLD></HIL><PDAT> shows the name and type of the currently selected object, such as &ldquo;Form</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> ,&rdquo; as shown. The properties page </PDAT><HIL><BOLD><PDAT>391</PDAT></BOLD></HIL><PDAT> lists the attributes of a component placed on a form (or the form itself) which can be customized. The events page, on the other hand, lists &ldquo;event handlers&rdquo; for a particular component. Event handlers are specialized procedures which may include user-provided program code.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>Code editor </PDAT><HIL><BOLD><PDAT>381</PDAT></BOLD></HIL><PDAT> is a full-featured editor that provides access to all the code in a given application project. In addition to its basic editing functionality, the code editor </PDAT><HIL><BOLD><PDAT>381</PDAT></BOLD></HIL><PDAT> provides color syntax highlighting, for assisting the user with entering syntactically-correct code. When a project is first opened, the system automatically generates a page in the code editor for a default unit of source code; in the Object Pascal preferred embodiment, the default unit is named Unit</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>The following description will focus on those features of the development system </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> which are helpful for understanding methods of the present invention for implementing code completion in a visual development environment.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="7"><PTEXT><PDAT>Methods for Assisting a User with Input of Source Code</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>A. User interface operation</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>The IDE provides &ldquo;Code Insight&rdquo; features to the code editor for displaying context sensitive pop-up windows within a source code file. By default these features are enabled. To disable/re-enable and configure the features, the user invokes (selects Tools&verbar;Environment) an Environment Options dialog box </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>, as shown in FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>As shown, Code Insight provides several features, which generally function as follows.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00001">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="1" COLWIDTH="56PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="161PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Feature</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Use and functionality</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>Code Completion</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Enter a class name followed by a period in a code file.</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>The list of properties, methods and events appropriate</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>to the class will be displayed. The user can then select</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>the item to be entered in the code. Enter an assignment</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>statement and press &lt;ctrl&gt; &lt;spacebar&gt;. A list of</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>arguments that are valid for the variable is displayed.</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Select an argument to be entered in the code.</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Code Parameters</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>View the syntax of a method as the user enters it into</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>the code.</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Tooltip</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>When the compiler is stopped during debug, the user</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Expression</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>can view the value of a variable by pointing to it with</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Evaluation</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>the cursor.</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Code Completion</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Set the duration of the pause before a Code Insight</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Delay</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>dialog box is displayed.</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Code Templates</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Available templates are listed by name with a short</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>description. Click a template name to display the code</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>that will be entered in the file when that template is</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>selected. Code displayed in the code window can be</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>edited.</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Templates</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>The Templates box includes a name and short</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>description for each template.</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>Code</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>The code box displays the code that will be inserted</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>into a file when the template is selected. The code</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>displayed can be edited.</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00051" LVL="7"><PTEXT><PDAT>Of particular interest herein are the Code Completion and Code Parameter features.</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>Code Completion is implemented at the user interface level by displaying a Code Completion dialog box after the user enters a record or class name followed by a period. For a class, the dialog lists the properties, methods and events appropriate to the class. For a record or structure, the dialog lists the data members of the record. As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5A</PDAT></FGREF><PDAT>, for instance, at </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>, the user has begun entry of MainForm, a class of type TMainForm. Upon the user&apos;s input of the dot operator, the system automatically displays list dialog </PDAT><HIL><BOLD><PDAT>503</PDAT></BOLD></HIL><PDAT> next to the current cursor position. Dialog </PDAT><HIL><BOLD><PDAT>503</PDAT></BOLD></HIL><PDAT> lists the properties, methods and events appropriate to the class. To complete entry of the expression, the user need only select an item from the dialog list, whereupon the system automatically enters the selected item in the code.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>In a like manner, </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5B</PDAT></FGREF><PDAT> illustrates Code Completion for a rectangle structure, TRect. Here, the user has declared a variable, myRect, of type TRect. The TRect type defines a rectangle as follows.</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="1"><PTEXT><PDAT>TRect&equals;record</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="2"><PTEXT><PDAT>case Integer of</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="3"><PTEXT><HIL><BOLD><PDAT>0</PDAT></BOLD></HIL><PDAT>: (Left, Top, Right, Bottom: Integer);</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="3"><PTEXT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>: (TopLeft, BottomRight: TPoint);</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="1"><PTEXT><PDAT>end;</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="7"><PTEXT><PDAT>where TPoint is itself a record defined as follows.</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="1"><PTEXT><PDAT>TPoint&equals;record</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="2"><PTEXT><PDAT>X: Longint;</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="2"><PTEXT><PDAT>Y: Longint;</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="1"><PTEXT><PDAT>end;</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="7"><PTEXT><PDAT>In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5B</PDAT></FGREF><PDAT>, upon the user&apos;s input of the dot operator, the system automatically displays list dialog </PDAT><HIL><BOLD><PDAT>513</PDAT></BOLD></HIL><PDAT> next to the current cursor position </PDAT><HIL><BOLD><PDAT>515</PDAT></BOLD></HIL><PDAT>. Dialog </PDAT><HIL><BOLD><PDAT>513</PDAT></BOLD></HIL><PDAT> lists the data members appropriate to the record (structure). Again, the user need only select an item from the dialog list to complete entry of the expression, whereupon the system automatically enters the selected item in the code.</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="0"><PTEXT><PDAT>Code Completion also operates during input of assignment statements. As illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5C</PDAT></FGREF><PDAT>, when the user enters an assignment statement for integer variable J and presses a hot key (e.g., &lt;ctrl&gt;&lt;space_bar&gt;) at </PDAT><HIL><BOLD><PDAT>525</PDAT></BOLD></HIL><PDAT>, a list of arguments </PDAT><HIL><BOLD><PDAT>523</PDAT></BOLD></HIL><PDAT> valid for the variable is displayed. Here, the user can simply select an argument to be entered in the code. As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 5D-E</PDAT></FGREF><PDAT>, the user can select a type which itself is not appropriate (e.g., record type) but nevertheless includes a nested data member having a type which is valid. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5D</PDAT></FGREF><PDAT>, the user selects type variable SMTP</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, a structure of type TSMTP, at </PDAT><HIL><BOLD><PDAT>531</PDAT></BOLD></HIL><PDAT>. Upon the user entering the dot operator after SMTP</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the system displays a list of the data members for SMTP</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, as shown at </PDAT><HIL><BOLD><PDAT>541</PDAT></BOLD></HIL><PDAT> in FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>E. Now, the user can simply select a valid argument to be entered in the code.</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="0"><PTEXT><PDAT>In a like manner, the user can bring up a list of arguments when typing a procedure, function, or method call and needs to add an argument. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5F</PDAT></FGREF><PDAT>, for instance, the user has begun entry of a SendFile method call. The SendFile method itself is defined elsewhere in the code as follows.</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="1"><PTEXT><PDAT>procedure SendFile(Filename: string);</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="0"><PTEXT><PDAT>Upon the user entering the opening parenthesis, the system automatically displays parameter information for the call. The syntax for the argument(s) to the method is displayed, as shown at </PDAT><HIL><BOLD><PDAT>551</PDAT></BOLD></HIL><PDAT> in FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>F. In this manner, the user can view the required arguments for a method as he or she enters a method, function, or procedure call.</PDAT></PTEXT></PARA>
<PARA ID="P-00069" LVL="0"><PTEXT><PDAT>B. Overview of internal operation</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="0"><PTEXT><PDAT>During basic operation, the Integrated Development Environment or IDE invokes the compiler for determining an appropriate context for the source code, based on where the screen cursor is currently positioned within the code. The compiler, in response, compiles the source code up to the current point (of the user&apos;s cursor) and then returns a result back to the IDE which describes the current context within the source code. The IDE receives two core pieces of information. If the user has positioned the cursor within the parameter list of a function call, the IDE will receive information from the compiler reporting the name of the function together with the name and the types of the function&apos;s formal parameters. With this information, the IDE can display a pop-up menu providing an argument list for the current function, thus eliminating the need to invoke a help system for looking up the function.</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="0"><PTEXT><PDAT>The second type of information which the IDE receives relates to symbols or identifiers. If a symbol or identifier would be valid at the current cursor position, the compiler will identify the condition and prepare a list of the valid identifier, together with other valid identifiers, for the cursor position. The IDE, upon receiving this information, can display the list to the user. The user, in turn, selects the desired symbol from the list, for instance using incremental searching technique.</PDAT></PTEXT></PARA>
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>As an example of this feature, consider for instance a variable name followed by the dot operator (e.g., MyRecord.). Here, a member name is expected (e.g., MyRecord.Foo). Accordingly, the compiler will compute and report the members of the structure (of the variable) which meet any conditions or constraints of the code at the cursor position. If an integer type is expected, for instance, the compiler here would only report integer members. The determination of an appropriate type is based on legal constructs which can be created at the then-current cursor position. In an expression comprising a floating-point assignment, both floating-point and integer data types are valid. Accordingly, both floating-point and integer data members would be displayed for user selection.</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="0"><PTEXT><PDAT>The approach also takes into account nested members. Continuing with the example of an integer data type, one of the data members might be a rectangle structure (e.g., a structure of type RECT) which, in turn, comprises integer data members (i.e., nested data members). In this situation, the system displays the rectangle (nested structure) member since there is a legal way to employ integer data members of that structure. For this example, the user will ultimately need to type an additional dot (i.e., dot operator) to complete selection of the final data member.</PDAT></PTEXT></PARA>
<PARA ID="P-00074" LVL="0"><PTEXT><PDAT>C. Core internal methods</PDAT></PTEXT></PARA>
<PARA ID="P-00075" LVL="0"><PTEXT><PDAT>The core functionality is provided as follows. A first method, CompilerKibitz, is invoked by the IDE to trigger compilation. In invoking the method, the IDE passes in the filename (i.e., source code filename), together with the current line number and column position where the cursor is located. In an exemplary embodiment, the method may be constructed as follows (using the C programming language).</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00002">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>void EXPORT CompilerKibitz(CompOptions *options,</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="175PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>UnitNameFileNamePair *unitFileNamePairs,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>const char *stopSrc, int stopLine, int stopCol,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>char makeFlag, KibitzResult *result)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>/ / . . .</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="189PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>/*</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Parse source up to stopSrc, stopLine and stopCol and report the</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>result. source and stopSrc will be the same except for</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>include files. */</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>/*</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Two main pieces of information:</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="1" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>-</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Are we currently in a call to a user-defined or standard procedure,</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>function, or method&quest; If so, what&apos;s the name of the procedure and the</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>parameter list. What are the positions of the actual parameters so far&quest;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>(This information is recorded directly in the result record in part;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>however, the IDE has to call back for more information.)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="1" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>-</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>If a symbol was expected at the cursor position, what is the list of</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>symbols that would make sense at this point&quest; For this</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>information, a GetValidSymbols method or function is invoked</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>*/</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>/ / . . .</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>As shown, the method is invoked with seven parameters. The first parameter, a pointer-to compiler options (CompOptions), is a structure which specifies a &ldquo;source to compile&rdquo;; this might be different than the source which the IDE desires the compiler to stop. The file can be specified in a conventional manner, such as by filename (text string). The second parameter is a pointer-to unit/file name pairs. This, in essence, is a table of unit name/file name associations. This is passed to the compiler since the IDE might have some knowledge about where particular files are located (on disk) for corresponding &ldquo;units&rdquo; which are included in the user&apos;s project. In a Borland Delphi&trade; program, for instance, a &ldquo;uses&rdquo; statement sets forth particular Pascal &ldquo;units&rdquo; which are employed. Since the IDE stores directory information for various files (e.g., library files), the IDE can pass such information on to the compiler via the second parameter.</PDAT></PTEXT></PARA>
<PARA ID="P-00077" LVL="0"><PTEXT><PDAT>The next three parameters specify the user&apos;s source position. The stopSrc parameter is a (pointer to) character string specifying the &ldquo;stop source&rdquo;&mdash;that is, the current source file where the user has stopped (i.e., stopped data entry long enough to invoke the code completion methodology of the present invention). The stopLine parameter is an integer data member storing the particular line number where the user stopped in the source code. Similarly, stopCol is an integer data member specifying the particular column in the source code where the user stopped.</PDAT></PTEXT></PARA>
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>Finally, the makeFlag parameter serves as a flag indicating that the compiler should &ldquo;make&rdquo; the program (i.e., compiling all dependent source files for ensuring that the currently-compiled unit or project is up-to-date). This is set to &ldquo;true&rdquo; when the IDE has detected that other files have been added, thus requiring a &ldquo;make.&rdquo; If, on the other hand, other files have not been added, the flag is set to false and only the current source file is compiled. The last parameter is a pointer to a &ldquo;Kibitz&rdquo; result structure, KibitzResult. After completion of the method execution, the result structure still does not contain a list of valid symbols. Instead, the IDE invokes yet another method to fill out this particular information in the result structure.</PDAT></PTEXT></PARA>
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>To obtain the actual list of valid symbols, the IDE invokes a GetValidSymbols method. The method includes the following prototype.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00003">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>int EXPORT GetValidSymbols(const KibitzResult *k, Symbol **result,</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="189PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>GF_Flags *flags, int maxCnt)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>/* Find symbols valid in this context. Find up to maxCnt, and report</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="196PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&ensp;how many were found. Write them into result, if result &lt;&gt; 0. */</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>As shown, the method is invoked by passing in (by reference) the KibitzResult structure, as the method&apos;s first parameter. Together with the result structure, a vector of symbols is passed in as the second parameter and a vector of flags is passed in as the third parameter. Finally, a maximum count is specified in the fourth parameter, for indicating an upper limit on the number of symbols which should be returned (i.e., based on how many the IDE can realistically handle). During system operation, the IDE invokes the GetValidSymbols method twice. On the first invocation of the method, the IDE simply specifies NULL for the two vectors whereupon the method returns a count for the number of valid symbols. Based on this first call, the IDE will allocate sufficient memory and then invoke the GetValidSymbols method a second time, passing in appropriate pointers to the allocated vectors which are to store the symbol results.</PDAT></PTEXT></PARA>
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>D. KibitzResult data structure</PDAT></PTEXT></PARA>
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>The result data structure, KibitzResult, may be defined as follows.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00004">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0" PGWIDE="1">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="1" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="245PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>typedef</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>struct</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="224PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>KibitzKind</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>kind;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Unit</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>*unit;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>int</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>scopeCnt;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Symbol</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>*scopeList &lsqb;MAXSCOPES/*scopeCnt*/&rsqb;;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="4">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="63PT" ALIGN="LEFT">
<COLSPEC COLNAME="3" COLWIDTH="161PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Symbol</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>*proc;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// valid for KK_ARGUMENT and KK_STD_ARG</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Symbol</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>*formalArg;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// valid for KK_ARGUMENT</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>int</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>formalInx;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// valid for KK_STD_ARG, 1-based</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>unsigned</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>validTypes;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// valid for KK_TYPE, KK_STD_ARG</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Type</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>*validType;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// valid for KK_EXPR, KK_CONST_EXPR</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Token</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>validToken;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// valid for KK_TOKEN</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>TokenClass</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>validTokens;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// valid for KK_TOKENS</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Kibitzpos</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>pos;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// position of kibitz point</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>char</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>partialInden&lsqb;64&rsqb;;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// may have found a partial identifier</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="266PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>// KK ARGUMENT: where the parms were; &lsqb;0&rsqb; &lt;&equals;&gt; &lsquo;(&rsquo; &verbar; &lsquo;&lsqb;&rsquo; pos</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>LineCol&emsp;&emsp;&emsp;paramPos &lsqb;MAXPARAMS &plus; 1&rsqb;;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="280PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&rcub; &ensp;KibitzResult;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00083" LVL="7"><PTEXT><PDAT>As shown, the data structure is a record storing context information. Of the various data members of the record, the most important is KibitzKind, an numerated type indicating the &ldquo;kind&rdquo; of source code situations the system is currently in. The KibitzKind data type is itself defined as follows.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00005">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>typedef&emsp;&emsp;enum</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="77PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="126PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>KK_NONE,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// Not something we support</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>KK_FIELD,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// A field of a record/object/class</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>KK_ARGUMENT,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// An actual argument to a user-declared</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>// function or procedure</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="63PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="140PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>KK_STD_ARC,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// An actual argument to a standard</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><HIL><SP><PDAT>&emsp;</PDAT></SP></HIL><PDAT>function/procedure</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="77PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="126PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>KK_TYPE,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// A type</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>KK_EXPR,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// An expression</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>KK_STMT,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// A stmt</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>KK_CONST_EXPR,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// A constant expression</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>KK_TOKEN,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// A token</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>KK_TOKEN_CLASS,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// A set of tokens</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>KK_PROC_DECL,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// A procedure, function, method,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><HIL><SP><PDAT>&emsp;</PDAT></SP></HIL><PDAT>constructor,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>// or destructor declaration</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>KK_ERROR,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// Error case where we don&apos;t have</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><HIL><SP><PDAT>&emsp;</PDAT></SP></HIL><PDAT>enough info</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>KibitzKinds,</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;&emsp;&emsp;KibitzKind;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00084" LVL="7"><PTEXT><PDAT>Two simple types are KK_NONE and KK_ERROR. KK_NONE indicates that the cursor is currently positioned at a location where code completion is not supported, such as positions within a user&apos;s comment. KK_ERROR, on the other hand, indicates an error condition; this occurs when the user&apos;s program contains so many errors that the system cannot correctly determine appropriate code completion. The KK_FIELD data type indicates a field of a record (structure), object, or class. For instance, if the user types Form</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, a field member of Form</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> is expected. KK_ARGUMENT indicates that the system expects an actual argument to a user-declared function or procedure. Here, further restrictions can be imposed. If the argument is a var argument, then the argument must be a variable. If, on the other hand, the argument is a value, then an expression is acceptable.</PDAT></PTEXT></PARA>
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>KK_STD_ARG indicates that an actual argument to a compiler-defined, standard function/procedure is expected. Since such functions or procedures have special requirements, the system treats them separately. KK_TYPE indicates that the system expects a &ldquo;type,&rdquo; such as within a declaration statement. KK_EXPR indicates that an expression is expected. KK_STMT indicates that a statement is expected&mdash;that is, the system expects any valid identifier which can start a statement. Here, both a variable or procedure would be acceptable, for instance. KK_CONST_EXPR indicates that a constant expression is expected. This is typically employed for declarations, such as for string declarations. A type expression can be applied here, such as for indicating that an integer expression is required. KK_TOKEN and KK_TOKEN_CLASS indicate that the compiler is expecting a token or a particular type or class of token, respectively. In Borland Delphi&trade; (using Object Pascal), for instance, when an &ldquo;if&rdquo; token followed by a boolean expression is encountered, the compiler then expects a &ldquo;then&rdquo; token. KK_PROC_DECL indicates a procedure (function, method, or the like) declaration. In such a case, the system can display a list of all such procedures, functions, or methods which were forward declared.</PDAT></PTEXT></PARA>
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>Returning to the description of the KibitzResult structure, the second data member is unit. The unit data member points to a data structure (internal to the compiler) which represents the unit, as compiled by the compiler. This is followed by a scope count, scopeCnt, and a scope list, scopeList, for representing the available scopes at this particular point in the source code. For instance, when the user starts a statement within a procedure, all of the local symbols of the procedure represent one scope. If the procedure is in fact a class method, then all of the fields of &ldquo;self&rdquo; (i.e., of the &ldquo;self&rdquo; hidden parameter) would represent another scope. The symbols of the unit would represent still yet another scope. Still further, there are symbols of other units which the current unit employs giving rise to yet another scope. The scope count and scope list keep track of which of these scopes are available at a given point in the source (where the cursor is positioned). This information is ultimately used by the GetValidSymbols method which &ldquo;walks&rdquo; the scope list for determining the valid symbols for the current source position under exam.</PDAT></PTEXT></PARA>
<PARA ID="P-00087" LVL="0"><PTEXT><PDAT>The next data member, proc, is a pointer to a procedure symbol which is employed when the system is processing a call. The formalArg data member is a symbol pointer which points to the formal argument which the cursor is currently positioned at. For a function having three arguments, for example, the cursor could be positioned at the second argument. The next data member or field,formalInx, is an integer data member providing an index into the formal arguments. The validTypes data member is an internal encoding of the compiler which keeps track of which types will be valid at this point (in the source code). In the cases where the system expects an expression, such as an assignment into a variable, the pointer to validType references the valid type for the variable.</PDAT></PTEXT></PARA>
<PARA ID="P-00088" LVL="0"><PTEXT><PDAT>The next two data members, validToken and validtokens, keep track of the expected tokens and token class. A token class represents a scenario where several tokens can be valid. The next data member, pos, represents the position where the user&apos;s cursor is positioned in the source code. The pos data member is implemented as a record or structure of type KibitzPos which may be implemented as follows.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00006">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="168PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>typedef</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>struct</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="4">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="3" COLWIDTH="119PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>short</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>fileIndex;</PDAT></PTEXT></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>short</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>lineNo;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// up to here idential to SourcePos</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>short</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>columnNo;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// 1-based</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub; KibitzPos;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00089" LVL="7"><PTEXT><PDAT>As shown, the KibitzPos structure specifies a file (via an index), a line number, and a column number.</PDAT></PTEXT></PARA>
<PARA ID="P-00090" LVL="0"><PTEXT><PDAT>The next data member of KibitzResult is partialIden, which is employed for instances where the system has found a partial identifier. Here, the IDE will employ the information to perform an incremental search of available identifiers for attempting to find a match. As its final data member, the KibitzResult structure includes a parameter position array, paramPos. This indicates the source position of the actual parameter for a function call.</PDAT></PTEXT></PARA>
<PARA ID="P-00091" LVL="0"><PTEXT><PDAT>E. UnitNameFileNamePair data structure</PDAT></PTEXT></PARA>
<PARA ID="P-00092" LVL="0"><PTEXT><PDAT>The UnitNameFileNamePair data structure may be constructed as follows.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00007">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="63PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="112PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>typedef</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>struct</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="77PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="112PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>uchar</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>*unitName;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>char</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>*unitFileName;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="63PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="154PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub; UnitNameFileNamePair;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00093" LVL="7"><PTEXT><PDAT>This data structure is employed to keep track of unit names (e.g., simple Pascal names in Borland Delphi&trade;) and filenames (i.e., qualified by file directory and drive). The compiler employs this data structure for determining a filename (i.e., the name of a file on disk) which corresponds to a unit name encountered in the source code.</PDAT></PTEXT></PARA>
<PARA ID="P-00094" LVL="0"><PTEXT><PDAT>The system defines the following flags which are used when a list of identifiers are reported back from the compiler to the IDE, for keeping track of whether a particular identifier itself is acceptable or whether the identifier itself only has a field which would be acceptable.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00008">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="1" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="168PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>typedef</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>enum</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="5">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="63PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="3" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="4" COLWIDTH="98PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>GF_NORMAL</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>&equals; 0&times;00,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>//</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Normal case</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>GF_SCOPE</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>&equals; 0&times;01,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>//</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Symbol was included because it</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>has a scope</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>GF_METATOKEN</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>&equals; 0&times;02,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>//</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Symbol is a metatoken</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>(e.g. &lsquo;identifier&rsquo;)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="1" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>GF_Flags;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00095" LVL="7"><PTEXT><PDAT>This information is employed by the IDE to make a &ldquo;visual&rdquo; distinction between the two cases. Consider, for instance, an assignment statement involving an integer variable, as follows.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00009">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="168PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>var</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="63PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="154PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>I, j : Integer;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>r : TRect;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="168PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>begin</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="63PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="126PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>I :&equals;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// complete this statement</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00096" LVL="7"><PTEXT><PDAT>In the snippet above, I is an integer variable and, thus, the statement can be completed by assigning the integer j as follows.</PDAT></PTEXT></PARA>
<PARA ID="P-00097" LVL="1"><PTEXT><PDAT>I:&equals;j;</PDAT></PTEXT></PARA>
<PARA ID="P-00098" LVL="0"><PTEXT><PDAT>Alternatively, the statement can be completed by assigning an integer member of r (which itself is a variable of type TRect). To indicate these two choices, the IDE displays a list showing j normally and showing r with an ellipsis appended to it. This informs the user that r is acceptable but that the user has to still complete the entry with a dot (for accessing a field of r). In this case, the GF_SCOPE would be set for r, indicating that it is acceptable but only because it has a field which is acceptable.</PDAT></PTEXT></PARA>
<PARA ID="P-00099" LVL="0"><PTEXT><PDAT>F. Token-based processing</PDAT></PTEXT></PARA>
<PARA ID="P-00100" LVL="0"><PTEXT><PDAT>The basic internal operation of the system is as follows. As an initial task, the system lexical analyzer has to take the source position that the IDE passed to it and transform it into a special token. In general compiler operation, the function of the lexical analyzer is to take source text and transform it into a stream of tokens. Consider the following code snippet.</PDAT></PTEXT></PARA>
<PARA ID="P-00101" LVL="1"><PTEXT><PDAT>if I&equals;&verbar;0 then</PDAT></PTEXT></PARA>
<PARA ID="P-00102" LVL="7"><PTEXT><PDAT>(where &verbar; represents cursor position)</PDAT></PTEXT></PARA>
<PARA ID="P-00103" LVL="7"><PTEXT><PDAT>In operation, the lexical analyzer converts the expression into a sequence of tokens, for instance as follows.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00010">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="175PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if I &equals; &verbar; 0 then</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>(*</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Tokens:</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>TK_IF</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="70PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="147PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>TK_IDENT</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>TK_EQUAL</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="105PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="112PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>TK_KIBITZ</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="175PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>*)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00104" LVL="7"><PTEXT><PDAT>Here, &ldquo;if&rdquo; is represented by the TK_IF token, I is represented by the TK_IDENT (i.e., identifier) token, and so forth and so on. In accordance with the present invention, the scanner reports a special token, TK_KIBITZ, for marking the current cursor position. In this manner, the system is easily able to identify the cursor position in the stream of tokens.</PDAT></PTEXT></PARA>
<PARA ID="P-00105" LVL="0"><PTEXT><PDAT>Exemplary method steps for performing this operation are as follows.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00011">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>/*</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Lexical analyser (scanner) delivers special token (TK_KIBITZ) at</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>cursor position. The following method checks against stop line once</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>per line, then sets special marker character in the line buffer.</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>*/</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="196PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>void Scan(void)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="189PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>switch&emsp;&emsp;&emsp;&emsp;(GetNextInputChar())</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case&emsp;&emsp;&lsquo;&bsol;n&rsquo;:</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="182PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>scannerState. lineNum&plus;&plus;;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="168PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>( scannerState.lineNum &equals;&equals; stopline</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&amp;&amp; strcmp(scannerState.fileName, stopSrc) &equals;&equals; 0)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>/* set special character to mark stop position */</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>lineBuffer&lsqb;stopCol&rsqb; &equals; 0;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="182PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>break;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="189PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case&emsp;0:</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="168PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>(scannerState.column &equals;&equals; stopCol)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>token.tok &equals; TK_KIBITZ;&emsp;&emsp;// insert special token</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>break;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="182PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>/* . . . */</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00106" LVL="0"><PTEXT><PDAT>As shown, the implementation comprises a &ldquo;switch&rdquo; statement over the next input character (i.e., from the source code stream). Two special cases are of interest. The first case of interest is a line feed character. Upon reaching such an input character, the system at this case arm checks whether the current line number and filename correspond to that specified for the &ldquo;stop&rdquo; source (i.e., the source file where the user&apos;s cursor is positioned). As shown above, the line number is examined first so that the system can perform an integer comparison first, before a more expensive string comparison is undertaken. In the event that the line number and source filename indicate that the current input character corresponds to the cursor position, the system proceeds to mark the current line (maintained in a line buffer) with a special character, such as zero (i.e., NULL).</PDAT></PTEXT></PARA>
<PARA ID="P-00107" LVL="0"><PTEXT><PDAT>After the line is marked, the system &ldquo;switches&rdquo; on subsequent input characters until it encounters the value of zero (i.e., the special character inserted above to mark the stop position). The system at this point confirms that this is the position of interest by comparing the current column (in the source stream) with the column from the IDE. If the current column is equal to the column where the system wishes to stop, then the system inserts the special token&mdash;TK_KIBITZ&mdash;that tells the parser to stop at this point. This method step of the scanner illustrates the transformation from a stop source, a stop line, and a stop column to a special token which instructs the parser where to stop.</PDAT></PTEXT></PARA>
<PARA ID="P-00108" LVL="0"><PTEXT><PDAT>The parser in turn compiles the source normally, including the declaration, until it encounters the special token. During this compilation, however, the parser will skip compilation of function bodies unless a particular function body contains the special token. For code completion, in accordance with the present invention, the code contained within function bodies (apart from a current function which the user cursor might be positioned within) is not relevant. Since function bodies are skipped, no code is generated for those function bodies and the background compilation for code completion, therefore, occurs quickly.</PDAT></PTEXT></PARA>
<PARA ID="P-00109" LVL="0"><PTEXT><PDAT>During processing, the parser maintains a stack of &ldquo;kibitz&rdquo; contexts. When the parser encounters a TK_KIBITZ token, it returns the context information back to the IDE. This is illustrated, for instance, by the following snippet.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00012">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>variable :&equals; FooFunction( a, b, &verbar;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="189PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>{circumflex over (&thinsp;)} KK_EXPR, type of variable</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="63PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="154PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>{circumflex over (&thinsp;)} KK_ARGUMENT, FooFunction</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="98PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="119PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>{circumflex over (&thinsp;)} Argument 3, formal parameter</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="LEFT"><PTEXT><FOO ID="FOO-00001"><PTEXT><PDAT>Note: </PDAT></PTEXT></FOO></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="LEFT"><PTEXT><FOO ID="FOO-00002"><PTEXT><PDAT>Parser keeps stack of kibitz contexts (on the runtime stack, for a recursive decent parser), and returns the information back to the IDE when it finds the TK</PDAT><HIL><SB><PDAT>13 </PDAT></SB></HIL><PDAT>KIBITZ token. </PDAT></PTEXT></FOO></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00110" LVL="0"><PTEXT><PDAT>An exemplary method for skipping the body of functions, using the kibitz token, may be constructed as follows.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00013">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>/*</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Parser parses declarations fully, tries to skip function bodies,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>suppresses code generation. Routine to skip keeps track of nesting of</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>structured statements, returns TRUE if the function body was</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>skipped, FALSE otherwise.</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>*/</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>static&emsp;&emsp;int&emsp;&emsp;SkipBody(void)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="175PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>int</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>nestLevel;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>long</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>startPos;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="196PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>startPos &equals; ScannerPos();</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>nestLevel &equals; 0;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>while&emsp;&emsp;(1)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="189PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>switch&emsp;&emsp;&emsp;(token.tok)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="161PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TK_CASE:</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TK_TRY:</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TK_ASM:</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TK_INITIALIZATION:</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="5">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="56PT" ALIGN="LEFT">
<COLSPEC COLNAME="3" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="4" COLWIDTH="56PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TK_BEGIN:</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>nestLevel&plus;&plus;;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>break;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TK_END:</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>nestLevel&minus;&minus;;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>break;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="5">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="56PT" ALIGN="LEFT">
<COLSPEC COLNAME="3" COLWIDTH="56PT" ALIGN="LEFT">
<COLSPEC COLNAME="4" COLWIDTH="49PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TK_EOF:</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>nestLevel &equals; &minus;1;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>break;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TK_KIBITZ:</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="182PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>ScannerSeek(startPos);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Scan();</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>return&emsp;&emsp;&emsp;FALSE;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="189PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if&emsp;&emsp;(nestLevel &lt; 0)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="182PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>break;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="189PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Scan();</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="196PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>return&emsp;&emsp;TRUE;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00111" LVL="0"><PTEXT><PDAT>The SkipBody method is invoked when the parser detects the beginning of a function body. The method operates as follows. At the outset, the method remembers the current position, as storing it to startPos. Next, the method initializes a local variable, nestLevel, which serves to keep track of the nesting of structured statements. This is followed by a &ldquo;while&rdquo; loop which switches on token. In operation, the loop reads a token and then switches to a particular case arm based on token type. If the token type marks the beginning of a structured statement, the nestLevel countered is incremented. Conversely, if this token marks the end of a structured statement, nestLevel is decremented. If the method encounters the special &ldquo;kibitz&rdquo; token, it returns to the beginning of the function by invoking ScannerSeek. Thereafter, the method returns &ldquo;false&rdquo; as the method has not been skipped. After completing execution of the switch statement, the method can determine whether it has found the final end of the function.</PDAT></PTEXT></PARA>
<PARA ID="P-00112" LVL="0"><PTEXT><PDAT>In summary, the basic approach is to go through the function as fast as possible (i.e., look through the tokens of the function as fast as possible), keeping track of nesting. If the end is encountered, the method can return true. If, on the other hand, a special &ldquo;kibitz&rdquo; token is encountered, the method repositions the parser (scanner) to the beginning of the function and returns &ldquo;false.&rdquo; In such a case, the parser will resume parsing forward as more detail about the function is required, since it is the function where the user&apos;s cursor is positioned.</PDAT></PTEXT></PARA>
<PARA ID="P-00113" LVL="0"><PTEXT><PDAT>G. Scopes</PDAT></PTEXT></PARA>
<PARA ID="P-00114" LVL="0"><PTEXT><PDAT>While parsing, the compiler keeps track of accessible scopes. For instance, when entering a particular statement, the parser enters a scope, and at the end of the statement the parser exits the scope. Scopes that are accessible include &ldquo;with&rdquo; scopes (i.e., Pascal with statements), local symbols of any current procedures the parser is within, the symbols of the current unit (i.e., symbols global to the unit), and symbols of any units employed by the current unit (i.e., imported symbols).</PDAT></PTEXT></PARA>
<PARA ID="P-00115" LVL="0"><PTEXT><PDAT>In order to handle method function calls directly, the parser maintains a stack of contexts which it is in. Just as the computer system stack must maintain a separate copy of local variables for each function invocation, the parser mirrors the approach so that it can keep track of the appropriate context. During parsing of a function call, for instance, when the parser encounters the left paren (i.e., opening parenthesis), the parser &ldquo;pushes&rdquo; onto its stack information indicating it is now parsing within the context of a function argument. When the parser has parsed the right paren (i.e., closing parenthesis), the parser &ldquo;pops&rdquo; the previously-pushed stack entry, for indicating that it is no longer within the context of function argument. If the function call occurred in an assignment statement, for instance, the context information would indicate at this point that the parser is popping back into the context of an expression. In the instance of nested function calls (e.g., recursion), the stack would contain entries for different argument contexts.</PDAT></PTEXT></PARA>
<PARA ID="P-00116" LVL="0"><PTEXT><PDAT>When in the context of an argument list for either a user-declared or standard function, the IDE employs ancillary or helper functions, to get information pertaining to the function and parameter symbols. Exemplary helper functions include the following (shown in function prototype form).</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00014">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="1" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="203PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>/*</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>In the case of KK_ARGUMENT or KK_STD_ARG, we are in a</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>call to a user-declared or standard function, respectively. The IDE</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>uses the information in the result record and the following compiler</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>entry points to build a parameter list to show to the user:</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>*/</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="196PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>int EXPORT GetSymbols(Symbol *root, SQ_Flags flags,</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="189PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Symbol **symList);</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="196PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>/* used to get the parameters of a procedure/function/method */</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>GSF_Flags EXPORT GetSymbolFlags (Symbol *sym);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>/* used to get information about parameter and function symbols */</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>void EXPORT GetSymbolText(Symbol *sym, String text,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>ST_Flags flags);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>/* used to get names of symbols */</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Symbol *EXPORT GetResultType(Symbol *sym);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>/* used to get the result type of a function */</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00117" LVL="0"><PTEXT><PDAT>The GetSymbols method is employed to get the parameters (symbols) of a called procedure, function, or method. The root parameter is the routine being called; this is obtained from the result record. The SQ_Flags parameter is employed to indicate whether the GetSymbols routine should return parameter information. The symList parameter is a pointer to a result vector, which is employed for returning the parameters. The GetSymbolFlags method is employed for getting additional information about parameter and function symbols, such as whether a parameter is a var or const parameter. The routine can also be invoked on the procedure or function symbol itself for determining whether the symbol is a procedure, function, or method. The GetSymbolText method is employed to get the actual text for a symbol, such as the actual name of a parameter. The routine can also be used (with a particular flag setting) to get the name of the type of symbol. This information is used by the IDE to construct the parameter list for display to users. The GetResultType routine is employed to get the result type of a function (i.e., the symbol that represents the result type of a function). After obtaining this symbol, the IDE in turn can invoke GetSymbolText for getting the text or name for the symbol.</PDAT></PTEXT></PARA>
<PARA ID="P-00118" LVL="0"><PTEXT><PDAT>H. Determining valid symbols</PDAT></PTEXT></PARA>
<PARA ID="P-00119" LVL="0"><PTEXT><PDAT>As previously described, the GetValidSymbols method is employed to get a list of valid symbols. As previously described, the IDE will usually invoke the method twice; first, to get a count of valid symbols, and second to actually get the result (of symbols). In all cases except KK_NONE and KK_ERROR, the IDE can request a list of valid symbols via GetValidSymbols. As the IDE has no way of knowing how much space needs to be allocated for the result, the usual procedure is to call GetValidSymbols with a result and flags parameter of 0 in which case only the count of valid symbols will be reported. After allocating big enough buffers, the system can pass the information to a second call with otherwise identical parameters. Internally, GetValidSymbols typically invokes logic steps that traverse or walk all accessible scopes, applying to each symbol found in a &ldquo;validation&rdquo; function that checks whether the symbol would be accessible. Next, the routine invokes additional logic steps for examining each symbol for determining whether it is valid in the current context. If the symbol would be acceptable, it is reported to the IDE; if not, on the other hand, it is skipped.</PDAT></PTEXT></PARA>
<PARA ID="P-00120" LVL="0"><PTEXT><PDAT>An exemplary validation function for the context KK_CONST_EXPR (i.e., constant expression), for instance, may be constructed as follows (simplified for clarity of description).</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00015">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>static&emsp;int&ensp;ValidConstExpr(const KibitzResult *k, Symbol *actualArg)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="161PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Type</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>*argType;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>(actualArg&minus;&gt;kind  &excl;&equals; SY_CONST)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="140PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>return</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>FALSE;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="161PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>return</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>IsAssCompat (k&minus;&gt;validType,  actualArg&minus;&gt;type);</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="203PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00121" LVL="7"><PTEXT><PDAT>As shown, the function first checks whether the symbol is a constant; if not, the symbol is immediately rejected. If the symbol is a constant, the function then determines whether it is assignment compatible with the type which is expected. The function returns &ldquo;true&rdquo; if the symbol is assignment compatible; otherwise, the function returns &ldquo;false.&rdquo;</PDAT></PTEXT></PARA>
<PARA ID="P-00122" LVL="0"><PTEXT><PDAT>Routines are provided for walking different kinds of scopes. A routine that traverses the list of local symbols for a unit, for instance, may be embodied as follows.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00016">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0" PGWIDE="1">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="273PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>static&emsp;int&ensp;WalkUnitLocals(Symbol *sym, const KibitzResult *k,</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Symbol **result, GF_Flags *flags, int maxCnt, ValidSymbolProc *v)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="273PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Type&emsp;&emsp;*t;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>int&emsp;&emsp;&emsp;cnt;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>cnt &equals; 0;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>for&emsp;&emsp;( ; sym; sym &equals; sym&minus;&gt;next)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="98PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="154PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if&emsp;&emsp;(cnt &gt;&equals; maxCnt)</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// stop if we reached the maximum count</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>return&emsp;&emsp;cnt;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if&emsp;&emsp;(sym&minus;&gt;name&lsqb;0&rsqb; &lt; &lsquo;A&rsquo;)</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// skip invisible, compiler-generated</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>continue;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// symbols</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if&emsp;&emsp;(sym&minus;&gt;decLevel &excl;&equals; 0)</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// skip local procedures</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>continue;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if&emsp;&emsp;(v(k, sym, 0))</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// is this symbol acceptable&quest;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if&emsp;&emsp;(result)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="84PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="154PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>result&lsqb;cnt&rsqb; &equals; sym;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// yes: report it back</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if&emsp;&emsp;(flags)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="238PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>flags&lsqb;cnt&rsqb; &equals; GF_NORMAL;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>cnt&plus;&plus;;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="140PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="112PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>else if&emsp;&emsp;(SymbolHasScope(sym, 0, k, v))</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// does it have an</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// acceptable field</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if&emsp;&emsp;(result)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="84PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="154PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>result&lsqb;cnt&rsqb; &equals; sym;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// yes: report it</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if (flags)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="84PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="154PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>flags&lsqb;cnt&rsqb; &equals; GF_SCOPE;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// and flag it as such</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>cnt&plus;&plus;;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="252PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>return&emsp;&emsp;cnt;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="273PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00123" LVL="7"><PTEXT><PDAT>The method is invoked with the following parameters: a list of symbols (i.e., local symbols of the unit), a result record, a result vector, a flags parameter, a maximum count, and a pointer to a validation procedure. In operation, the method traverses the symbol list, keeping track of the count of acceptable symbols. At the &ldquo;for&rdquo; loop, the method determines whether it already has a sufficient number of symbols; if so, the method is done and may return. Otherwise, the method enters the &ldquo;for&rdquo; loop.</PDAT></PTEXT></PARA>
<PARA ID="P-00124" LVL="0"><PTEXT><PDAT>Within the &ldquo;for&rdquo; loop, the method skips compiler-generated names; these will have names which are not legal for the underlying computer language (e.g., Pascal). Next, the method skips objects which are not at the global declaration level, such as local functions. If the symbol passes these tests, the method applies a validation function to it. If the validation function returns &ldquo;true,&rdquo; then the symbol is flagged as a normal symbol. Even if the symbol is not accepted by the validation function, it might nevertheless have a field which is acceptable (e.g., a member field of a structure). If the symbol (or a field of a symbol) is acceptable, it is added to the result array; corresponding flags for the symbol are set in the flags array. As an optimization, the IDE performs a CompilerKibitz call in the background at certain times, so used units, source files, and the like get loaded into the compiler or the operating system&apos;s disk cache.</PDAT></PTEXT></PARA>
<PARA ID="P-00125" LVL="0"><PTEXT><PDAT>I. Avoiding infinite cycles</PDAT></PTEXT></PARA>
<PARA ID="P-00126" LVL="0"><PTEXT><PDAT>A particular difficulty is encountered when determining whether a structure has an acceptable field. If precautions are not taken, the system might be trapped in a &ldquo;cycle.&rdquo; Consider, for instance, a TForm data structure. A TForm structure often includes components which are themselves of type TForm. Accordingly, extra care is required to avoid infinite incursion when traversing or walking a field list of a structure.</PDAT></PTEXT></PARA>
<PARA ID="P-00127" LVL="0"><PTEXT><PDAT>To prevent this problem, the system adopts the following approach. For each type examined, the system keeps track of the &ldquo;state&rdquo; of the type&mdash;that is, what the system knows about the type. In an exemplary embodiment, four states are defined as follows.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00017">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>// states a type can be in - all types start out as TS_UNKNOWN</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="1" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="175PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>typedef</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>enum</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="4">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="63PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="3" COLWIDTH="126PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>TS_UNKNOWN,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>//</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>don&apos;t know whether this type is acceptable</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>TS_FALSE,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>//</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>know this type is not acceptable</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>TS_TRUE,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>//</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>know this type is acceptable</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>TS_ACTIVE,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>//</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>working to find out whether this type is</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>acceptable</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="1" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="196PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TypeState;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00128" LVL="7"><PTEXT><PDAT>The first state, TS_UNKNOWN, indicates that the system does not know whether the type is acceptable. The second state, TS_FALSE, indicates that the system knows that the type is not acceptable. As an example of use, an assignment statement which assigns a floating point variable to an integer variable will not be acceptable and, thus, would be identified as TS_FALSE. TS_TRUE, the third state, indicates that the type is acceptable. Finally, TS_ACTIVE indicates a state where the system is working to determine whether the type is acceptable.</PDAT></PTEXT></PARA>
<PARA ID="P-00129" LVL="0"><PTEXT><PDAT>A method, SymbolHasScope, for determining whether a symbol has an acceptable type for a given context may be constructed as follows.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00018">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0" PGWIDE="1">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="273PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>// find out whether a symbol with acceptable type can be reached</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>// from type</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>static int SymbolHasScope(Type *type, const KibitzResult *k,</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>ValidSymbolProc *v)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="273PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="224PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Type</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>*type;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>switch</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>&emsp;(type&minus;&gt;g.form)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="4">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="63PT" ALIGN="LEFT">
<COLSPEC COLNAME="3" COLWIDTH="161PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TF_CLASSREF:</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// only these types have scopes at all</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TF_INSTANCE:</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TF_RECORD:</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TE_OBJECT:</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="252PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>switch&emsp;&emsp;&emsp;(GetTypeState (type))</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="4">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="119PT" ALIGN="LEFT">
<COLSPEC COLNAME="3" COLWIDTH="105PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TS_TRUE:&emsp;&emsp;return&emsp;&emsp;TRUE;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// know the answer is TRUE</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TS_FALSE:&emsp;&emsp;return&emsp;&emsp;FALSE;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// know the answer is FALSE</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TS_ACTIVE:&emsp;&emsp;return&emsp;&emsp;FALSE;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// cut off recursion here</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>case</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TS_UNKNOWN:</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// need to do some work here</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="238PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>SetTypeState(type, TS_ACTIVE);</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="133PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="105PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>if&emsp;&emsp;(WalkFieldScope(type, k, v))</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// any acceptable fields&quest;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="126PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="105PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>SetTypeState(type, TS_TRUE);</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// yes: remember</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>return&emsp;&emsp;TRUE;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>answer is TRUE</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="238PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>else</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="126PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="105PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>SetTypeState(type, TS_FALSE);</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// no: remember</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>return&emsp;&emsp;FALSE;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// anser is FALSE</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="238PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="252PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>default:</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="147PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="105PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>return&emsp;&emsp;FALSE;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// type doesn&apos;t have scope</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="273PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00130" LVL="7"><PTEXT><PDAT>As shown, the method is implemented as a large case or &ldquo;switch&rdquo; statement which serves to determine whether the type has any scope at all (i.e., has fields). If it does have a scope, the method proceeds to retrieve the state of the type. This state is tested by a nested &ldquo;switch&rdquo; statement. If the state is known to be true (TS_TRUE) or false (TS_FALSE), the method can return &ldquo;true&rdquo; or &ldquo;false,&rdquo; respectively. If, on the other hand, the state is &ldquo;active&rdquo; (TS_ACTIVE), the method returns &ldquo;false,&rdquo; for presenting incursion or reentry.</PDAT></PTEXT></PARA>
<PARA ID="P-00131" LVL="0"><PTEXT><PDAT>If the type is unknown, the method proceeds to determine the type as follows. First, if type state is set to &ldquo;active&rdquo; (TS_ACTIVE), for indicating that the system is in the process of determining the state. Next, the method traverses or walks the list of symbols for this scope, by invoking a WalkFieldScope helper routine. This call will determine whether the structure has a field which is accepted by the validation function. If it is acceptable, WalkFieldScope will return &ldquo;true,&rdquo; whereupon the state of the type can be set to &ldquo;true&rdquo; (TS_TRUE). Otherwise, the state is set to &ldquo;false&rdquo; (TS_FALSE). Also, if the type does not have a scope, the SymbolHasScope method returns &ldquo;false.&rdquo;</PDAT></PTEXT></PARA>
<PARA ID="P-00132" LVL="0"><PTEXT><PDAT>As an optimization to avoid having to initialize all types to TS_UNKNOWN before calling the above routine, an additional table and an auxiliary field in the type structure is used to cache type results as follows.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00019">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="147PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>type </PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>struct</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="4">
<COLSPEC COLNAME="OFFSET" COLWIDTH="35PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="3" COLWIDTH="84PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>TypeState</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT> typeState;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// state of the type</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Type</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>*type;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>// pointer back to type</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="168PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TypeEntry;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="4">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="3" COLWIDTH="98PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>static</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>TypeEntry</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT> *typeTab;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>static</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>ulong</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>typeCnt;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>static</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>ulong</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>maxCnt;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="3" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00133" LVL="7"><PTEXT><PDAT>Here, the system can index into the table for determining whether the type has already been processed before.</PDAT></PTEXT></PARA>
<PARA ID="P-00134" LVL="0"><PTEXT><PDAT>While the invention is described in some detail with specific reference to a single-preferred embodiment and certain alternatives, there is no intent to limit the invention to that particular embodiment or those specific alternatives. Thus, the true scope of the present invention is not limited to any one of the foregoing exemplary embodiments but is instead defined by the appended claims.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00135" LVL="0"><PTEXT><PDAT>1. In a development system, a method for assisting a user with inputting source code for a computer program, the method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>detecting a need for assisting the user with input for a source code module under development; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining a current cursor position representing a location in the source code module where the user is currently providing input; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining input items which are suitable for input in the source code module at the current cursor position; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>displaying to the user a list of said suitable input items; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>in response to selection by the user of a particular item from the list, automatically completing input at the current cursor position; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein said detecting step includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>determining instances in the source code module where the system can automatically provide input; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein said detecting step includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>determining in the source code module use of a structure variable which references a nested data member. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00136" LVL="0"><PTEXT><PDAT>2. In a development system, a method for assisting a user with inputting source code for a computer program, the method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>detecting a need for assisting the user with input for a source code module under development; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining a current cursor position representing a location in the source code module where the user is currently providing input; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining input items which are suitable for input in the source code module at the current cursor position; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>displaying to the user a list of said suitable input items; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>in response to selection by the user of a particular item from the list, automatically completing input at the current cursor position; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein said current cursor position comprises a line number and a column position for a particular source code file. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00137" LVL="0"><PTEXT><PDAT>3. In a development system, a method for assisting a user with inputting source code for a computer program, the method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>detecting a need for assisting the user with input for a source code module under development: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining a current cursor position representing a location in the source code module where the user is currently providing input; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining input items which are suitable for input in the source code module at the current cursor position: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>displaying to the user a list of said suitable input items; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>in response to selection by the user of a particular item from the list, automatically completing input at the current cursor position; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein said step of determining input items which are suitable for input in the source code module includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>determining which variables are within scope for the current cursor position; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>eliminating as a suitable input item any item that is not within scope for the current cursor position; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein said step of determining input items which are suitable for input in the source code module at the current cursor position includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>compiling the source code module up to the current cursor position. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00138" LVL="0"><PTEXT><PDAT>4. In a development system, a method for assisting a user with inputting source code for a computer program, the method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>detecting a need for assisting the user with input for a source code module under development; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining a current cursor position representing a location in the source code module where the user is currently providing input; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining input items which are suitable for input in the source code module at the current cursor position; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>displaying to the user a list of said suitable input items; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>in response to selection by the user of a particular item from the list, automatically completing input at the current cursor position; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein said step of determining input items which are suitable for input in the source code module includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>determining which variables are within scope for the current cursor position; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>eliminating as a suitable input item any item that is not within scope for the current cursor position; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein said step of compiling the source code module up to the current cursor position includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>skipping compilation of any method defined in the source code unless the cursor is currently positioned within the method. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00139" LVL="0"><PTEXT><PDAT>5. In a development system, a method for assisting a user with inputting source code for a computer program, the method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>detecting a need for assisting the user with input for a source code module under development; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining a current cursor position representing a location in the source code module where the user is currently providing input; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining input items which are suitable for input in the source code module at the current cursor position; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>displaying to the user a list of said suitable input items; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>in response to selection by the user of a particular item from the list, automatically completing input at the current cursor position; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein said list of suitable input items includes items which are suitable by virtue of having a nested member which is suitable.</PDAT></PTEXT></CLMSTEP>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314559-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314559-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314559-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314559-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314559-20011106-D00004.TIF">
<EMI ID="EMI-D00005" FILE="US06314559-20011106-D00005.TIF">
<EMI ID="EMI-D00006" FILE="US06314559-20011106-D00006.TIF">
<EMI ID="EMI-D00007" FILE="US06314559-20011106-D00007.TIF">
<EMI ID="EMI-D00008" FILE="US06314559-20011106-D00008.TIF">
<EMI ID="EMI-D00009" FILE="US06314559-20011106-D00009.TIF">
<EMI ID="EMI-D00010" FILE="US06314559-20011106-D00010.TIF">
<EMI ID="EMI-D00011" FILE="US06314559-20011106-D00011.TIF">
<EMI ID="EMI-D00012" FILE="US06314559-20011106-D00012.TIF">
<EMI ID="EMI-D00013" FILE="US06314559-20011106-D00013.TIF">
<EMI ID="EMI-D00014" FILE="US06314559-20011106-D00014.TIF">
<EMI ID="EMI-D00015" FILE="US06314559-20011106-D00015.TIF">
<EMI ID="EMI-D00016" FILE="US06314559-20011106-D00016.TIF">
<EMI ID="EMI-D00017" FILE="US06314559-20011106-D00017.TIF">
<EMI ID="EMI-D00018" FILE="US06314559-20011106-D00018.TIF">
<EMI ID="EMI-D00019" FILE="US06314559-20011106-D00019.TIF">
<EMI ID="EMI-D00020" FILE="US06314559-20011106-D00020.TIF">
<EMI ID="EMI-D00021" FILE="US06314559-20011106-D00021.TIF">
<EMI ID="EMI-D00022" FILE="US06314559-20011106-D00022.TIF">
<EMI ID="EMI-D00023" FILE="US06314559-20011106-D00023.TIF">
<EMI ID="EMI-D00024" FILE="US06314559-20011106-D00024.TIF">
<EMI ID="EMI-D00025" FILE="US06314559-20011106-D00025.TIF">
<EMI ID="EMI-D00026" FILE="US06314559-20011106-D00026.TIF">
<EMI ID="EMI-D00027" FILE="US06314559-20011106-D00027.TIF">
<EMI ID="EMI-D00028" FILE="US06314559-20011106-D00028.TIF">
<EMI ID="EMI-D00029" FILE="US06314559-20011106-D00029.TIF">
<EMI ID="EMI-D00030" FILE="US06314559-20011106-D00030.TIF">
<EMI ID="EMI-D00031" FILE="US06314559-20011106-D00031.TIF">
<EMI ID="EMI-D00032" FILE="US06314559-20011106-D00032.TIF">
<EMI ID="EMI-D00033" FILE="US06314559-20011106-D00033.TIF">
<EMI ID="EMI-D00034" FILE="US06314559-20011106-D00034.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314560-20011106-D00000.TIF SYSTEM "US06314560-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314560-20011106-D00001.TIF SYSTEM "US06314560-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314560-20011106-D00002.TIF SYSTEM "US06314560-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314560-20011106-D00003.TIF SYSTEM "US06314560-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314560-20011106-D00004.TIF SYSTEM "US06314560-20011106-D00004.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314560</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>09616467</PDAT></DNUM></B210>
<B211US><PDAT>09</PDAT></B211US>
<B220><DATE><PDAT>20000714</PDAT></DATE></B220>
</B200>
<B500>
<B510>
<B511><PDAT>G06F  945</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>717  5</PDAT></B521>
<B522><PDAT>717  7</PDAT></B522>
<B522><PDAT>712216</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Method and apparatus for a translation system that aggressively optimizes and preserves full synchronous exception state</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5428807</PDAT></DNUM>
<DATE><PDAT>19950600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>McKeen et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>712216</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5551015</PDAT></DNUM>
<DATE><PDAT>19960800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Goettelmann et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  5</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6031992</PDAT></DNUM>
<DATE><PDAT>20000200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Cmelik et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  5</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
</B560>
<B570>
<B577><PDAT>16</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>717  5</PDAT></B582>
<B582><PDAT>717  7</PDAT></B582>
<B582><PDAT>712 23</PDAT></B582>
<B582><PDAT>712216</PDAT></B582>
<B582><PDAT>712228</PDAT></B582>
</B580>
<B590><B595><PDAT>4</PDAT></B595><B596><PDAT>7</PDAT></B596><B597US>
</B590>
</B500>
<B600>
<B620><PARENT-US><CDOC><DOC><DNUM><PDAT>09/616467</PDAT></DNUM></DOC></CDOC><PDOC><DOC><DNUM><PDAT>09/109467</PDAT></DNUM><DATE><PDAT>19980702</PDAT></DATE><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>00</PDAT></KIND></DOC></PDOC><PSTA><PDAT>00</PDAT></PSTA></PARENT-US></B620>
</B600>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>David A.</PDAT></FNM><SNM><STEXT><PDAT>Dunn</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>San Jose</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>William B.</PDAT></FNM><SNM><STEXT><PDAT>Buzbee</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Half Moon Bay</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Hewlett-Packard Company</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Palo Alto</PDAT></CITY><STATE><PDAT>CA</PDAT></STATE></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>02</PDAT>
</B732US>
</B730>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Kakali</PDAT></FNM><SNM><STEXT><PDAT>Chaki</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Hoang-Vu Antony</PDAT></FNM><SNM><STEXT><PDAT>Nguyen-Ba</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2122</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A translating software emulator designed for converting code from a legacy system to a target system and fully preserving the synchronous exception state while still allowing for full and aggressive optimization in the translation. A user application is translated to a target system using full optimization techniques. The translation may be done dynamically by an emulator emulating the legacy system on the target system, or the translation may be a static translation or a compilation, fully generating a new executable program operable on the target system. The invention recovers from the exception properly by restoring the target machine state to the machine state expected by the legacy system. This recovery is done by using an exception delivery mechanism to restore the machine state of the target system before executing the exception handling code. The restoration of the machine state is done by executing a recovery block generated by the translation that modifies the machine state to match the legacy machine state.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<RELAPP>
<BTEXT>
<H LVL="1"><STEXT><PDAT>CROSS REFERENCE TO RELATED APPLICATION(S)</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>This is a divisional of copending application Ser. No. 09/109,467 filed on Jul. 2, 1998.</PDAT></PTEXT></PARA>
</BTEXT>
</RELAPP>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>FIELD OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>The present invention lies in the field of software emulation and, more specifically, is directed to faithfully handling exceptions in the context of emulating a user application.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>Software emulation systems use a combination of instruction interpretation and instruction translation to run a program originally written for an old machine architecture on a new architecture. This technology can also be used to emulate a program for one architecture on the same architecture for the purposes of profiling that program, or on one architecture for emulating another implementation of that architecture, e.g. a different micro-architecture.</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>An instruction emulator maintains an emulated state that models the state of the legacy architecture. During emulation, the emulator modifies the emulated machine state in the same way that the machine state would have been modified had the program executed on the legacy architecture.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>&ldquo;Instruction interpretation&rdquo; examines the effects of each instruction in the legacy program&mdash;one instruction at a time&mdash;and reproduces that instruction&apos;s affects on the emulated state stored on the new platform. &ldquo;Instruction translation&rdquo; refers to a more sophisticated process in which multiple instructions, i.e. blocks of code, are translated into a functionally equivalent new block of code executable on the new platform. The new block of code executes more efficiently than would result from simple instruction interpretation. The main benefit is removing the software fetch/decode logic involved with software interpretation. This process of translation may include optimizations that re-order the instructions in the translated code. However, this reordering must not change the behavior of the emulated program. Frequently a combination of both instruction interpretation and instruction translation is employed to emulate a given user application successfully.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>In addition to emulating the semantics of the old instruction set, the emulator must deliver exceptions to the emulated process in a manner consistent with the old system. &ldquo;Exceptions&rdquo; can be briefly defined as unexpected or unusual conditions that arise during execution. An exception generally arises in the hardware and is communicated to the operating system (&ldquo;OS&rdquo;). The OS in some cases &ldquo;delivers&rdquo; the exception to the user application. Exceptions can be classified as either synchronous or asynchronous. Synchronous exceptions arise as a direct result of executing an instruction. Examples are arithmetic conditions like overflow or divide by 0, privilege or &ldquo;permission&rdquo; faults, etc. In general, the instruction has done something or attempts to do something illegal or exceeding available resources. Asynchronous exceptions are those caused by something external to the program. Examples are timer interrupts, communications with other programs (messages), etc. These can arise at any time and thus are &ldquo;asynchronous&rdquo; to the executing program. Since this invention deals with the recovery from synchronous exceptions, any further reference to an exception will mean a synchronous exception.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>Typically, when an operating system (&ldquo;OS&rdquo;) generates an exception notice to an application, the OS places a &ldquo;context structure&rdquo; on the application&apos;s stack. The context structure contains a snapshot of the machine state, plus information about interrupted system calls, if any. The machine state is restored according to the context structure when the exception handler returns. The exception handler may also modify the machine state contained in the context structure, and any such modifications are propagated to the real machine state by the OS.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>One challenge involved in emulation of code designed for one architecture (the legacy platform) on the machine of a different architecture (the target platform) occurs in systems that support the handling of synchronous exceptions. When the conditions that would cause a synchronous exception in the original code occur, the translation system must ensure that the modeled state (the target machine state) is consistent with the &ldquo;legacy machine state&rdquo;. For the purposes of this application, we define the &ldquo;legacy machine state&rdquo; as the machine state that would exist at the relevant time on the legacy platform had the original code executed on the legacy platform. This consistency is difficult to maintain in an aggressively optimizing translator. Optimization can re-arrange the order of execution of code and when an exception occurs, the target machine state does not match the legacy machine state, the state expected by the old program.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>Traditional translators deal with this problem in one of three ways. One method is to ignore the problem and simply disallow examination of local variables in exception handlers. A second method is to use barrier logic to prevent optimization at synchronous exception points. This method severely restricts the ability to optimize a translation because it limits the ability to re-order the sequence of instructions.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>A third known method allows for limited reordering in optimization by using a scheme of renaming registers. This method allows for reordering of instructions to &ldquo;assign early&rdquo;, that is, optimizing by using a register to store a value that was to be assigned to a memory location later. The state of the machine can be restored if an exception occurs in a load instruction by filling in the proper memory locations using the values temporarily stored in the renamed registers. Since any load instruction may potentially cause an exception, however, this method does not allow for re-orderings that &ldquo;assign late&rdquo;. Assignment instructions can not be moved after a load instruction if the proper legacy machine state is to be preserved. This limitation does not allow for full and aggressive optimization in a software translation.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>Therefore, there is a need for a system and method to translate existing software to a new architecture that fully preserves the synchronous exception state while still allowing for full and aggressive optimization in the translation.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>The present invention provides a system and a method to transfer software to a new architecture with full and aggressive optimization while still providing full preservation of the legacy machine state for handling exceptions. According to one aspect of the invention, when an exception is detected during execution on the target (new) platform, the machine state is modified to a state anticipated by the original code. This &ldquo;legacy machine state&rdquo; is presented to the exception handling routine, as further explained below.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>In one embodiment of the invention, the transfer of software to a new architecture is done with the use of a translator. This embodiment starts with a user application designed for execution on a legacy platform. The translator can be an emulator, dynamically translating the user application to instructions that operate on the target computer as the operation of the user application dictates. The translator can also be a static translator or a compiler, fully creating a new executable program that executes later on the target platform.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>An effective translator optimizes the instructions it creates to most efficiently utilize the architecture of the target platform. In optimizing, the translator may potentially re-order the equivalent instructions of the user application when creating the target code. When the translator recognizes that it has created a new instruction that the has potential to cause a synchronous exception, it creates a recovery block. The recovery block contains instructions that complete all functions necessary to restore the target machine state to the legacy machine state. The translator may create several recovery blocks, one for each instruction of translated code that has the potential to cause a synchronous exception. For dynamically translated code, it may wait to create the recovery block after a synchronous exception is detected.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>The translated target code is then executed on the target platform. According to the present invention, the operating system on the target platform detects an exception, and the target operating system collects the machine state from the hardware and calls a runtime recovery procedure. The runtime recovery procedure is responsible for invoking the application&apos;s exception handling routine while presenting a machine state that is consistent with the legacy machine state. Based upon this machine state, the runtime recovery procedure locates the recovery block associated with the exception detected. For dynamically translated code the recovery block may not yet exist and will need to be generated by the translator.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>The runtime recovery procedure first causes control of the program to resume in the located recovery block. The recovery block executes, restoring the machine state to be consistent with the legacy machine state. The runtime recovery procedure then invokes the application&apos;s exception handler which now functions correctly. The user has full access to the legacy state in handling the exception.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>In another embodiment of the invention, the translation is a compilation. Instead of a user application operating on an emulator, source code is being compiled. Compilation is a form of translation. The compilation behaves much like a static translation of a user application, except that the source code is not operable on a legacy platform. Effective compilers optimize instructions when creating machine code from source code. When a compiler, according to this invention, generates an instruction with the potential to cause a synchronous exception, it creates a corresponding recovery block. The recovery block contains code that, when executed, results in a target machine state equivalent to the legacy machine state. In this embodiment of the invention, the legacy machine state is the machine state that could have resulted had the target platform executed target code not optimized by the compiler. Restoration of the machine state allows for graceful recovery from a synchronous exception and full debugging capability at the point of the exception.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><PDAT>The foregoing and other objects, features and advantages of the invention will become more readily apparent from the following detailed description of a preferred embodiment of the invention which proceeds with reference to the accompanying drawings.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00020" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a simplified block diagram of a known digital computer system that translates a user application operable on a legacy machine to code operable on a target computer system.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a simplified block diagram of the known translation system of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> in greater detail.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> is a flow diagram of a traditional software exception delivery mechanism.</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> is a simplified block diagram of a translation system according to the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> is a flow diagram of a software exception delivery mechanism according to the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is an example set of legacy and target code sections as well as an example recovery block generated from the code sections by the translation system according to the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is a simplified block diagram of a compiler embodiment of the translation system according to the present invention.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION</PDAT></STEXT></H>
<PARA ID="P-00027" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a simplified block diagram of a known digital computer system that translates a user application </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT> operable on a legacy machine to code operable on a target computer system </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, the target computer system </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> includes a hardware platform </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>, which can comprise any digital computer architecture such as a CISC, RISC, VLIW or EPIC processor architecture. The primary purpose of such a system is to support emulation, executing on a target platform, of a user application program </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT> which was previously constructed to execute on a different hardware and/or operating system, which we call the legacy platform. The target platform will be defined as the target hardware </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT> and target operating system </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>. It is useful in some cases for the target platform and the legacy platform to be the same platform. An operating system </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> interfaces with the hardware platform </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT> and provides the usual operating system functions for managing and utilizing hardware resources such as the processor, memory, and peripheral devices. A translation system </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> is stored in memory in the system </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> for execution in cooperation with the operating system </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> in the usual fashion. The translation system </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> provides for translation of the user application program to produce software instructions operable on the target platform. The primary purpose of the translation system will be as an emulation system, though it could also be as a static translation system or a compilation system, each described further below. Dashed line </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> represents operating system calls initiated by the translation system </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, while dashed line </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT> represents messages or signals initiated by the operating system, including notification of exceptions that arise during execution. Dashed line </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT> indicates hardware notification of exceptions to the operating system.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a simplified block diagram of the known translation system of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> in greater detail. The translation system </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> includes a translator </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT> that converts a user application program </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT> written to operate on a legacy system into target code </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> operable on the target platform. The primary purpose for a translator </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT>, is as an emulator, although it could be any translating program such as a static translator or a compiler. An emulator translates the user application software dynamically into target code </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> to allow for execution of the user application on the target operating system </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> and hardware. A static translator translates the entire user application into target code </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, which is a new executable application operable on the target platform . A compiler translates source code written in a high order software language, such as C or pascal, into target code </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, which is an executable application operable on the target platform.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> is a flow diagram of a traditional software exception delivery mechanism. Programming languages and environments, such as C on Unix, provide a mechanism for an application program </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> to examine the machine state when any type of synchronous exception occurs. An example of a synchronous exception is the application program </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> executing an instruction, indicated by the line </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, where the instruction references an invalid memory location. When the exception occurs, several steps occur.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><PDAT>First, the hardware detects the exception. The hardware records certain information about the register state of the processor into shadow registers and passes control to the operating system </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>. Next, the operating system </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> creates a &ldquo;context structure&rdquo; that records the machine state saved by the hardware when the exception occurs. Lastly, the operating system </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> invokes a procedure, indicated by line </PDAT><HIL><BOLD><PDAT>25</PDAT></BOLD></HIL><PDAT>, in the application program </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> which was previously designated as the exception handling routine. The operating system </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> also passes a copy of the context structure to the application program </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> for use by the exception handling routine.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> is a simplified block diagram of a software translation system </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> according to the present invention. The translation system </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> includes a translator </PDAT><HIL><BOLD><PDAT>34</PDAT></BOLD></HIL><PDAT> that converts a user application program </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT> written to operate on a legacy system into target code </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> operable on the target platform. The primary purpose for a translator </PDAT><HIL><BOLD><PDAT>34</PDAT></BOLD></HIL><PDAT>, is as an emulator, although it could be any translating program such as a static translator or a compiler. An emulator translates the user application software dynamically into target code </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> to allow for execution of the user application on the target operating system </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> and hardware. A static translator translates the entire user application into target code </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT>, which is a new executable application operable on the target platform. A compiler translates source code written in a high order software language, such as C or pascal, into target code </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT>, which is an executable application operable on the target platform.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>The new translator </PDAT><HIL><BOLD><PDAT>34</PDAT></BOLD></HIL><PDAT>, according to the present invention, generates both optimized target code </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> and recovery blocks </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>. The new exception delivery system described in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>, allows the optimized target code </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> to be fully optimized. All optimizations possible in traditional optimization for branching are now legal for the trapping of exceptions. The recovery blocks </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> contains code instructions that when executed restore the target machine state to match the legacy machine state. The recovery blocks </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> can be generated at the same time as the optimized target code </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> for a non-dynamic translation, or can be generated on an &ldquo;as needed&rdquo; basis in a dynamic translation. In a non dynamic system, the translator produces many recovery blocks, up to one for every potential synchronous exception in the optimized target code </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>When the optimized target code </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> executes on the target operating system </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT>, a synchronous exception may result. If an exception occurs, the target operating system </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> invokes a runtime recovery procedure </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>, linked to the application as part of the runtime library. The runtime recovery procedure then restores the target machine state using the recovery blocks </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>. The interaction between the target operating system </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT>, the runtime recovery procedure </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> and the application comprising the target code </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> is shown in FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> is a flow diagram of a software exception delivery mechanism according to the present invention. When the application executes an instruction, as indicated by the line </PDAT><HIL><BOLD><PDAT>51</PDAT></BOLD></HIL><PDAT>, it may cause a synchronous exception, such as referencing an invalid memory location. When this happens several steps occur.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><PDAT>First, the hardware detects the exception. The hardware records certain information about the register state of the processor into shadow registers and passes control to the operating system </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT>. Next, the operating system </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> creates a &ldquo;context structure&rdquo; that records the machine state saved by the hardware when the exception occurs. In prior art, an operating system </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> invokes the exception handler of the application code when an exception is detected, The method of the current invention instead registers the runtime recovery procedure </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> as the exception handler. As a result, the operating system </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> invokes a runtime recovery procedure </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT>, indicated by line </PDAT><HIL><BOLD><PDAT>53</PDAT></BOLD></HIL><PDAT>, that is responsible for calling the application program&apos;s </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> exception handling routine with a machine state that is consistent with the legacy machine state. The runtime recovery procedure </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> does so by using the context structure passed by the operating system </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> to locate the recovery block created to restore the machine state so as to be consistent with the legacy machine state.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><PDAT>The recovery block may already exist in memory or, for a dynamic translation system may be subsequently generated by a new translation. Discussion of the generation of the recovery block is described above in the description of FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>. The runtime recovery procedure </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> also modifies the context structure to have the execution of the software resume in the recovery block. Accordingly, upon returning control to the operating system </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT>, indicated by line </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT>, the operating system invokes </PDAT><HIL><BOLD><PDAT>56</PDAT></BOLD></HIL><PDAT> the recovery block in the application program </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>. The recovery block code executes, making the machine state consistent with the legacy machine state. The recovery block transfers control to the runtime recovery procedure </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT>, indicated by line </PDAT><HIL><BOLD><PDAT>57</PDAT></BOLD></HIL><PDAT>. The runtime recovery procedure </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> records the machine state in the context structure and passes the machine state to the application program&apos;s exception handler, indicated by line </PDAT><HIL><BOLD><PDAT>58</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is an example set of legacy and target code sections as well as an example recovery block generated from the code sections by the translation system according to the present invention. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> illustrates the purpose of the exception delivery mechanism, described in FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>. An original source code segment </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT>, includes two assignment instructions to local variables, followed by an instruction that comprises a pointer dereference. The pointer dereference is an example of an instruction that may cause a synchronous exception, or &ldquo;trap&rdquo;. An optimizing translator may find it preferable to re-order the sequence of instructions by placing the assignment statements after the pointer dereference. If an exception occurred during the pointer dereference then the states of local variables A and B are not accurate at the time of the exception. In other words, the present machine state does not accurately reflect the legacy machine state. This inaccuracy is a problem if graceful recovery from the exception needs accurate knowledge of A or B, or if the user wishes to examine the variables A or B to determine the cause of the exception.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>The present invention allows for a system where any potentially trapping instruction, such as a pointer dereference, is treated as a load with a potential branch. The translator can produce an optimized translation </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT>, where in this example, the pointer dereference is to be executed before the assignment statements. Using a technique known in traditional branch optimizations, the recovery code can be placed in a recovery block </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>. The recovery block </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> contains the assignment instructions needed to modify the state of the machine should the pointer dereference cause an exception. Every instruction that can cause a synchronous is exception, which includes any load instruction, has a conditional branch. If a synchronous exception does not occur the remainder of the optimized translation code </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> can be executed. Otherwise the recovery block </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> is executed to update the target machine state to its desired state. The recovery block instructions </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> is executed by the runtime recovery procedure described in FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is a simplified block diagram of a compiler embodiment of the translation system according to the present invention. This is another embodiment of the translation system described in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4. A</PDAT></FGREF><PDAT> compiler can be thought of as a translator, translating a source program into compiled code. Compilers can aggressively optimize to produce the most efficient code possible. But by doing so, they run into the same problems as an emulator of not being able to maintain an accurate state of the machine necessary at the time a synchronous exception.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>The compilation system </PDAT><HIL><BOLD><PDAT>70</PDAT></BOLD></HIL><PDAT> includes a compiler </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> that converts a source program </PDAT><HIL><BOLD><PDAT>72</PDAT></BOLD></HIL><PDAT> written in a high order language such a C, into compiled code </PDAT><HIL><BOLD><PDAT>78</PDAT></BOLD></HIL><PDAT> operable on the target platform comprising the target hardware and the target operating system </PDAT><HIL><BOLD><PDAT>84</PDAT></BOLD></HIL><PDAT>. The compiler </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> creates compiled code </PDAT><HIL><BOLD><PDAT>78</PDAT></BOLD></HIL><PDAT>, including the optimized compiled code </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> as well as recovery blocks </PDAT><HIL><BOLD><PDAT>82</PDAT></BOLD></HIL><PDAT>. The compiler produces a set of recovery blocks </PDAT><HIL><BOLD><PDAT>82</PDAT></BOLD></HIL><PDAT>, up to one for each potentially trapping instruction in the optimized compiled code </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>When the optimized compiled code </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> executes on the target operating system </PDAT><HIL><BOLD><PDAT>84</PDAT></BOLD></HIL><PDAT>, a synchronous exception may result. If a synchronous exception occurs, the target operating system </PDAT><HIL><BOLD><PDAT>84</PDAT></BOLD></HIL><PDAT> invokes a runtime recovery procedure </PDAT><HIL><BOLD><PDAT>86</PDAT></BOLD></HIL><PDAT>, linked to the application as part of the runtime library. The runtime recovery procedure then restores the target machine state using the recovery blocks </PDAT><HIL><BOLD><PDAT>82</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>Having described and illustrated the principles of the invention in a preferred embodiment thereof, it should be apparent that the invention can be modified in arrangement and detail without departing from such principles. I claim all modifications and variations coming within the spirit and scope of the following claims.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>1. A computer implemented method for processing an exception signal caused by a target program executing on a target platform, where the target program was translated from a user application program originally constructed for execution on a legacy platform, the translated target program including an instruction sequence that has been re-ordered for optimization, the target program including an exception handling routine, the method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>intercepting an exception caused by the target program; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>modifying the target machine state so as to reflect the legacy machine state, thereby placing the target machine state as it would have been had the translated target program not included a re-ordered instruction sequence; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>transferring control to the exception handling routine of the target program. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>2. A method according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>the method further includes the step of providing a recovery block of instructions operable on the target platform; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>the step of modifying the target machine state includes executing the recovery block of instructions on the target platform. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>3. A method according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>the method further includes the step of providing a plurality of recovery blocks of instructions on the target platform, each recovery block associated with an instruction in the target program where a possible exception may occur; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>the step of modifying the target machine state includes the steps of: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>locating the recovery block associated with the exception intercepted in the intercepting step; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>executing the located recovery block to modify the target machine state. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>4. A method according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein the step of intercepting an exception generated by the target program comprises the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>detecting the exception; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>constructing a context structure comprising a machine state, the context structure machine state set to the target machine state when the exception was detected; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>invoking a recovery procedure to perform the modifying step and the transferring step. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>5. A method according to claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, wherein the step of modifying the target machine state comprises the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>selecting a recovery block responsive to the context structure, the recovery block comprising a set of instructions for modifying the target machine state; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing the selected recovery block to modify the target machine state so as to reflect the legacy machine state. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>6. A method according to claim </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, wherein the step of transferring control to the exception handling routine of the target program comprises the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>modifying the context structure constructed in the intercepting step to reflect the target machine state; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>invoking the exception handling routine of the target program. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>7. A digital computer having a memory and including:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a target machine state stored in memory; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a user application program stored in the memory and comprising a predetermined series of instructions, the user application program having been constructed for execution on a predetermined legacy platform, the legacy platform including a legacy machine state; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a target program stored in the memory for executing the user application program instructions by translating the user application program instructions so as to form corresponding new instructions executable on the said digital computer, the corresponding new instructions including an instruction sequence re-ordered for optimization; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a recovery procedure stored in the memory that is called when an exception is detected by the digital computer when executing the corresponding new instructions, the recovery procedure operable to modify the target machine state of the digital computer to match the legacy machine state as it would have been had the corresponding new instructions not included a re-ordered instruction sequence. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>8. A digital computer according to claim </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>, further including:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a run-time system stored in memory, linked with the target program so as to be accessible upon execution of the target program, the run-time system comprising the recovery procedure. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>9. A digital computer according to claim </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT> further including:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a recovery block of instructions, stored in memory; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>the recovery procedure operable to modify the target machine state by execution of the recovery block. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>10. A digital computer according to claim </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT> further including:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a plurality of recovery blocks of instructions, stored in memory, each recovery block associated with one of the new instructions in the target program that may potentially generate an exception; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>the recovery procedure operable to modify the target machine state by execution of the recovery block associated with the detected exception. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>11. A software implemented exception delivery mechanism, residing in a digital computer having a memory, the exception delivery mechanism including:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a target machine state stored in memory; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>an application program stored in memory and including an exception handling routine and an instruction sequence re-ordered for optimization; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>an operating system stored in memory, operable to execute the application program on a target platform and further operable to detect an exception; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a recovery procedure stored in memory, constructed and arranged to invoke the exception handling routine of the application program after modifying the target machine state, thereby placing the target machine state as it would have been had the application program not included a re-ordered instruction sequence; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>the operating system further operable to invoke the recovery procedure upon detection of the exception. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>12. An exception delivery mechanism according to claim </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>, wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>the application program further includes a recovery block of instructions; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>the recovery procedure is constructed and arranged to invoke the application program to execute the recovery block of instructions, thereby modifying the target machine state. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>13. An exception delivery mechanism according to claim </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>, wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>the application code further includes a plurality of recovery blocks of instructions; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>the recovery procedure is constructed and arranged to locate the recovery block of instructions responsive to the detected exception and invoke the application program to execute the located recovery block, thereby modifying the target machine state. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>14. A computer implemented method of translating a user application constructed for use on a legacy platform to a target program operable on a target platform, the target platform having a target machine state, the legacy platform having a legacy machine state, the method to preserve synchronous exception handling, the translation method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>identifying types of instructions that can potentially cause synchronous exceptions during execution of a user application; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>generating an output instruction, thereby re-ordering an instruction sequence in the translated user application; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>if the output instruction is one of the identified types of instructions, constructing a recovery block of code for modifying the target machine state to a corresponding legacy machine state for the instruction sequence as if it had not been re-ordered; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>associating the recovery block with the said output instruction. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00057" LVL="0"><PTEXT><PDAT>15. A method according to claim </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>, further comprising repeating the steps of generating an output instruction and constructing a recovery block until completion of the translation.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00058" LVL="0"><PTEXT><PDAT>16. The method according to claim </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> wherein the user application comprises a series of source code instructions and the step of generating an output instruction is done by compiling the source code instructions.</PDAT></PTEXT></PARA>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314560-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314560-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314560-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314560-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314560-20011106-D00004.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314561-20011106-D00000.TIF SYSTEM "US06314561-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314561-20011106-D00001.TIF SYSTEM "US06314561-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314561-20011106-D00002.TIF SYSTEM "US06314561-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314561-20011106-D00003.TIF SYSTEM "US06314561-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314561-20011106-D00004.TIF SYSTEM "US06314561-20011106-D00004.TIF" NDATA TIF>
<!ENTITY US06314561-20011106-D00005.TIF SYSTEM "US06314561-20011106-D00005.TIF" NDATA TIF>
<!ENTITY US06314561-20011106-D00006.TIF SYSTEM "US06314561-20011106-D00006.TIF" NDATA TIF>
<!ENTITY US06314561-20011106-D00007.TIF SYSTEM "US06314561-20011106-D00007.TIF" NDATA TIF>
<!ENTITY US06314561-20011106-D00008.TIF SYSTEM "US06314561-20011106-D00008.TIF" NDATA TIF>
<!ENTITY US06314561-20011106-D00009.TIF SYSTEM "US06314561-20011106-D00009.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314561</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>08420540</PDAT></DNUM></B210>
<B211US><PDAT>08</PDAT></B211US>
<B220><DATE><PDAT>19950412</PDAT></DATE></B220>
</B200>
<B500>
<B510>
<B511><PDAT>G06F  945</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>717  9</PDAT></B521>
<B522><PDAT>711137</PDAT></B522>
<B522><PDAT>712207</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Intelligent cache management mechanism</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4885680</PDAT></DNUM>
<DATE><PDAT>19891200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Anthony et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395700</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5185878</PDAT></DNUM>
<DATE><PDAT>19930200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Baror et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT> 39425</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5303377</PDAT></DNUM>
<DATE><PDAT>19940400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Gupta et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395700</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5339419</PDAT></DNUM>
<DATE><PDAT>19940800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Chan et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395700</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5355491</PDAT></DNUM>
<DATE><PDAT>19941000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Lawlor et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395700</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5371865</PDAT></DNUM>
<DATE><PDAT>19941200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Aikawa et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395400</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5404484</PDAT></DNUM>
<DATE><PDAT>19950400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Schlansher et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395425</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B562><NCIT><STEXT><PDAT>Heisch, R.R., &ldquo;Handling Branch and Link Instructions During Trace Directed Program Restructuring&rdquo;, IBM Technical Disclosure Bulletin, V. 37, No. 4B, Apr. 1994, pp. 189-192. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Callahan, D.; Kennedy, K.; Porterfield, A., &ldquo;Software Prefetching&rdquo;, SIGPLAN Not. (USA), vol. 26, No. 4, Apr. 1991, pp. 40-52. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>John,Lizy K., &ldquo;Comparative Evaluation of Software Techniques to Hide Memory Latency&rdquo;, Architecture, vol. 1, Jan. 1995, pp. 229-238. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Yamada, Y. et al., &ldquo;Data Relocation and Prefetching for Programs With Large Data Sets&rdquo;, IEEE/ACM International Symposium on Micorarchitecture, 27th, San Jose, Nov. 30-Dec. 1994, pp. 118-127.</PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
</B560>
<B570>
<B577><PDAT>4</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>395700</PDAT></B582>
<B582><PDAT>717  5</PDAT></B582>
<B582><PDAT>717  6</PDAT></B582>
<B582><PDAT>717  7</PDAT></B582>
<B582><PDAT>717  8</PDAT></B582>
<B582><PDAT>717  9</PDAT></B582>
<B582><PDAT>712207</PDAT></B582>
<B582><PDAT>712211</PDAT></B582>
<B582><PDAT>712213</PDAT></B582>
<B583US><PDAT>712237-239</PDAT></B583US>
<B582><PDAT>712232</PDAT></B582>
<B582><PDAT>712233</PDAT></B582>
<B582><PDAT>712240</PDAT></B582>
<B582><PDAT>711141</PDAT></B582>
<B582><PDAT>711137</PDAT></B582>
<B582><PDAT>711144</PDAT></B582>
<B582><PDAT>711145</PDAT></B582>
</B580>
<B590><B595><PDAT>9</PDAT></B595><B596><PDAT>9</PDAT></B596><B597US>
</B590>
</B500>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Mark Robert</PDAT></FNM><SNM><STEXT><PDAT>Funk</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Rochester</PDAT></CITY>
<STATE><PDAT>MN</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Steven Raymond</PDAT></FNM><SNM><STEXT><PDAT>Kunkel</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Rochester</PDAT></CITY>
<STATE><PDAT>MN</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Mikko Herman</PDAT></FNM><SNM><STEXT><PDAT>Lipasti</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Rochester</PDAT></CITY>
<STATE><PDAT>MN</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Bilha</PDAT></FNM><SNM><STEXT><PDAT>Mendelson</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Haifa</PDAT></CITY>
<CTRY><PDAT>IL</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Robert Ralph</PDAT></FNM><SNM><STEXT><PDAT>Roedinger</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Rochester</PDAT></CITY>
<STATE><PDAT>MN</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>William Jon</PDAT></FNM><SNM><STEXT><PDAT>Schmidt</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Rochester</PDAT></CITY>
<STATE><PDAT>MN</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>International Business Machines Corporation</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Armonk</PDAT></CITY><STATE><PDAT>NY</PDAT></STATE></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>02</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><FNM><PDAT>Steven W.</PDAT></FNM><SNM><STEXT><PDAT>Roth</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Kakali</PDAT></FNM><SNM><STEXT><PDAT>Chaki</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B748US><PDAT>2122</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>The data cache management mechanism of the present invention is created by an optimizing compiler. The optimizing compiler intelligently places non-blocking preload instructions into the instruction stream of the computer system so as to minimize both the frequency and detrimental effect of cache misses. The non-blocking preload instructions are placed into the instruction stream based on the existence of predictor constructs that foretell what information the processor will need and when it will need it. As a result, cache misses are either avoided entirely or reduced in severity.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>FIELD OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>The present invention relates to data processing systems. More particularly, the present invention relates to memory management in a computer system.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. While there have been many advances in technology since 1948, modem day computer systems still use much of the same basic componentry that was used in the EDVAC device. Two basic components that are still found in most every system are the computer system processor and its memory. The processor is the active palr of the computer system; it reads and processes information stored in the computer system&apos;s memory to perform the task assigned to it by the computer system user. While the speed at which a computer system can respond to its user&apos;s requests has always been a factor in consumer purchase decisions, computer system speed has never been as important as it is in today&apos;s marketplace. Consumers want computer systems that are fast enough to easily handle work-intensive computer programs that leverage modem day advanced technologies (e.g., multimedia and object oriented technology). Therefore, computer system manufacturers are constantly striving to make their computer systems faster and faster.</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>One well known way to make a computer system faster is through the use of special memory called data cache memory. Cache memory is special because a processor can retrieve information from cache memory much faster than it can from standard memory (called main memory). However, this speed is not without cost. Cache memory is significantly more expensive than main memory. Consequently, computer system designers balance the need for speed against the cost of cache memory by keeping the size of cache memory relatively small when compared to that of main memory.</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>The key, then, is to make sure that small but fast cache memory always contains the information needed by the processor. However, since cache memory is typically much smaller than main memory, the computer system must be able to move information from the slower main memory into the faster cache memory before the information is needed by the processor. A &ldquo;cache miss&rdquo; is said to occur when the processor is forced to wait because the correct information was not present in the cache memory when it was needed by the processor. Of course, the value of any given cache management mechanism is measured by how successful the mechanism is at preventing cache misses. Cache misses are increasingly becoming a major performance impediment because processor speed is increasing much more rapidly than that of memory, which means that in most cases it is the slowness of memory that stands in the way of better performance. In other words, it does not matter how fast a processor can process information if the processor has to wait to get the information it needs. It is no surprise, then, that the mechanisms used to reduce the frequency of cache misses, and their associated speed penalty, have become extremely important to the computer industry.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>Many advanced computer system architectures include an instruction (sometimes called a touch or preload instruction) that can be placed in the instruction stream of a computer system to move information from main memory into data cache memory. When a preload instruction executes, it takes a previously generated main memory address and causes the movement of the associated information. However, the problem is not the actual ability to move the information into data cache memory, but is instead knowing what information to move and when to move it. Indeed, unintelligent use of preload instructions may even hinder rather than improve computer system performance. For example, an unintelligent mechanism that merely arbitrarily inserted preload instructions near all instructions that actually reference/load information is, in most cases, ineffective because the timing is such that there is not usually adequate time to load much of the needed information into data cache memory before the actual reference takes place. A crude mechanism of this sort would add a tremendous number of preload instructions, most of which would be of minimal usefulness. In fact, it has been shown that the resulting increase in code size (called &ldquo;code bloat&rdquo;) actually worsens computer system performance instead of improving it (i.e., due to the negative impact on instruction cache and main memory paging performance).</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>One intuitive solution to this timing problem might be a mechanism that attempted to ensure adequate time by merely inserting preload instructions a certain number of instructions up the stream of instructions from the instructions that actually reference/load the information. However, an unintelligent mechanism of this sort is likewise of limited value because the address needed by the preload instruction (i.e., the address of the information) may not yet have been generated when the preload instruction is due to execute.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>An additional problem with mechanisms of this sort is the potential overuse of preload instructions. Overuse of preload instructions can be problematic not only because of code bloat but also because overuse greatly increases the likelihood that useful information will be unnecessarily cast out of data cache memory (i.e., because data cache memory is only so big) before it is needed by the processor. This problem is known as &ldquo;cache thrashing&rdquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>While somewhat helpful, existing mechanisms for preventing cache misses tend to be crude and unintelligent. Indeed, some mechanisms may even cause more harm than good by introducing unwanted side-effects such as code bloat and cache-thrashing. Without an intelligent mechanism that reduces both the frequency and cost of cache misses, the computer industry will never be able to fully realize the benefits of today&apos;s faster processors.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>It is, therefore, a principal object of this invention to provide an enhanced mechanism for reducing the frequency and cost of cache misses.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>It is another object of this invention to provide an enhanced mechanism that intelligently inserts preload instructions into the computer system&apos;s instruction stream to help ensure that needed information is in data cache memory before it is referenced by the processor.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>It is still another object of this invention to provide an enhanced compiler mechanism that inserts preload instructions into the computer system&apos;s instruction stream whenever it determines, based on the existence of a program construct that foretells what information the processor will need and when the processor will need that information, that the benefits associated with the use of a preload instruction outweigh the cost of that use.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>It is yet another object of this invention to provide an enhanced compiler mechanism that inserts preload instructions into the computer system&apos;s instruction stream whenever it encounters a pointer argument being passed as part of a method call in an object oriented programming environment.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>It is still another object of this invention to provide an enhanced compiler mechanism that inserts preload instructions into the computer system&apos;s instruction stream whenever it encounters a pointer argument being passed as part of a procedure call.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>It is still another object of this invention to provide an enhanced compiler mechanism that inserts preload instructions into the computer system&apos;s instruction stream whenever it encounters an instruction that loads a Table of Contents pointer.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>These and other objects of the present invention are accomplished by the data cache management mechanism disclosed herein.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>The data cache management mechanism of the present invention is created by an optimizing compiler. The optimizing compiler intelligently places non-blocking preload instructions into the instruction stream of the computer system so as to minimize both the frequency and detrimental effect of cache misses. A preload instruction is considered &ldquo;non-blocking&rdquo; if the processor is free to process other instructions while the needed information is being loaded into data cache memory. As discussed, preload instructions are used to move information from main memory into cache memory. When a preload instruction executes, it takes a previously generated main memory address and causes the associated information to be moved from main memory into data cache memory. As also mentioned, though, the problem is not the actual ability to move the information, but is instead knowing what information to move and when to move it.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>Through inspection of the instruction stream, the compiler of the present invention detects the existence of certain instruction stream constructs that foretell the information that the processor will need and when the processor will need the information (referred to hereafter as predictor constructs). Typically, predictor constructs explicitly or implicitly necessitate the presence of two other types of instruction stream constructs. These latter two instruction stream constructs usually perform two functions: 1) the loading or calculation of an address (referred to hereafter as address generation constructs) and 2) use of the generated address to gain access to the information needed by the processor (referred to hereafter as data load constructs). Of course, an address generation construct may be followed by more than one data load construct.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><PDAT>The intelligent compiler of the present invention inserts non-blocking preload instructions into an instruction stream when it determines, based on detection of a predictor construct, that the benefits associated with the use of the preload instruction outweigh the costs associated with that use. More specifically, the compiler inserts preload instructions into the computer system&apos;s instruction stream when it encounters a predictor construct because it knows that the associated address generation construct is definitely, or statistically likely to be, far enough up the stream of instructions from the associated data load construct to permit the data cache memory to be fully or partially loaded before the information is needed by the processor (i.e., via execution of the data load construct). As a result, a cache miss is either entirely avoided or reduced in severity.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00020" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a block diagram of the computer system of the preferred embodiment.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a diagram of example source code for an example client program and for an example method program.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> is a flow diagram of an optimizing compiler constructed to carry out steps according to the preferred embodiment for processing the call statement predictor construct.</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> is a diagram showing example instruction streams for the client and method programs of FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 5A-5C</PDAT></FGREF><PDAT> are work/time diagrams showing the benefits and advantages of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is a flow diagram of an optimizing compiler constructed to carry out steps according to the preferred embodiment for processing the Table of Contents predictor construct.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DESCRIPTION OF THE PREFERRED EMBODIMENTS</PDAT></STEXT></H>
<H LVL="1"><STEXT><PDAT>OVERVIEW</PDAT></STEXT></H>
<PARA ID="P-00026" LVL="0"><PTEXT><PDAT>For those individuals who are not compiler experts and/or not experts in object oriented technology, a brief overview of compilers, object oriented technology, and the mechanisms of the present invention is presented here.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="7"><PTEXT><PDAT>Statements, Instructions, Compilers</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><PDAT>Computer programs are constructed using one or more programming languages. Like words written in English, a programming language is used to write a series of statements that have particular meaning to the drafter (i.e., the programmer). Once the programmer has drafted their computer program in the human readable form (called source code) prescribed by the programming language, the computer programmer uses mechanisms that change the human readable form of the computer program into a form that can be understood by a computer system (called machine readable form). These mechanisms are typically called compilers; however it should be understood that the term &ldquo;compiler&rdquo;, as used within this specification, generically refers to any mechanism that transforms one representation of a computer program into another representation of that program.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><PDAT>This machine readable form, within this specification, is a stream of binary instructions (i.e., ones and zeros) that are meaningful to the computer. The compiler typically compiles each human readable statement into one or more machine readable instructions. Often times, these instructions have what are called mnemonics associated with them. Mnemonics are used to allow computer programmers to determine the exact instructions that are being generated by the compiler for each statement. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> shows example statements and </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> shows example mnemonic instructions. Special compilers, called optimizing compilers, operate on the instruction stream to make it perform better (e.g., by eliminating unneeded instructions etc.). Some optimizing compilers are wholly separate while others are built into a primary compiler (i.e., the compiler that converts the human readable statements into machine readable form) to form a multi-pass compiler. In other words, multi-pass compilers first operate to convert source code into an instruction stream (i.e., as a first pass or stage) and then operate on the instruction steam to optimize it (i.e., as a second pass or stage).</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="7"><PTEXT><PDAT>Object Oriented Technology</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><PDAT>Not surprisingly, objects are central to Object Oriented technology. Objects can be thought of as autonomous agents which work together to perform the tasks required of the computer system. A single object represents an individual operation or a group of operations that are performed by a computer system upon information controlled by the object. The operations of objects are called &ldquo;method programs&rdquo; and the information controlled by objects is called &ldquo;object data&rdquo; or just &ldquo;data&rdquo; Method programs and object data are said to be &ldquo;encapsulated&rdquo; in the object.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>The only way a client program can access the data controlled by a particular object is by calling one of the method programs owned by that object. Hence, one of the primary responsibilities of method programs is providing client programs with information controlled by their objects.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="7"><PTEXT><PDAT>Mechanisms of the Present Invention</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><PDAT>As discussed in the Summary section, the mechanisms of the present invention use the predictor constructs to create an optimized instruction stream for execution on a computer system. While those skilled in the art will appreciate that the present invention is not limited to any particular predictor construct, the call and the table of contents program statements are two present day predictor constructs that provide good illustrative examples of the benefits and advantages of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><PDAT>A method program call (i.e., a call statement in object oriented programming terminology) occurs when a client program in an object oriented programming environment wants to gain access to information controlled by the object that owns the method program. The existence of a method program call predictor construct implies 1) that the address of the needed information must have been generated prior to the method program call itself (i.e., via an address generation construct) and 2) that the information identified by the address will be accessed (i.e., via at least one data load construct) far enough down the stream of instructions to make use of the preload instruction worthwhile. In other words, the intelligent mechanism of the present invention makes use of the fact that pointers passed as part of method program call constructs are 1) highly likely to be dereferenced during execution of the method program and 2) highly likely to be dereferenced far enough down the stream of instructions to make preloading the data cache memory worthwhile. Indeed, since the very purpose of method programs is to operate on their objects, it would be rare for a method program not to dereference a passed pointer sometime during execution.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><PDAT>Another example of the benefits and advantages of the present invention is the processing of Table of Contents (TOC) pointers. TOC pointers, which are stored in a TOC structure, contain addresses to information that is frequently referenced during execution of an instruction stream. TOC pointers are typically generated once and then used (i.e., dereferenced) many times thereafter. (In this case, the word &ldquo;generated&rdquo; means retrieved from the TOC structure.) Therefore, the intelligent mechanism of the present invention places non-blocking preload instructions immediately after the instructions that load the TOC pointers from the TOC structure. This helps ensure that the needed information either 1) resides in cache memory or 2) is in the process of being loaded into cache memory before being needed by the processor.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><PDAT>In operation, the processor executes the preload instruction causing a message to be sent to the data cache circuitry asking whether the information stored at the memory location referenced in the preload instruction resides in data cache memory. If the data cache circuitry determines that the information is not in data cache memory, it sends a request to the memory controller instructing the memory controller to begin loading the needed information into data cache memory. Since execution of the preload instruction occurs before the referenced information is actually needed by the processor, the memory controller is able to load the needed information into data cache memory while the processor continues to perform other useful work.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION</PDAT></STEXT></H>
<PARA ID="P-00038" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> shows a block diagram of the computer system of the present invention. The computer system of the preferred embodiment is an enhanced IBM AS/400 mid-range computer system. However, those skilled in the art will appreciate that the mechanisms and apparatus of the present invention apply equally to any computer system, regardless of whether the computer system is a complicated multi-user computing apparatus or a single user device such as a personal computer or workstation. As shown in the exploded view of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, computer system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> comprises main or central processing unit (CPU) </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> connected to system bus </PDAT><HIL><BOLD><PDAT>150</PDAT></BOLD></HIL><PDAT> via data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> and instruction cache </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT>. Main memory </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT>, memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT>, auxiliary storage interface </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT>, and terminal interface </PDAT><HIL><BOLD><PDAT>145</PDAT></BOLD></HIL><PDAT> are also shown to be connected to system bus </PDAT><HIL><BOLD><PDAT>150</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>Data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> is made up of data cache circuitry (not shown) and specialized memory. The data cache circuitry is responsible for managing the contents of data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, as well as managing data traffic to and from CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> and system bus </PDAT><HIL><BOLD><PDAT>150</PDAT></BOLD></HIL><PDAT>. Like data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, instruction cache </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT> is used to make computer system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> faster. The difference is that instructions are preloaded into instruction cache </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT> instead of information. The present invention involves data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, not instruction cache </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT>. Auxiliary storage interface </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> is used to allow computer system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> to store and retrieve information from auxiliary storage such as magnetic disk or optical storage devices. Memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT>, through use of a processor separate from CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>, is responsible for moving requested information from main memory </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> and/or through auxiliary storage interface </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> into data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>. While for the purposes of explanation, memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> is shown as a separate entity, those skilled in the art understand that, in practice, portions of the function provided by memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> may actually reside in the circuitry associated with data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> and main memory </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT>. Further, while memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> of the preferred embodiment is described as having responsibility for moving requested information from main memory </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> and/or through auxiliary storage interface </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> into data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, those skilled in the art will appreciate that the mechanisms of the present invention apply equally to any storage configuration, regardless of the number and type of the storage entities involved. For example, the present invention applies equally to multi-level data cache mechanisms as well as single level data cache mechanisms like data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, and applies equally in a computer system having a combined instruction/data cache at any level of the storage hierarchy.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>Terminal interface </PDAT><HIL><BOLD><PDAT>145</PDAT></BOLD></HIL><PDAT> allows system administrators and computer programmers to communicate with computer system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, normally through programmable workstations. Although the system depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> contains only a single main CPU and a single system bus, it should be understood that the present invention applies equally to computer systems having multiple main CPUs and multiple I/O buses. Similarly, although the bus of the preferred embodiment is a typical hardwired, multidrop bus, any connection means that supports bidirectional communication could be used.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>Main memory </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> contains Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>, Data Cache Management Mechanism (DCMM) </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT>, Application Programs </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT>, Objects </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT>, and Operating System </PDAT><HIL><BOLD><PDAT>128</PDAT></BOLD></HIL><PDAT>. While DCMM </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> is shown as a separate entity, so as to represent the optimized instruction stream of computer system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, those skilled in the art will understand that parts of DCCM </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> are present in all mechanisms that were compiled using Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>. Further, while Optimnizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> is shown to reside on computer system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, those skilled in the art will understand that the present invention applies equally to compilers that execute on one computer system but create mechanisms that themselves execute on a different, target computer system. Compilers of this type are known as cross compilers.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>As stated, main memory </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> contains Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>, Data Cache Management Mechanism (DCMM) </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT>, Application Programs </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT>, Objects </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT>, and Operating System </PDAT><HIL><BOLD><PDAT>128</PDAT></BOLD></HIL><PDAT>. However, it should be understood that main memory </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> will not necessarily always contain all parts of all mechanisms shown. For example, portions of application programs </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT> and operating system </PDAT><HIL><BOLD><PDAT>128</PDAT></BOLD></HIL><PDAT> will typically be loaded into instruction cache </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT> to execute, while other files may well be stored on magnetic or optical disk storage devices (not shown).</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>The remainder of this specification describes how the present invention processes two particular instruction stream constructs (i.e., method program calls and TOC pointer dereferences) However, those skilled in the art will appreciate that the present invention applies equally to any instruction stream construct or construct combination that defines a situation(s) where an address load event is far enough up-stream from the actual address reference that the benefit associated with the use of the preload instruction outweighs the cost associated with that use.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="7"><PTEXT><PDAT>Method Program Calls</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> shows an example class definition for an example object, cat class definition </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> also shows example client program </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT> and example method program </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT>. Cat class definition </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, client program </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT>, and method program </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT> will be used throughout the remainder of this specification to show how Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> and DCMM </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> provide significant speed benefits to computer system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>. Before proceeding with further explanation of the advantages and benefits of the present invention, however, it is important to point out that while these example mechanisms were created using the C&plus;&plus; computer language, those skilled in the art will appreciate that the present invention applies equally to all programming languages, regardless of whether the language is considered an object oriented language such as C&plus;&plus;.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, each object created from cat class definition </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> will have a name (i.e., name </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT>), a breed (i.e., breed </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT>), and an attitude (i.e., attitude </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT>). Each object created from cat definition </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> will also contain method programs reactTo </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>, hiss </PDAT><HIL><BOLD><PDAT>215</PDAT></BOLD></HIL><PDAT>, and purr </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>A client program that made use of an object created using cat class </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> will, at a minimum, contain the statements shown in client program </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT>. Declaration statement </PDAT><HIL><BOLD><PDAT>235</PDAT></BOLD></HIL><PDAT> is used to actually create an object from cat class definition </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>. The object in this case is fictitiously named Luke. Declaration statement </PDAT><HIL><BOLD><PDAT>240</PDAT></BOLD></HIL><PDAT> creates an object of type person, called Visitor. Call statement </PDAT><HIL><BOLD><PDAT>245</PDAT></BOLD></HIL><PDAT> is an invocation of reactTo method program </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT>. Again, while example call statement </PDAT><HIL><BOLD><PDAT>245</PDAT></BOLD></HIL><PDAT> was written using the C&plus;&plus; programming language, those skilled in the art will appreciate that the present invention applies to all call statements, regardless of whether they were written using an object oriented programming language such as C&plus;&plus;. Accordingly &ldquo;call statement&rdquo; is generically defined herein to refer to all call statements, regardless of the programming language used.</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>reactTo method program </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT> includes person pointer </PDAT><HIL><BOLD><PDAT>265</PDAT></BOLD></HIL><PDAT> (i.e., the address of Visitor in this case), this pointer </PDAT><HIL><BOLD><PDAT>270</PDAT></BOLD></HIL><PDAT>, call statement </PDAT><HIL><BOLD><PDAT>275</PDAT></BOLD></HIL><PDAT> to hiss method program, and call statement </PDAT><HIL><BOLD><PDAT>280</PDAT></BOLD></HIL><PDAT> to purr method program. This pointer </PDAT><HIL><BOLD><PDAT>270</PDAT></BOLD></HIL><PDAT> is the C&plus;&plus; version of an implicit object pointer that is automatically passed in all object oriented environments. It makes tremendous sense to automatically pass object pointers in object oriented implementations because method programs that are defined as part of a class (e.g., method program definition </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>) will always be used to operate on the objects for which they were defined.</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> is a flow diagram of an optimizing compiler constructed to carry out steps in accordance with the preferred embodiment for processing the call statement predictor construct. Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> starts in block </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT>. In block </PDAT><HIL><BOLD><PDAT>305</PDAT></BOLD></HIL><PDAT>, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> begins to examine a preexisting instruction stream. As mentioned, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> may be incorporated into an existing multi-pass compiler or it could be a stand alone compiler. The present invention applies equally to both types of compilers. After assigning instruction variable X to the first instruction in the previously generated instruction stream &lsqb;block </PDAT><HIL><BOLD><PDAT>305</PDAT></BOLD></HIL><PDAT>&rsqb;, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> determines whether the instruction is a call instruction &lsqb;block </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT>&rsqb;. If Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> determines that the instruction assigned to instruction variable X is not a call statement, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> next determines whether there are additional instructions &lsqb;block </PDAT><HIL><BOLD><PDAT>335</PDAT></BOLD></HIL><PDAT>&rsqb;. If there are not additional instructions, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> terminates execution in block </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT>. Otherwise, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> assigns the next instruction to instruction variable X and returns to block </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT> to repeat the process.</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>If, in block </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT>, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> determines that the instruction assigned to instruction variable X is indeed a call instruction, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> next determines whether the instruction at issue contains at least one pointer parameter &lsqb;block </PDAT><HIL><BOLD><PDAT>315</PDAT></BOLD></HIL><PDAT>&rsqb;. If the call instruction does not contain at least one pointer parameter, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> proceeds to block </PDAT><HIL><BOLD><PDAT>335</PDAT></BOLD></HIL><PDAT> and continues as was previously described. If Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> determines that the call instruction does contain at least one pointer parameter, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> selects one pointer parameter and assigns it to pointer variable P &lsqb;block </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT>&rsqb;. For simplicity of explanation, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> of the preferred embodiment selects only a single pointer parameter; however, those skilled in the art will appreciate that the present invention is not limited to selection of only a single pointer parameter, and that selection of any number of pointer parameters is well within the spirit and scope of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>Once a pointer parameter has been selected, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> then inserts a preload instruction for P into the instruction steam at a point prior to call instruction X (i.e., &ldquo;up stream&rdquo; from the call instruction) &lsqb;block </PDAT><HIL><BOLD><PDAT>325</PDAT></BOLD></HIL><PDAT>&rsqb;. Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> then proceeds to block </PDAT><HIL><BOLD><PDAT>335</PDAT></BOLD></HIL><PDAT> and continues as has been previously described.</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>By way of example, assume that the C&plus;&plus; source code shown on </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> has been compiled into two preexisting instruction streams, instruction stream </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> for client program </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT> and instruction stream </PDAT><HIL><BOLD><PDAT>440</PDAT></BOLD></HIL><PDAT> for reactTo method program </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT> (see FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>). When Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> operates on instruction stream </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>, it will encounter instructions </PDAT><HIL><BOLD><PDAT>405</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>415</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>420</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>425</PDAT></BOLD></HIL><PDAT> before detecting that instruction </PDAT><HIL><BOLD><PDAT>430</PDAT></BOLD></HIL><PDAT> is a call instruction. Since all object oriented call instructions include the aforementioned automatic passing of the object address (e.g., the &ldquo;this&rdquo; pointer in C&plus;&plus;), Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> will determine that call statement </PDAT><HIL><BOLD><PDAT>430</PDAT></BOLD></HIL><PDAT> does indeed contain a pointer parameter. Upon making this determination, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> will optimize instruction stream </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> by placing touch instruction </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> into instruction stream </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> at some location prior to call instruction </PDAT><HIL><BOLD><PDAT>430</PDAT></BOLD></HIL><PDAT>. Touch instruction </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> should be placed &ldquo;up stream&rdquo; as far as possible so as to allow memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> adequate time to load the contents of object Luke into data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>When CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> executes optimized instruction stream </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> it will encounter touch instruction </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT>, which will cause it to send a message to memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> instructing memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> to load the contents of the object Luke into data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>. Then, when CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> executes instruction </PDAT><HIL><BOLD><PDAT>445</PDAT></BOLD></HIL><PDAT> of instruction stream </PDAT><HIL><BOLD><PDAT>440</PDAT></BOLD></HIL><PDAT> (i.e., when CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> needs the information associated with object Luke), the contents of object Luke should be in data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> or in the process of being loaded into data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 5A-5C</PDAT></FGREF><PDAT> are work/time diagrams showing the benefits and advantages of the present invention. Figure SA shows the effects of a cache miss without DCMM </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> of the present invention. Continuing the example of the call to reactTo method program </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> is doing valuable work </PDAT><HIL><BOLD><PDAT>505</PDAT></BOLD></HIL><PDAT> until reactTo method program </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT> (in unoptimized form) attempts to access the contents of object Luke at time T </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT>. CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> is then forced to wait for time TA </PDAT><HIL><BOLD><PDAT>520</PDAT></BOLD></HIL><PDAT> (i.e., time T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>-T) until memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> is able to load the contents of object Luke into data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>. Once the contents of object Luke have been loaded, CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> is again able to perform valuable work (i.e., shown as valuable work </PDAT><HIL><BOLD><PDAT>525</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5B</PDAT></FGREF><PDAT> shows the effects of a cache miss when DCMM </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> of the present invention is able to at least begin loading the contents of object Luke into data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> before the information is needed by processor </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>. In other words, this diagram shows the case where it is not possible to place the touch instruction &ldquo;up stream&rdquo; far enough to allow memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> to completely load the contents of object Luke into data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>. Continuing the example of the call to reactTo method program </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> is executing instruction steam </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> when it encounters non-blocking touch instruction </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> (see </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>) at time TITB </PDAT><HIL><BOLD><PDAT>535</PDAT></BOLD></HIL><PDAT>. Upon executing touch instruction </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT>, CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> sends a message to memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> instructing it to load the information referenced in touch instruction </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> (i.e., the contents of object Luke) into data cache </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>When CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> attempts to access the contents of object Luke (i.e., instruction </PDAT><HIL><BOLD><PDAT>445</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>) at time T </PDAT><HIL><BOLD><PDAT>540</PDAT></BOLD></HIL><PDAT>, CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> must wait time TB </PDAT><HIL><BOLD><PDAT>545</PDAT></BOLD></HIL><PDAT> (i.e., time T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>-T) because memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> has not yet been able to fully load the contents of object Luke into data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>. However, it should be noted that time TB </PDAT><HIL><BOLD><PDAT>545</PDAT></BOLD></HIL><PDAT> is shorter than time TA </PDAT><HIL><BOLD><PDAT>520</PDAT></BOLD></HIL><PDAT>, which means that although CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> was forced to wait, it did not have to wait as long as it would if DCMM </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> of the present invention were not present. Once the contents of object Luke have been fully loaded, CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> is again able to perform valuable work (i.e., shown as valuable work </PDAT><HIL><BOLD><PDAT>555</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5C</PDAT></FGREF><PDAT> shows that a cache miss is completely avoided when DCMM </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> of the present invention is able to fully load the contents of object Luke into data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> before the information is needed by processor </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>. In other words, this diagram shows the case where it is possible to place the touch instruction &ldquo;up stream&rdquo; far enough to allow memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> to completely load the contents of object Luke into data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>. Continuing the example of the call to reactTo method program </PDAT><HIL><BOLD><PDAT>260</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> is executing instruction steam </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> when it encounters non-blocking touch instruction </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> (see </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>) at time TITC </PDAT><HIL><BOLD><PDAT>565</PDAT></BOLD></HIL><PDAT>. Upon executing touch instruction </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT>, CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> sends a message to memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> instructing it to load the information referenced in touch instruction </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> (i.e., the contents of object Luke) into data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>. Upon receiving the message memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> proceeds to load the contents of object Luke into data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> by time T </PDAT><HIL><BOLD><PDAT>570</PDAT></BOLD></HIL><PDAT>. When CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> attempts to access the contents of object Luke (i.e., instruction </PDAT><HIL><BOLD><PDAT>445</PDAT></BOLD></HIL><PDAT>) at time T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><BOLD><PDAT>575</PDAT></BOLD></HIL><PDAT>, the needed information already resides in data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>. Hence, CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> is not forced to wait; the cache miss has been avoided. &lsqb;Note that TITC (from </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5B</PDAT></FGREF><PDAT>) occurs earlier in time than TITB.&rsqb;</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="0"><PTEXT><PDAT>As mentioned, </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5C</PDAT></FGREF><PDAT> shows that when possible touch instructions should be placed up stream far enough to allow memory controller </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> time to finish loading the needed information into data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> prior to access by processor </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>. In addition, though, use of an instruction scheduling mechanism is a further refinement of the present invention. Much like optimizing compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>, instruction scheduling mechanisms operate on preexisting instruction streams to make them more efficient. In general, instruction scheduling mechanisms do much what their name suggest. They move instructions around (i.e., schedule them) to achieve the best performance for the particular computer system. Use of an instruction scheduler on an instruction stream that was previously optimized by optimizing compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> would further enhance the present invention by providing an additional mechanism for moving the inserted touch instructions further up stream.</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="7"><PTEXT><PDAT>TOC Pointer Dereferencing</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="0"><PTEXT><PDAT>A TOC is a structure maintained by a system link/loader. A system link/loader is responsible for binding compiled programs together into a single object code unit that can be executed on a computer system. Essentially, the TOC is a table of pointers that provides a mapping from a data aggregate&apos;s symbolic name, which is known to the compiled programs, to the data aggregate&apos;s actual address, which is not known until the compilation unit is linked with and/or loaded onto the computer system. The link loader is responsible for completing the mapping by updating the symbolic TOC entries with pointers (i.e., the TOC pointers) to the actual data aggregates in question (i.e., with each data aggregate&apos;s actual address). When one of application programs </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT> needs to access a particular data aggregate, it first loads the TOC pointer, and then dereferences the pointer.</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>When operating on the associated instruction stream, optimizing compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> will endeavor to separate the load of the TOC pointer from the actual dereference (i.e., move the load as far up-stream as possible) to reduce the number of times the TOC pointer is loaded. While such &ldquo;redundant load elimination&rdquo; and &ldquo;code motion&rdquo; technique are known in the art, optimizing compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> of the present invention exploits this separation between the TOC pointer load and the actual dereference of the TOC pointer by intelligently placing non-blocking preload instructions far enough up-stream from the actual TOC pointer dereference to ensure that the addressed data aggregate will be either in data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> or in the process of being loaded into data cache </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> by the time the dereferencing instruction executes on CPU </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is a flow diagram of an optimizing compiler constructed to carry out steps in accordance with the preferred embodiment for processing the TOC pointer predictor construct. Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> starts in block </PDAT><HIL><BOLD><PDAT>600</PDAT></BOLD></HIL><PDAT>. In block </PDAT><HIL><BOLD><PDAT>605</PDAT></BOLD></HIL><PDAT>, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> begins to examine a preexisting instruction stream. After assigning instruction variable X to the first instruction in the previously generated instruction stream &lsqb;block </PDAT><HIL><BOLD><PDAT>605</PDAT></BOLD></HIL><PDAT>&rsqb;, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> determines whether the encountered instruction is an instruction that loads a TOC pointer &lsqb;block </PDAT><HIL><BOLD><PDAT>610</PDAT></BOLD></HIL><PDAT>&rsqb;. If Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> determines that the encountered instruction is not an instruction that loads a TOC pointer, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> next determines whether there are additional instructions &lsqb;block </PDAT><HIL><BOLD><PDAT>335</PDAT></BOLD></HIL><PDAT>&rsqb;. If there are not additional instructions, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> terminates execution in block </PDAT><HIL><BOLD><PDAT>640</PDAT></BOLD></HIL><PDAT>. Otherwise, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> assigns the next instruction to instruction variable X and returns to block </PDAT><HIL><BOLD><PDAT>610</PDAT></BOLD></HIL><PDAT> to repeat the process.</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="0"><PTEXT><PDAT>If, in block </PDAT><HIL><BOLD><PDAT>610</PDAT></BOLD></HIL><PDAT>, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> determines that the instruction assigned to instruction variable X is indeed an instruction that loads a TOC pointer, Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> next assigns the address indicated in the load instruction to variable P &lsqb;block </PDAT><HIL><BOLD><PDAT>615</PDAT></BOLD></HIL><PDAT>&rsqb;. Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> then optimizes the preexisting instruction stream by inserting a preload instruction for P into the instruction steam at a point immediately following load instruction X &lsqb;block </PDAT><HIL><BOLD><PDAT>625</PDAT></BOLD></HIL><PDAT>&rsqb;. Optimizing Compiler </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> then proceeds to block </PDAT><HIL><BOLD><PDAT>635</PDAT></BOLD></HIL><PDAT> and continues as has been previously described.</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="0"><PTEXT><PDAT>As a design note, care must be taken in cases where the TOC pointer points to data aggregates larger than a data cache line. For example, a large static data area, only parts of which are subsequently referenced, might have a single entry in the TOC. The compiler must have some knowledge of which part or parts of the area pointed to are actually referenced, and must limit the non-blocking preload instruction to instructions to prefetch only those parts. This can be accomplished by examining the offsets used in the subsequent references, and using those same offsets in the non-blocking preload instruction(s).</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="0"><PTEXT><PDAT>The embodiments and examples set forth herein were presented in order to best explain the present invention and its practical application and to thereby enable those skilled in the art to make and use the invention. However, those skilled in the art will recognize that the foregoing description and examples have been presented for the purposes of illustration and example only. The description as set forth is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching without departing from the spirit and scope of the following claims.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00066" LVL="0"><PTEXT><PDAT>1. A computer apparatus, said computer apparatus comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a first central processing unit, said first central processing unit executing an instruction stream, said instruction stream having a first preload instruction inserted therein, said first preload instruction having been inserted by a compiler at a location proximate to a first predictor construct contained in said instruction stream, said first preload instruction containing a first address for first information that will be needed by said first central processing unit, said first predictor construct being a call statement, said instruction stream also having a second preload instruction inserted therein, said second preload instruction having been inserted by a compiler at a location proximate to a second predictor construct contained in said instruction stream, said second preload instruction containing a second address for second information that will be needed by said first central processing unit. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00067" LVL="0"><PTEXT><PDAT>2. A computer apparatus, said computer apparatus comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a first central processing unit, said first central processing unit executing an instruction stream, said instruction stream having a first preload instruction inserted therein, said first preload instruction having been inserted by a compiler at a location proximate to a first predictor construct contained in said instruction stream, said first preload instruction containing a first address for first information that will be needed by said first central processing unit, said instruction stream also having a second preload instruction inserted therein, said second preload instruction having been inserted by a compiler at a location proximate to a second predictor construct contained in said instruction stream, said second preload instruction containing a second address for second information that will be needed by said first central processing unit, said second predictor construct is one that loads a table of contents pointer. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00068" LVL="0"><PTEXT><PDAT>3. A computer implemented method, said method comprising the step of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing an instruction stream, said instruction stream being executed by a first central processing unit, said instruction stream having a first preload instruction inserted therein, said first preload instruction having been inserted by a compiler at a location proximate to a first predictor construct contained in said instruction stream, said first preload instruction containing a first address for first information that will be needed by said first central processing unit, said first predictor construct being a call statement, said instruction stream also having a second preload instruction inserted therein, said second preload instruction having been inserted by a compiler at a location proximate to a second predictor construct contained in said instruction stream, said second preload instruction containing a second address for second information that will be needed by said first central processing unit. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00069" LVL="0"><PTEXT><PDAT>4. A computer implemented method, said method comprising the step of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing an instruction stream, said instruction stream being executed by a first central processing unit, said instruction stream having a first preload instruction inserted therein, said first preload instruction having been inserted by a compiler at a location proximate to a first predictor construct contained in said instruction stream, said first preload instruction containing a first address for first information that will be needed by said first central processing unit, said instruction stream also having a second preload instruction inserted therein, said second preload instruction having been inserted by a compiler at a location proximate to a second predictor construct contained in said instruction stream, said second preload instruction containing a second address for second information that will be needed by said first central processing unit, said second predictor construct is an instruction that loads a table of contents pointer.</PDAT></PTEXT></CLMSTEP>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314561-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314561-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314561-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314561-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314561-20011106-D00004.TIF">
<EMI ID="EMI-D00005" FILE="US06314561-20011106-D00005.TIF">
<EMI ID="EMI-D00006" FILE="US06314561-20011106-D00006.TIF">
<EMI ID="EMI-D00007" FILE="US06314561-20011106-D00007.TIF">
<EMI ID="EMI-D00008" FILE="US06314561-20011106-D00008.TIF">
<EMI ID="EMI-D00009" FILE="US06314561-20011106-D00009.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314562-20011106-M00001.NB SYSTEM "US06314562-20011106-M00001.NB" NDATA NB>
<!ENTITY US06314562-20011106-M00001.TIF SYSTEM "US06314562-20011106-M00001.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-M00002.NB SYSTEM "US06314562-20011106-M00002.NB" NDATA NB>
<!ENTITY US06314562-20011106-M00002.TIF SYSTEM "US06314562-20011106-M00002.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-M00003.NB SYSTEM "US06314562-20011106-M00003.NB" NDATA NB>
<!ENTITY US06314562-20011106-M00003.TIF SYSTEM "US06314562-20011106-M00003.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-M00004.NB SYSTEM "US06314562-20011106-M00004.NB" NDATA NB>
<!ENTITY US06314562-20011106-M00004.TIF SYSTEM "US06314562-20011106-M00004.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-M00005.NB SYSTEM "US06314562-20011106-M00005.NB" NDATA NB>
<!ENTITY US06314562-20011106-M00005.TIF SYSTEM "US06314562-20011106-M00005.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-M00006.NB SYSTEM "US06314562-20011106-M00006.NB" NDATA NB>
<!ENTITY US06314562-20011106-M00006.TIF SYSTEM "US06314562-20011106-M00006.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-P00801.TIF SYSTEM "US06314562-20011106-P00801.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-P00802.TIF SYSTEM "US06314562-20011106-P00802.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-P00803.TIF SYSTEM "US06314562-20011106-P00803.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00000.TIF SYSTEM "US06314562-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00001.TIF SYSTEM "US06314562-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00002.TIF SYSTEM "US06314562-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00003.TIF SYSTEM "US06314562-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00004.TIF SYSTEM "US06314562-20011106-D00004.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00005.TIF SYSTEM "US06314562-20011106-D00005.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00006.TIF SYSTEM "US06314562-20011106-D00006.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00007.TIF SYSTEM "US06314562-20011106-D00007.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00008.TIF SYSTEM "US06314562-20011106-D00008.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00009.TIF SYSTEM "US06314562-20011106-D00009.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00010.TIF SYSTEM "US06314562-20011106-D00010.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00011.TIF SYSTEM "US06314562-20011106-D00011.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00012.TIF SYSTEM "US06314562-20011106-D00012.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00013.TIF SYSTEM "US06314562-20011106-D00013.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00014.TIF SYSTEM "US06314562-20011106-D00014.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00015.TIF SYSTEM "US06314562-20011106-D00015.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00016.TIF SYSTEM "US06314562-20011106-D00016.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00017.TIF SYSTEM "US06314562-20011106-D00017.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00018.TIF SYSTEM "US06314562-20011106-D00018.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00019.TIF SYSTEM "US06314562-20011106-D00019.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00020.TIF SYSTEM "US06314562-20011106-D00020.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00021.TIF SYSTEM "US06314562-20011106-D00021.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00022.TIF SYSTEM "US06314562-20011106-D00022.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00023.TIF SYSTEM "US06314562-20011106-D00023.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00024.TIF SYSTEM "US06314562-20011106-D00024.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00025.TIF SYSTEM "US06314562-20011106-D00025.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00026.TIF SYSTEM "US06314562-20011106-D00026.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00027.TIF SYSTEM "US06314562-20011106-D00027.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00028.TIF SYSTEM "US06314562-20011106-D00028.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00029.TIF SYSTEM "US06314562-20011106-D00029.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00030.TIF SYSTEM "US06314562-20011106-D00030.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00031.TIF SYSTEM "US06314562-20011106-D00031.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00032.TIF SYSTEM "US06314562-20011106-D00032.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00033.TIF SYSTEM "US06314562-20011106-D00033.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00034.TIF SYSTEM "US06314562-20011106-D00034.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00035.TIF SYSTEM "US06314562-20011106-D00035.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00036.TIF SYSTEM "US06314562-20011106-D00036.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00037.TIF SYSTEM "US06314562-20011106-D00037.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00038.TIF SYSTEM "US06314562-20011106-D00038.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00039.TIF SYSTEM "US06314562-20011106-D00039.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00040.TIF SYSTEM "US06314562-20011106-D00040.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00041.TIF SYSTEM "US06314562-20011106-D00041.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00042.TIF SYSTEM "US06314562-20011106-D00042.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00043.TIF SYSTEM "US06314562-20011106-D00043.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00044.TIF SYSTEM "US06314562-20011106-D00044.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00045.TIF SYSTEM "US06314562-20011106-D00045.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00046.TIF SYSTEM "US06314562-20011106-D00046.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00047.TIF SYSTEM "US06314562-20011106-D00047.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00048.TIF SYSTEM "US06314562-20011106-D00048.TIF" NDATA TIF>
<!ENTITY US06314562-20011106-D00049.TIF SYSTEM "US06314562-20011106-D00049.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314562</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>08928391</PDAT></DNUM></B210>
<B211US><PDAT>08</PDAT></B211US>
<B220><DATE><PDAT>19970912</PDAT></DATE></B220>
</B200>
<B500>
<B510>
<B511><PDAT>G06F  945</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>717  9</PDAT></B521>
<B522><PDAT>717  8</PDAT></B522>
<B522><PDAT>717 10</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Method and system for anticipatory optimization of computer programs</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4782444</PDAT></DNUM>
<DATE><PDAT>19881100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Munshi et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395709</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4827404</PDAT></DNUM>
<DATE><PDAT>19890500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Barstow et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395500</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4866665</PDAT></DNUM>
<DATE><PDAT>19890900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Haswell Smith</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>714 35</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5148513</PDAT></DNUM>
<DATE><PDAT>19920900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Koza et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>706 13</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5161216</PDAT></DNUM>
<DATE><PDAT>19921100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Reps et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395704</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5175843</PDAT></DNUM>
<DATE><PDAT>19921200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Casavant et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395500</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5191646</PDAT></DNUM>
<DATE><PDAT>19930300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Naito et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345349</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5265254</PDAT></DNUM>
<DATE><PDAT>19931100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Blasciak et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395704</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5327561</PDAT></DNUM>
<DATE><PDAT>19940700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Choi et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395709</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5343554</PDAT></DNUM>
<DATE><PDAT>19940800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Koza et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>706 13</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5396627</PDAT></DNUM>
<DATE><PDAT>19950300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Iitsuka</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395709</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5408603</PDAT></DNUM>
<DATE><PDAT>19950400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Van de Lavoir et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345349</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5450575</PDAT></DNUM>
<DATE><PDAT>19950900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Sites</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5659753</PDAT></DNUM>
<DATE><PDAT>19970800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Murphy et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  5</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5790863</PDAT></DNUM>
<DATE><PDAT>19980800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Simonyi</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395707</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5892907</PDAT></DNUM>
<DATE><PDAT>19990400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Harper et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709200</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5896537</PDAT></DNUM>
<DATE><PDAT>19990400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Landi et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395704</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5911072</PDAT></DNUM>
<DATE><PDAT>19990600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Simonyi</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395701</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5978588</PDAT></DNUM>
<DATE><PDAT>19991100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Wallace</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  9</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6012152</PDAT></DNUM>
<DATE><PDAT>20000100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Douik et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>714 26</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6078746</PDAT></DNUM>
<DATE><PDAT>20000900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Simonyi</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6117185</PDAT></DNUM>
<DATE><PDAT>20000900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Schmidt</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  9</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6131189</PDAT></DNUM>
<DATE><PDAT>20001000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Chow et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  9</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6186677</PDAT></DNUM>
<DATE><PDAT>20010200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Angel et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  4</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>0 546 794</PDAT></DNUM>
<DATE><PDAT>19930600</PDAT></DATE>
<CTRY><PDAT>EP</PDAT></CTRY>
</DOC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B562><NCIT><STEXT><PDAT>Tolmach, &ldquo;Tag free garbage collection using explict type parameters&rdquo;, ACM LISP pp 1-11, Mar. 1994.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Ashley, &ldquo;A practical and flexible flow analysis for higher order languages&rdquo;, ACM POPL pp 184-194, Mar. 1995.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Polychronopoulos, &ldquo;The hierarchical task graph and its use in auto scheduling&rdquo;, ACM pp 252-263, Mar. 1994.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Robert Morgan, &ldquo;Building an optimizing compiler&rdquo;, Butterworth Heinemann Pub, pp 152-163, 1998.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Bacon, David, F. et al., &ldquo;Compiler Transformations for High-Performance Computing,&rdquo; </PDAT><HIL><ITALIC><PDAT>ACM Computer Surveys</PDAT></ITALIC></HIL><PDAT>, 26(4), Dec., 1994. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Biggerstaff, Ted, J., &ldquo;Directions in Software Development and Maintenance,&rdquo; Keynote Address, Conference on Software Maintenance, Montreal, Quebec, Canada, Oct. 1993. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Biggerstaff, Ted, J., &ldquo;The Library Scaling Problem and the Limits of Concrete Component Reuse,&rdquo; International Conference on Software Reuse, Nov., 1994. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Guibas, L.J. and D.K. Wyatt, &ldquo;Compilation and Delayed Evaluation in APL,&rdquo; Fifth Annual ACM Symposium Principles of Programming Languages, pp. 1-8, 1978. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Hwang, Gwan-Hwan et al., &ldquo;An Array Operation Synthesis Scheme to Optimize Fortran 90 Programs,&rdquo; Conference Title: Fifth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (PPoPP), Jul. 1995; Published in </PDAT><HIL><ITALIC><PDAT>SIGPLAN Notices</PDAT></ITALIC></HIL><PDAT>, 30(8):112-22, Aug. 1995. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Ju, Dz-Ching et al., &ldquo;The Synthesis of Array Functions and Its Use in Parallel Computation,&rdquo; Proc. 1992 Int&apos;l. Conference on Parallel Processing, pp. II293-II296, 1992. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Kczales, Gregor et al., &ldquo;Aspect Oriented Programming,&rdquo; Tech. Report SPL97-08 P9710042, Xerox, PARC, 1997. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Neighbors, James, M., &ldquo;Software Construction Using Components,&rdquo; Ph.D. Dissertation, University of California at Irvine, 1980. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Neighbors, James, M., &ldquo;The Draco Approach to Constructing Software from Reusable Components,&rdquo; Workshop on Reusability in Programming, Newport, Rhode Island, 1983. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Neighbors, James, M., A Method for Engineering Reusabel Software Systems. In Ted J. Biggerstaff and Alan Perlis (Eds.), </PDAT><HIL><ITALIC><PDAT>Software Reusability</PDAT></ITALIC></HIL><PDAT>, Addison-Wesley/ACM Press, 1989. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Ritter, G.X. et al., &ldquo;Image Algebra: An Overview,&rdquo; </PDAT><HIL><ITALIC><PDAT>Computer Vision, Graphics, and Image Processing</PDAT></ITALIC></HIL><PDAT>, 49, 297-331, 1990. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Ritter, G.X., &ldquo;Image Algebra,&rdquo; University of Florida, 1993. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Ritter, G.X. and Wilson, J.N., Handbook of Computer Vision Algorithms in Image Algebra, CRC Press, 1996. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Bahlke, R. and Snelting, G., &ldquo;The PSG System: From Formal Language Definitions to Interactive Programming Environments,&rdquo; </PDAT><HIL><ITALIC><PDAT>ACM Transactions on Programming Languages and Systems</PDAT></ITALIC></HIL><PDAT>, 8(4):547-76, Oct., 1986. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Ballance, R. et al., &ldquo;The Pan Language-Based Editing System for Integrated Development Environments,&rdquo; </PDAT><HIL><ITALIC><PDAT>Sigsoft</PDAT></ITALIC></HIL><PDAT>, pp. 77-93, Irvine, California, 1990. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Donzeau-Gouge, V. et al., &ldquo;Programming Environments Based on Structured Editors: The MENTOR Experience,&rdquo; Institute National de Recherche en Informatique et Automatique Rocquencourt, pp. 128-40, France. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Schneiderman, B. et al., Display Strategies for Program Browsing: Concepts and Experiment, </PDAT><HIL><ITALIC><PDAT>IEEE Software</PDAT></ITALIC></HIL><PDAT>, pp. 7-15, May, 1986. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Dykes, L. and Cameron, R., &ldquo;Towards High-Level Editing in Syntax-Based Editors,&rdquo; </PDAT><HIL><ITALIC><PDAT>Software Engineering Journal</PDAT></ITALIC></HIL><PDAT>, pp. 237-44, Jul., 1990. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Garlan, D. and Miller, R., &ldquo;GENOME: An Introductory Programming Environment Based on a Family of Structure Editors,&rdquo; Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, Pittsburgh, Pennsylvania, Apr. 23-25, 1984. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Hood, R., &ldquo;Efficient Abstractions for the Implementation of Structured Editors,&rdquo; ACM, pp. 171-78, Feb., 1985. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Kaiser, G. et al., &ldquo;A Retrospective on DOSE: An Interpretive Approach to Structure Editor Generation,&rdquo; </PDAT><HIL><ITALIC><PDAT>Software&mdash;Practice and Experience</PDAT></ITALIC></HIL><PDAT>, 18(8):733-48, Aug., 1988. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Merks, E. et al., &ldquo;Language Design for Program Manipulation,&rdquo; </PDAT><HIL><ITALIC><PDAT>IEEE Transactions on Software Engineering</PDAT></ITALIC></HIL><PDAT>, 18(1):19-32, Jan., 1992. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Minor, S., &ldquo;Interacting with Structure-Oriented Editors,&rdquo; </PDAT><HIL><ITALIC><PDAT>Int. J. Man-Machine Studies</PDAT></ITALIC></HIL><PDAT>, 37:399-418, 1992. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Ohsawa, Yutaka and Sakauchi, Masao, &ldquo;A New Tree Type Data Structure with Homogeneous Nodes Suitable for a Very Large Spacial Database,&rdquo; 6</PDAT><HIL><SP><PDAT>th </PDAT></SP></HIL><PDAT>International Conference, Data Engineering, 1990. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Shasha, Dennis et al., &ldquo;Pattern, Matching in Unordered Trees,&rdquo; Tools With Artificial Intelligence, Int&apos;l. Conference, </PDAT><HIL><ITALIC><PDAT>IEEE</PDAT></ITALIC></HIL><PDAT>, 1992. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Feather, Martin S., &ldquo;A Survey and Classification of Some Program Transformation Approaches and Techniques,&rdquo; Elsevier Science Publishers B.V. (North Holland), pp. 165-195, 1987. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Kotik, Gordon, B. and Markosian, Lawrence, Z., &ldquo;Automating Software Analysis and Testing Using a Program Transformation System,&rdquo; Proc. 14</PDAT><HIL><SP><PDAT>th </PDAT></SP></HIL><PDAT>Int&apos;l. Comp. Software and Applications Conference, pp. 1-10, 1990. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Bassett, Paul, G., &ldquo;Frame-Based Software Engineering,&rdquo; </PDAT><HIL><ITALIC><PDAT>IEEE Software</PDAT></ITALIC></HIL><PDAT>, pp. 9-16, Jul., 1987. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Neighbors, James M., &ldquo;The Evolution from Software Components to Domain Analysis,&rdquo; </PDAT><HIL><ITALIC><PDAT>International Journal of Software Engineering and Knowledge Engineering</PDAT></ITALIC></HIL><PDAT>, 2(3):325-354, 1992. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>&ldquo;Guidelines for Software Refinery Language Models,&rdquo; Reasoning Systems, Palo Alto, California, 29 pages, May 2, 1991. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Garlan, David et al., &ldquo;A Transformational Approach to Generating Application-Specific Environments,&rdquo; ACM, pp. 68-77, Dec., 1992. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Snelting, G., &ldquo;Experiences with the PSG&mdash;Programming System Generator,&rdquo; Institut fur Systemarchitektur, Technische Hochschule Darmstadt, pp. 148-162, 1985. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Teitelbaum, Tim and Reps, Thomas, &ldquo;The Cornell Program Synthesizer: A Syntax-Directed Programming Environment,&rdquo; </PDAT><HIL><ITALIC><PDAT>Communications of the ACM</PDAT></ITALIC></HIL><PDAT>, 24(9):563-573, Sep., 1981. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Reps, Thomas and Teitelbaum, Tim, &ldquo;The Synthesizer Generator,&rdquo; </PDAT><HIL><ITALIC><PDAT>SIGPLAN Notices</PDAT></ITALIC></HIL><PDAT>, 19(5):42-48, 198 </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Habermann, A. Nico and Notkin, David., &ldquo;Gandalf: Software Development Environments,&rdquo; </PDAT><HIL><ITALIC><PDAT>IEEE Transactions on Software Engineering, SE</PDAT></ITALIC></HIL><PDAT>-12(12):1117-1127, 1986. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Reps, Thomas W. and Teitelbaum, Tim, &ldquo;The Synthesizer Generator Reference Manual,&rdquo; 3d ed., Springer-Verlag, N.Y., pp. 1-10, 54-85, and 90-111, 1985. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Simonyi, Charles, &ldquo;Intentional Programming&mdash;Innovation in the Legacy Ages,&rdquo; Presented at IFIP WG 2.1, Jun. 4, 1996, pp. 1-2, http://at-internet/research/ip/ifipwg.htm. &lsqb;Accessed Feb. 19, 1997&rsqb;.</PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
</B560>
<B570>
<B577><PDAT>53</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>399701</PDAT></B582>
<B582><PDAT>399705</PDAT></B582>
<B582><PDAT>399709</PDAT></B582>
<B582><PDAT>717  9</PDAT></B582>
<B582><PDAT>717  8</PDAT></B582>
<B582><PDAT>717 10</PDAT></B582>
<B582><PDAT>709100</PDAT></B582>
</B580>
<B590><B595><PDAT>49</PDAT></B595><B596><PDAT>50</PDAT></B596><B597US>
</B590>
</B500>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Ted J.</PDAT></FNM><SNM><STEXT><PDAT>Biggerstaff</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Bellevue</PDAT></CITY>
<STATE><PDAT>WA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Microsoft Corporation</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Redmond</PDAT></CITY><STATE><PDAT>WA</PDAT></STATE></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>02</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Lee &amp; Hayes, PLLC</PDAT></STEXT></ONM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Mark</PDAT></FNM><SNM><STEXT><PDAT>Powell</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Anil</PDAT></FNM><SNM><STEXT><PDAT>Khatri</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2122</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A method and system for anticipatory optimization of computer programs. The system generates code for a program that is specified using programming-language-defined computational constructs and user-defined, domain-specific computational constructs. The system generates an abstract syntax tree (AST) representation of the program. The AST has nodes representing the computational constructs of the program. For each user-defined, domain-specific computational construct, the system determines whether a user-defined, domain-specific transform has been defined for the computational construct. The transform transforms a portion of the AST relating to the user-defined, domain-specific computational construct into one or more programming-language-defined computational constructs. When a domain-specific transform has been defined for the computational construct, the system transforms the AST in accordance with the domain-specific transform. The transformed AST is in a form that reflects an optimization of the programming-language-defined computational constructs based on the user-defined, domain-specific computational construct.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>TECHNICAL FIELD</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>The present invention relates generally to a computer method and system for generating a computer program and, more specifically, to a computer method and system for optimizing a computer program.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>Computer programs are generally written in a high-level programming language (e.g., Pascal and C). A compiler is then used to translate the instructions of the high-level programming language into machine instructions, which can be executed by a computer. The use of high-level programming languages results in dramatically increased program development productivity as compared to programming in either an assembly language or machine language. The increase in program development productivity results from allowing a programmer to use high-level computational constructs rather than low-level computational constructs. Since certain high-level computational constructs (e.g., Fast Fourier Transform) may translate into hundreds of low-level computational constructs, some of the increase in productivity arises directly from the ratio of high-level to low-level computational constructs. A programmer can more quickly specify one high-level computational construct rather than hundreds of low-level computational constructs. Also, a programmer can typically debug a computer program expressed with high-level computational constructs more quickly than the equivalent computer program expressed with low-level computational constructs. The productivity also increases because the intent of the programmer is generally more readily apparent when the computer program is expressed with high-level computational constructs. The identification of the programmer&apos;s intent is especially useful to another programmer who later modifies the computer program.</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>Unfortunately, the code compiled from a computer program developed in a high-level programming language can be much less efficient than the code generated from an equivalent computer program expressed in a low-level programming language. The efficiency of code manually written with low-level computational constructs may result, for example, because some or many of the low-level operations compiled from different high-level operations may be shared so that the compiled low-level operations can be rewoven into different sequences of low-level operations to implement the different high-level operations. Such code reweaving and sharing is, however, very difficult to automate once the high-level operations are compiled into segments of low-level operations. Some of the analyses required to accomplish such reweaving can require deep inferences about the low-level operations that for large segments of compiled code in the context of large programs could take years to complete using an automated reasoning system. On the other hand, a human programmer, given enough time, can always develop code using low-level computational constructs to be as efficient as code compiled from a computer program developed in a high-level programming language. Moreover, the programmer may be able to optimize a computer program developed using low-level computational constructs in ways that are not currently available to a compiler or a post-compilation optimizer. For example, current compilation techniques often generate highly inefficient code to access high-level composite data structures, such as a matrix. Operations on a matrix typically require iterative code (i.e., looping code) that selects and processes each one of the elements of the matrix in each step of the iteration. If several high-level operations on a matrix are combined into single statement and each operation requires selecting and processing each element, the compiled code is likely to include multiple &ldquo;for&rdquo; loops that each include a nested &ldquo;for&rdquo; loops. For example, to double the value of each element of a matrix and then add the resulting values to the values of the elements of another matrix, the programmer may specify the following statement using high-level computational constructs:</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><F><PTEXT><HIL><ITALIC><PDAT>A&equals;B&plus;</PDAT></ITALIC></HIL><PDAT>(2*</PDAT><HIL><ITALIC><PDAT>C</PDAT></ITALIC></HIL><PDAT>)</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00006" LVL="7"><PTEXT><PDAT>where A, B, and C are matrices. When a compiler generates code for this high-level statement, the compiler may generate nested &ldquo;for&rdquo; loops to select the element at each row and each column of the C matrix, to multiply the value of the selected element by 2, and to store the doubled values in a temporary matrix. The compiler also generates nested &ldquo;for&rdquo; loops to select the element at each row and column of the temporary matrix, to add that value to the value of the corresponding element of the B matrix and to store the sum in another temporary matrix. The compiler generates a third set of nested &ldquo;for&rdquo; loops to select the element at each row and column of the temporary matrix and to store the value of that element into the A matrix. The resulting code may be:</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><F><PTEXT><PDAT>for </PDAT><HIL><ITALIC><PDAT>i&equals;</PDAT></ITALIC></HIL><PDAT>1</PDAT><HIL><ITALIC><PDAT>,m</PDAT></ITALIC></HIL></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><F><PTEXT><PDAT>for</PDAT><HIL><ITALIC><PDAT>j&equals;</PDAT></ITALIC></HIL><PDAT>1</PDAT><HIL><ITALIC><PDAT>,n</PDAT></ITALIC></HIL></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><F><PTEXT><PDAT>temp&lsqb;</PDAT><HIL><ITALIC><PDAT>i,j</PDAT></ITALIC></HIL><PDAT>&rsqb;&equals;2*</PDAT><HIL><ITALIC><PDAT>C&lsqb;i,j&rsqb;</PDAT></ITALIC></HIL></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><F><PTEXT><PDAT>for </PDAT><HIL><ITALIC><PDAT>i</PDAT></ITALIC></HIL><PDAT>&equals;1</PDAT><HIL><ITALIC><PDAT>,m</PDAT></ITALIC></HIL></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><F><PTEXT><PDAT>for </PDAT><HIL><ITALIC><PDAT>j&equals;</PDAT></ITALIC></HIL><PDAT>1</PDAT><HIL><ITALIC><PDAT>,n</PDAT></ITALIC></HIL></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><F><PTEXT><PDAT>temp&lsqb;</PDAT><HIL><ITALIC><PDAT>i,j&rsqb;&equals;B&lsqb;i,j&rsqb;&plus;</PDAT></ITALIC></HIL><PDAT>temp&lsqb;</PDAT><HIL><ITALIC><PDAT>i,j&rsqb;</PDAT></ITALIC></HIL></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><F><PTEXT><PDAT>for </PDAT><HIL><ITALIC><PDAT>i&equals;</PDAT></ITALIC></HIL><PDAT>1</PDAT><HIL><ITALIC><PDAT>,m</PDAT></ITALIC></HIL></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><F><PTEXT><PDAT>for </PDAT><HIL><ITALIC><PDAT>j&equals;</PDAT></ITALIC></HIL><PDAT>1</PDAT><HIL><ITALIC><PDAT>,n</PDAT></ITALIC></HIL></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><F><PTEXT><HIL><ITALIC><PDAT>A&lsqb;i,j&rsqb;&equals;</PDAT></ITALIC></HIL><PDAT>temp&lsqb;</PDAT><HIL><ITALIC><PDAT>i,j&rsqb;</PDAT></ITALIC></HIL></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00016" LVL="7"><PTEXT><PDAT>A programmer, however, using a low-level language would combine these three sets of nested &ldquo;for&rdquo; loops into a single set of nested &ldquo;for&rdquo; loops. The resulting programmer optimized code would be:</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="7"><PTEXT><PDAT>&emsp;for </PDAT><HIL><ITALIC><PDAT>i&equals;</PDAT></ITALIC></HIL><PDAT>1</PDAT><HIL><ITALIC><PDAT>,m</PDAT></ITALIC></HIL></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><F><PTEXT><PDAT>for </PDAT><HIL><ITALIC><PDAT>j&equals;</PDAT></ITALIC></HIL><PDAT>1</PDAT><HIL><ITALIC><PDAT>,n</PDAT></ITALIC></HIL></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><F><PTEXT><HIL><ITALIC><PDAT>A&lsqb;i,j&rsqb;&equals;B&lsqb;i,j&rsqb;&plus;</PDAT></ITALIC></HIL><PDAT>(2*</PDAT><HIL><ITALIC><PDAT>C&lsqb;i,j&rsqb;</PDAT></ITALIC></HIL><PDAT>)</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00020" LVL="7"><PTEXT><PDAT>Although program optimizers have been developed that attempt to coalesce loops, the optimization techniques generally do a poor job in identifying those portions of the compiled code that lend themselves to coalescing.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><PDAT>If a programming language has high-level computational constructs built into the language, then various optimization techniques can be also built in. For example, since the computational construct &ldquo;matrix,&rdquo; which is a composite of low-level computational constructs such as integers and integer operations, is built directly into the programming language APL, the loop optimizations described above are easily accomplished by APL. APL compilers can and do use the built-in knowledge of the semantics of matrices and their operations to anticipate the looping inefficiencies and compile directly to the optimized code for known patterns and combinations of high-level operators and high-level composite operands. If, however, such high-level computational constructs are not built into an existing programming language, then they need to be added as extensions to the existing programming language or defined by the programmer. In both cases, the extensions and their optimizations cannot be added to the existing language framework by simply defining the new constructs and their optimizations in terms of existing constructs. These extensions and their optimizations cannot be added primarily because conventional programming languages provide no constructs for expressing how to reweave definitions of high-level operators and data structures for optimizable combinations of those operators and data structures. Of course, the programmer can define to the compiler high-level composite data structures like images, for example, in terms of matrix-like data structures composed with other data structures (e.g., C like structs) that are native to the target compiler (e.g., C). Further, the programmer can define how each individual composite data structure and their operators are to be compiled individually (e.g., the &ldquo;*&rdquo; operator used in the context of &ldquo;(constant * matrix)&rdquo; type expression should compile into two nested loops over the matrix). However, the programmer has no way to tell the compiler how to reweave the code of several such individual definitions composed together in an expression in order to share the low-level operations for the particular composition.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><PDAT>It would be desirable to have a general method for a programmer to define such optimization rules for reweaving the definitions of high-level (i.e., composite) data structures and their operators when the multiple high-level operators and their high-level data structures are used together in optimizable patterns or combinations. It would further be desirable that the optimization method behave like a compiler definition generated on-demand for some specific combination of operators and operands that directly compiles the rewoven, optimized low-level code without ever producing the separate segments of uncombined low-level code for each definition of the individual high-level operators and operands.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00023" LVL="0"><PTEXT><PDAT>The present invention provides an Anticipatory Optimization method and system for programmer-defined optimization rules that can be applied when generating a low-level implementation of computer program from a high-level implementation of a computer program. The system provides a mechanism for user-defined transforms for annotating the high-level implementation of the computer program with optimization tags; for redefining those high-level operators, operands, and tags; and for combining those high-level operators, operands, and tags such that the individual low-level operations eventually compiled for each of the high-level operators and operands are shared so as to improve performance. The optimization tags indicate optimizations that may be applicable when generating the low-level implementation of the computer program. For each high-level computational construct of the high-level implementation of the computer program, the system applies those transforms that are applicable to the high-level computational construct so that annotations indicating various optimizations can be added to the high-level computation construct. The system then generates the low-level implementation in accordance with the indicated optimizations.</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><PDAT>In one embodiment, the high-level computational constructs are user-defined, domain-specific computational constructs and the low-level computational constructs are programming-language-defined computational constructs. The system generates an abstract syntax tree (AST) representation of the program. The AST has nodes representing the computational constructs of the program. For each AST pattern of user-defined, domain-specific computational constructs, the system determines whether a user-defined, domain-specific transform has been defined for the pattern. A transform transforms a portion of the AST relating to the pattern of user-defined, domain-specific computational constructs into one or more programming-language-defined computational constructs. When a domain-specific transform has been defined for the pattern of computational constructs, the system transforms the AST in accordance with the domain-specific transform. The transformed AST is in a form that reflects an optimization of the programming-language-defined computational constructs based on the domain-specific computational constructs.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00025" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1A-1D</PDAT></FGREF><PDAT> illustrate the application of transforms to the portion of the AST representing the sample statement.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a block diagram illustrating the components of the AO system.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> represents a sample data structure representing an optimization tag.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 4A-4I</PDAT></FGREF><PDAT> illustrate a detailed example of anticipatory optimization for the domain of image processing.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 5A-5D</PDAT></FGREF><PDAT> illustrate another example of combining iteration operands.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6A-6E</PDAT></FGREF><PDAT> illustrates the relationship between the operand, operator, and result for various operator groups.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is a flow diagram of the control component.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> is a flow diagram of the AO routine.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT> is a flow diagram of the routine for processing phase </PDAT><HIL><BOLD><PDAT>0</PDAT></BOLD></HIL><PDAT> of the AO system.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 10</PDAT></FGREF><PDAT> is a flow diagram illustrating a routine for processing of phases </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> of the AO system.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 11A-11C</PDAT></FGREF><PDAT> illustrate the transforming of nested convolutions during phase </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 12A-12C</PDAT></FGREF><PDAT> illustrate the transforming of composite leaf nodes during phase </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 13A-13C</PDAT></FGREF><PDAT> illustrate the transforming that migrates a quantifier tag to a node that references the convolution operator during phase </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 14</PDAT></FGREF><PDAT> is a flow diagram that illustrates the transforming of parallel operators of composite operands during phase </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 15</PDAT></FGREF><PDAT> is a flow diagram that illustrates a transforming arithmetic operators on composite data structures.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 16</PDAT></FGREF><PDAT> is a flow diagram that illustrates transforming that reduces high-level declarations.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 17A-17B</PDAT></FGREF><PDAT> illustrate the transforming for a power operator for code generation.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 18</PDAT></FGREF><PDAT> is a flow diagram of a transform to generate code for a function invocation during phase </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 19</PDAT></FGREF><PDAT> is a flow diagram of a transform to reduce a leaf abstraction.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 20A and 20B</PDAT></FGREF><PDAT> illustrate the transforming of a convolution operator to lower-level computational constructs.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 21A-21D</PDAT></FGREF><PDAT> illustrate the transforming of a subtree with quantifier tags.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>The present invention provides a method and system for anticipatory optimization of computer programs. In a preferred embodiment, the anticipatory optimization (&ldquo;AO&rdquo;) system performs a multi-phase processing of an abstract syntax tree (&ldquo;AST&rdquo;) representation of a computer program that is expressed using high-level computational constructs. In one phase, the AO system identifies portions of the AST whose corresponding low-level computational constructs (e.g., machine instructions) may potentially be optimized. The AO system &ldquo;anticipates&rdquo; the optimizations by storing indications of various optimizations that are potentially applicable to portions of the AST. The AO system is developed with knowledge of the meaning of the high-level computational constructs and identifies the optimizations that are potentially applicable when translating to low-level computational constructs. In a subsequent phase, the AO system translates the high-level computational constructs into low-level computational constructs that are optimized in accordance with the anticipated optimizations.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>The AO system is extensible in the sense that when new high-level computational constructs are defined, new optimizations can also be defined that apply to the newly defined high-level computational constructs without modifying the AO system. New high-level computational constructs are preferably defined using the Intentional Programming (&ldquo;IP&rdquo;) system described in U.S. patent application Ser. No. 08/431,049, entitled &ldquo;Method and System for Generating a Computer Program,&rdquo; which is hereby incorporated by reference. According to the IP system, new high-level computational constructs can be defined by a programmer without modification to the IP system. For example, a new operator to multiply two matrices can be defined and used in programs without modification to the IP system. The IP system stores a computer program as a tree of operators and operands (i.e., an IP tree). The AO system allows a programmer to define various transforms for transforming an IP tree, and more generally an AST, into a tree that facilitates the implementation of various optimizations. A transform is a program module that inputs a portion of an AST, determines whether it should be applied to the portion, and, if so, effects its application. Once a tree representation of the program expressed using high-level computational constructs is generated, the AO system attempts to apply transforms to various portions of the tree. The transforms may modify portions of the tree or may add optimization tags to the tree to identify potential optimizations. The optimization tags are annotations that provide information derived from knowledge of the semantics and syntax of high-level computational constructs that may be useful when translating into low-level computational constructs. The optimization tags generally provide information that would be difficult for a post-compilation optimizer to derive.</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>The processing of a sample statement expressed using high-level computational constructs will help illustrate the functionality of the AO system. The sample statement expressed using high-level computational constructs is:</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="7"><PTEXT><PDAT>&emsp;</PDAT><HIL><ITALIC><PDAT>A&equals;B&plus;</PDAT></ITALIC></HIL><PDAT>(2*</PDAT><HIL><ITALIC><PDAT>C</PDAT></ITALIC></HIL><PDAT>)</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="7"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 1A-1D</PDAT></FGREF><PDAT> illustrate the application of transforms to the portion of the AST representing the sample statement. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1A</PDAT></FGREF><PDAT> illustrates the portion before application of any transforms. The operands A, B, and C are matrices that are high-level computational constructs in the sense that there is no low-level computational construct corresponding to a matrix. Rather, a matrix is conceptually a composition of low-level computational constructs, such as integers. Similarly, the operators &ldquo;&equals;,&rdquo; &ldquo;&plus;,&rdquo; and &ldquo;*&rdquo; are matrix operators that are high-level computational constructs with no corresponding low-level computational construct. Rather, the behaviors of the matrix operators are implemented using low-level computational constructs such as integer addition. Transforms have been defined that when applied to a tree representation will add optimization tags that identify matrix operators and matrix operands. These optimization tags allow further transforms to be applied to further identify optimizations. The goal of these transforms is to identify iterations that are needed to access the elements of a matrix and to identify when these iterations can be coalesced into a single iteration control statement. When the code for the same statement is generated, the optimization tags will indicate that a single iteration control statement can be used for this sample statement. If anticipatory optimization was not used, then as described in the background three separate sets of nested &ldquo;for&rdquo; loops may be used to implement this sample statement. Further, if anticipatory optimization is not used, loop coalescing via conventional optimization technology is possible but requires two extra steps. The first step generates the three separate loops, and the second step involving a complex analysis of the three loops to determine data flow, data dependencies, and aliasing information (i.e., different names and expressions that reference the same data). Only then can the coalesced loop be generated and only if the analysis was successful (which it may not have been). In contrast, the AO system produces one coalesced loop directly without actually having to generate the three loops in the first place and therefore, without the difficult intervening analysis step. It performs this direct generation of the coalesced loop based only on knowledge of the high-level operators and the optimization tags that incorporate the &ldquo;implied&rdquo; data flow and data dependency information. There is no aliasing information because the method inherently prevents aliasing from occurring. Creation of the tags makes the flow and dependency information implied by the high-level operators and operands explicit. The optimization tags are directly, incrementally, and simply built up by separate transformations that record, migrate, and merge the implied data flow and data dependency information as a part of the information useful to the anticipatory optimization process.</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>The AO system processes an AST by visiting the nodes in a depth-first, left-to-right traversal. In the general case, there may be multiple passes over the AST transforming high-level, domain operators and operands into successively lower-level operators and operands and eventually into programming-language operators and operands. For example, database operators and operands might be transformed into relational algebra operators and operands, which are then transformed into abstract data type operators and operands before finally being transformed into C code. If a given pass over a subtree of the AST produces operators and operands that need further transformation, the subtree will be flagged as incompletely transformed, which will cause it to be scheduled for further transformation. In the following, to keep the examples simple, operators, operands, and transformations are used that can complete their translation work in one pass of the AST.</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>Using such a traversal technique, the AO system first visits the node for operand A. Since operand A is a high-level computational construct that is a matrix, a transform applies that replaces the node and adds an optimization tag to the replaced node. The replaced node contains a reference to an operand of iteration with a system-generated name. For each step of the iteration, the operand of iteration takes on the value of each element of the matrix. The operand of iteration thus has the same type as the elements of the matrix. The optimization tag maps the operand of iteration to the operand A and indicates that two nested &ldquo;for&rdquo; loops with separate index variables need to be used to access the elements of the matrix at each step. The AO system then visits nodes for operands B, 2, and C. The same transform is applied to the nodes for operands B and C, since both operands represent matrix data structures. Thus, similar replacement nodes and optimization tags are applied to the nodes for operands B and C. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1B</PDAT></FGREF><PDAT> illustrates the replaced nodes with their tags. The operands of iteration are shown in lower case letters. The tag &ldquo;&forall;a:A&lsqb;i,j&rsqb;&rdquo; indicates that the operand a of iteration represents access to the elements of matrix A and that nested &ldquo;for&rdquo; loops (i.e., &forall;) using index variables i and j are used to access each element of matrix A. After visiting the node for operand C, the AO system visits the node for operator &ldquo;*.&rdquo; The AO system applies a transform that recognizes the tag on the node for operand c, the operator &ldquo;*,&rdquo; and the constant operand value. The transform moves the optimization tag from node for operand c to the node for operator &ldquo;*,&rdquo; since the expression &ldquo;2*C&rdquo; needs to be within the nested iterations. The transform to move the optimization tag was developed in anticipation that the iteration to access the elements of a matrix could be coalesced with another iteration at a higher point in the tree. After visiting the node for operator &ldquo;*,&rdquo; the AO system visits node for operator &ldquo;&plus;.&rdquo; The AO system applies a transform that recognizes the operator &ldquo;&plus;&rdquo; and the two operand odes with tags relating to &ldquo;for&rdquo; loops to access matrices. The transform removes both tags and adds a coalesced tag to the node for operator &ldquo;&plus;.&rdquo; The coalesced tag is &ldquo;&forall;&lt;b&verbar;c&gt;:&lt;B&verbar;C&gt;&lsqb;k, l&rsqb;.&rdquo; The &ldquo;&lt;b&verbar;c&gt;&rdquo; field and the &ldquo;&lt;B&verbar;C&gt;&rdquo; field indicate that b is the operand of iteration for matrix B and c is the operand of iteration for matrix C. Since the same index variables can be used to access both matrix B and C, the transform selects the index variables k and l to index both matrices. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1C</PDAT></FGREF><PDAT> illustrates the coalescing and migrating of the optimization tag to the node for operator &ldquo;&plus;.&rdquo; The AO system then visits the node for operator &ldquo;&equals;.&rdquo; The AO system applies a transform that recognizes the optimization tags of the nodes for operand a and operator &ldquo;&plus;&rdquo; can be coalesced to indicate a single iteration with the same indexes. Thus, an optimization tag is placed on the node for operator &ldquo;&equals;.&rdquo; </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1D</PDAT></FGREF><PDAT> illustrates the migration of the optimization tag to node for operator &ldquo;&equals;.&rdquo; The optimization tag on the node for operator &ldquo;&equals;&rdquo; indicates that the iteration for each of the matrices of the statement can be controlled at the statement level by a single iteration control statement. Each of the elements of matrices can be accessed using the index variables i and j. When the AO system generates the low-level implementation (e.g., generates machine instructions) of this statement using another transform, the AO system recognizes the optimization tag and generates an implementation of the iteration at the statement level with the proper indexing for the variables A, B, and C.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a block diagram illustrating the components of the AO system. The four components of the AO system </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> are the Inline Functions component </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, the Eliminate Barriers component </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT>, the Add Optimization Tags component </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT>, and the Generate Code component </PDAT><HIL><BOLD><PDAT>203</PDAT></BOLD></HIL><PDAT>. The AO system inputs an AST </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> and outputs generated code </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT>. The components execute on a computer system with a central processing unit and memory. The components are preferably loaded from a computer-readable medium (e.g., CD-ROM) into memory. Each of the components correspond to phases </PDAT><HIL><BOLD><PDAT>0</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> of the AO system. The InLine Function component corresponds to phase </PDAT><HIL><BOLD><PDAT>0</PDAT></BOLD></HIL><PDAT> and determines whether any portion of the AST invokes a function that may result in greater optimization if that function was expressed inline rather than invoked. For example, if a function were defined that multiplied each element of a matrix by 2, then it could be invoked to replace the expression &ldquo;2*C&rdquo; in the sample statement. However, when optimizing, the iteration within the function could not easily be combined with an iteration outside the function. The Inline function component identifies such functions that can be advantageously placed inline and places them inline. The Eliminate Barriers component corresponds to phase </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and determines whether any portion of the AST could be restructured to improve the chance of optimizing. For example, consider the graphics imaging domain in which images are represented by matrix-like data structures containing one record per pixel in the image. For simplicity but without loss of generality, this example is restricted to gray scale images in which the pixel records are simple integers ranging from zero (white) to some upper limit (black), with all intervening integers representing varying shades of gray. The images can be operated on by a backward convolution operator (i.e., &ldquo;&oplus;&rdquo;) which generates an output image by arithmetic summations of a pixel&apos;s neighborhood in an input image to compute the corresponding pixel in the output image. More specifically, a particular example convolution operation on an image matrix might generate an output image matrix in which each element of the output image matrix is set to a weighted average of the eight neighboring elements (or fewer neighboring elements in the case of border elements) of the corresponding pixel in the input image. Thus, to generate the value of an element of the output image matrix, the values of the corresponding pixel in the input image matrix and all of its neighboring elements need to be known. However, if the input image matrix is expressed as the sum of two image matrices to which a convolution operator (i.e., &ldquo;&oplus;&rdquo;) is then applied in a single statement (e.g., C&equals;(A&plus;B)&oplus;T), then an iteration to access image matrices A and B cannot be combined, or at least not in a straightforward manner, with the iteration to access image matrix C. The matrix T is a template which provides the weight to be assigned to the neighboring elements when calculating the average. For simplicity it can be assumed to be a 3&times;3 matrix with each weight equal to 1. In this example, the Eliminate Barriers component would move the expression &ldquo;A&plus;B&rdquo; outside of the statement, use a temporary image matrix variable to hold the result of the expression, and substitute the temporary image matrix variable into the statement. The Add Optimization Tags component corresponds to phase </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and adds optimizing tags, replaces operands as appropriate, and coalesces and migrates the optimization tags. The Code Generation component corresponds to phase </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> and generates the code for the AST based on the optimization tags.</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>The transforms can be identified with a specific problem domain and phase. When a new high-level computational construct is defined, it is applicable to a specific problem domain. For example, the transforms described above that add, coalesce, and migrate optimization tags relating to iterations are applicable to the domain of image matrix operations. The definitions of the domain-specific data structures and their operators are defined in a type hierarchy that may be supplied by and/or extended by the user. These definitions drive the transformation-based compilation of the target program that is written in terms of those domain-specific data structures and operators. The type hierarchy is an AST containing one node for each type or operator with associated values (i.e., subtrees) that define those domain-specific types and operators. Each node that defines some operator or operand is marked with a specific domain marker or if not so marked, will inherit the domain marker of one of its ancestor node. The domain marker will restrict the transformations that can apply to instances of it occurring in the user&apos;s target program. Additionally, the definition of the types and operators may contain AST patterns that help to disambiguate overloaded operators. For example, the &ldquo;&equals;&rdquo; operator in the statement &ldquo;A&equals;B&plus;(2*C)&rdquo; might be an integer assignment operator, a floating point assignment operator, or a matrix assignment operator. However, the pattern associated with the matrix assignment operator eliminates all other assignment operators because of the types of its operands (i.e., the types of A and the expression (B&plus;(2*C)) are both &ldquo;matrix&rdquo;). Hence, only transformations that apply to the matrix assignment operator will apply in this case. If the types of the arguments were instead &ldquo;image matrix,&rdquo; then any transformations on the &ldquo;&equals;&rdquo; operator associated with the image domain would apply first and failing that, transformations on the &equals; operator associated with the more general matrix domain would apply. Thus, transformations are inherited, starting with the more specific domains and failing there, then moving to the more general domains.</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>The syntax and semantics of the optimization tags can be defined by the developer of the transforms that process the optimization tags and can be tailored to their specific domain. The tags can be represented as an expression (e.g., &ldquo;&forall;a:A&lsqb;i,j&rsqb;&rdquo;) that may need to be parsed or as a data structure in which parsing is not needed. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> represents a sample data structure representing an optimization tag. By using complex data structures, the transforms can avoid parsing that may be necessary to interpret an optimization tag. The organization and adding of tag is preferably consistent with the data structures used by the IP system. In the following, optimization tags relating to high-level computational constructs in the domain of image processing are described. An image is represented by a matrix in which each element is an integer that represents a pixel. An integer value represents the gray-scale intensity of the pixel. The high-level computational construct of type image and pixel are defined.</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>A quantifier tag is used to add information relating to various type of iterations (e.g., &ldquo;for&rdquo; loop and &ldquo;repeat/until&rdquo; loop). A quantifier tag has the following form:</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="7"><PTEXT><PDAT>&emsp;_Q(expression)</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="7"><PTEXT><PDAT>where expression is a description of an iteration and the operands for the iteration. The expression for a &ldquo;forall&rdquo; loop has the following form:</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="0"><PTEXT><F><PTEXT><PDAT>&forall;p:(prototype:type)</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00060" LVL="7"><PTEXT><PDAT>where the symbol &forall; indicates that the iteration is a &ldquo;forall&rdquo; loop, where the symbol p identifies the abstract operand of iteration, where the prototype indicates the implementation relationship between the abstract operand p of iteration and the anticipated implementation form of the container (e.g., of the image) from which each value of p (i.e., the abstract operand of iteration) is chosen, and where the type indicates the type (e.g., pixel) of the abstract operand of iteration. The prototype identifies the container implementation and the anticipated index implementation variables for accessing the container. For example, the prototype may have the form:</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><F><PTEXT><PDAT>A &lsqb;i:intj:int&rsqb;</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00062" LVL="7"><PTEXT><PDAT>where symbol A identifies the implementation form of the image (ie., a matrix), where symbols i and j identify the index implementation variables, and the symbol int identifies that the type of the index implementation variables is integer.</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="0"><PTEXT><PDAT>The following quantifier tag indicates a &ldquo;forall&rdquo; loop to access all pixels a of matrix A using index variables i and j:</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="0"><PTEXT><F><PTEXT><PDAT>_Q(&forall;a:(A &lsqb;i:int,j:int&rsqb;:pixel))</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00065" LVL="7"><PTEXT><PDAT>The operands of iteration and the containers in a quantifier tag may be represented as tuples shown as:</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="7"><PTEXT><PDAT>&emsp;&lt;a&verbar;b&gt;or&lt;A&verbar;B&gt;</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="7"><PTEXT><PDAT>Such tuples indicate that in the generated code for operands of iteration a and b can be accessed by a single iteration. For example, in the following quantifier tag, operands of iteration a and b specify iterating over pixels in the images A and B, respectively, within the iteration whose index variables are i and j.</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="0"><PTEXT><F><PTEXT><PDAT>_Q(&forall;&lt;a&verbar;b&gt;:(&lt;A&verbar;B&gt;&lsqb;i:int, j:int&rsqb;:pixel))</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00069" LVL="7"><PTEXT><PDAT>This quantifier tag is generated by coalescing the quantifier tags</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="0"><PTEXT><F><PTEXT><PDAT>_Q(&forall;a:(A&lsqb;i:intj:int&rsqb;:pixel))</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00071" LVL="0"><PTEXT><F><PTEXT><PDAT>_Q(&forall;b:(B&lsqb;k:int,l:int&rsqb;:pixel))</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00072" LVL="7"><PTEXT><PDAT>in a statement that may be &ldquo;A&equals;2*B.&rdquo; The code generated based on this quantifier tag is</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="0"><PTEXT><F><PTEXT><PDAT>for </PDAT><HIL><ITALIC><PDAT>i&equals;</PDAT></ITALIC></HIL><PDAT>1</PDAT><HIL><ITALIC><PDAT>,m</PDAT></ITALIC></HIL></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00074" LVL="0"><PTEXT><F><PTEXT><PDAT>for </PDAT><HIL><ITALIC><PDAT>j&equals;</PDAT></ITALIC></HIL><PDAT>1</PDAT><HIL><ITALIC><PDAT>,n</PDAT></ITALIC></HIL></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00075" LVL="0"><PTEXT><F><PTEXT><HIL><ITALIC><PDAT>A&lsqb;i,j&rsqb;&equals;</PDAT></ITALIC></HIL><PDAT>2</PDAT><HIL><ITALIC><PDAT>*B&lsqb;i,j&rsqb;</PDAT></ITALIC></HIL></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>User-defined modifiers can be added to a quantifier tag or to individual elements within a quantifier tag. These modifiers act as hints when generating code to produce variations or optimizations in the final code that may have been recognized by previously applied transforms in the course of their application. For example, if an operator (e.g., convolution) is embedded within an expression that is tagged such that one or more iterations will eventually be generated and wrapped around the expression, then the embedded operator will often generate expressions that are known (by the transform processing the embedded operator) to be promotable outside of an iteration. The transform can designate the promotable statement or statements in a modifier that extends the quantifier tag that defines the iteration. This would extend the quantifier tag to have a form such as:</PDAT></PTEXT></PARA>
<PARA ID="P-00077" LVL="0"><PTEXT><F><PTEXT><PDAT>_Q(&forall;&lt;a&verbar;b&gt;:(&lt;A&verbar;B&gt;&lsqb;i:intj:int&rsqb;:pixel),_PromoteAboveLoop(j,ConstantExpressionOf(i))</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00078" LVL="7"><PTEXT><PDAT>which would cause a transform applied in the code generation phase to invoke a transform named &ldquo;_PromoteAboveLoop&rdquo; to effect the promotion after the inner &ldquo;for&rdquo; loop is generated of any expression that involves only constants and the variable i. This transform creates a temporary variable, say im</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>; generates a statement that assigns the constant expression involving i to im</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>; and promotes (i.e., places) that statement outside and just preceding the loop whose iteration index is j. All instances of that exact constant expression of i used within the loop whose iteration variable is j are replaced by the newly-created temporary variable im</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>. For example, the neighborhood in and around pixel A &lsqb;i,j&rsqb; contains three pixels each of the forms A &lsqb;i&minus;1,_&rsqb;, A &lsqb;i,_&rsqb;, and A &lsqb;i&plus;1, &rsqb; which after the promotion will have the respective forms A&lsqb;im</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>,_&rsqb;, A &lsqb;i,_&rsqb;, and A&lsqb;ip</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, _&rsqb;, where im</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and ip</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> are the two temporary variables created by the transform _PromoteAboveLoop. This eliminates two computations for each of the expressions (i&minus;1) and (i&plus;1). The modifier mechanism defers, until code generation time, any commitment to the exact name and form of the temporary implementation variables (e.g., im</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and jm</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) and to the details and exact location of the promoted statements. By this mechanism, the complexity of the transforms that do the main anticipatory optimization (i.e., the Add Optimization Tags component </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT>) is significantly simplified. The transforms do not have to contend with detailed implementation variations that are irrelevant to their main function. In the example, the transform promotes the statement &ldquo;im</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&equals;i&minus;1&rdquo; above the iteration for index variable j.</PDAT></PTEXT></PARA>
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>Modifiers may also be used to broaden the applicability of the transformation rules. For example, the matrices used as operands of an operator in an expression may not be the same size or shape, in which case, the operators by implication may apply to only parts of the matrices. In such a case, the code generator generates &ldquo;if-then-else&rdquo; statements that provide the case logic for operating on the various sections of the matrices. Modifiers provide a technique for keeping track of the conditions within that case logic and for defining the various ranges for the overlapping and non-overlapping portions of the operands. Of course, the exact information needed in these modifiers is determined by the semantics of the high-level data structures and operators. An example of such a modifier is:</PDAT></PTEXT></PARA>
<PARA ID="P-00080" LVL="0"><PTEXT><F><PTEXT><PDAT>_Case(&equals;(</PDAT><HIL><ITALIC><PDAT>a,</PDAT></ITALIC></HIL><PDAT>0) when (&lt;(</PDAT><HIL><ITALIC><PDAT>j</PDAT></ITALIC></HIL><PDAT>max(range(</PDAT><HIL><ITALIC><PDAT>k</PDAT></ITALIC></HIL><PDAT>)))))</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00081" LVL="7"><PTEXT><PDAT>In other words, some element a, which might eventually be represented in low-level code as A&lsqb;i,j&rsqb;, has a value of zero whenever its index j is greater than the maximum of the range of some related index k. There may be other case modifiers for values of j that do not meet this condition which define the behavior for those areas of the matrices. If not, the default behavior is defined by the expression of the high-level operators. In short, the exact way in which special case logic arises is dependent on the semantics of the high-level data structures and operators and is defined by a set of transforms that express that logic. The AO system does not, however, inherently restrict such semantic variations.</PDAT></PTEXT></PARA>
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>Modifiers may also be used to associate anticipated optimizations with specific, user-defined optimization events. These are called Event-Driven Modifiers. Event-Driven Modifiers have the form</PDAT></PTEXT></PARA>
<PARA ID="P-00083" LVL="0"><PTEXT><F><PTEXT><PDAT>_On(</PDAT><HIL><ULINE><PDAT>EVENTNAME, MODIFIEREXPRESSION</PDAT></ULINE></HIL><PDAT>)</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>These are like interrupts in the AO transformation domain. Whenever the named optimization event occurs, the transformation MODIFIEREXPRESSION is triggered. For example, if the Event-Driven Modifier</PDAT></PTEXT></PARA>
<PARA ID="P-00085" LVL="0"><PTEXT><F><PTEXT><PDAT>_On(SubstitutionOfMe,_Fold</PDAT><HIL><BOLD><PDAT>0</PDAT></BOLD></HIL><PDAT>)</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00086" LVL="7"><PTEXT><PDAT>is attached to a zero data value, then the transformation _Fold</PDAT><HIL><BOLD><PDAT>0</PDAT></BOLD></HIL><PDAT> would be invoked any time some transformation substituted that specific tagged zero for some other construct within an expression. Suppose that tagged </PDAT><HIL><BOLD><PDAT>0</PDAT></BOLD></HIL><PDAT> was substituted for &ldquo;x&rdquo; in the expression</PDAT></PTEXT></PARA>
<PARA ID="P-00087" LVL="0"><PTEXT><F><PTEXT><PDAT>(a&plus;x)</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00088" LVL="7"><PTEXT><PDAT>producing the expression</PDAT></PTEXT></PARA>
<PARA ID="P-00089" LVL="0"><PTEXT><F><PTEXT><PDAT>(a&plus;0_On(SubstitutionOfMe,_Fold</PDAT><HIL><BOLD><PDAT>0</PDAT></BOLD></HIL><PDAT>)).</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00090" LVL="7"><PTEXT><PDAT>Upon completion of the substitution operation, _Fold</PDAT><HIL><BOLD><PDAT>0</PDAT></BOLD></HIL><PDAT> will be triggered and apply one of its many built-in transforms. In this case, it will apply the transform</PDAT></PTEXT></PARA>
<PARA ID="P-00091" LVL="0"><PTEXT><F><PTEXT><PDAT>($X&plus;0)&rarr;$X</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00092" LVL="7"><PTEXT><PDAT>(i.e., anything plus zero may be represented as anything) which will result in the expression being simplified to just</PDAT></PTEXT></PARA>
<PARA ID="P-00093" LVL="0"><PTEXT><F><PTEXT><PDAT>a.</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00094" LVL="7"><PTEXT><PDAT>This allows the transformation programmer to embed anticipated optimizations in code fragments that may be stored in a reusable component library. Event-Driven Modifiers eliminate the open-ended searches that would be required using conventional optimization techniques for such jobs as (but not limited to) promoting a conditional expression outside of a loop once the conditional expression generation step is completed, merging &ldquo;if-then-else&rdquo; statements that share common conditional expressions once all possible such if-then-else statements have been generated, unwrapping or peeling loops once code generation has created all loops of a particular kind, and so forth. Event-Driven Modifiers associate a specific AO transformation with a specific event time for its execution and with a specific piece of target code upon which it is to focus its operation. By contrast, conventional optimization strategies would produce such associations through an open-ended search over a large space of possible transforms, over a large set of possible invocation times, and over the whole of the target program at each point in its evolution. In other words, the search space of conventional optimization strategies is large leading to large and often infeasible amounts of search time.</PDAT></PTEXT></PARA>
<PARA ID="P-00095" LVL="0"><PTEXT><PDAT>The transformation writer can create an unlimited variety of events such as WrapUp, EndOfWrapUp, AfterUnWrap, etc. If several Event-Driven Modifiers are triggered by the same event such as WrapUp and they need to be executed in a particular order, the events may have arguments with numbers that indicate the order of modifier transformation invocation. An example of such event specifications would be WrapUp(</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>), WrapUp(</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>), WrapUp(</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>), and so forth.</PDAT></PTEXT></PARA>
<PARA ID="P-00096" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 4A-4I</PDAT></FGREF><PDAT> illustrate a detailed example of anticipatory optimization for the domain of image processing. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4A</PDAT></FGREF><PDAT> illustrates a portion of the AST corresponding to the following high-level statement. </PDAT>
<CWU>
<MATH-US ID="MATH-US-00001">
<MATHEMATICA ID="MATHEMATICA-00001" FILE="US06314562-20011106-M00001.NB">
<MATHML>
<math>
<mrow>
  <mi>b</mi>
  <mo>=</mo>
  <msup>
    <mrow>
      <mo>[</mo>
      <mrow>
        <msup>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mi>a</mi>
              <mo>&CirclePlus;</mo>
              <mi>s</mi>
            </mrow>
            <mo>)</mo>
          </mrow>
          <mn>2</mn>
        </msup>
        <mo>+</mo>
        <msup>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mi>a</mi>
              <mo>&CirclePlus;</mo>
              <msup>
                <mi>s</mi>
                <mi>&prime;</mi>
              </msup>
            </mrow>
            <mo>)</mo>
          </mrow>
          <mn>2</mn>
        </msup>
      </mrow>
      <mo>]</mo>
    </mrow>
    <mrow>
      <mn>1</mn>
      <mo>/</mo>
      <mn>2</mn>
    </mrow>
  </msup>
</mrow>
</math>
</MATHML>
<EMI ID="EMI-M00001" FILE="US06314562-20011106-M00001.TIF">
</MATH-US>
</CWU>
</PTEXT></PARA>
<PARA ID="P-00097" LVL="7"><PTEXT><PDAT>The variable a represents an image and is of type image; the variable s represents template matrix, which in this example is a 3&times;3 matrix; and the variable b is an image into which the result is stored. The operator &ldquo;&oplus;&rdquo; is the backward convolution operator that applies a template to each pixel within the image. The operator &ldquo;&plus;&rdquo; is the image addition operator that indicates to add corresponding elements of an image. The operators &ldquo;</PDAT><HIL><SP><PDAT>2</PDAT></SP></HIL><PDAT>&rdquo; and &ldquo;</PDAT><HIL><SP><PDAT>&frac12;</PDAT></SP></HIL><PDAT>&rdquo; take each pixel of the image to the specified power. The convolution operator indicates that each pixel in the resulting image is a sum of the neighborhood of pixels around the corresponding pixel in the input image times the weights in the 3&times;3 convolution matrix. This neighborhood is defined by that 3&times;3 convolution matrix, and the 3&times;3 convolution matrix is defined by the right hand operand of the &oplus; operator (e.g., the templates s or s&prime;). Sample values for the template matrix s and s&prime; are </PDAT>
<CWU>
<MATH-US ID="MATH-US-00002">
<MATHEMATICA ID="MATHEMATICA-00002" FILE="US06314562-20011106-M00002.NB">
<MATHML>
<math>
  <mrow>
    <mi>s</mi>
    <mo>=</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <mrow>
              <mo>-</mo>
              <mn>1</mn>
            </mrow>
          </mtd>
          <mtd>
            <mi>&varnothing;</mi>
          </mtd>
          <mtd>
            <mn>1</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mrow>
              <mo>-</mo>
              <mn>2</mn>
            </mrow>
          </mtd>
          <mtd>
            <mi>&EmptyDiamond;</mi>
          </mtd>
          <mtd>
            <mn>2</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mrow>
              <mo>-</mo>
              <mn>1</mn>
            </mrow>
          </mtd>
          <mtd>
            <mi>&varnothing;</mi>
          </mtd>
          <mtd>
            <mn>1</mn>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
</math>


<math>
  <mi>and</mi>
</math>


<math>
  <mrow>
    <msup>
      <mi>s</mi>
      <mi>&prime;</mi>
    </msup>
    <mo>=</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <mrow>
              <mo>-</mo>
              <mn>1</mn>
            </mrow>
          </mtd>
          <mtd>
            <mrow>
              <mo>-</mo>
              <mn>2</mn>
            </mrow>
          </mtd>
          <mtd>
            <mrow>
              <mo>-</mo>
              <mn>1</mn>
            </mrow>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&varnothing;</mi>
          </mtd>
          <mtd>
            <mi>&EmptyDiamond;</mi>
          </mtd>
          <mtd>
            <mi>&varnothing;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>1</mn>
          </mtd>
          <mtd>
            <mn>2</mn>
          </mtd>
          <mtd>
            <mn>1</mn>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
</math>
</MATHML>
<EMI ID="EMI-M00002" FILE="US06314562-20011106-M00002.TIF">
</MATH-US>
</CWU>
</PTEXT></PARA>
<PARA ID="P-00098" LVL="0"><PTEXT><PDAT>These template matrices perform a Sobel edge detection operation in an image, which produces an image with edge segments emphasized and areas of constant texture removed. The constants are weights to be multiplied with the pixels to which they correspond for each specific placement of the diamond on a pixel in an image A. For each such positioning of the diamond (i.e., &ldquo;</PDAT><HIL><BOLD><PDAT>566</PDAT></BOLD></HIL><PDAT> &rdquo;) on a pixel in A, the semantics of the convolution operator (i.e., &ldquo;&oplus;&rdquo;) define the formula for computing the pixel corresponding to the diamond pixel in the resulting image. Since the diamond elements of the template matrices show no numerical value in them, the image pixels corresponding to them do not contribute to the convolution computation for each positioning. Similarly, the null symbols (i.e., &ldquo;&empty;&rdquo;) indicate that the pixels that correspond to these elements on each positioning of the template also do not participate in the convolution computation.</PDAT></PTEXT></PARA>
<PARA ID="P-00099" LVL="0"><PTEXT><PDAT>As described above, the AO system processes the nodes of the AST in a depth-first, left-to-right manner. As each node is processed, the AO system attempts to apply the transforms. The first node processed is leaf node </PDAT><HIL><BOLD><PDAT>401</PDAT></BOLD></HIL><PDAT>. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4B</PDAT></FGREF><PDAT> illustrates the AST after the AO system has processed leaf node </PDAT><HIL><BOLD><PDAT>401</PDAT></BOLD></HIL><PDAT>. Since the type of variable b is image, the transform replaces node </PDAT><HIL><BOLD><PDAT>401</PDAT></BOLD></HIL><PDAT> with a node that contains a reference to an AO system generated iteration operand p</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and adds the quantifier tag:</PDAT></PTEXT></PARA>
<PARA ID="P-00100" LVL="0"><PTEXT><F><PTEXT><PDAT>_Q(&forall;p</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> :(b&lsqb;idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>:int, idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>:int&rsqb;:pixel))</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00101" LVL="7"><PTEXT><PDAT>This quantifier tag indicates that iteration operand p</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> is a pixel type that should be replaced at code generation time with a reference to image b indexed by variables idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. The next node processed is node </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT>. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4C</PDAT></FGREF><PDAT> illustrates the AST after the AO system has processed leaf node </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT>. Since the type of variable a is image, the transform replaces node </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> with a node that contains a reference to an AO system generated iteration operand p</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and adds the quantifier tag:</PDAT></PTEXT></PARA>
<PARA ID="P-00102" LVL="0"><PTEXT><F><PTEXT><PDAT>_Q(&forall;p</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>:(a&lsqb;idx</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>:int,idx</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>:int&rsqb;:pixel)</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00103" LVL="7"><PTEXT><PDAT>This tag indicates that the iteration operand p</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> is a pixel type that should be replaced at code generation time with a reference to the image a indexed by variables idx</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> and idx</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>. The system then processes node </PDAT><HIL><BOLD><PDAT>403</PDAT></BOLD></HIL><PDAT>, but no transforms are applicable. The AO system then processes node </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT>. The AO system processes node </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT> by applying a transform that recognizes that the quantifier tag on node </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> can be migrated to node </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT>. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4D</PDAT></FGREF><PDAT> illustrates the AST after the AO system has processed node </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT>. The AO system processes node </PDAT><HIL><BOLD><PDAT>405</PDAT></BOLD></HIL><PDAT> by applying a transform that recognizes that the quantifier tag on node </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT> can be migrated to node </PDAT><HIL><BOLD><PDAT>405</PDAT></BOLD></HIL><PDAT>. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4E</PDAT></FGREF><PDAT> illustrates the AST after the AO system has processed node </PDAT><HIL><BOLD><PDAT>405</PDAT></BOLD></HIL><PDAT>. The AO system then processes nodes </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>409</PDAT></BOLD></HIL><PDAT> in a manner similar to the processing of nodes </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>405</PDAT></BOLD></HIL><PDAT>. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4F</PDAT></FGREF><PDAT> illustrates the AST after the AO system has processed node </PDAT><HIL><BOLD><PDAT>409</PDAT></BOLD></HIL><PDAT>. Node </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT> has been replaced by a node that contains a reference to the iteration operand p</PDAT><HIL><SP><PDAT>3</PDAT></SP></HIL><PDAT>. A quantifier tag was added to node </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT>, but eventually migrated to node </PDAT><HIL><BOLD><PDAT>409</PDAT></BOLD></HIL><PDAT>. The AO system then processes node </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> by applying a transform that recognizes that nodes </PDAT><HIL><BOLD><PDAT>405</PDAT></BOLD></HIL><PDAT> and node </PDAT><HIL><BOLD><PDAT>409</PDAT></BOLD></HIL><PDAT> have a &ldquo;forall&rdquo; loop quantifier tag that indicates an iteration over each of the elements of image a. The transform coalesces and migrates the quantifier tags of nodes </PDAT><HIL><BOLD><PDAT>405</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>409</PDAT></BOLD></HIL><PDAT> to node </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT>. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4G</PDAT></FGREF><PDAT> illustrates the AST after the AO system has processed node </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT>. The transform recognizes that the iteration operands p</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and p</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> were over the same image a. Therefore, a single iteration operand and a single pair of index variables can be used in the iteration. Thus, the AO system coalesces the quantifier tags into:</PDAT></PTEXT></PARA>
<PARA ID="P-00104" LVL="0"><PTEXT><F><PTEXT><PDAT>_Q(&forall;p</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>:(a&lsqb;idx</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>:int,idx</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>:int&rsqb;:pixel))</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00105" LVL="7"><PTEXT><PDAT>The transform also changes the reference in node </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT> to point to iteration operand p</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, rather than iteration operand p</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>. The AO system then processes node </PDAT><HIL><BOLD><PDAT>411</PDAT></BOLD></HIL><PDAT> by applying a transform that recognizes that the quantifier tag of node </PDAT><HIL><BOLD><PDAT>410</PDAT></BOLD></HIL><PDAT> can be migrated to node </PDAT><HIL><BOLD><PDAT>411</PDAT></BOLD></HIL><PDAT>. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4H</PDAT></FGREF><PDAT> illustrates the AST after the AO system has processed node </PDAT><HIL><BOLD><PDAT>411</PDAT></BOLD></HIL><PDAT>. The AO system then processes node </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT> by applying a transform that recognizes that the quantifier tags of node </PDAT><HIL><BOLD><PDAT>401</PDAT></BOLD></HIL><PDAT> and node </PDAT><HIL><BOLD><PDAT>411</PDAT></BOLD></HIL><PDAT> can be coalesced and migrated. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 41</PDAT></FGREF><PDAT> illustrates the AST after the AO system has processed node </PDAT><HIL><BOLD><PDAT>412</PDAT></BOLD></HIL><PDAT>. The transform coalesced the quantifier tags into the quantifier tag:</PDAT></PTEXT></PARA>
<PARA ID="P-00106" LVL="0"><PTEXT><F><PTEXT><PDAT>_Q(&forall;&lt;p</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&verbar;p</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&gt;:(&lt;b&verbar;a&gt;&lsqb;indx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>:int,idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>:int&rsqb;:pixel))</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00107" LVL="7"><PTEXT><PDAT>The transform recognizes that the images a and b are of the same size and thus can be accessed by the same index variables. Therefore, the coalesced quantifier tag indicates that iteration operands p</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and p</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> should be applied to image b and a through index variables idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00108" LVL="0"><PTEXT><PDAT>Whenever two quantifier tags for a &ldquo;for&rdquo; loop can be coalesced and migrated, different iteration operands for accessing the same container can be replaced by a single iteration operand. For example, as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 4F and 4G</PDAT></FGREF><PDAT>, iteration operands p</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and p</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> were combined since they both are used to indicate the accessing of image a. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 5A-5D</PDAT></FGREF><PDAT> illustrate another example of combining iteration operands. The portion of the AST of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5A</PDAT></FGREF><PDAT> corresponds to the following high-level statement: </PDAT>
<CWU>
<MATH-US ID="MATH-US-00003">
<MATHEMATICA ID="MATHEMATICA-00003" FILE="US06314562-20011106-M00003.NB">
<MATHML>
<math>
<mrow>
  <mi>c</mi>
  <mo>=</mo>
  <msup>
    <mrow>
      <mo>[</mo>
      <mrow>
        <msup>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mi>a</mi>
              <mo>&CirclePlus;</mo>
              <mi>s</mi>
            </mrow>
            <mo>)</mo>
          </mrow>
          <mn>2</mn>
        </msup>
        <mo>+</mo>
        <msup>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mi>b</mi>
              <mo>&CirclePlus;</mo>
              <msup>
                <mi>s</mi>
                <mi>&prime;</mi>
              </msup>
            </mrow>
            <mo>)</mo>
          </mrow>
          <mn>2</mn>
        </msup>
      </mrow>
      <mo>]</mo>
    </mrow>
    <mrow>
      <mn>1</mn>
      <mo>/</mo>
      <mn>2</mn>
    </mrow>
  </msup>
</mrow>
</math>
</MATHML>
<EMI ID="EMI-M00003" FILE="US06314562-20011106-M00003.TIF">
</MATH-US>
</CWU>
</PTEXT></PARA>
<PARA ID="P-00109" LVL="7"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5B</PDAT></FGREF><PDAT> illustrates the portion of the AST after quantifier tags have been added when nodes </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>509</PDAT></BOLD></HIL><PDAT> are processed. The AO system then processes node </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT> by applying a transform that recognizes that the quantifier tags of nodes </PDAT><HIL><BOLD><PDAT>505</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>509</PDAT></BOLD></HIL><PDAT> can be coalesced and migrated. However, since the iteration operands p</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and p</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> are applied to different images, that is a and b, the iteration operands cannot be coalesced. However, since the images have the same size, the index variables can be combined. The resulting quantifier tag is:</PDAT></PTEXT></PARA>
<PARA ID="P-00110" LVL="0"><PTEXT><F><PTEXT><PDAT>_Q(&forall;&lt;p</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&verbar;p</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>&gt;:(&lt;a&verbar;b&gt;&lsqb;idx</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>:int,idx</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>:int&rsqb;:pixel))</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00111" LVL="7"><PTEXT><PDAT>When the AO system processes node </PDAT><HIL><BOLD><PDAT>511</PDAT></BOLD></HIL><PDAT>, it migrates the quantifier tag from node </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT> to node </PDAT><HIL><BOLD><PDAT>511</PDAT></BOLD></HIL><PDAT>. The AO system processes node </PDAT><HIL><BOLD><PDAT>512</PDAT></BOLD></HIL><PDAT> by applying a transform that recognizes that the tags on node </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> and node </PDAT><HIL><BOLD><PDAT>511</PDAT></BOLD></HIL><PDAT> can be coalesced and migrated. The transform recognizes that a single pair of index variables can be used to access images a, b, and c. Thus, the transform adds to node </PDAT><HIL><BOLD><PDAT>512</PDAT></BOLD></HIL><PDAT> the following quantifier tag:</PDAT></PTEXT></PARA>
<PARA ID="P-00112" LVL="7"><PTEXT><PDAT>&emsp;_Q(&forall;&lt;p</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&verbar;p</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&verbar;p</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>&gt;:(&lt;c&verbar;a&verbar;b&gt;&lsqb;idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>:int,idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>;int&rsqb;:pixel))</PDAT></PTEXT></PARA>
<PARA ID="P-00113" LVL="0"><PTEXT><PDAT>The AO system applies the transforms by traversing the AST and at each node determining whether each transform can be applied to the node. Each transform includes a test to determine whether it is applicable. If the transform is applicable, the transform performs the transformation and returns an indication that it was applied. Conversely, if a transform is not applicable, the transform makes no modification to the AST and returns an indication that it was not applied. A transform determines whether it is applicable by comparing the contents of the subtree of which the current node is the root node. For example, referring to Figure SB, when processing node </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT>, one transform would detect that the operator in node </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT> is a &ldquo;&plus;&rdquo; operator (i.e., image addition operator) and that a &ldquo;forall&rdquo; loop quantifier tag for images of the same size have been added to its two operand nodes </PDAT><HIL><BOLD><PDAT>505</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>509</PDAT></BOLD></HIL><PDAT>. When the transform detects such a pattern, the transform performs the coalescing of the quantifier tags and migrates the quantifier tag to node </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT>. The transform then returns an indication that it was applied. In one embodiment, the transforms are organized according to the domains to which and phases in which they can be applied. At each phase, the AO system only attempts to apply those transforms that have been designated for that phase.</PDAT></PTEXT></PARA>
<PARA ID="P-00114" LVL="0"><PTEXT><PDAT>In many instances, the processing of a transform is the same for many different operators that are in the current node. For example, referring again to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5B</PDAT></FGREF><PDAT>, if node </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT> referred to an image subtraction operation (&ldquo;&minus;&rdquo;) rather than an image addition operator (e.g., &ldquo;&plus;&rdquo;) operator, then the processing would be the same. Therefore, the transforms can be grouped according to the types of operators referred to as a &ldquo;group&rdquo; of operators. The high-level operators that apply to the image data structures can be categorized into the following groups:</PDAT></PTEXT></PARA>
<PARA ID="P-00115" LVL="2"><PTEXT><PDAT>1. arithmetic operators;</PDAT></PTEXT></PARA>
<PARA ID="P-00116" LVL="2"><PTEXT><PDAT>2. parallel independent data flow operators;</PDAT></PTEXT></PARA>
<PARA ID="P-00117" LVL="2"><PTEXT><PDAT>3. reduction operators;</PDAT></PTEXT></PARA>
<PARA ID="P-00118" LVL="2"><PTEXT><PDAT>4. convolution operators; and</PDAT></PTEXT></PARA>
<PARA ID="P-00119" LVL="2"><PTEXT><PDAT>5. expansion operators.</PDAT></PTEXT></PARA>
<PARA ID="P-00120" LVL="0"><PTEXT><PDAT>Within each group, all of the operators have a common data flow and data dependency pattern and thereby, the groupings &ldquo;encode&rdquo; that data flow and data dependency pattern information implicitly. This implicit encoding is used by the AO system to avoid the difficult data flow and data dependency analysis step that conventional optimization methods employ.</PDAT></PTEXT></PARA>
<PARA ID="P-00121" LVL="0"><PTEXT><PDAT>The arithmetic operators have the characteristic that the result for a given element of the image relies only on the value in the corresponding element of the operand. For example, the squaring of an image (e.g., a</PDAT><HIL><SP><PDAT>2</PDAT></SP></HIL><PDAT>), is calculated by squaring each individual element of the image. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6A and 6B</PDAT></FGREF><PDAT> illustrate the data flow and data dependency relationships between the operator, operands, and results for the unary and binary operator arithmetic groups, respectively. The arithmetic operator group comprises unary arithmetic operators (e.g., square and square root), binary arithmetic operators (e.g., addition of a constant value to each element in the image), the assignment operator, and function operators that input an image and output another image whose values depend only upon the values of the input image and which have no side effects. Iterations for multiple subexpressions within an encompassing expression can be combined when the operators of those subexpressions are arithmetic operators. For example, the high level subexpressions of unary operator f and binary operator g (which are shown in function form) can potentially have their iterations combined for many combinations of those operators such as (but not limited to):</PDAT></PTEXT></PARA>
<PARA ID="P-00122" LVL="0"><PTEXT><F><PTEXT><PDAT>. . . f (g (ImageA, ImageB)) . . . </PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00123" LVL="7"><PTEXT><PDAT>&emsp;. . . h (f (ImageC), g (ImageA, ImageB)) . . .</PDAT></PTEXT></PARA>
<PARA ID="P-00124" LVL="0"><PTEXT><F><PTEXT><PDAT>. . . g(f (ImageA), ImageB) . . . </PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00125" LVL="7"><PTEXT><PDAT>given the additional requirement that the newly introduced binary operator h is a member of the parallel independent data flow operator group.</PDAT></PTEXT></PARA>
<PARA ID="P-00126" LVL="0"><PTEXT><PDAT>The parallel independent data flow operators have the characteristic that they are applied to sets of high-level data structures that are structurally isomorphic or that have subparts that are structurally isomorphic. For example, the addition operator that applies to two images with the same dimensions is in this group. The &lsqb;i,j&rsqb;</PDAT><HIL><SP><PDAT>th </PDAT></SP></HIL><PDAT>element of the sum of the two images depends only upon the &lsqb;i,j&rsqb;</PDAT><HIL><SP><PDAT>th </PDAT></SP></HIL><PDAT>element of each operand image. The computation on each element is independent in the sense that between each step of the iteration the resulting value does not depend on the values generated during another step. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6B</PDAT></FGREF><PDAT> illustrates the relationship between the operands, operator, and result for the parallel independent data flow group. This group includes arithmetic operators (e.g, unary minus) and mathematically pure functions applied to individual replicated structures or applied to parallel replicated structures. Iterations over the operands and results for operators in this group can typically be combined. (A mathematically pure function is a single-valued function&mdash;symbolically represented as f(x,y, . . . )&mdash;that depends only on the input values x,y, . . . and no other values. Further, these functions have no side effects, such as the assignment of values to global variables or the execution of input or output operations.)</PDAT></PTEXT></PARA>
<PARA ID="P-00127" LVL="0"><PTEXT><PDAT>The reduction operators are operators that map a high-level data structure or a portion of a high-level structure into a single value. Because of the dependency, all the values of the operand need to be established prior to calculating the result. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6C</PDAT></FGREF><PDAT> illustrates the operand, operator, and result of reduction group. This group includes operators that search a composite data structure for a certain value (e.g., minimum value) and that compute a single value for a composite data structure (e.g., the average of all the values). Certain iterations cannot be combined when reduction operators are used. For example, in the following expression</PDAT></PTEXT></PARA>
<PARA ID="P-00128" LVL="0"><PTEXT><F><PTEXT><PDAT>A&plus;min(B)</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00129" LVL="7"><PTEXT><PDAT>the iteration to find the minimum value of matrix B cannot be combined with the iteration to add that minimum value to each element of matrix A.</PDAT></PTEXT></PARA>
<PARA ID="P-00130" LVL="0"><PTEXT><PDAT>The convolution operators are combinations of reduction operators nested within parallel data flow operators. The convolution operators reduce a portion of the high-level data structure into a single value in the resulting data structure. The convolution operators are typically implemented with nested loops: the outer loop iterates over each element of the operand high-level data structure and the inner loop iterates over a convolution window. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6D</PDAT></FGREF><PDAT> illustrates the operands and convolution windows, operator, and result for the convolution group. When convolution operators are used, all the values of an operand matrix may need to be determined before the convolution operator is applied. This requirement limits the combining of iterations when convolution operators are being used. For example, in the expression</PDAT></PTEXT></PARA>
<PARA ID="P-00131" LVL="0"><PTEXT><F><PTEXT><PDAT>((A&oplus;s)&oplus;t)</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00132" LVL="7"><PTEXT><PDAT>the (A&oplus;s) convolution must be completed and stored in some temporary image such as T</PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> before the (T</PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>&oplus;t) convolution can be begun. Therefore, the iterations over these two convolutions may not be combined.</PDAT></PTEXT></PARA>
<PARA ID="P-00133" LVL="0"><PTEXT><PDAT>The expansion operators are the inverse of reduction operators.</PDAT></PTEXT></PARA>
<PARA ID="P-00134" LVL="0"><PTEXT><PDAT>The expansion operators take a single value and generate multiple values to fill a high-level data structure. The complete set of operands upon which the result depends need to be computed before the result is known. If the input operands of the expansion operator are atomic values (i.e., integers), the iterations may be combinable. If the input operands are expressions, the semantics of those expressions determine the combinability of the iteration. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6E</PDAT></FGREF><PDAT> illustrates the operand, operator, and result for the expansion group. The group includes operators that fill an array with a constant value or an array with values that vary based on the index of the array.</PDAT></PTEXT></PARA>
<PARA ID="P-00135" LVL="0"><PTEXT><PDAT>The AO system includes a control component that controls the traversing of an AST and applying of the various transforms to the AST. When the control component is invoked, it is passed the root node of the AST to be processed and the name of a domain associated with the AST. The control component stores a reference to a root node in a to-be-processed queue and loops popping the top of the queue and invoking an AO routine that controls the traversing and invoking of the routines that implement the phase components. A transform may replace a subtree with another subtree that, for example, may use lower-level computational constructs. The transform may place the root node of the new subtree on the queue. In this way, the AO system applies further transforms to the nodes of the subtree. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is a flow diagram of the control component. The control component initially stores a reference to the root node of the AST in the queue. In step </PDAT><HIL><BOLD><PDAT>701</PDAT></BOLD></HIL><PDAT>, if the queue is empty, then the control component is done, else the control component continues at step </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT>, the control component selects a subtree headed by the node popped from the queue. In step </PDAT><HIL><BOLD><PDAT>703</PDAT></BOLD></HIL><PDAT>, the control component invokes the anticipatory optimization (&ldquo;AO&rdquo;) routine passing the selected subtree and the domain name. The control component then loops to step </PDAT><HIL><BOLD><PDAT>701</PDAT></BOLD></HIL><PDAT> to determine whether the queue is empty.</PDAT></PTEXT></PARA>
<PARA ID="P-00136" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> is a flow diagram of the AO routine. The AO routine is passed a pointer to the subtree to be processed and a domain name. The routine examines the definition of the operator at the top of the AST to see if it is in the named domain or within a domain that inherits from the named domain. For example, if the operator in the AST is the convolution operator, then the definition of convolution operator, which is located at some remote point in the AST, is tagged with the domain &ldquo;Image.&rdquo; If the domain condition is fulfilled, the routine performs the anticipatory optimization on the subtree by successively invoking routines to effect the processing for phases </PDAT><HIL><BOLD><PDAT>0</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>. Otherwise, the routine recursively invokes the AO routine for each operand of the root node of the subtree. In step </PDAT><HIL><BOLD><PDAT>801</PDAT></BOLD></HIL><PDAT>, if the subtree is empty, then the routine returns, else the routine continues at step </PDAT><HIL><BOLD><PDAT>802</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>802</PDAT></BOLD></HIL><PDAT>, if the subtree is within the named domain, then the routine continues at step </PDAT><HIL><BOLD><PDAT>803</PDAT></BOLD></HIL><PDAT>, else the routine continues at step </PDAT><HIL><BOLD><PDAT>807</PDAT></BOLD></HIL><PDAT>. In steps </PDAT><HIL><BOLD><PDAT>803</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>806</PDAT></BOLD></HIL><PDAT>, the routine invokes the subroutines to process each of the phases of the AO system and then returns. Since the processing for phases </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> are the same, except for selecting to apply only transforms appropriate to the phase, the processing of these phases is implemented in a single subroutine (&ldquo;AOPhaseN&rdquo;) with the current phase being passed as a parameter. In steps </PDAT><HIL><BOLD><PDAT>807</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>809</PDAT></BOLD></HIL><PDAT>, the routine selects each of the operands of the subtree and recursively invokes the AO routine passing the node of the selected operand. In step </PDAT><HIL><BOLD><PDAT>807</PDAT></BOLD></HIL><PDAT>, the routine selects the next operand of the subtree. In step </PDAT><HIL><BOLD><PDAT>808</PDAT></BOLD></HIL><PDAT>, if all the operands have already been selected, then the routine returns. In step </PDAT><HIL><BOLD><PDAT>809</PDAT></BOLD></HIL><PDAT>, the routine recursively invokes the AO routine passing the selected operand and the domain name. The routine then loops to step </PDAT><HIL><BOLD><PDAT>807</PDAT></BOLD></HIL><PDAT> to select the next operand of the subtree.</PDAT></PTEXT></PARA>
<PARA ID="P-00137" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT> is a flow diagram of the routine for processing phase </PDAT><HIL><BOLD><PDAT>0</PDAT></BOLD></HIL><PDAT> of the AO system. This routine traverses the passed subtree in a depth-first, left-to-right manner by recursively invoking this routine for each operand. If the operator of the root node of the subtree has an optimization tag in its definition that indicates it should be moved inline, then the routine replaces the root node with the inline version of the operator. In step </PDAT><HIL><BOLD><PDAT>901</PDAT></BOLD></HIL><PDAT>, if the subtree is empty, then the routine returns, else the routine continues at step </PDAT><HIL><BOLD><PDAT>902</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>902</PDAT></BOLD></HIL><PDAT>, if the subtree is a leaf node, then the routine returns, else the routine continues at step </PDAT><HIL><BOLD><PDAT>903</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>903</PDAT></BOLD></HIL><PDAT>, if the root of the subtree is a node with a functional expression or an operator, then the routine continues at step </PDAT><HIL><BOLD><PDAT>904</PDAT></BOLD></HIL><PDAT>, else the routine returns. In steps </PDAT><HIL><BOLD><PDAT>904</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>906</PDAT></BOLD></HIL><PDAT>, the routine loops recursively invoking the AOPhaseO routine for each of the operands of the root node of the subtree. In step </PDAT><HIL><BOLD><PDAT>904</PDAT></BOLD></HIL><PDAT>, the routine selects the next operand of the root node of the subtree. In step </PDAT><HIL><BOLD><PDAT>905</PDAT></BOLD></HIL><PDAT>, if all the operands have already been selected, then the routine continues at step </PDAT><HIL><BOLD><PDAT>907</PDAT></BOLD></HIL><PDAT>, else the routine continues at step </PDAT><HIL><BOLD><PDAT>906</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>906</PDAT></BOLD></HIL><PDAT>, the routine recursively invokes the AOPhaseO routine passing the selected operand as the root of the subtree and loops to step </PDAT><HIL><BOLD><PDAT>904</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>907</PDAT></BOLD></HIL><PDAT>, if the definition of the operator in the root node of the subtree indicates that it can be placed inline, then the routine continues at step </PDAT><HIL><BOLD><PDAT>908</PDAT></BOLD></HIL><PDAT>, else the routine returns. In step </PDAT><HIL><BOLD><PDAT>908</PDAT></BOLD></HIL><PDAT>, the routine replaces the root node of the subtree with the corresponding inline subtree and returns. Alternatively, this subroutine could be implemented in the same manner as the subroutine for processing the other phases and a transform can be implemented to effect the placing of functions inline.</PDAT></PTEXT></PARA>
<PARA ID="P-00138" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 10</PDAT></FGREF><PDAT> is a flow diagram illustrating a routine for processing of phases </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> of the AO system. This routine is passed an AST subtree and an indication of the current phase. The routine performs a depth-first, left-to-right traversal of the subtree by recursively invoking the routine. When a node is visited, the routine invokes each transform for that phase. When the first transform indicates that it was successfully applied, the routine then returns. A transform may add the root node of a subtree to the queue for further processing by the AO system. In step </PDAT><HIL><BOLD><PDAT>1001</PDAT></BOLD></HIL><PDAT>, if the subtree is empty, then the routine returns, else the routine continues at step </PDAT><HIL><BOLD><PDAT>1002</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>1002</PDAT></BOLD></HIL><PDAT>, if the root node of the subtree is a functional expression or an operator, then the routine continues at step </PDAT><HIL><BOLD><PDAT>1003</PDAT></BOLD></HIL><PDAT>, else the routine continues at step </PDAT><HIL><BOLD><PDAT>1006</PDAT></BOLD></HIL><PDAT>. In steps </PDAT><HIL><BOLD><PDAT>1003</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>1005</PDAT></BOLD></HIL><PDAT>, the routine loops selecting the operands of the root node of the subtree and recursively invoking the AOPhaseN routine for the current phase. In step </PDAT><HIL><BOLD><PDAT>1003</PDAT></BOLD></HIL><PDAT>, the routine selects the next operand of the subtree. In step </PDAT><HIL><BOLD><PDAT>1004</PDAT></BOLD></HIL><PDAT>, if all the operands have already been selected, then the routine continues at step </PDAT><HIL><BOLD><PDAT>1006</PDAT></BOLD></HIL><PDAT>, else the routine continues at step </PDAT><HIL><BOLD><PDAT>1005</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>1005</PDAT></BOLD></HIL><PDAT>, the routine recursively invokes the AOPhaseN routine for the current phase and loops to step </PDAT><HIL><BOLD><PDAT>1003</PDAT></BOLD></HIL><PDAT> to select the next operand. In steps </PDAT><HIL><BOLD><PDAT>1006</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT>, the routine loops attempting to apply each transform until one applies. In step </PDAT><HIL><BOLD><PDAT>1006</PDAT></BOLD></HIL><PDAT>, the routine selects the next transform that might be applicable to the root node of the subtree. In step </PDAT><HIL><BOLD><PDAT>1007</PDAT></BOLD></HIL><PDAT>, if all the transforms have already been selected, then the routine returns. In step </PDAT><HIL><BOLD><PDAT>1008</PDAT></BOLD></HIL><PDAT>, if the phase of the selected transform matches the current phase, then the routine continues at step </PDAT><HIL><BOLD><PDAT>1009</PDAT></BOLD></HIL><PDAT>, else the routine loops to step </PDAT><HIL><BOLD><PDAT>1006</PDAT></BOLD></HIL><PDAT> to select the next transform. In step </PDAT><HIL><BOLD><PDAT>1009</PDAT></BOLD></HIL><PDAT>, the routine invokes the transform. In step </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT>, if the transform is successful (i.e., applied), then the routine returns, else the routine loops to step </PDAT><HIL><BOLD><PDAT>1006</PDAT></BOLD></HIL><PDAT> to select the next transform.</PDAT></PTEXT></PARA>
<PARA ID="P-00139" LVL="0"><PTEXT><PDAT>In the following, various transforms are described relating to the domain of image processing. These transforms operate on operators and operands that are in the domain of image processing. The type of high-level computational constructs for this domain include a pixel, an image, a template, and a number, which is inherited from the C programming language domain. Data of type pixel represents the gray scale intensity of one pixel of an image. Data of type image is defined to be an m by n matrix of pixels. A template datatype translates into a complex C domain data structure consisting of three components:</PDAT></PTEXT></PARA>
<PARA ID="P-00140" LVL="2"><PTEXT><PDAT>1. A matrix w containing numbers representing weights w&lsqb;l,m&rsqb; to be applied by the convolution operator,</PDAT></PTEXT></PARA>
<PARA ID="P-00141" LVL="2"><PTEXT><PDAT>2. A similarly structured matrix XY that for each w&lsqb;l,m&rsqb; defines an &lsqb;x,y&rsqb; coordinate pair value XY&lsqb;l,m&rsqb;&equals;&lsqb;f(i), g(j)&rsqb; identifying the pixel in the input image a to which the weight w&lsqb;l,m&rsqb; is to be applied, where the values f(i) and g(j) are computed from the coordinates of the currently selected pixel a&lsqb;i,j&rsqb; and the offsets implied by the coordinates l and m within w, and p</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> 3. A procedure that at run-time calculates the coordinate pair values of XY for each pixel positioning &lsqb;i,j&rsqb; in a and the values of w, if they are not constant (e.g., they could be a function of the &lsqb;i,j&rsqb; position in a).</PDAT></PTEXT></PARA>
<PARA ID="P-00142" LVL="7"><PTEXT><PDAT>In other words, a template performs two separate functions: 1) it supplies data values or weights that participate in the computation of the output pixel corresponding to the current input pixel and 2) it supplies a coordinate mapping from the &lsqb;xy&rsqb; position of the current input pixel upon which the w matrix is centered into a set of coordinate pairs of the pixels in the neighborhood of the current pixel that will participate in the computation of the output pixel corresponding to the current input pixel. The coordinate mapping and the computation of the w values may involve arbitrarily complex logic. For example, when centering w on a border pixel in a, this logic determines whether or not to include the elements of w that fall outside of the image a and if they are to be included, exactly how will they participate in the computation (e.g., will they all be zero or some other value&quest;).</PDAT></PTEXT></PARA>
<PARA ID="P-00143" LVL="0"><PTEXT><PDAT>For example in the case of the backward convolution operator, the output pixel (b&lsqb;i,j&rsqb;) corresponding to the input pixel a&lsqb;i,j&rsqb;, is computed by the following formula: </PDAT>
<CWU>
<MATH-US ID="MATH-US-00004">
<MATHEMATICA ID="MATHEMATICA-00004" FILE="US06314562-20011106-M00004.NB">
<MATHML>
<math>
<mrow>
  <mrow>
    <mi>b</mi>
    <mo>&af;</mo>
    <mrow>
      <mo>[</mo>
      <mrow>
        <mi>i</mi>
        <mo>,</mo>
        <mi>j</mi>
      </mrow>
      <mo>]</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <munder>
      <mo>&Sum;</mo>
      <mrow>
        <mi>l</mi>
        <mo>,</mo>
        <mi>m</mi>
      </mrow>
    </munder>
    <mo>&it;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <mrow>
          <mi>a</mi>
          <mo>&af;</mo>
          <mrow>
            <mo>[</mo>
            <mrow>
              <mrow>
                <mi>x</mi>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mi>coordinate</mi>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mi>of</mi>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mrow>
                  <mi>XY</mi>
                  <mo>&af;</mo>
                  <mrow>
                    <mo>[</mo>
                    <mrow>
                      <mi>l</mi>
                      <mo>,</mo>
                      <mi>m</mi>
                    </mrow>
                    <mo>]</mo>
                  </mrow>
                </mrow>
              </mrow>
              <mo>,</mo>
              <mrow>
                <mi>y</mi>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mi>coordinate</mi>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mi>of</mi>
                <mo>&it;</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mrow>
                  <mi>XY</mi>
                  <mo>&af;</mo>
                  <mrow>
                    <mo>[</mo>
                    <mrow>
                      <mi>l</mi>
                      <mo>,</mo>
                      <mi>m</mi>
                    </mrow>
                    <mo>]</mo>
                  </mrow>
                </mrow>
              </mrow>
            </mrow>
            <mo>]</mo>
          </mrow>
        </mrow>
        <mo>*</mo>
        <mrow>
          <mi>w</mi>
          <mo>&af;</mo>
          <mrow>
            <mo>[</mo>
            <mrow>
              <mi>l</mi>
              <mo>,</mo>
              <mi>m</mi>
            </mrow>
            <mo>]</mo>
          </mrow>
        </mrow>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</MATHML>
<EMI ID="EMI-M00004" FILE="US06314562-20011106-M00004.TIF">
</MATH-US>
</CWU>
</PTEXT></PARA>
<PARA ID="P-00144" LVL="0"><PTEXT><PDAT>Data of type number is a group of types that includes integers and reals. The type number is introduced to represent types of operands that can be treated as a group. Table 1 provides a definition of these types. The definition of these types includes a list of those transforms that can be applied to these types. In the case where the mapping of a high-level type to a lower-level type is straightforward with little or no variation, the complexity of defining a separate transform or transforms for each data type is omitted and a shorthand that expresses the simple transform inline as the value (i.e., the right hand side of the&rarr;operator) of the definition is used. This is just a notational convenience and simplification. Underneath, there is still an AO system generated transform that is triggered to do the translation from high-level to low-level constructs. For example, the following declaration of a variable as type pixel:</PDAT></PTEXT></PARA>
<PARA ID="P-00145" LVL="0"><PTEXT><F><PTEXT><PDAT>pixel varl;</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00146" LVL="7"><PTEXT><PDAT>would map to the following low-level declaration:</PDAT></PTEXT></PARA>
<PARA ID="P-00147" LVL="0"><PTEXT><F><PTEXT><PDAT>int varl;</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00148" LVL="7"><PTEXT><PDAT>This mapping is provided by the following definition in Table 1:</PDAT></PTEXT></PARA>
<PARA ID="P-00149" LVL="0"><PTEXT><F><PTEXT><PDAT>Define Type Pixel $Name&rarr;&lcub;int $Name&rcub;</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00150" LVL="7"><PTEXT><PDAT>The text to the right of the assignment operator indicates the low-level mapping. The symbol prefixed with the &ldquo;$&rdquo; indicates substitution of the corresponding symbol from the high-level declaration. For example, the symbol &ldquo;var&rdquo; is substituted for the symbol &ldquo;$Name.&rdquo; The types are defined hierarchically and transforms can be defined for each level in the hierarchy. For example, the highest level type is composite, which includes pixel, image, template, and number as subtypes.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00001">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0" PGWIDE="1">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="273PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ROWSEP="1"><PTEXT><PDAT>TABLE 1</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>Define Types</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&emsp;&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="77PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="175PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Type Composite</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>_Transform(CompositeLeaf)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>_Transform(ReduceLeafAbstractions)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>_Transform(ReduceAbstractDeclarations)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>_Domain(Image)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Type Pixel $Name <CUSTOM-CHARACTER FILE="US06314562-20011106-P00801.TIF" ID="CUSTOM-CHARACTER-00001"> &lcub;int $Name&rcub;;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Type Image $Name &lsqb;$Dim1, $Dim2&rsqb; <CUSTOM-CHARACTER FILE="US06314562-20011106-P00801.TIF" ID="CUSTOM-CHARACTER-00002"> &lcub;Pixel $Name &lsqb;$Dim1, $Dim2&rsqb;&rcub;;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Type Template $WeightType $Name (&thinsp;) &lsqb;$Dim1, $Dim2&rsqb; &lcub;$CodeBody &rcub; <CUSTOM-CHARACTER FILE="US06314562-20011106-P00801.TIF" ID="CUSTOM-CHARACTER-00003"></PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="231PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>// Define table to communicate with convolution function</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&num;&lcub; $TableName &equals; concat($Name,&rdquo;Table&rdquo;);&rcub; //Side effect: create name</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>TableElement ( $WeightType) $TableName &lsqb;$Dim1, $Dim2&rsqb;;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&num;&lcub; $ProcName &equals; concat($Name,&rdquo;Proc&rdquo;);&rcub; //Side effect: create name</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>// Define user written template code procedure</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>void $ProcName (&thinsp;) &lcub; $CodeBody&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>// Register the table with the convolution operator code</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>// Giving pointer to it, its dimensions, and routine that fills it with data</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>RegisterConvolutionTable(&amp;($TableName), $Dim1, $Dim2,</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="133PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="140PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>((* $ProcName) (&thinsp;)));</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="231PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Type TableElement ($WType) <CUSTOM-CHARACTER FILE="US06314562-20011106-P00801.TIF" ID="CUSTOM-CHARACTER-00004"> // Simple parameterized type</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="231PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;struct</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="56PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>int XIndex; // X index in target image in terms of current pixel</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>int YIndex; // Y index in target image in terms of current pixel</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>$WType weight; // Convolution weight multiplier for</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="133PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="140PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>// target image pixel &lsqb;XIndex, YIndex&rsqb;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="56PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="217PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;&rcub;;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Type Number; _Domain(C)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="231PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Type int;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Type real;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>. . .</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="245PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="42PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="231PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>. . .</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="259PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00151" LVL="0"><PTEXT><PDAT>Table 2 contains the definitions of the operator group. The operators are organized hierarchically and transforms can be defined for each level. The definitions of the operators define the AST pattern of the operators and their operands as well as the return type of the operator. For example, the definition</PDAT></PTEXT></PARA>
<PARA ID="P-00152" LVL="0"><PTEXT><F><PTEXT><PDAT>Define Operator Group ArithOp $Op(pixel, pixel):pixel when ($Op&egr;&lcub;*,&prime;,&plus;,&minus;. . . &rcub;)</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00153" LVL="7"><PTEXT><PDAT>where ArithOp is the name of the operator group, &ldquo;(pixel, pixel)&rdquo; indicates the pattern of the operand types in the AST (i.e., the operators of this group operate on two operands of type pixel); &ldquo;:pixel&rdquo; indicates the return type of the operation; and the &ldquo;when ( . . . )&rdquo; clause is a shorthand that indicates an additional condition for ArithOps that are covered by this definition. In this case, the &ldquo;when&rdquo; clause requires that the specific ArithOp operator, which will be bound to the transformation-time pattern variable $Op, be a member of the enumerated operator set &lcub;*,/,&plus;, &minus;, . . . &rcub;. This shorthand saves the transformation programmer from having to write a separate definition expression for each specific operator. A &ldquo;when&rdquo; clause can express arbitrary conditions. Operationally, the patterns plus the &ldquo;when&rdquo; conditions provide the case logic for identifying the specific class of operators in a specific situation and thereby determine where on the inheritance hierarchy to start the search for applicable transformations. This group is within the higher-level operator group ArithOps, which has transforms &ldquo;ArithOpsOnComposites&rdquo; and &ldquo;GenerateCodeForFunctions&rdquo; defined as indicated by the following:</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00002">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="1" COLWIDTH="84PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="133PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>Define OperatorGroup</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>_Transform(ArithOpsOnComposites)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>ArithOps</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>_Transform(GenerateCodeForFunctions)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00154" LVL="0"><PTEXT><PDAT>The transforms for the types of Table 1 and the operator groups of Table 2 are described in the following.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00003">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0" PGWIDE="1">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="294PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ROWSEP="1"><PTEXT><PDAT>TABLE 2</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>Define OperatorGroups _Transform(GenerateLoopStructure) _Domain(Image)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="105PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="175PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define OperatorGroup ArithOps</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>_Transform(ArithOpsOnComposites)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>_Transform (GenerateCodeForFunctions)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="266PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Operator Group ArithOp $Op(pixel,pixel):pixel when ($Op&egr;&lcub;*,/,&plus;,&minus;,&equals;, . . . &rcub;);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Operator Group ArithOp $Op(pixel):pixel when ($Op&egr;&lcub;&plus;,&minus;,power,sqrt, . . . &rcub;);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>. . .</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Operator power( &lsqb;pixel &verbar; number&rsqb; , number) : &lsqb;pixel &verbar; number&rsqb; ;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>_Transform(GenerateCodeForPower)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="280PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define OperatorGroup ParallelOps _Transform(ParallelOpsCompositeOperands)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="266PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Operator Group ParallelOp $Op(pixel,pixel):pixel when ($Op&egr;&lcub;*,/,&plus;,&minus;,&equals;, . . . &rcub;);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Operator Group ParallelOp $Op(pixel):pixel when ($Op&egr;&lcub;&plus;,&minus;, . . . &rcub;);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Operator Group ParallelOp $Op(image,image):image when ($Op&egr;&lcub;*,/,&plus;,&minus;,&equals;, . . . &rcub;);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Operator Group ParallelOp $Op(image) : image when ($Op&egr;&lcub; &plus;, &minus;, . . . &rcub;);</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="126PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="154PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define OperatorGroup ConvolutionOps</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>_Transform(BreakNestedConvolutions)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>_Transform(ReduceConvolutionOperator)</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="266PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&lcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="2">
<COLSPEC COLNAME="OFFSET" COLWIDTH="14PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="280PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Operator Group BackwardConvolutionOp(image, Template):image</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>when ($Op&egr; &lcub;&oplus;, <CUSTOM-CHARACTER FILE="US06314562-20011106-P00802.TIF" ID="CUSTOM-CHARACTER-00005">, <CUSTOM-CHARACTER FILE="US06314562-20011106-P00803.TIF" ID="CUSTOM-CHARACTER-00006">, . . . &rcub;); _Transform(BackwardConvolutionOnLeaves)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Define Operator Group ForwardConvolutionOp(Template, image) : image</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>when ($Op&egr; &lcub;&oplus;, <CUSTOM-CHARACTER FILE="US06314562-20011106-P00802.TIF" ID="CUSTOM-CHARACTER-00007">, <CUSTOM-CHARACTER FILE="US06314562-20011106-P00803.TIF" ID="CUSTOM-CHARACTER-00008">, . . . &rcub;); _Transform(ForwardConvolutionOnLeaves)</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
</TBODY>
</TGROUP>
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="1">
<COLSPEC COLNAME="1" COLWIDTH="294PT" ALIGN="LEFT">
<TBODY VALIGN="TOP">
<ROW>
<ENTRY><PTEXT><PDAT>&rcub;</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY NAMEST="1" NAMEEND="1" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00155" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 11A-11C</PDAT></FGREF><PDAT> illustrate the transforming of nested convolutions during phase </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>. The transform BreakNestedConvolutions is defined for the operators within the group ConvolutionOps. The transform determines whether the root node refers to a convolution operator and whether at least one of the operands is a composition of a composite data structure (e.g., A&plus;B, where A and B are images). If so, then the transform generates a temporary composite data structure, adds a statement to the AST to assign the result of the composition to the temporary structure, and replaces the expression of the composition in the current subtree with a reference to the temporary structure. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 11A and 11B</PDAT></FGREF><PDAT> illustrate a subtree before and after the transform is applied. The subtree represents the statement D&equals;(A&plus;B)&oplus;C. The transform adds a new portion to the AST representing the statement Cl&equals;A&plus;B and revises the current subtree to D&equals;Cl&oplus;C. The variable Cl represents the temporary composite data structure. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1C</PDAT></FGREF><PDAT> is a flow diagram of the transform BreakNestedConvolutions. In step </PDAT><HIL><BOLD><PDAT>1101</PDAT></BOLD></HIL><PDAT>, if the root node indicates a convolution operator and one of the operands is a composition of composites, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1102</PDAT></BOLD></HIL><PDAT>, else the transform returns an indication of false. In steps </PDAT><HIL><BOLD><PDAT>1102</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>1108</PDAT></BOLD></HIL><PDAT>, the transform loops selecting and processing each operand. In step </PDAT><HIL><BOLD><PDAT>1102</PDAT></BOLD></HIL><PDAT>, the transform selects the next operand. In step </PDAT><HIL><BOLD><PDAT>1104</PDAT></BOLD></HIL><PDAT>, if both operands have already been selected, then the transform returns an indication of true, else the transform continues at step </PDAT><HIL><BOLD><PDAT>1104</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>1104</PDAT></BOLD></HIL><PDAT>, if the selected operand is a composition of composites, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT>, else the transform loops to step </PDAT><HIL><BOLD><PDAT>1102</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT>, the transform defines a temporary variable of the form Cnn of the composite type, where nn represents a number generated by the AO system so that the variable name is unique. In step </PDAT><HIL><BOLD><PDAT>1106</PDAT></BOLD></HIL><PDAT>, the transform inserts the declaration for the variable Cnn at the first enclosing scope of the current subtree. In step </PDAT><HIL><BOLD><PDAT>1106</PDAT></BOLD></HIL><PDAT>, the transform inserts a statement assigning the value of the selected composition to the variable before the statement containing the current subtree and adds the statement to the to-be-processed queue so that anticipatory optimizations can be applied to the statement. In step </PDAT><HIL><BOLD><PDAT>1108</PDAT></BOLD></HIL><PDAT>, the transform sets the selected operand at the current node to the variable Cnn and loops to step </PDAT><HIL><BOLD><PDAT>1102</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00156" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 12A-12C</PDAT></FGREF><PDAT> illustrate the transforming of composite leaf nodes during phase </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. The transform CompositeLeaf is defined for the operands that are a subtype of the type composite. If a leaf node refers to an operand that is a composite (e.g., an image), then the transform adds the appropriate optimization tag. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 12A-12B</PDAT></FGREF><PDAT> illustrate a subtree before and after the transform is applied. The subtree represents the statement D&equals;A, where D and A are images. The transform replaces the leaf node with a node that refers to iteration operand p</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and adds the following tag:</PDAT></PTEXT></PARA>
<PARA ID="P-00157" LVL="0"><PTEXT><F><PTEXT><PDAT>_Q(&forall;p</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>:(A&lsqb;idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>:int,idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>:int&rsqb;:pixel))</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00158" LVL="7"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 12C</PDAT></FGREF><PDAT> is a flow diagram of the transform CompositeLeaf. In step </PDAT><HIL><BOLD><PDAT>1201</PDAT></BOLD></HIL><PDAT>, if the root node of the subtree is leaf node and the operand type is an image, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1202</PDAT></BOLD></HIL><PDAT>, else the transform continues at step </PDAT><HIL><BOLD><PDAT>1203</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>1202</PDAT></BOLD></HIL><PDAT>, the transform replaces the subtree with a node with the iteration operand and a quantifier tag and returns true. In step </PDAT><HIL><BOLD><PDAT>1203</PDAT></BOLD></HIL><PDAT>, if the root node of the subtree is a leaf node and the operand type is a template, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1204</PDAT></BOLD></HIL><PDAT>, else the transform returns false. In step </PDAT><HIL><BOLD><PDAT>1204</PDAT></BOLD></HIL><PDAT>, the transform returns true with no change to the node so that the processing moves on to the parent node, which is a general convolution operator (i.e., &oplus;). A later transform in a later phase (i.e., ReduceConvolutionOperator) uses this unaltered leaf as an argument in the call to the general convolution function to be generated from its processing of the general convolution operator one level above this leaf in the AST. Indeed, there is the opportunity for ReduceConvolutionOperator transform to generate highly optimized code for the general convolution operator by inlining much of the template code.</PDAT></PTEXT></PARA>
<PARA ID="P-00159" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 13A-13C</PDAT></FGREF><PDAT> illustrate the transforming that migrates a quantifier tag to a node that references the convolution operator during phase </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. The transform BackwardConvolutionOnLeaves is defined for the operators in the group BackwardConvolution. If the left operand is a pixel (e.g., iteration operand) and the right operand is a template, then a quantifier tag of the left operand is moved to the node of the convolution operator. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 13A-13B</PDAT></FGREF><PDAT> illustrate a subtree before and after the transform is applied. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 13C</PDAT></FGREF><PDAT> is a flow diagram of a transform BackwardConvolutionOnLeaves. In step </PDAT><HIL><BOLD><PDAT>1301</PDAT></BOLD></HIL><PDAT>, if the root node of the subtree is a convolution operator, if the left operand is a leaf node of type pixel with a quantifier and if the right operand is a leaf node of type template, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1302</PDAT></BOLD></HIL><PDAT>, else the transform returns false. In step </PDAT><HIL><BOLD><PDAT>1302</PDAT></BOLD></HIL><PDAT>, the transform moves a quantifier tag from the left operand to the current node and returns a true.</PDAT></PTEXT></PARA>
<PARA ID="P-00160" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 14</PDAT></FGREF><PDAT> is a flow diagram that illustrates the transforming of parallel operators of composite operands during phase </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. The transform ParallelOpsCompositeOperands is defined for the operators in the ParallelOps group. This transform is applied when the operator is an arithmetic operator and the left and right operands are composite operands with the &ldquo;forall&rdquo; quantifier tags. The transform coalesces and migrates the quantifier tag to the operator node. If both the left and right quantifier tags refer to the same container (i.e., composite data structure), then the iteration operand for accessing the composite data structures can be shared. The index variables can also be shared. The transform initializes the new quantifier tag to contain the iteration operands, the containers, and the index variables of the quantifier tag of the left operand. The transform then adds those iteration operands and containers of the quantifier tag of the right operand for each container that is not already in the new quantifier tag. When a container is already in the new quantifier tag, the transform replaces each reference to the iteration operand for that container in the right operand to refer to the iteration operand for that container that is in the new quantifier tag. The transforms may also handle containers of different sizes. For example, in the expression</PDAT></PTEXT></PARA>
<PARA ID="P-00161" LVL="0"><PTEXT><F><PTEXT><PDAT>(A&plus;B)&plus;A</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00162" LVL="7"><PTEXT><PDAT>A and B are images that may be of the same dimensions or different dimensions. If they have different dimensions, then a code generation transforms in a later transformation phase generates appropriate case logic within the common enclosing loop to process the overlapping regions differently from the non-overlapping regions. Thus, a programmer can use A and B without reference to whether or not they have the same dimensions. The transform may replace expression (A&plus;B) by an expression of temporary variables, p</PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT> and p</PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT>, of the form (p</PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT>&plus;p</PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT>) of type pixel and annotate the new expression with a quantifier tag of the form:</PDAT></PTEXT></PARA>
<PARA ID="P-00163" LVL="0"><PTEXT><F><PTEXT><PDAT>_Q(&forall;&lt;p</PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT>&verbar;p</PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT>&gt;:(&lt;A&verbar;B&gt;&lsqb;idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>:int, idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>:int&rsqb;:pixel)).</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00164" LVL="7"><PTEXT><PDAT>The transform may replace the last instance of A in the expression with a temporary variable, p</PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT>, of type pixel, p</PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT>, and annotate the new expression with is a quantifier tag of the form:</PDAT></PTEXT></PARA>
<PARA ID="P-00165" LVL="0"><PTEXT><F><PTEXT><PDAT>_Q(&forall;p</PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT>:(A&lsqb;idx</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>:int, idx</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>:int&rsqb;: pixel)).</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00166" LVL="7"><PTEXT><PDAT>In a shared loop, p</PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT> and p</PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> reference the same data structure and this equivalence can be identified because of the equivalence of the instance of A in &lt;A&verbar;B&gt; of the first quantifier tag and A itself in the second quantifier tag. Therefore, the transform will replace p</PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> by p</PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT> transforming the expression from</PDAT></PTEXT></PARA>
<PARA ID="P-00167" LVL="0"><PTEXT><F><PTEXT><PDAT>((p</PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT>&plus;p</PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT>)&plus;p</PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT>)</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00168" LVL="7"><PTEXT><PDAT>to</PDAT></PTEXT></PARA>
<PARA ID="P-00169" LVL="0"><PTEXT><F><PTEXT><PDAT>(p</PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT>&plus;p</PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT>)&plus;p</PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT>)</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00170" LVL="7"><PTEXT><PDAT>which will be annotated with the combined quantifier tag of the form:</PDAT></PTEXT></PARA>
<PARA ID="P-00171" LVL="0"><PTEXT><F><PTEXT><PDAT>_Q(&forall;&lt;p</PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT>&verbar;p</PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT>&gt;:(&lt;A&verbar;B&gt;&lsqb;idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>:int, idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>:int&rsqb;:pixel)).</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00172" LVL="0"><PTEXT><PDAT>In step </PDAT><HIL><BOLD><PDAT>1401</PDAT></BOLD></HIL><PDAT>, if the root node of the subtree is an arithmetic operator and the left and right operands are pixels (i.e., iteration operands) with the &ldquo;forall&rdquo; quantifier tags, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1402</PDAT></BOLD></HIL><PDAT>, else the transform returns false. In step </PDAT><HIL><BOLD><PDAT>1402</PDAT></BOLD></HIL><PDAT>, the transform initializes the new quantifier tag to the quantifier tag of the left operand. In steps </PDAT><HIL><BOLD><PDAT>1403</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>1407</PDAT></BOLD></HIL><PDAT>, the routine loops checking for duplicates in the quantifier tag of the right operand. The transform checks for duplicates in the user-defined container names (e.g., the container image A) not the temporary variables because the temporary variables all have unique names. Once a duplicate like A is found, the corresponding temporary variable (e.g., p</PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT>) can be found because it is at the same position as A within the list immediately following the &forall; in the right quantifier tag (i.e., the list of temporary variables generated by the various transforms). The same logic is used to find the temporary variable corresponding to A in the left quantifier tag. Thus, p</PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT> and p</PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> are identified as equivalent data items. Using this correspondence, the transform then substitutes p</PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT> for p</PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> everywhere it occurs in the right expression, which produces the expression ((p</PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT>&plus;p</PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT>)&plus;p</PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT>) shown above. Any remaining temporary variables and containers in the right quantifier tag (i.e., ones that were not duplicates) are appended to the temporary variables and containers of the left quantifier tag, which will become the new quantifier tag attached at the operator level. In the example, there are no remaining temporary variables and containers in the right quantifier tag, so the left quantifier tag becomes the quantifier tag for the overall expression. In step </PDAT><HIL><BOLD><PDAT>1403</PDAT></BOLD></HIL><PDAT>, the transform selects the next container of the quantifier tag of the right operand. In step </PDAT><HIL><BOLD><PDAT>1404</PDAT></BOLD></HIL><PDAT>, if all the containers of the quantifier tag of the right operand have already been selected, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1408</PDAT></BOLD></HIL><PDAT>, else the transform continues at step </PDAT><HIL><BOLD><PDAT>1405</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>1405</PDAT></BOLD></HIL><PDAT>, if the selected container has already been placed in the new quantifier tag, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1406</PDAT></BOLD></HIL><PDAT>, else the transform continues at step </PDAT><HIL><BOLD><PDAT>1407</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>1407</PDAT></BOLD></HIL><PDAT>, the transform updates the nodes of the right operand which had referenced iteration operands for the duplicate container to contain the iteration operand and associated with that container that is already in the new quantifier tag. In step </PDAT><HIL><BOLD><PDAT>1407</PDAT></BOLD></HIL><PDAT>, the transform adds the iteration operand and container to the new quantifier tag and loops to step </PDAT><HIL><BOLD><PDAT>1403</PDAT></BOLD></HIL><PDAT> to select the next container. In step </PDAT><HIL><BOLD><PDAT>1408</PDAT></BOLD></HIL><PDAT>, the transform migrates the quantifier tag to the current node by adding the new quantifier tag to the current node and removing the quantifier tags for the left and right operands.</PDAT></PTEXT></PARA>
<PARA ID="P-00173" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 15</PDAT></FGREF><PDAT> is a flow diagram that illustrates a transforming arithmetic operators on composite data structures. The transform ArithOpsOnComposites is defined for the operators in the ArithOps group. The transform migrates quantifier tag from the node of the operand to the current node. In step </PDAT><HIL><BOLD><PDAT>1501</PDAT></BOLD></HIL><PDAT>, if the operator of the current node is an arithmetic operator with one operand and the operand has a quantifier tag, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1502</PDAT></BOLD></HIL><PDAT>, else the transform returns false. In step </PDAT><HIL><BOLD><PDAT>1502</PDAT></BOLD></HIL><PDAT>, the transform moves the quantifier from the operand to the current node and returns true.</PDAT></PTEXT></PARA>
<PARA ID="P-00174" LVL="0"><PTEXT><PDAT>The following transforms are code generation transforms that are applied in phase </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>. These transforms assume that all optimization tag migrating and coalescing is complete. Therefore, since all the anticipatory optimizations have been noted, these transforms convert the AST to low-level computational constructs.</PDAT></PTEXT></PARA>
<PARA ID="P-00175" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 16</PDAT></FGREF><PDAT> is a flow diagram that illustrates transforming that reduces high-level declarations. The transform ReduceAbstractDeclarations is defined for operands that are subtype of the composite type. This transform operates much like a macro substitution by binding the definitions of the types to the symbols of the high-level type declaration. In step </PDAT><HIL><BOLD><PDAT>1601</PDAT></BOLD></HIL><PDAT>, if the subtree refers to a definition of high-level (i.e., abstract) declaration, then the routine continues at step </PDAT><HIL><BOLD><PDAT>1602</PDAT></BOLD></HIL><PDAT>, else the routine returns true. In step </PDAT><HIL><BOLD><PDAT>1602</PDAT></BOLD></HIL><PDAT>, the transform retrieves the definition of the high-level type. In step </PDAT><HIL><BOLD><PDAT>1603</PDAT></BOLD></HIL><PDAT>, the transform substitutes the symbols of the high-level declaration into the defined lower-level declaration. In step </PDAT><HIL><BOLD><PDAT>1604</PDAT></BOLD></HIL><PDAT>, the transform replaces the subtree with the substituted declaration and loops to step </PDAT><HIL><BOLD><PDAT>1601</PDAT></BOLD></HIL><PDAT> to further reduce the substituted subtree. Once the definition is completely reduced to C, the transformation returns true indicating that it succeeded.</PDAT></PTEXT></PARA>
<PARA ID="P-00176" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 17A-17B</PDAT></FGREF><PDAT> illustrate the transforming for a power operator for code generation. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 17A</PDAT></FGREF><PDAT> illustrates the transformation of the subtree of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 41</PDAT></FGREF><PDAT> after the power transform has been applied. When the power operator is </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, there are several optimizations that can be made. For example, it may be more computationally efficient to multiply the argument by itself rather than invoking a more general power function. As shown, a block node has been defined and the quantifier tag has been migrated from the assignment node to the block node. In addition, declaration nodes and assignment nodes have been defined. The new temporary variables t</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and t</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> are set to the value of the operand that is to be squared. That squaring is performed by the multiplication of variable t</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> by itself and by the multiplication of variable t</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> by itself. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 17B</PDAT></FGREF><PDAT> is a flow diagram of a transform to generate code for the power operator during phase </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>. The transform GenerateCodeForPower is defined for the power operator. In step </PDAT><HIL><BOLD><PDAT>1701</PDAT></BOLD></HIL><PDAT>, if the current node refers to a power operator, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1702</PDAT></BOLD></HIL><PDAT>, else the transform returns false. In step </PDAT><HIL><BOLD><PDAT>1702</PDAT></BOLD></HIL><PDAT>, if the exponent is </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1704</PDAT></BOLD></HIL><PDAT>, else the transform continues at step </PDAT><HIL><BOLD><PDAT>1703</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>1703</PDAT></BOLD></HIL><PDAT>, the transform replaces the current subtree with an invocation to a function to raise the argument to the exponent and returns an indication of true. In step </PDAT><HIL><BOLD><PDAT>1704</PDAT></BOLD></HIL><PDAT>, if the argument is a variable, then the routine continues at step </PDAT><HIL><BOLD><PDAT>1705</PDAT></BOLD></HIL><PDAT>, else the routine continues at step </PDAT><HIL><BOLD><PDAT>1706</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>1705</PDAT></BOLD></HIL><PDAT>, the transform replaces the current subtree with a subtree in which the argument is multiplied by itself and returns true. In step </PDAT><HIL><BOLD><PDAT>1706</PDAT></BOLD></HIL><PDAT>, if the argument is a constant, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1707</PDAT></BOLD></HIL><PDAT>, else the transform continues at step </PDAT><HIL><BOLD><PDAT>1708</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>1707</PDAT></BOLD></HIL><PDAT>, the transform replaces the current subtree with a reference to a constant value that is equal to the argument squared and returns true. In step </PDAT><HIL><BOLD><PDAT>1708</PDAT></BOLD></HIL><PDAT>, if the current statement is within a basic block, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1710</PDAT></BOLD></HIL><PDAT>, else the transform continues at step </PDAT><HIL><BOLD><PDAT>1709</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>1709</PDAT></BOLD></HIL><PDAT>, the transform creates a block around the statement. In step </PDAT><HIL><BOLD><PDAT>1710</PDAT></BOLD></HIL><PDAT>, the transform moves the quantifier tag for the current node to the block level. In step </PDAT><HIL><BOLD><PDAT>1711</PDAT></BOLD></HIL><PDAT>, the transform adds a declaration for a temporary variable before the statement. In step </PDAT><HIL><BOLD><PDAT>1712</PDAT></BOLD></HIL><PDAT>, the transform adds a statement to set the temporary value to the argument. In step </PDAT><HIL><BOLD><PDAT>1713</PDAT></BOLD></HIL><PDAT>, the transform replaces the current subtree with a subtree that indicates its temporary variable should be multiplied by itself and returns true.</PDAT></PTEXT></PARA>
<PARA ID="P-00177" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 18</PDAT></FGREF><PDAT> is a flow diagram of a transform to generate code for a function invocation during phase </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>. The transform GenerateCodeForFunctions is defined for the user-defined, mathematically pure functions that are within the ArithOps group. Such functions are not directly translatable into single operators that are built into conventional languages. However, since they are mathematically pure functions (i.e., no side effect and no dependencies other than on their parameters), they have properties that are similar to operators (e.g., they can be manipulated and moved like operators) and their definitions are easily manipulated and optimized by automated tools. Specialization (e.g., eliminating the runtime parameter binding for constant parameters and eliminating some programming logic by executing it once at translation time) is a common and useful kind of optimization that is easily done on such functions. The objective of the GenerateCodeForFunctions transform is to exploit any such optimization opportunities that might present themselves in the code. If there are no such opportunities, the transform expresses the functional invocation as a call to the runtime code produced by the definition of the function. If the actual arguments to the function are constant, then the transform will calculate the result of the function and replace the call to the function with a reference to a constant. If some of the actual arguments are constant, then the invocation to the function can be replaced by an invocation to a specialized function that relies on the constant values of the arguments.</PDAT></PTEXT></PARA>
<PARA ID="P-00178" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 18</PDAT></FGREF><PDAT>, in step </PDAT><HIL><BOLD><PDAT>1801</PDAT></BOLD></HIL><PDAT>, if the current node refers to a function and it has a function tag then the transform continues at step </PDAT><HIL><BOLD><PDAT>1802</PDAT></BOLD></HIL><PDAT>, else the transform returns false. The function tag indicates that this transform can be applied. In step </PDAT><HIL><BOLD><PDAT>1802</PDAT></BOLD></HIL><PDAT>, if all the actual arguments are constant, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1803</PDAT></BOLD></HIL><PDAT>, else the transform continues at step </PDAT><HIL><BOLD><PDAT>1805</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>1803</PDAT></BOLD></HIL><PDAT>, the transform evaluates the function with the constant arguments. In step </PDAT><HIL><BOLD><PDAT>1804</PDAT></BOLD></HIL><PDAT>, the transform replaces the current subtree with a node with a reference to the constant value of that function and returns true. In step </PDAT><HIL><BOLD><PDAT>1805</PDAT></BOLD></HIL><PDAT>, if some of the actual arguments are constant, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1806</PDAT></BOLD></HIL><PDAT>, else the transform continues at step </PDAT><HIL><BOLD><PDAT>1808</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>1806</PDAT></BOLD></HIL><PDAT>, the transform specializes the function to the constant value of the actual arguments. In step </PDAT><HIL><BOLD><PDAT>1807</PDAT></BOLD></HIL><PDAT>, the transform replaces the current subtree with a call to the specialized function and returns true. In step </PDAT><HIL><BOLD><PDAT>1808</PDAT></BOLD></HIL><PDAT>, the transform replaces the current subtree with a call to a corresponding lower-level function and returns.</PDAT></PTEXT></PARA>
<PARA ID="P-00179" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 19</PDAT></FGREF><PDAT> is a flow diagram of a transform to reduce a leaf abstraction. The transform ReduceLeafAbstraction is defined for a subtype of the type Composite. This transform re-expresses high-level constructs such as iteration operands for pixels in terms of low-level programming constructs (e.g., matrix references) so that code can be generated for the operators. The information in the quantifier tag provides information to access the definition of the high-level construct. For example, a leaf (e.g., &ldquo;p</PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT>&rdquo;) that is of type pixel will be implemented using the information from the tag associated with the leaf (e.g., &ldquo;_Q(&forall;p</PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT>:(A&lsqb;idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>:int, idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>:int&rsqb;:pixel))&rdquo;). So the implementation of the leaf for this example, would be &ldquo;A&lsqb;idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&rsqb;&rdquo;. In step </PDAT><HIL><BOLD><PDAT>1901</PDAT></BOLD></HIL><PDAT>, if the current node is a leaf node and contains a reference to a data structure that is a subtype of the Composite type, then the transform continues at step </PDAT><HIL><BOLD><PDAT>1902</PDAT></BOLD></HIL><PDAT>, else the transform returns false. In step </PDAT><HIL><BOLD><PDAT>1902</PDAT></BOLD></HIL><PDAT>, the transform retrieves the prototype for the high-level declaration within the quantifier tag. In step </PDAT><HIL><BOLD><PDAT>1904</PDAT></BOLD></HIL><PDAT>, the transform replaces the current subtree with a subtree in accordance with the retrieved prototype and returns true.</PDAT></PTEXT></PARA>
<PARA ID="P-00180" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 20A and 20B</PDAT></FGREF><PDAT> illustrate the transforming of a convolution operator to lower-level computational constructs. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 20A</PDAT></FGREF><PDAT> illustrates the transforming of the subtree of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 17A</PDAT></FGREF><PDAT> after the transforming of the convolution operator. This transform expresses the convolution operator as a call to a convolution function that performs the convolution. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 20B</PDAT></FGREF><PDAT> is a flow diagram of a transform to reduce a convolution operator during phase </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>. The transform ReduceConvolutionOperator is defined for the operators in the ConvolutionOps group. In step </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT>, if the operator in the current node is a convolution operator with operands indicating to access an element of an image neighborhood defined by the right hand template operand where the neighborhood is centered on a specific image pixel defined by the left hand pixel operand and a template, then the transform continues at step </PDAT><HIL><BOLD><PDAT>2002</PDAT></BOLD></HIL><PDAT>, else the transform returns false. In step </PDAT><HIL><BOLD><PDAT>2002</PDAT></BOLD></HIL><PDAT>, the transform retrieves a reference to a procedure that applies the template to a pixel neighborhood in the image and returns the result. In step </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT>, the transform replaces the current subtree with a call to the convolution operator passing the reference to the procedure and returns.</PDAT></PTEXT></PARA>
<PARA ID="P-00181" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 21A and 21B</PDAT></FGREF><PDAT> illustrate the transforming of a subtree with quantifier tags. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 21A</PDAT></FGREF><PDAT> illustrates a portion of the subtree of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 20A</PDAT></FGREF><PDAT> after the transform to add code for the quantifier tags. Two nodes for the &ldquo;forall&rdquo; loops have been added. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 21B</PDAT></FGREF><PDAT> is a flow diagram of a transform to generate a loop structure for a &ldquo;forall&rdquo; quantifier tag. The transform GenerateLoopStructure is defined for all the operators in the image processing domain. In step </PDAT><HIL><BOLD><PDAT>2101</PDAT></BOLD></HIL><PDAT>, if the current expression has a &ldquo;forall&rdquo; quantifier with a matrix-like implementation anticipated, then the transform continues at step </PDAT><HIL><BOLD><PDAT>2102</PDAT></BOLD></HIL><PDAT>, else the transform continues at </PDAT><HIL><BOLD><PDAT>2107</PDAT></BOLD></HIL><PDAT>. In step </PDAT><HIL><BOLD><PDAT>2102</PDAT></BOLD></HIL><PDAT>, the transform generates declarations for the indexes of the &ldquo;forall&rdquo; and adds the declarations in the AST at the top of the current scope. In step </PDAT><HIL><BOLD><PDAT>2103</PDAT></BOLD></HIL><PDAT>, the transform replaces in the current subtree each referenced abstract operand of the iteration (e.g., p) with an implementation expression (e.g., a&lsqb;i,j&rsqb;) for that abstract operand. In step </PDAT><HIL><BOLD><PDAT>2104</PDAT></BOLD></HIL><PDAT>, the transform generates the looping structure (e.g., nested for convolution operations) and sets the body of the loop to the modified tree subtree. In step </PDAT><HIL><BOLD><PDAT>2105</PDAT></BOLD></HIL><PDAT>, the transform begins processing of the modifiers by applying any transformations that identify inconsistent modifiers (e.g., one modifier that suggests unwrapping a loop and a second modifier that will not tolerate unwrapping) and then changing one or more of the inconsistent modifiers to make them consistent. This step will also order the modifiers if they have an ordering dependency. In step </PDAT><HIL><BOLD><PDAT>2106</PDAT></BOLD></HIL><PDAT>, the transformations associated with the modifiers are applied to the subtree. The transform then returns true. In step </PDAT><HIL><BOLD><PDAT>2107</PDAT></BOLD></HIL><PDAT>, the transform determines whether it can handle other loop patterns. If so, the transform continues to process the loop pattern, else the transform returns false.</PDAT></PTEXT></PARA>
<PARA ID="P-00182" LVL="0"><PTEXT><PDAT>The transform that changed the &ldquo;(p</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&oplus;s)&rdquo; subtree into the &ldquo;gcon(a,idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>,idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>,s)&rdquo; subtree also added modifiers to the quantifier tag, which for simplicity were not shown in the previous examples. These are represented as &ldquo;_PromoteAboveLoop(idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>,ConstantExpressionOf(idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>))&rdquo; and &ldquo;_PromoteToTopOfLoop (idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>,ConstantExpressionOf(idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>)).&rdquo;</PDAT></PTEXT></PARA>
<PARA ID="P-00183" LVL="0"><PTEXT><PDAT>The modifier &ldquo;_PromoteToTopOfLoop(idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>,ConstantExpressionOf(idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>))&rdquo; is a variation on the PromoteAboveLoop modifier. It allows constant expressions of &ldquo;idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&rdquo; to be replaced with temporary variables whose definitions are moved up to the top but not above the loop. The PromoteToTopOfLoop modifier prevents expressions like (idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&minus;1) and (idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&plus;1) from being computed over and over again within expressions in the loop body. Their values will be computed just once, stored in temporary variables (i.e., idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>ml and idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>p</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>), and then the temporary variables may be used many times. The temporary variable assignments are placed at the top but inside of the body block of idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s loop. The transformation of the second convolution expression &ldquo;(p</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&oplus;s&prime;)&rdquo; that becomes &ldquo;gcon(a,idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>,idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>,s&prime;)&rdquo; also changes the modifier expression in the quantifier tag to an enhanced form, specifically, &ldquo;_PromoteAboveLoop(idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>,ConstantExpressionOf(idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>)&rdquo; and &ldquo;_PromoteToTopOfLoop(idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>,ConstantExpressionOf(idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>)).&rdquo; </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 21C</PDAT></FGREF><PDAT> represents a transformation of the AST in which the if-then-else statements in the definition of the gcon operation are folded into one. The ellipsis under the &ldquo;cond&rdquo; node represents the following condition</PDAT></PTEXT></PARA>
<PARA ID="P-00184" LVL="0"><PTEXT><F><PTEXT><PDAT>(idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&equals;&equals;0&verbar;&verbar;idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&equals;&equals;0&verbar;&verbar;idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&equals;&equals;limit&minus;1&verbar;&verbar;idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&equals;&equals;limit&minus;1).</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00185" LVL="7"><PTEXT><PDAT>The ellipsis under the &ldquo;&equals;&rdquo; nodes represent the following expressions: </PDAT>
<CWU>
<MATH-US ID="MATH-US-00005">
<MATHEMATICA ID="MATHEMATICA-00005" FILE="US06314562-20011106-M00005.NB">
<MATHML>
<math>
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mi>t1</mi>
        <mo>=</mo>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mrow>
            <mrow>
              <mi>a</mi>
              <mo>&af;</mo>
              <mrow>
                <mo>[</mo>
                <mrow>
                  <mrow>
                    <mi>idx1</mi>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                  <mo>,</mo>
                  <mrow>
                    <mi>idx2</mi>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                </mrow>
                <mo>]</mo>
              </mrow>
            </mrow>
            <mo>*</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mo>-</mo>
                <mn>1</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mo>+</mo>
          <mrow>
            <mrow>
              <mi>a</mi>
              <mo>&af;</mo>
              <mrow>
                <mo>[</mo>
                <mrow>
                  <mrow>
                    <mi>idx1</mi>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                  <mo>,</mo>
                  <mi>idx2</mi>
                </mrow>
                <mo>]</mo>
              </mrow>
            </mrow>
            <mo>*</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mo>-</mo>
                <mn>2</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mo>+</mo>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mrow>
            <mrow>
              <mi>a</mi>
              <mo>&af;</mo>
              <mrow>
                <mo>[</mo>
                <mrow>
                  <mrow>
                    <mi>idx1</mi>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                  <mo>,</mo>
                  <mrow>
                    <mi>idx2</mi>
                    <mo>+</mo>
                    <mn>1</mn>
                  </mrow>
                </mrow>
                <mo>]</mo>
              </mrow>
            </mrow>
            <mo>*</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mo>-</mo>
                <mn>1</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mo>+</mo>
          <mrow>
            <mrow>
              <mi>a</mi>
              <mo>&af;</mo>
              <mrow>
                <mo>[</mo>
                <mrow>
                  <mrow>
                    <mi>idx1</mi>
                    <mo>+</mo>
                    <mn>1</mn>
                  </mrow>
                  <mo>,</mo>
                  <mrow>
                    <mi>idx2</mi>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                </mrow>
                <mo>]</mo>
              </mrow>
            </mrow>
            <mo>*</mo>
            <mn>1</mn>
          </mrow>
          <mo>+</mo>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mrow>
            <mrow>
              <mrow>
                <mi>a</mi>
                <mo>&af;</mo>
                <mrow>
                  <mo>[</mo>
                  <mrow>
                    <mrow>
                      <mi>idx1</mi>
                      <mo>+</mo>
                      <mn>1</mn>
                    </mrow>
                    <mo>,</mo>
                    <mi>idx2</mi>
                  </mrow>
                  <mo>]</mo>
                </mrow>
              </mrow>
              <mo>*</mo>
              <mn>2</mn>
            </mrow>
            <mo>+</mo>
            <mrow>
              <mrow>
                <mi>a</mi>
                <mo>&af;</mo>
                <mrow>
                  <mo>[</mo>
                  <mrow>
                    <mrow>
                      <mi>idx1</mi>
                      <mo>+</mo>
                      <mn>1</mn>
                    </mrow>
                    <mo>,</mo>
                    <mrow>
                      <mi>idx2</mi>
                      <mo>+</mo>
                      <mn>1</mn>
                    </mrow>
                  </mrow>
                  <mo>]</mo>
                </mrow>
              </mrow>
              <mo>*</mo>
              <mn>1</mn>
            </mrow>
          </mrow>
          <mo>;</mo>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mi>t2</mi>
        <mo>=</mo>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mrow>
            <mrow>
              <mi>a</mi>
              <mo>&af;</mo>
              <mrow>
                <mo>[</mo>
                <mrow>
                  <mrow>
                    <mi>idx1</mi>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                  <mo>,</mo>
                  <mrow>
                    <mi>idx2</mi>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                </mrow>
                <mo>]</mo>
              </mrow>
            </mrow>
            <mo>*</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mo>-</mo>
                <mn>1</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mo>+</mo>
          <mrow>
            <mrow>
              <mi>a</mi>
              <mo>&af;</mo>
              <mrow>
                <mo>[</mo>
                <mrow>
                  <mi>idx1</mi>
                  <mo>,</mo>
                  <mrow>
                    <mi>idx2</mi>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                </mrow>
                <mo>]</mo>
              </mrow>
            </mrow>
            <mo>*</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mo>-</mo>
                <mn>2</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mo>+</mo>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mrow>
            <mrow>
              <mi>a</mi>
              <mo>&af;</mo>
              <mrow>
                <mo>[</mo>
                <mrow>
                  <mrow>
                    <mi>idx1</mi>
                    <mo>+</mo>
                    <mn>1</mn>
                  </mrow>
                  <mo>,</mo>
                  <mrow>
                    <mi>idx2</mi>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                </mrow>
                <mo>]</mo>
              </mrow>
            </mrow>
            <mo>*</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mo>-</mo>
                <mn>1</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mo>+</mo>
          <mrow>
            <mrow>
              <mi>a</mi>
              <mo>&af;</mo>
              <mrow>
                <mo>[</mo>
                <mrow>
                  <mrow>
                    <mi>idx1</mi>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                  <mo>,</mo>
                  <mrow>
                    <mi>idx2</mi>
                    <mo>+</mo>
                    <mn>1</mn>
                  </mrow>
                </mrow>
                <mo>]</mo>
              </mrow>
            </mrow>
            <mo>*</mo>
            <mn>1</mn>
          </mrow>
          <mo>+</mo>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mstyle>
          <mtext>&emsp;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mrow>
            <mrow>
              <mrow>
                <mi>a</mi>
                <mo>&af;</mo>
                <mrow>
                  <mo>[</mo>
                  <mrow>
                    <mi>idx1</mi>
                    <mo>,</mo>
                    <mrow>
                      <mi>idx2</mi>
                      <mo>+</mo>
                      <mn>1</mn>
                    </mrow>
                  </mrow>
                  <mo>]</mo>
                </mrow>
              </mrow>
              <mo>*</mo>
              <mn>2</mn>
            </mrow>
            <mo>+</mo>
            <mrow>
              <mrow>
                <mi>a</mi>
                <mo>&af;</mo>
                <mrow>
                  <mo>[</mo>
                  <mrow>
                    <mrow>
                      <mi>idx1</mi>
                      <mo>+</mo>
                      <mn>1</mn>
                    </mrow>
                    <mo>,</mo>
                    <mrow>
                      <mi>idx2</mi>
                      <mo>+</mo>
                      <mn>1</mn>
                    </mrow>
                  </mrow>
                  <mo>]</mo>
                </mrow>
              </mrow>
              <mo>*</mo>
              <mn>1</mn>
            </mrow>
          </mrow>
          <mo>;</mo>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</MATHML>
<EMI ID="EMI-M00005" FILE="US06314562-20011106-M00005.TIF">
</MATH-US>
</CWU>
</PTEXT></PARA>
<PARA ID="P-00186" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 21D</PDAT></FGREF><PDAT> illustrates the AST after promotion modifiers are applied. The ellipsis under the &ldquo;cond&rdquo; node represents the following condition</PDAT></PTEXT></PARA>
<PARA ID="P-00187" LVL="0"><PTEXT><F><PTEXT><PDAT>(idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&equals;&equals;0&verbar;&verbar;idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&equals;&equals;0&verbar;&verbar;idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&equals;&equals;limit&minus;1&verbar;&verbar;idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&equals;&equals;limit&minus;1).</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00188" LVL="7"><PTEXT><PDAT>The ellipsis under the &ldquo;then&rdquo; node represents the statement</PDAT></PTEXT></PARA>
<PARA ID="P-00189" LVL="0"><PTEXT><F><PTEXT><PDAT>b&lsqb;idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>,idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&rsqb;&equals;0.</PDAT></PTEXT></F></PTEXT></PARA>
<PARA ID="P-00190" LVL="7"><PTEXT><PDAT>The ellipsis under the &ldquo;cond&rdquo; node represents the statements </PDAT>
<CWU>
<MATH-US ID="MATH-US-00006">
<MATHEMATICA ID="MATHEMATICA-00006" FILE="US06314562-20011106-M00006.NB">
<MATHML>
<math>
<mrow>
  <mrow>
    <mrow>
      <mrow>
        <mtable>
          <mtr>
            <mtd>
              <mrow>
                <mi>t1</mi>
                <mo>=</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mrow>
                  <mrow>
                    <mrow>
                      <mi>a</mi>
                      <mo>&af;</mo>
                      <mrow>
                        <mo>[</mo>
                        <mrow>
                          <mi>im1</mi>
                          <mo>,</mo>
                          <mi>jm1</mi>
                        </mrow>
                        <mo>]</mo>
                      </mrow>
                    </mrow>
                    <mo>*</mo>
                    <mrow>
                      <mo>(</mo>
                      <mrow>
                        <mo>-</mo>
                        <mn>1</mn>
                      </mrow>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                  <mo>+</mo>
                  <mrow>
                    <mrow>
                      <mi>a</mi>
                      <mo>&af;</mo>
                      <mrow>
                        <mo>[</mo>
                        <mrow>
                          <mi>im1</mi>
                          <mo>,</mo>
                          <mi>idx2</mi>
                        </mrow>
                        <mo>]</mo>
                      </mrow>
                    </mrow>
                    <mo>*</mo>
                    <mrow>
                      <mo>(</mo>
                      <mrow>
                        <mo>-</mo>
                        <mn>2</mn>
                      </mrow>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                  <mo>+</mo>
                </mrow>
              </mrow>
            </mtd>
          </mtr>
          <mtr>
            <mtd>
              <mrow>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mrow>
                  <mrow>
                    <mrow>
                      <mi>a</mi>
                      <mo>&af;</mo>
                      <mrow>
                        <mo>[</mo>
                        <mrow>
                          <mi>im1</mi>
                          <mo>,</mo>
                          <mi>jp1</mi>
                        </mrow>
                        <mo>]</mo>
                      </mrow>
                    </mrow>
                    <mo>*</mo>
                    <mrow>
                      <mo>(</mo>
                      <mrow>
                        <mo>-</mo>
                        <mn>1</mn>
                      </mrow>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                  <mo>+</mo>
                  <mrow>
                    <mrow>
                      <mi>a</mi>
                      <mo>&af;</mo>
                      <mrow>
                        <mo>[</mo>
                        <mrow>
                          <mi>ip1</mi>
                          <mo>,</mo>
                          <mi>jm1</mi>
                        </mrow>
                        <mo>]</mo>
                      </mrow>
                    </mrow>
                    <mo>*</mo>
                    <mn>1</mn>
                  </mrow>
                  <mo>+</mo>
                </mrow>
              </mrow>
            </mtd>
          </mtr>
          <mtr>
            <mtd>
              <mrow>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mrow>
                  <mrow>
                    <mrow>
                      <mrow>
                        <mi>a</mi>
                        <mo>&af;</mo>
                        <mrow>
                          <mo>[</mo>
                          <mrow>
                            <mi>ip1</mi>
                            <mo>,</mo>
                            <mi>idx2</mi>
                          </mrow>
                          <mo>]</mo>
                        </mrow>
                      </mrow>
                      <mo>*</mo>
                      <mn>2</mn>
                    </mrow>
                    <mo>+</mo>
                    <mrow>
                      <mrow>
                        <mi>a</mi>
                        <mo>&af;</mo>
                        <mrow>
                          <mo>[</mo>
                          <mrow>
                            <mi>ip1</mi>
                            <mo>,</mo>
                            <mi>jp1</mi>
                          </mrow>
                          <mo>]</mo>
                        </mrow>
                      </mrow>
                      <mo>*</mo>
                      <mn>1</mn>
                    </mrow>
                  </mrow>
                  <mo>;</mo>
                </mrow>
              </mrow>
            </mtd>
          </mtr>
          <mtr>
            <mtd>
              <mrow>
                <mi>t2</mi>
                <mo>=</mo>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mrow>
                  <mrow>
                    <mrow>
                      <mi>a</mi>
                      <mo>&af;</mo>
                      <mrow>
                        <mo>[</mo>
                        <mrow>
                          <mi>im1</mi>
                          <mo>,</mo>
                          <mi>jm1</mi>
                        </mrow>
                        <mo>]</mo>
                      </mrow>
                    </mrow>
                    <mo>*</mo>
                    <mrow>
                      <mo>(</mo>
                      <mrow>
                        <mo>-</mo>
                        <mn>1</mn>
                      </mrow>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                  <mo>+</mo>
                  <mrow>
                    <mrow>
                      <mi>a</mi>
                      <mo>&af;</mo>
                      <mrow>
                        <mo>[</mo>
                        <mrow>
                          <mi>idx1</mi>
                          <mo>,</mo>
                          <mi>jm1</mi>
                        </mrow>
                        <mo>]</mo>
                      </mrow>
                    </mrow>
                    <mo>*</mo>
                    <mrow>
                      <mo>(</mo>
                      <mrow>
                        <mo>-</mo>
                        <mn>2</mn>
                      </mrow>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                  <mo>+</mo>
                </mrow>
              </mrow>
            </mtd>
          </mtr>
          <mtr>
            <mtd>
              <mrow>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mrow>
                  <mrow>
                    <mrow>
                      <mi>a</mi>
                      <mo>&af;</mo>
                      <mrow>
                        <mo>[</mo>
                        <mrow>
                          <mi>ip1</mi>
                          <mo>,</mo>
                          <mi>jm1</mi>
                        </mrow>
                        <mo>]</mo>
                      </mrow>
                    </mrow>
                    <mo>*</mo>
                    <mrow>
                      <mo>(</mo>
                      <mrow>
                        <mo>-</mo>
                        <mn>1</mn>
                      </mrow>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                  <mo>+</mo>
                  <mrow>
                    <mrow>
                      <mi>a</mi>
                      <mo>&af;</mo>
                      <mrow>
                        <mo>[</mo>
                        <mrow>
                          <mi>im1</mi>
                          <mo>,</mo>
                          <mi>jp1</mi>
                        </mrow>
                        <mo>]</mo>
                      </mrow>
                    </mrow>
                    <mo>*</mo>
                    <mn>1</mn>
                  </mrow>
                  <mo>+</mo>
                </mrow>
              </mrow>
            </mtd>
          </mtr>
          <mtr>
            <mtd>
              <mrow>
                <mstyle>
                  <mtext>&emsp;</mtext>
                </mstyle>
                <mo>&it;</mo>
                <mrow>
                  <mrow>
                    <mrow>
                      <mrow>
                        <mi>a</mi>
                        <mo>&af;</mo>
                        <mrow>
                          <mo>[</mo>
                          <mrow>
                            <mi>idx1</mi>
                            <mo>,</mo>
                            <mi>jp1</mi>
                          </mrow>
                          <mo>]</mo>
                        </mrow>
                      </mrow>
                      <mo>*</mo>
                      <mn>2</mn>
                    </mrow>
                    <mo>+</mo>
                    <mrow>
                      <mrow>
                        <mi>a</mi>
                        <mo>&af;</mo>
                        <mrow>
                          <mo>[</mo>
                          <mrow>
                            <mi>ip1</mi>
                            <mo>,</mo>
                            <mi>jp1</mi>
                          </mrow>
                          <mo>]</mo>
                        </mrow>
                      </mrow>
                      <mo>*</mo>
                      <mn>1</mn>
                    </mrow>
                  </mrow>
                  <mo>;</mo>
                </mrow>
              </mrow>
            </mtd>
          </mtr>
        </mtable>
        <mo>&it;</mo>
        <mstyle>
          <mtext>&NewLine;</mtext>
        </mstyle>
        <mo>&it;</mo>
        <mrow>
          <mi>b</mi>
          <mo>&af;</mo>
          <mrow>
            <mo>[</mo>
            <mrow>
              <mi>idx1</mi>
              <mo>,</mo>
              <mi>idx2</mi>
            </mrow>
            <mo>]</mo>
          </mrow>
        </mrow>
      </mrow>
      <mo>=</mo>
      <mrow>
        <mi>sqrt</mi>
        <mo>&af;</mo>
        <mrow>
          <mo>(</mo>
          <mrow>
            <mrow>
              <mi>t1</mi>
              <mo>*</mo>
              <mi>t1</mi>
            </mrow>
            <mo>+</mo>
            <mrow>
              <mi>t2</mi>
              <mo>*</mo>
              <mi>t2</mi>
            </mrow>
          </mrow>
          <mo>)</mo>
        </mrow>
      </mrow>
    </mrow>
    <mo>;</mo>
  </mrow>
  <mo>}</mo>
</mrow>
</math>
</MATHML>
<EMI ID="EMI-M00006" FILE="US06314562-20011106-M00006.TIF">
</MATH-US>
</CWU>
</PTEXT></PARA>
<PARA ID="P-00191" LVL="0"><PTEXT><PDAT>The modifier _PromoteAboveLoop(idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>,ConstanExpressionOf(idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>)) has been described earlier, and it will promote any constant expression of &ldquo;idx</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&rdquo; outside of the loop controlled by &ldquo;idx</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.&rdquo; The modifier generates statements assigning those expressions to temporary variables that then replace the promoted expression. There is an ordering dependency between the folding shown in FIG. </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>C and the two modifiers _PromoteAboveLoop and _PromoteToTopOfLoop. The _PromoteAboveLoop and _PromoteToTopOfLoop modifiers cannot be applied until folding has been completed.</PDAT></PTEXT></PARA>
<PARA ID="P-00192" LVL="0"><PTEXT><PDAT>These modifiers are expressed as and manipulated as abstract optimization instructions to the code generator, one level removed from the detail of the code itself. This mechanism allows a single modifier to reference and deal with an infinite variety of specific variations within the detailed target code. Thus, when the code generator calls on transforms that reconcile several such modifiers to check dependencies among them and assure that their actions are properly coordinated, those reconciliation transforms only have to express their dependency checks and manipulations in terms of these abstract expressions of the optimizations. They only have to look at the modifiers operators and their operands to determine if any reconciliation is necessary and how to do it. They do not have to know about the infinitely many detailed forms of the programming code might take. This inference process during reconciliation is analogous to the inference process in the problem domain that allowed the AO process to infer data flow and data dependency properties from the problem domain operators and operands. It is analogous in the sense that the inference performed by the reconciliation transforms is operating only in the domain of abstract optimization operations. The difference is the same as talking about optimizations rather than executing them. Therefore, this is anticipatory optimization of the optimization instructions themselves.</PDAT></PTEXT></PARA>
<PARA ID="P-00193" LVL="0"><PTEXT><PDAT>One skilled in the art would appreciate that the transforms illustrated for the image domain implementation are not all the transformations required for a complete implementation of the image domain but are illustrative of transforms needed to create such a complete implementation. Also, the AO system is described in terms of examples for fusing the loop structures of high-level operators applied to composite data structures. When the AO system applies transforms with different sets of user-defined optimization rules, the AO system can achieve the sharing of low-level operations among other kinds of definitions for high-level data structures and operators, including but not limited to high-level operations that are recursively defined, high-level definitions that are enumerated lists of low-level operations, and operations that are expressed as distributed, cooperating pieces of the overall operation definition.</PDAT></PTEXT></PARA>
<PARA ID="P-00194" LVL="0"><PTEXT><PDAT>From the foregoing it will be appreciated that, although specific embodiments of the invention have been described herein for purposes of illustration, various modifications may be made without deviating from the spirit and scope of the invention. The anticipatory optimization techniques apply to any domain even though the examples that we have chosen to illustrate it are focused on the graphics imaging domain. Similar optimization problems arise in every domain regardless of its structure and details. For example, other domains to which anticipatory optimization can be applied are networking, business systems, telephony, productivity applications, databases, and so forth. In addition, the optimization tags shown are narrowly focused on the explanatory example but this is not intended to indicate any inherent limitation of the applicability of the technique. The kinds (e.g., quantifier) and form of the optimization tags may be extended in arbitrary ways to extend the applicability of the technique to new domains, new transformations, and new kinds of optimizations. Anticipatory optimization applies to many kinds of optimizations. It applies to any redundant or non-optimal code that might arise from any composition of any abstractions. For example, suppose that two separate abstractions A and B compile into code that contains a redundant step, for example, an initialization or normalization step that is only required to happen once in the overall composition. Anticipatory optimization can handle this case in the following way. A and B are both tagged with an expression identifying code chunks (e.g., the initialization step) that are candidates for pruning if they occur previously in the generated code. Transforms migrate those tags (or alternatively, migrate a temporary form of &ldquo;migratory tag&rdquo;) up the AST until both reside on the same AST node. At this point, a separate transform adds new tags to A and B that will inform the code generator to coordinate the generation of the code for A and B such that the initialization step will be generated only once and that once will be in the earliest code to be executed. If A will get executed first, then the initialization code will be generated for it but not for B. If B is the first in the execution stream of the generated code, then the initialization step will be generated in B but not in A. If the control structure is such that the execution order of A and B is indeterminate, then either the tag will never migrate up to the same node in the AST (i.e. the indeterminacy of execution order can be determined from the abstractions in the composition) or the code generator cannot perform the optimization and will generate the initialization step in the code for both A and B. Also, when matrices of different sizes are used in an operation, a transform can be applied to indicate how to handle the non-overlapping elements. Arbitrary kinds of abstractions can be handled. For example, even composition of concrete components (e.g., Java or ActiveX components) that might be optimized through compilation could be dealt with by anticipatory optimization. The Appendix contains the article entitled &ldquo;Anticipatory Optimization in Domain Specific Translation,&rdquo; which further describes aspects of the present invention. Accordingly, the invention is not limited except as by the appended claims.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00195" LVL="0"><PTEXT><PDAT>1. A method in a computer system for optimizing a high-level computer program using high-level computational constructs that is to be translated into a low-level computer program using low-level computational constructs, the high-level computational constructs including high-level operands that are composites of low-level computational constructs and including high-level operators for indicating operations on the high-level operands, the method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>selecting a statement of the high-level computer program, the selected statement having a high-level operator and high-level operands, each high-level operand having implementing low-level computational constructs that implement access to the high-level operand; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>identifying an optimization of the implementing low-level computational constructs that would result in an optimized translation of the selected statement into the low-level computational constructs; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>when an optimization has been identified, indicating that the identified optimization can be applied to the selected statement of the high-level computer program; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>when translating the selected statement of the high-level computer program to the low-level computer program, applying the indicated optimization generate combined low-level implementations customized to the high-level operators and operands of the selected statement without first generating the implementations for each operator and operand of the selected statement. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00196" LVL="0"><PTEXT><PDAT>2. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein the identifying of an optimization selects one of a plurality of optimizations that can be applied when translating a high-level computer program into a low-level computer program.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00197" LVL="0"><PTEXT><PDAT>3. The method of claim </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> wherein the additional optimizations can be defined by a developer of the high-level computer program.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00198" LVL="0"><PTEXT><PDAT>4. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein the high-level computer program and the low-level computer program are represented by an abstract syntax tree.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00199" LVL="0"><PTEXT><PDAT>5. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein the identifying and indicating are performed by high-level computational construct transforms.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00200" LVL="0"><PTEXT><PDAT>6. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> including generating code for the low-level computer program.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00201" LVL="0"><PTEXT><PDAT>7. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein the high-level computational constructs are represented by matrices.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00202" LVL="0"><PTEXT><PDAT>8. A method in a computer system for optimizing a high-level computer program using high-level computational constructs that is to be translated into a low-level computer program using low-level computational constructs, the high-level computational constructs including high-level operands that are composites of low-level computational constructs and including high-level operators for indicating operations on the high-level operands, the method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>selecting a statement of the high-level computer program, the selected statement having a high-level operator and high-level operands, the high-level operand having implementing low-level computational constructs that implement the high-level operand; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>converting the selected statement into an intermediate-level statement having operator and operands, the intermediate-level statement including an indication of an optimization that is identified from the high-level computational constructs of the selected statement; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>translating the intermediate-level statement into a low-level computational constructs, wherein the translation uses the indicated optimization to optimize the low-level computational constructs. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00203" LVL="0"><PTEXT><PDAT>9. The method of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>, wherein the high-level computational constructs are represented by matrices.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00204" LVL="0"><PTEXT><PDAT>10. A method in a computer system for identifying optimizations to be used when translating a high-level computer program using high-level computational constructs into a low-level computer program using low-level computational constructs, the method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>providing a plurality of optimization techniques, the optimization techniques indicating the optimizations that may be applicable when translating high-level computational constructs into low-level computational constructs; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>analyzing the high-level computational constructs of a representation of the high-level computer program to determine optimization techniques that may be applied to the translation of the high-level computer program; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>storing an indication of each determined optimization technique in such a way that does not change the representation of the high-level computer program; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>translating the high-level computer program into the low-level computer program using the stored indications of the determined optimization technique to guide the translation. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00205" LVL="0"><PTEXT><PDAT>11. The method of claim </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> wherein the analyzing, storing, and translating are performed by transforms that implement the optimization techniques.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00206" LVL="0"><PTEXT><PDAT>12. The method of claim </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> including defining a new high-level computational construct and providing a transform for that new high-level computational construct.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00207" LVL="0"><PTEXT><PDAT>13. The method of claim </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> including defining a new high-level computational construct and providing a plurality of transforms that define all transformations of the new high-level computational construct.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00208" LVL="0"><PTEXT><PDAT>14. The method of claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> wherein the transforms define all optimization behaviors of the new high-level computational construct.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00209" LVL="0"><PTEXT><PDAT>15. The method of claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> wherein the transforms define multiple implementations of the new high-level computational construct.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00210" LVL="0"><PTEXT><PDAT>16. The method of claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> wherein the transforms define various optimizations to apply to the new high-level computational construct in combination with other high-level computational constructs.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00017">
<PARA ID="P-00211" LVL="0"><PTEXT><PDAT>17. The method of claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> wherein the transforms define modifications to optimization tags to express interdependencies among the optimization tags.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00018">
<PARA ID="P-00212" LVL="0"><PTEXT><PDAT>18. The method of claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> wherein modifiers within optimization tags are invoked based on occurrences of named optimization events.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00019">
<PARA ID="P-00213" LVL="0"><PTEXT><PDAT>19. The method of claim </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> wherein the high-level computer program is represented in a tree data structure.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00020">
<PARA ID="P-00214" LVL="0"><PTEXT><PDAT>20. The method of claim </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>, wherein the high-level computational constructs are represented by matrices.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00021">
<PARA ID="P-00215" LVL="0"><PTEXT><PDAT>21. The method of claim </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT>, wherein the high-level computational constructs are represented by matrices.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00022">
<PARA ID="P-00216" LVL="0"><PTEXT><PDAT>22. A method in a computer system for identifying optimizations that can be applied when generating a low-level implementation of the computer program from a high-level implementation of a computer program, the method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>providing a plurality of transforms for annotating high-level computational constructs of the high-level implementation of the computer program with optimization tags that indicate optimizations that may be applicable when generating the low-level implementation of the computer program; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>for each high-level computational construct of the high-level implementation of the computer program, applying those transforms that are applicable to the high-level computational construct to annotate the high-level computational construct with various optimization tags so that the low-level implementation can be generated in accordance with the optimization tags. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00023">
<PARA ID="P-00217" LVL="0"><PTEXT><PDAT>23. The method of claim </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> wherein the optimization tags express an implementation of the optimization in an abstract form.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00024">
<PARA ID="P-00218" LVL="0"><PTEXT><PDAT>24. The method of claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> whereby the abstract form indicates one of a plurality of low-level implementations of the high-level computational construct.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00025">
<PARA ID="P-00219" LVL="0"><PTEXT><PDAT>25. The method of claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> whereby further optimizations can be identified from the optimization tags.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00026">
<PARA ID="P-00220" LVL="0"><PTEXT><PDAT>26. The method of claim </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> wherein the optimization tags include modifiers that specify variations in the optimizations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00027">
<PARA ID="P-00221" LVL="0"><PTEXT><PDAT>27. The method of claim </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> wherein one modifier takes precedence over a variation specified by another modifier.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00028">
<PARA ID="P-00222" LVL="0"><PTEXT><PDAT>28. The method of claim </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> wherein one modifier indicates that an expression should be moved outside a loop.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00029">
<PARA ID="P-00223" LVL="0"><PTEXT><PDAT>29. The method of claim </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> wherein one modifier indicates that an expression is a constant.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00030">
<PARA ID="P-00224" LVL="0"><PTEXT><PDAT>30. The method of claim </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> wherein modifiers within optimization tags are invoked based on occurrences of named optimization events.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00031">
<PARA ID="P-00225" LVL="0"><PTEXT><PDAT>31. The method of claim </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> wherein a transform expresses high-level structure of an implementation of optimizations indicated by the optimization tags.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00032">
<PARA ID="P-00226" LVL="0"><PTEXT><PDAT>32. The method of claim </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> wherein a transform expresses low-level structure of optimizations indicated by the optimization tags.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00033">
<PARA ID="P-00227" LVL="0"><PTEXT><PDAT>33. The method of claim </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> wherein the transforms are provided so that new transforms can be provided without modification to the applying of the transforms.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00034">
<PARA ID="P-00228" LVL="0"><PTEXT><PDAT>34. The method of claim </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> wherein the annotations are stored separately from the high-level implementation of the computer program so that the annotations can be manipulated separately from the computer program.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00035">
<PARA ID="P-00229" LVL="0"><PTEXT><PDAT>35. The method of claim </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> including generating a low-level implementation of the computer program in accordance with the indicated optimizations that are expressed at an implementation-independent level.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00036">
<PARA ID="P-00230" LVL="0"><PTEXT><PDAT>36. The method of claim </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> wherein a transform indicates that a low-level implementation of a computational construct can be moved outside of an iteration statement.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00037">
<PARA ID="P-00231" LVL="0"><PTEXT><PDAT>37. The method of claim </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> wherein a transform indicates that an iteration control statement should be unwrapped.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00038">
<PARA ID="P-00232" LVL="0"><PTEXT><PDAT>38. The method of claim </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> wherein an optimization tag indicates an optimization of the low-level implementation and thereby avoiding analysis of a low-level implementation to identify optimizations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00039">
<PARA ID="P-00233" LVL="0"><PTEXT><PDAT>39. A computer system for optimizing a computer program when transforming a high-level representation of the computer program into a low-level representation of the computer program in accordance with an analysis of the high-level representation, comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a inline function component for determining whether any invocations of functions in the high-level representation should be transformed into inline execution of the functions; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>an eliminate barriers component for determining whether any computational constructs of the high-level representation can be transformed to permit identifying certain optimizations; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>an add optimization tag component for adding optimization tags to the high-level representation that indicate optimization that may be applied when generating the code; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a code generation component for generating a low-level representation that is optimized in accordance with the added optimization tags. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00040">
<PARA ID="P-00234" LVL="0"><PTEXT><PDAT>40. The computer system of claim </PDAT><HIL><BOLD><PDAT>39</PDAT></BOLD></HIL><PDAT> wherein the high-level representation is a tree data structure and each component visits nodes of the tree in one or more depth-first, left-to-right traversals of the tree data structure.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00041">
<PARA ID="P-00235" LVL="0"><PTEXT><PDAT>41. The computer system of claim </PDAT><HIL><BOLD><PDAT>39</PDAT></BOLD></HIL><PDAT> wherein each component invokes transform modules that are defined to be used by that component.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00042">
<PARA ID="P-00236" LVL="0"><PTEXT><PDAT>42. The computer system of claim </PDAT><HIL><BOLD><PDAT>39</PDAT></BOLD></HIL><PDAT> wherein the add optimization tag component identifies optimization tags that have already been added to the high-level representation that can be migrated to a higher level in the representation.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00043">
<PARA ID="P-00237" LVL="0"><PTEXT><PDAT>43. The computer system of claim </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> wherein the identified optimization tags are coalesced into a single optimization tag.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00044">
<PARA ID="P-00238" LVL="0"><PTEXT><PDAT>44. Computer-readable medium containing instructions for causing a computer system to optimize a high-level computer program using high-level computational constructs that is to be translated into a low-level computer program using low-level computational constructs, the high-level computational constructs including high-level operands that are composites of low-level computational constructs and including high-level operators for indicating operations on the high-level operands, by:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>selecting a statement of the high-level computer program, the selected statement having a high-level operator and high-level operands, each high-level operand having implementing low-level computational constructs that implement the behavior of the high-level operand; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>identifying an optimization of the implementing low-level computational constructs that would result in an optimized translation of the selected statement into the low-level computational constructs; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>when an optimization has been identified, indicating that the identified optimization can be applied to the selected statement of the high-level computer program; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>when translating the selected statement of the high-level computer program to the low-level computer program, applying the indicated optimization to the low-level computational constructs implementing the behavior of the selected statement wherein the optimizations are identified from the high-level computer program rather than on the low-level computer program. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00045">
<PARA ID="P-00239" LVL="0"><PTEXT><PDAT>45. The computer-readable medium of claim </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> wherein the identifying of an optimization selects one of a plurality of optimizations that can be applied when translating a high-level computer program into a low-level computer program.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00046">
<PARA ID="P-00240" LVL="0"><PTEXT><PDAT>46. The computer-readable medium of claim </PDAT><HIL><BOLD><PDAT>45</PDAT></BOLD></HIL><PDAT> wherein the additional optimizations can be defined by a developer of the high-level computer program.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00047">
<PARA ID="P-00241" LVL="0"><PTEXT><PDAT>47. The computer-readable medium of claim </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> wherein the high-level computer program and the low-level computer program are represented by an abstract syntax tree.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00048">
<PARA ID="P-00242" LVL="0"><PTEXT><PDAT>48. The computer-readable medium of claim </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> wherein the identifying and indicating are performed by high-level computational construct transforms.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00049">
<PARA ID="P-00243" LVL="0"><PTEXT><PDAT>49. The computer-readable medium of claim </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> including generating code from the low-level computer program.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00050">
<PARA ID="P-00244" LVL="0"><PTEXT><PDAT>50. The computer-readable medium of claim </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> wherein a modifier of an optimization further indicates a variation in the optimization.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00051">
<PARA ID="P-00245" LVL="0"><PTEXT><PDAT>51. The computer-readable medium of claim </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> including mediating various modifiers of an optimization to resolve any inconsistencies among the modifiers.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00052">
<PARA ID="P-00246" LVL="0"><PTEXT><PDAT>52. The computer-readable medium of claim </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> including generating the low-level computer program with optimization without analyzing the low-level computational construct.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00053">
<PARA ID="P-00247" LVL="0"><PTEXT><PDAT>53. The computer-readable medium of claim </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT>, wherein the high-level computational constructs are represented by matrices.</PDAT></PTEXT></PARA>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314562-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314562-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314562-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314562-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314562-20011106-D00004.TIF">
<EMI ID="EMI-D00005" FILE="US06314562-20011106-D00005.TIF">
<EMI ID="EMI-D00006" FILE="US06314562-20011106-D00006.TIF">
<EMI ID="EMI-D00007" FILE="US06314562-20011106-D00007.TIF">
<EMI ID="EMI-D00008" FILE="US06314562-20011106-D00008.TIF">
<EMI ID="EMI-D00009" FILE="US06314562-20011106-D00009.TIF">
<EMI ID="EMI-D00010" FILE="US06314562-20011106-D00010.TIF">
<EMI ID="EMI-D00011" FILE="US06314562-20011106-D00011.TIF">
<EMI ID="EMI-D00012" FILE="US06314562-20011106-D00012.TIF">
<EMI ID="EMI-D00013" FILE="US06314562-20011106-D00013.TIF">
<EMI ID="EMI-D00014" FILE="US06314562-20011106-D00014.TIF">
<EMI ID="EMI-D00015" FILE="US06314562-20011106-D00015.TIF">
<EMI ID="EMI-D00016" FILE="US06314562-20011106-D00016.TIF">
<EMI ID="EMI-D00017" FILE="US06314562-20011106-D00017.TIF">
<EMI ID="EMI-D00018" FILE="US06314562-20011106-D00018.TIF">
<EMI ID="EMI-D00019" FILE="US06314562-20011106-D00019.TIF">
<EMI ID="EMI-D00020" FILE="US06314562-20011106-D00020.TIF">
<EMI ID="EMI-D00021" FILE="US06314562-20011106-D00021.TIF">
<EMI ID="EMI-D00022" FILE="US06314562-20011106-D00022.TIF">
<EMI ID="EMI-D00023" FILE="US06314562-20011106-D00023.TIF">
<EMI ID="EMI-D00024" FILE="US06314562-20011106-D00024.TIF">
<EMI ID="EMI-D00025" FILE="US06314562-20011106-D00025.TIF">
<EMI ID="EMI-D00026" FILE="US06314562-20011106-D00026.TIF">
<EMI ID="EMI-D00027" FILE="US06314562-20011106-D00027.TIF">
<EMI ID="EMI-D00028" FILE="US06314562-20011106-D00028.TIF">
<EMI ID="EMI-D00029" FILE="US06314562-20011106-D00029.TIF">
<EMI ID="EMI-D00030" FILE="US06314562-20011106-D00030.TIF">
<EMI ID="EMI-D00031" FILE="US06314562-20011106-D00031.TIF">
<EMI ID="EMI-D00032" FILE="US06314562-20011106-D00032.TIF">
<EMI ID="EMI-D00033" FILE="US06314562-20011106-D00033.TIF">
<EMI ID="EMI-D00034" FILE="US06314562-20011106-D00034.TIF">
<EMI ID="EMI-D00035" FILE="US06314562-20011106-D00035.TIF">
<EMI ID="EMI-D00036" FILE="US06314562-20011106-D00036.TIF">
<EMI ID="EMI-D00037" FILE="US06314562-20011106-D00037.TIF">
<EMI ID="EMI-D00038" FILE="US06314562-20011106-D00038.TIF">
<EMI ID="EMI-D00039" FILE="US06314562-20011106-D00039.TIF">
<EMI ID="EMI-D00040" FILE="US06314562-20011106-D00040.TIF">
<EMI ID="EMI-D00041" FILE="US06314562-20011106-D00041.TIF">
<EMI ID="EMI-D00042" FILE="US06314562-20011106-D00042.TIF">
<EMI ID="EMI-D00043" FILE="US06314562-20011106-D00043.TIF">
<EMI ID="EMI-D00044" FILE="US06314562-20011106-D00044.TIF">
<EMI ID="EMI-D00045" FILE="US06314562-20011106-D00045.TIF">
<EMI ID="EMI-D00046" FILE="US06314562-20011106-D00046.TIF">
<EMI ID="EMI-D00047" FILE="US06314562-20011106-D00047.TIF">
<EMI ID="EMI-D00048" FILE="US06314562-20011106-D00048.TIF">
<EMI ID="EMI-D00049" FILE="US06314562-20011106-D00049.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314563-20011106-D00000.TIF SYSTEM "US06314563-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00001.TIF SYSTEM "US06314563-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00002.TIF SYSTEM "US06314563-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00003.TIF SYSTEM "US06314563-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00004.TIF SYSTEM "US06314563-20011106-D00004.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00005.TIF SYSTEM "US06314563-20011106-D00005.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00006.TIF SYSTEM "US06314563-20011106-D00006.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00007.TIF SYSTEM "US06314563-20011106-D00007.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00008.TIF SYSTEM "US06314563-20011106-D00008.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00009.TIF SYSTEM "US06314563-20011106-D00009.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00010.TIF SYSTEM "US06314563-20011106-D00010.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00011.TIF SYSTEM "US06314563-20011106-D00011.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00012.TIF SYSTEM "US06314563-20011106-D00012.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00013.TIF SYSTEM "US06314563-20011106-D00013.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00014.TIF SYSTEM "US06314563-20011106-D00014.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00015.TIF SYSTEM "US06314563-20011106-D00015.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00016.TIF SYSTEM "US06314563-20011106-D00016.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00017.TIF SYSTEM "US06314563-20011106-D00017.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00018.TIF SYSTEM "US06314563-20011106-D00018.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00019.TIF SYSTEM "US06314563-20011106-D00019.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00020.TIF SYSTEM "US06314563-20011106-D00020.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00021.TIF SYSTEM "US06314563-20011106-D00021.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00022.TIF SYSTEM "US06314563-20011106-D00022.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00023.TIF SYSTEM "US06314563-20011106-D00023.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00024.TIF SYSTEM "US06314563-20011106-D00024.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00025.TIF SYSTEM "US06314563-20011106-D00025.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00026.TIF SYSTEM "US06314563-20011106-D00026.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00027.TIF SYSTEM "US06314563-20011106-D00027.TIF" NDATA TIF>
<!ENTITY US06314563-20011106-D00028.TIF SYSTEM "US06314563-20011106-D00028.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314563</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>09283136</PDAT></DNUM></B210>
<B211US><PDAT>09</PDAT></B211US>
<B220><DATE><PDAT>19990331</PDAT></DATE></B220>
</B200>
<B500>
<B510>
<B511><PDAT>G06F  965</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>717  9</PDAT></B521>
<B522><PDAT>717  5</PDAT></B522>
<B522><PDAT>717  7</PDAT></B522>
<B522><PDAT>717  1</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Expedited object locking and unlocking</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4726541</PDAT></DNUM>
<DATE><PDAT>19880200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Tsukamoto et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>2423831</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5318159</PDAT></DNUM>
<DATE><PDAT>19940600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Kashiwabara</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>477169</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5602849</PDAT></DNUM>
<DATE><PDAT>19970200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hoekstra</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>370462</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5862376</PDAT></DNUM>
<DATE><PDAT>19990100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Steele, Jr. et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709107</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6026401</PDAT></DNUM>
<DATE><PDAT>20000200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Brealey et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>707  8</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6150888</PDAT></DNUM>
<DATE><PDAT>20001100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Nakazawa</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>331 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6209066</PDAT></DNUM>
<DATE><PDAT>20010300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Holzle et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>711153</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6212608</PDAT></DNUM>
<DATE><PDAT>20010400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Bak</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>711152</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6237043</PDAT></DNUM>
<DATE><PDAT>20010500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Brown et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709316</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6256773</PDAT></DNUM>
<DATE><PDAT>20010700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Bowman-Amuah</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  1</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B562><NCIT><STEXT><PDAT>Title: Effective fine-grain synchronization for automatically parallelized programs using optimistic synchronization primitives. Author: Rinard, Martin, ACM, 1997.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Title: Comparison of entry consistency and lazy release consistency implementatioins, Author: Adve, Sarita V. , IEEE, 1996.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Title: Locking without Blocking: Making Lock Based Concurrent Data Structure Algorithms Nonblocking, Author: Turek et al, ACM, 1992.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Title: Thin Locks: Featherweight Synchronization for Java, author: Bacon et al, ACM, 1998.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Thomas Anderson, The Performance of Spin Lock Alternatives for Shared-Memory Multiprocessors, Jan. 7, 1999, pp. 6-16. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>David Bacon, Ravi Konuru, Chet Murthy, Mauricio Serrano, Thin Locks: Featherweight Synchronization for Java, pp. 258-268. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Andrew Birrell, An Introduction to Programming with Threads, Jan. 6, 1989, pp. 1-33. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Peter Buhr and Michael Fortier, Monitor Classification, Mar., 1995, pp. 1-40. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Sylvia Dieckmann and Urs Holze, A Study of the Allocation Behavior of the SPECjvm98 Java Benchmarks, Dec. 3, 1998, pp. 1-22. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>E. W. Dijkstra, Solution of a Problem in Concurrent Programming Controls, Sep., 1963, p. 569. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Michael Greenwald and David Cheriton, The Synergy Between Non-blocking Synchronization and Operating System Structure, pp. 1-14. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Brinch Hansen, Monitors and Concurrent Pascal Session, pp. 121-155. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Monitors: An Operating System Structuring Concept, Feb., 1996, pp. 1-25. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Andreas Krall, Efficient Java VM Just-in-Time Compilation, Oct., 1998, pp. 1-8. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Andreas Krall and Mark Probst, Monitors and Exceptions: How to implement Java efficiently, pp. 1-10. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Leslie Lamport, A Fast Mutual Exclusion Algorithm, Nov. 14, 1985, revised Oct. 31, 1986, pp. 1-12. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>John Mellor-Crummey, Algorithms for Scalable Synchronization on Shared-Memory Multiprocessors, Feb., 1991, pp. 21-65. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Gilles Muller, Barbara Moura, Fabrice Bellard, Charles Consel, Harissa: a Flexible and Efficient Java Environment Mixing Bytecode and Compiled Code, pp. 1-20. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>John Neffenger, Which Java VM scales best&quest;, Aug., 1998, pp. 1-12. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Todd Proebsting, Gregg Townsend, Patrick Bridges, John Hartman, Tim Newsham, Scott Watterson, Toba: Java For Applications, pp. 1-14. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Ali-Reza Adl-Tabatabai, Mical Cierniak, Guei-Yuan Lueh, Vishesh Parikh, James Stichnoth, Fast, Effective Code Generation in a Just-In-Time Java Compiler, pp. 280-290. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Java Language Specification, Threads and Locks, First Edition, Dec. 22, 1998, pp. 1-13. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Threads Library, mutex (3T), SunOS 5.6, May 8, 1997, pp. 1-12. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Tamiya Onodera, Reasearch Report, Jul. 17, 1998, pp. 1-7. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Tamiya Onodea and Kiyokuni Kawachiya, Research Report, Sep. 25, 1998, pp. 1-15.</PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
</B560>
<B570>
<B577><PDAT>68</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>717  5</PDAT></B582>
<B582><PDAT>717  9</PDAT></B582>
<B582><PDAT>717  7</PDAT></B582>
<B582><PDAT>717  1</PDAT></B582>
<B582><PDAT>711 11</PDAT></B582>
<B582><PDAT>711152</PDAT></B582>
<B582><PDAT>711153</PDAT></B582>
</B580>
<B590><B595><PDAT>28</PDAT></B595><B596><PDAT>35</PDAT></B596><B597US>
</B590>
</B500>
<B600>
<B630><B632><PARENT-US><CDOC><DOC><DNUM><PDAT>09/283136</PDAT></DNUM></DOC></CDOC><PDOC><DOC><DNUM><PDAT>09/245778</PDAT></DNUM><DATE><PDAT>19990205</PDAT></DATE><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>00</PDAT></KIND></DOC></PDOC><PSTA><PDAT>01</PDAT></PSTA><PPUB><DOC><DNUM><PDAT>6173442</PDAT></DNUM><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>A </PDAT></KIND></DOC></PPUB></PARENT-US></B632></B630>
</B600>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Ole</PDAT></FNM><SNM><STEXT><PDAT>Agesen</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Needham</PDAT></CITY>
<STATE><PDAT>MA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>David L.</PDAT></FNM><SNM><STEXT><PDAT>Detlefs</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Westford</PDAT></CITY>
<STATE><PDAT>MA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Alex</PDAT></FNM><SNM><STEXT><PDAT>Garthwaite</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Philadelphia</PDAT></CITY>
<STATE><PDAT>PA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Sun Microsystems, Inc.</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Palo Alto</PDAT></CITY><STATE><PDAT>CA</PDAT></STATE></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>02</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Cesari and McKenna, LLP</PDAT></STEXT></ONM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Mark R.</PDAT></FNM><SNM><STEXT><PDAT>Powell</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Chamelic</PDAT></FNM><SNM><STEXT><PDAT>Das</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2122</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>An object structure&apos;s header (</PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT>) allocates a two-bit synchronization-state field (</PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>) solely to monitor data for implementing synchronization on that object. When the object is locked by a particular execution thread, or when one or more execution threads are waiting for a lock or notification on that object, its header contains a pointer to monitor resources in the form of a linked list of lock records (</PDAT><HIL><BOLD><PDAT>50, 52, 54</PDAT></BOLD></HIL><PDAT>) associated with the threads involved. The synchronization-state field (</PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>) ordinarily contains an indication of whether such a linked list exists and, if so, whether its first member is associated with a thread that has a lock on the object. When a thread attempts to gain access to that linked list, it employs an atomic swap operation to place a special busy value in that lock-state field (</PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>) and write its execution-environment pointer into the object&apos;s header (</PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT>). If the previous value of that field was not the special busy value, the thread uses the header&apos;s previous contents to perform its intended synchronization operation. Otherwise, it obtains that information through its own execution environment (</PDAT><HIL><BOLD><PDAT>44, 46, </PDAT></BOLD></HIL><PDAT>or </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT>) or that of the thread whose identifier the object header previously contained. When the thread completes its synchronization operation, it employs an atomic compare-and-swap operation to write the results into the object&apos;s header if that header still contains the thread identifier that the thread originally wrote there. Otherwise, it communicates that information to its successor thread if the thread identifier is different and thereby indicates that at least one successor is contending for access to the linked list.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<RELAPP>
<BTEXT>
<H LVL="1"><STEXT><PDAT>CROSS-REFERENCE TO RELATED APPLICATION</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>This is a continuation-in-part of U.S. patent application Ser. No. 09/245,778, filed on Feb. 5, 1999, now U.S. Pat. No. 6,173,442 by Agesen et al. for Busy-Wait-Free Synchronization.</PDAT></PTEXT></PARA>
</BTEXT>
</RELAPP>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>The present invention is directed to compiling and interpreting computer programs. It particularly concerns synchronization between execution threads.</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> depicts a typical computer system </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>. A microprocessor </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> receives data, and instructions for operating on them, from on-board cache memory or further cache memory </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, possibly through the mediation of a cache controller </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, which can in turn receive such data from system read/write memory (&ldquo;RAM&rdquo;) </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> through a RAM controller </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT>, or from various peripheral devices through a system bus </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>The RAM </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>&apos;s data and instruction contents will ordinarily have been loaded from peripheral devices such as a system disk </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT>. Other sources include communications interface </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT>, which can receive instructions and data from other computer systems.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>The instructions that the microprocessor executes are machine instructions. Those instructions are ultimately determined by a programmer, but it is a rare programmer who is familiar with the specific machine instructions in which his efforts eventually result. More typically, the programmer writes higher-level-language &ldquo;source code&rdquo; from which a computer software-configured to do so generates those machine instructions, or &ldquo;object code.&rdquo;</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> represents this sequence. FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s block </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT> represents a compiler process that a computer performs under the direction of compiler object code. That object code is typically stored on the system disk </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT> or some other machine-readable medium and by transmission of electrical signals is loaded into RAM </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT> to configure the computer system to act as a compiler. But the compiler object code&apos;s persistent storage may instead be in a server system remote from the machine that performs the compiling. The electrical signals that carry the digital data by which the computer systems exchange the code are exemplary forms of carrier waves transporting the information.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>The compiler converts source code into further object code, which it places in machine-readable storage such as RAM </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT> or disk </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT>. A computer will follow that object code&apos;s instructions in performing an application </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> that typically generates output from input. The compiler </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT> is itself an application, one in which the input is source code and the output is object code, but the computer that executes the application </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> is not necessarily the same as the one that performs the compiler process.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>The source code need not have been written by a human programmer directly. Integrated development environments often automate the source-code-writing process to the extent that for many applications very little of the source code is produced &ldquo;manually.&rdquo; As will be explained below, moreover, the &ldquo;source&rdquo; code being compiled may sometimes be low-level code, such as the byte-code input to the Java&trade; virtual machine, that programmers almost never write directly. (Sun, the Sun Logo, Sun Microsystems, and Java are trademarks or registered trademarks of Sun Microsystems, Inc., in the United States and other countries.) Moreover, although </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> may appear to suggest a batch process, in which all of an application&apos;s object code is produced before any of it is executed, the same processor may both compile and execute the code, in which case the processor may execute its compiler application concurrently with&mdash;and, indeed, in a way that can be dependent upon&mdash;its execution of the compiler&apos;s output object code.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>So the sequence of operations by which source code results in machine-language instructions may be considerably more complicated than one may infer from FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. To give a sense of the complexity that can be involved, we discuss by reference to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> an example of one way in which various levels of source code can result in the machine instructions that the processor executes. The human application programmer produces source code </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> written in a high-level language such as the Java programming language. In the case of the Java programming language, a compiler </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> converts that code into &ldquo;class files.&rdquo; These predominantly include routines written in instructions, called &ldquo;byte codes&rdquo; </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>, for a &ldquo;virtual machine&rdquo; that various processors can emulate under appropriate instructions. This conversion into byte codes is almost always separated in time from those codes&apos; execution, so that aspect of the sequence is depicted as occurring in a &ldquo;compile-time environment&rdquo; </PDAT><HIL><BOLD><PDAT>25</PDAT></BOLD></HIL><PDAT> separate from a &ldquo;run-time environment&rdquo; </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>, in which execution occurs.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>Most typically, the class files are run by a processor under control of a computer program known as a virtual machine </PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT>, whose purpose is to emulate a machine from whose instruction set the byte codes are drawn. Much of the virtual machine&apos;s action in executing these codes is most like what those skilled in the art refer to as &ldquo;interpreting,&rdquo; and </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> shows that the virtual machine includes an &ldquo;interpreter&rdquo; </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> for that purpose. The resultant instructions typically involve calls to a run-time system </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT>, which handles matters such as loading new class files as they are needed and performing &ldquo;garbage collection,&rdquo; i.e., returning allocated memory to the system when it is no longer needed.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>Many virtual-machine implementations also actually compile the byte codes concurrently with the resultant object code&apos;s execution, so </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> depicts the virtual machine as additionally including a &ldquo;just-in-time&rdquo; compiler </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT>. It may be that the resultant object code will make low-level calls to the run-time system, as the drawing indicates. In any event, the code&apos;s execution will include calls to the local operating system </PDAT><HIL><BOLD><PDAT>31</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>It is not uncommon for a virtual-machine implementation both to compile and to interpret different parts of the same byte-code program. And, although the illustrated approach of first compiling the high-level code into byte codes is typical, the Java programming language is sometimes compiled directly into native machine code. So there is a wide range of mechanisms by which source code&mdash;whether high-level code or byte code&mdash;can result in the actual native machine instructions that the hardware processor executes. The teachings to be set forth below can be used in all of them, many of which, as was just explained, do not fit neatly into either the compiler or interpreter category. So we will adopt the term compiler interpreter to refer to all such mechanisms, whether they be compilers, interpreters, hybrids thereof, or combinations of any or all of these.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>In actual operation, the typical computer program does not have exclusive control over the machine whose operation it directs; a typical user concurrently runs a number of application programs. Of course, a computer that is not a multiprocessor machine can at any given instant be performing the instructions of only one program, but a typical multitasking approach employed by single-processor machines is for each concurrently running program to be interrupted from time to time to allow other programs to run, with the rate of such interruption being high enough that the programs&apos; executions appear simultaneous to the human user.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>The task of scheduling different applications programs&apos; executions typically falls to the computer&apos;s operating system. In this context, the different concurrently running programs are commonly referred to as different &ldquo;processes.&rdquo; In addition to scheduling, the operating system so operates the computer that the various processes&apos; physical code, data, and stack spaces do not overlap. So one process cannot ordinarily interfere with another. The only exceptions to this rule occur when a process specifically calls an operating-system routine (&ldquo;makes a system call&rdquo;) intended for inter-process communication.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>The operating system&apos;s scheduling function can be used to divide processor time not only among independent processes but also among a single process&apos;s different &ldquo;threads of execution.&rdquo; Different execution threads are like different processes in that the operating system divides time among them so that they can take turns executing. They therefore have different call stacks, and the operating system has to swap out register contents when it switches between threads. But a given process&apos;s different execution threads share the same data space, so they can have access to the same data without operating-system assistance. Indeed, they also share the same code space and can therefore execute the same instructions, although different threads are not in general at the same point in those instructions&apos; execution at the same time. By using threads to take advantage of the operating system&apos;s scheduling function, the programmer can simplify the task of programming a plurality of concurrent operations; he does not have to write the code that explicitly schedules the threads&apos; concurrent executions.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> is a Java programming language listing of a way in which a programmer may code concurrent threads. The steps in that drawing&apos;s fourth and fifth lines create new instances of the classes Transferer and Totaler and assign these objects to variables transferer and totaler, respectively. The Transferor and Totaler classes can be used to create new threads of control, because they extend the class Thread, as the nineteenth and twenty-ninth lines indicate. When a Thread object&apos;s start( ) method is called, its run( ) method is executed in a new thread of control. So the sixth line&apos;s transferor.start( ) statement results in execution of the method, defined in the twenty-second through twenty-seventh lines, that transfers an amount back and forth between two member variables, account_</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and account_</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, of an object of the class Bank. And the seventh line&apos;s totaler.start( ) statement results in execution of a method, defined in the thirty-second through thirty-fourth lines, that prints out the total of those member variables&apos; values. Note that neither method refers to the other; by taking advantage of the programming language&apos;s thread facility, the programmer is relieved of the burden of scheduling.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>There is not in general any defined timing between two concurrently running threads, and this is often the intended result: the various threads are intended to execute essentially independently of each other. But there are also many instances in which total independence would yield unintended results. For example, the b.transfer( ) method is intended to simulate internal transfers back and forth between two of a bank&apos;s accounts, while the b.total( ) method is intended to print out the total of the bank&apos;s account balances. Clearly, completely internal transfers should not change the bank&apos;s account total. But consider what would happen if the transferer thread&apos;s execution is interrupted between the fourteenth and fifteenth lines, i.e., between the time the amount is subtracted from one account and the time it is added to the other account. Intervening execution of the totaler thread could print the bank&apos;s total out as a value different from the one that the simulation is intended to represent: the state of the simulated bank would be inconsistent.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><PDAT>To prevent such inconsistent results, mechanisms for inter-thread communication have been developed. In the example, the thirteenth and seventeenth lines include the &ldquo;synchronized&rdquo; modifier. This directs the compiler/interpreter to synchronize its implementation of the transfer( ) and total( ) methods: before a thread begins execution of either method, it must obtain an exclusive &ldquo;lock&rdquo; on the object on which the instance method is called. So no other thread can execute a synchronized method on that object until the first thread releases its lock. If a transferer thread is in the midst of executing b.transfer( ), for instance, it must have a lock on object b, and this means that the totaler thread will be blocked from executing b.total( ) until the transferer thread&apos;s execution of transfer( ) has been completed.</PDAT></PTEXT></PARA>
<PARA ID="P-00020" LVL="0"><PTEXT><PDAT>Those familiar with the Java programming language will additionally recognize that a thread can lock an object even when it is not executing one of that object&apos;s synchronized methods. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> is a listing of source code for a class Bar containing two methods. The &ldquo;synchronized&rdquo; statement in the onlyMe( ) method indicates that an execution must obtain a lock on the object f before it executes the subsequent code block. which calls the doSomething( ) method. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> shows a possible result of compiling the onlyMe( ) method to Java virtual machine byte-code instructions. The fourth and eighth lines contain the mnemonics for the byte codes that direct the executing virtual machine respectively to acquire and release a lock on object f, which the topmost evaluation-stack entry references.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><PDAT>The particular way in which the compiler/interpreter obtains a lock on an object (also referred to as acquiring a &ldquo;monitor&rdquo; associated with the object) depends on the particular compiler/interpreter implementation. (It is important at this point to recall that we are using the term compiler/interpreter in a broad sense to include, for instance, the functions performed by a Java virtual machine in executing the so-called byte code into which the Java Programming language code is usually compiled; it is that process that implements monitor acquisition in response to the byte code whose mnemonic is monitorenter. Still, Java programming language code also is occasionally compiled directly into native machine code without the intervening step of byte-code generation. Indeed, monitor acquisition and release in the case of FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>&apos;s program would be performed without any explicit byte-code instruction for it, such as monitorexit, even if, as is normally the case, most of that code is compiled into byte code.)</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><PDAT>The most natural way to implement a monitor is to employ available operating-system facilities for inter-thread and -process communication. Different operating systems provide different facilities for this purpose, but most of their applications-programming interfaces (&ldquo;APIs&rdquo;) provide routines for operating on system data structures called &ldquo;mutexes&rdquo; (for &ldquo;mutual exclusion&rdquo;). A thread or process makes a system call by which it attempts to acquire a particular mutex that it and other threads and/or processes associate with a particular resource. The nature of mutex operations is such that an attempt to acquire a mutex is delayed (or &ldquo;blocked&rdquo;) if some other process or thread currently owns that particular mutex; when a mutex acquisition attempt completes, the process or thread that performed the acquisition may safely assume that no other process or thread will complete an acquisition operation until the current process or thread releases ownership of the mutex. If all processes or threads that access a shared resource follow a convention of considering a particular shared mutex to &ldquo;protect&rdquo; the resource&mdash;i.e., if every process or thread accesses the resource only when it owns the mutex&mdash;then they will avoid accessing the resource concurrently.</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><PDAT>The system-mutex approach has been employed for some time and has proven effective in a wide variety of applications. But it must be used judiciously if significant performance penalties or programming difficulties are to be avoided. Since the number of objects extant at a given time during a program&apos;s execution can be impressively large, for instance, allocating a mutex to each object to keep track of its lock state would result in a significant run-time memory cost.</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><PDAT>So workers in the field have attempted to minimize any such disincentives by adopting various monitor-implementation approaches that avoid storage penalties to as great an extent as possible. One approach is to avoid allocating any monitor space to an object until such time as a method or block synchronized on it is actually executed. When a thread needs to acquire a lock on an object under this approach, it employs a hash value for that object to look it up in a table containing pointers to monitor structures. If the object is already locked or currently has some other need for a monitor structure, the thread will find that monitor structure by consulting the table and performing the locking operation in accordance with that monitor structure&apos;s contents. Otherwise, the thread allocates a monitor structure and lists it in the table. When synchronization activity on the object ends, the monitor structure&apos;s space is returned to the system or a pool of monitor structures that can be used for other objects.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><PDAT>Since this approach allocates monitor structures only to objects that currently are the subject of synchronization operations, the storage penalty is minimal; although the number of extant objects at any given time can be impressively large, the number of objects that a given thread holds locked at one time is ordinarily minuscule in comparison, as is the number of concurrent threads. Unfortunately, although this approach essentially eliminates the excessive storage cost that making objects lockable could otherwise exact, it imposes a significant performance cost. Specifically, the time cost of the table lookup can be significant. It also presents scalability problems, since there can be contention for access to the table itself; the table itself must therefore be locked and thus can cause a bottleneck if the number of threads becomes large.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><PDAT>And the nature of object-oriented programming tends to result in extension of this performance cost beyond single-thread programming. There are classes of programming objects that are needed time and again in a wide variety of programming projects, and legions of programmers have duplicated effort in providing the same or only minimally different routines. One of the great attractions of object-oriented programming is that it lends itself to the development of class libraries. Rather than duplicate effort, a programmer can employ classes selected from a library of classes that are widely applicable and thoroughly tested.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>But truly versatile class libraries need to be so written that each class is &ldquo;thread safe.&rdquo; That is, any of that class&apos;s methods that could otherwise yield inconsistent results when methods of an object of that class are run in different threads will have to be synchronized. And unless the library provides separate classes for single-thread use, the performance penalty that synchronized methods exact will be visited not only upon multiple thread programs but upon single-thread programs as well.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><PDAT>An approach that to a great extent avoids these problems is proposed by Bacon et al., &ldquo;Thin Locks: Feather Weight Synchronization for Java,&rdquo; </PDAT><HIL><ITALIC><PDAT>Proc. ACM SIGPLAN &apos;</PDAT></ITALIC></HIL><PDAT>98, Conference on Programming Language Design and Implementation (PLDI), pp. 258-68, Montreal, June 1998. That approach is based on the recognition that most synchronization operations are locking or unlocking operations, and most such operations are uncontended, i.e., involve locks on objects that are not currently locked or are locked only by the same thread. (In the Java virtual machine, a given thread may obtain multiple simultaneous locks on the same object, and a count of those locks is ordinarily kept in order to determine when the thread no longer needs exclusive access to the object.) Given that these are the majority of the situations of which the monitor structure will be required to keep track, the Bacon et al. approach is to include in the object&apos;s header a monitor structure that is only large enough (twenty-four bits) to support uncontended locking. That monitor includes a thread identifier, a lock count, and a &ldquo;monitor shape bit,&rdquo; which indicates whether that field does indeed contain all of the monitor information currently required.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><PDAT>When a thread attempts to obtain a lock, it first inspects the object&apos;s header to determine whether the monitor-shape bit, lock count, and thread identifier are all zero and thereby indicate that the object is unlocked and subject to no other synchronization operation. If they are, as is usually the case, the thread places an index identifying itself in the thread-identifier field, and any other thread similarly inspecting that header will see that the object is already locked. It happens that in most systems this header inspection and conditional storage can be performed by a single atomic &ldquo;compare-and-swap&rdquo; operation, so obtaining a lock on the object consists only of a single atomic operation if no lock already exists. If the monitor-shape bit is zero and the thread identifier is not zero but identifies the same thread as the one attempting to obtain the lock, then the thread simply retains the lock but performs the additional step of incrementing the lock count. Again, the lock-acquisition operation is quite simple. These two situations constitute the majority of locking operations.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><PDAT>But the small, twenty-four-bit header monitor structure does not have enough room for information concerning contended locking; there is no way to list the waiting threads so that they can be notified that the first thread has released the lock by writing zeroes into that header field. In the case of a contended lock, this forces the Bacon et al. arrangement to resort to &ldquo;spin locking,&rdquo; also known as &ldquo;busy-waits.&rdquo; Specifically, a thread that attempts to lock an object on which some other thread already has a lock repeatedly performs the compare-and-swap operation on the object-header monitor structure until it finds that the previous lock has been released. This is obviously a prodigal use of processor cycles, but it is necessary so long as the monitor structure does not have enough space to keep track of waiting threads.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><PDAT>When the previously &ldquo;spinning&rdquo; thread finally does obtain access to the object, the Bacon et al. arrangement deals with the busy-wait problem by having that thread allocate a larger monitor structure to the object, placing an index to the larger structure in the header, and setting the object&apos;s monitor-shape bit to indicate that it has done so, i.e., to indicate that the monitor information now resides outside the header. Although this does nothing to make up for the thread&apos;s previous spinning, it is based on the assumption that the object is one for which further lock contention is likely, so the storage penalty is justified by the future spinning avoidance that the larger structure can afford.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>A review of the Bacon et al. approach reveals that its performance is beneficial for the majority of synchronization operations, i.e., for uncontested or nested locks. But it still presents certain difficulties. In the first place, although the object-header-resident monitor structure is indeed relatively small in comparison with a fuller-featured monitors, it still consumes twenty-four bits in each and every object. Since this is three bytes out of an average object size of, say, forty bytes, that space cost is non-negligible. Additionally, the relatively small monitor size forces a compromise between monitor size and contention performance. As was mentioned above, initial contention results in the significant performance penalty that busy-waits represent. The Bacon et al. arrangement avoids such busy-waits for a given object after the first contention, but only at the expense of using the larger monitor structure, which needs to remain allocated to that object unless the previously contended-for object is again to be made vulnerable to busy-waits. In other words, the Bacon et al. arrangement keeps the object&apos;s monitor structure &ldquo;inflated&rdquo; because the object&apos;s vulnerability to busy-waits would return if the monitor were &ldquo;deflated.&rdquo;</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>Finally, the only types of synchronization operations with which the Bacon et al. approach can deal are the lock and unlock operations. It provides no facilities for managing other synchronization operations, such as those known as &ldquo;wait,&rdquo; &ldquo;notify,&rdquo; and &ldquo;notifyAll&rdquo;; it assumes the existence of heavy-weigh t monitor structu res for those purposes.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00034" LVL="0"><PTEXT><PDAT>The above-identified parent application claims a method that can be used for a wide variety of synchronization operations but avoids busy-waits, imposes much less per-object storage-space cost, and exhibits better worst-case storage behavior. The present invention provides a way of affording that invention&apos;s advantages while in some situat ions avoiding the &ldquo;meta-locking&rdquo; delay that it sometimes involves.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><PDAT>Compiler/interpreters employing the parent application&apos;s approach allocate object structures in which the header includes a synchronization field, which can be as small as two bits, that can contain a code representing the object&apos;s synchronization state. The codes employed by the compiler/interpreter in the example to be described below, for instance, variously indicate that the object is locked, that threads are waiting to lock it or be &ldquo;notified on&rdquo; it, and that there are no locks or waiters.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><PDAT>Since this information is not alone enough to contain all of the information concerning the object&apos;s synchronization information when various threads are synchronized on the object, synchronization operations will involve access to monitor structures temporarily assigned to the object to support those operations. In accordance with the parent application&apos;s invention, a thread precedes access to such structures with what we call &ldquo;meta-lock&rdquo; acquisition. In that operation, a given thread attempting to begin a monitor-access operation performs a swap operation in which it replaces the synchronizationstate-field contents with a &ldquo;busy&rdquo;-valued synchronization-state code whose meaning is that the object is what we call &ldquo;meta-locked,&rdquo; i.e., that a thread has acquired exclusive access to the resources needed to support synchronization on the object. In the same operation it replaces the contents of an identifier field in the object&apos;s header with an identifier of the thread performing the operation, i.e., of the thread attempting to acquire a meta-lock. In performing that swap the thread learns whether the object is already meta-locked and, if so, the identity of the immediate-predecessor contender for the meta-lock.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><PDAT>Preferably, the header field in which the thread identifier is thus written contains other information when the object is not meta-locked; header information swapped out (i.e., atomically read and displaced) by the first meta-lock-acquiring thread in writing its thread identifier into the object header preferably includes any information that the acquiring thread&apos;s monitor-access operation will modify and/or need as input. So the only part of the header required to be dedicated solely to supporting synchronization is a minimal (typically two- or three-bit) synchronization-state field.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>If the synchronization-state code swapped out of the object&apos;s header in the meta-lock-acquisition operation is not the predetermined busy code&mdash;i.e., if there was not already a meta-lock in place&mdash;then the given thread concludes that it possesses the object&apos;s meta-lock, i.e., that it has exclusive access to the monitor data for that object. In that case, the monitor-access operation proceeds in accordance with the swapped-out synchronization-state field&apos;s contents and, preferably, with the header information displaced by that meta-lock-acquisition operation&apos;s swapping a thread identifier for prior header contents.</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>If the code swapped out of the header is the busy code, on the other hand, the given thread concludes that some other thread already owns the meta-lock on the object. So it must delay performance of the monitor access operation until it receives ownership from its predecessor, which may be the current owner or some intervening contender for the meta-lock. The given thread additionally concludes that it will not be able to consult the object header to read the synchronization state in which its predecessor leaves the object; if the predecessor were to record in the object header the synchronization state in which that predecessor&apos;s monitor-access operation leaves the object, it would thereby erase the busy code that the given thread has placed there, so any successor&mdash;i.e., any thread that attempts to acquire the meta-lock before the given thread releases it&mdash;would not be apprised of the meta-lock to which the given thread will succeed when its predecessor releases the meta-lock. So that thread arranges with its predecessor to receive that information by inter-thread communication through those threads&apos; respective &ldquo;execution environments,&rdquo; i.e., through the data structures that represent those threads&apos; states.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>Specifically, the given thread waits, if necessary, for its predecessor thread to write into the given or predecessor thread&apos;s execution environment the value that the synchronization-state word should have after the predecessor&apos;s monitor-access operation has been completed. When a thread (such as the given thread&apos;s predecessor) completes a monitor-access operation, it performs a meta-lock-release operation in which it uses a compare-and-swap operation. In that operation it places the synchronization-state-code results of its just-completed monitor-access operation in the object header&apos;s synchronization-state field if the comparison part of the compare-and-swap operation reveals there has been n o contender for the meta-lock. If there has been such a contender, though, the meta-lock-releasing thread places that code-and preferably other information as well&mdash;in its own execution environment if its immediate successor has not identified itself to the meta-lock-releasing thread by writing that successor&apos;s thread identifier into the releasing thread&apos;s execution environment.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>So the given thread preferably first inspects the predecessor thread&apos;s execution environment for an indication that the predecessor&apos;s execution environment contains that code. If a thread performing the meta-lock-acquisition operation finds that the predecessor thread has not yet placed that information into that predecessor&apos;s execution environment, it places its thread identifier in the predecessor&apos;s execution environment and suspends itself. Eventually, its predecessor completes its monitor-access operation and finds in its meta-lock-release operation&apos;s compare-and-swap step that it has a contending successor, namely, the now-suspended given thread. The predecessor responds by determining whether the given thread has identified itself, in the manner just described. Since it has, the predecessor places the synchronization-state-code results of its now-finished monitor-access operation in the given thread&apos;s execution environment and arranges for that thread to be reactivated so that it can read the information thereby transferred. When the given thread is thereby reactivated, it performs its monitor-access operation, using the information thereby obtained.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>Note that if several threads all attempt to acquire an unlocked meta-lock at approximately the same instant, the atomicity guarantee of the atomic swap instruction will impose an order on these threads. The thread that is first will read the original (unlocked) lock-word contents. The second thread will read the lock word written by the first thread and therefore know that the object is meta-locked, and, further, that the first thread is its predecessor. The third thread finds the second thread as its predecessor, and so on. Each thread in this order (other than the last) will discover that it is not the last thread, and it will &ldquo;hand off&rdquo; the meta-lock to its successor, passing through their execution environments the data that it would otherwise have written into the object header&apos;s lock word. That is, the successor will own the meta-lock, and it will proceed as if it had read from the object header&apos;s lock word the information that the predecessor has instead passed to it through one or the other of their execution environments.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>As the description below will show, this approach is largely independent of the particular type of monitor structure that it guards and can beneficially be used with monitor structures that can be implemented on little more than a per-thread basis. By using a thread-identifier swap to contend for a meta-lock, the meta-lock-acquisition operation automatically sequences the meta-lock contenders on a first-come, first-served basis. Also, this approach takes advantage of the fact that each thread can be performing only one locking operation at a time; it uses the thread&apos;s execution environment to pass header information from one meta-lock-contending thread to the next. This enables it to avoid the need to reserve exclusive header space for any monitor data other than the minimal synchronization-state code. So this approach minimizes the storage cost of implementing a monitor and does so in a way that is applicable to a variety of synchronization operations with little performance penalty.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>According to the present invention, we further minimize any performance penalty by omitting the meta-lock-acquisition and -release operations from some lock operations. This is accomplished by performing an atomic compare-and-swap operation on an objectheader field that includes the synchronization-state field. If successful, that operation replaces that field, which we call the &ldquo;lock-word field,&rdquo; with a lock word in which the synchronization-state code indicates that the object is locked and not meta-locked, and this is all the header access needed for the locking operation: no meta-lock acquisition or release is necessary. The compare-and-swap operation is successful only if the synchronization-state field in the pre-replacement lock-word-field contents indicate, as they usually do, that the object is neither synchronized on nor meta-locked. In less-common cases, in which the object is already synchronized on or meta-locked, the locking operation proceeds as described above for monitor-access operations generally: it is guarded by meta-lock-acquisition and -release operations.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>In accordance with another aspect of the invention, we are able to dispense with meta-lock acquisition and release in some lock-release operations. This, too, is achieved by performing an atomic compare-and-swap operation. If successful, that operation relaces the lock-word field with a lock word in which the synchronization-state code indicates that the object is neither locked nor meta-locked, this is all the header access needed for the unlocking operation: no meta-lock acquisition or release is necessary. As will be described in more detail below, the lock release&apos;s compare-and-swap operation is successful if, as is usually the case, the object has no more than one thread synchronized on it and pre-replacement contents of the object&apos;s synchronization-state field indicate that the object is not meta-locked. Otherwise, the lock-release operation proceeds as described above for monitor-access operations generally: it is guarded by meta-lock-acquisition and -release operations.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>The invention description below refers to the accompanying drawings, of which:</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, described above, is a block diagram of a computer system in which the present invention&apos;s teachings can be employed;</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, described above, is a block diagram illustrating the relationship between a compiler, source code, and object code;</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>, described above, is a block diagram illustrating a more-complex mechanism for converting source code into object code and executing the object code;</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, described above, is a listing of a Java programming language program that uses a synchronized method;</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>, described above, is a listing of a simple Java programming language program;</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT>, described above, is a listing of the byte code into which FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>&apos;s code would typically be compiled;</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 7A-K</PDAT></FGREF><PDAT> are diagrams of monitor resources as they change during a sequence of synchronization operations in which there is no contention for those resources;</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> is a simplified C-language listing of the procedure employed for acquiring a meta-lock on the monitor resources;</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 9A-J</PDAT></FGREF><PDAT> are diagrams of an object structure and various threads&apos; execution environments showing the results of meta-lock-acquisition and -release operations;</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 10</PDAT></FGREF><PDAT> is a simplified C-language listing of a routine for releasing a meta-lock; and</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 11A-F</PDAT></FGREF><PDAT> are diagrams of monitor resources as they change during a sequence of synchronization operations implemented in accordance with the present invention.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT</PDAT></STEXT></H>
<PARA ID="P-00058" LVL="0"><PTEXT><PDAT>Before we discuss the meta-locking operations that the present invention can be used to minimize, we will consider some monitor-access operations that those operations can be used to guard. But those operations are only exemplary; the meta-locking operations neither depend greatly on nor dictate the nature of the monitor-access operations with which the meta-locking is used or on the monitor structures that support those operations.</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="0"><PTEXT><PDAT>In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7A</PDAT></FGREF><PDAT>, an object structure </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> includes memory locations in which the information related specifically to a particular object is principally stored. The &ldquo;other object fields&rdquo; portion contains the object&apos;s data members. In addition to these data members, which the programmer will have explicitly specified in defining the instance data members of the object&apos;s class, the object structure will typically include further, housekeeping information in a part of the data structure typically referred to as a &ldquo;header.&rdquo;</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="0"><PTEXT><PDAT>The contents and format of the header structure depend on the particular virtual-machine implementation. For the sake of example, we assume that the header consists of two thirty-two-bit words. The first word is a pointer to an object representing the class to which the object belongs. The second word includes a hash field and an age field. If the object&apos;s hash-value-assigning method is called, the hash field contains the resultant value. That value thereafter remains unchanged, being used for purposes such as finding the object&apos;s entries in various hash tables. The age field indicates how many times the memory allocated to the object has been considered for garbage collection, i.e., how many times the virtual machine&apos;s run-time system has decided that the operating system should not reclaim the memory space allocated to the object structure. The header also includes a synchronization-state field </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>, which in the illustrated embodiment is also part of the second word and is only two bits wide. For reasons that will become apparent, we refer to the second word as the &ldquo;lock word&rdquo; and to its hash and age fields together as the &ldquo;identifier&rdquo; field.</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>In the illustrated environment, the 00</PDAT><HIL><SB><PDAT>2 </PDAT></SB></HIL><PDAT>synchronization-state-field value that </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7A</PDAT></FGREF><PDAT> depicts indicates that no thread is yet synchronized on the object: no lock has been acquired on the object, and there are no threads waiting for a lock or for what will presently be described as &ldquo;notification&rdquo; on it. We do assume, though, that three threads T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, and T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> are currently running and will become synchronized on it. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7A</PDAT></FGREF><PDAT> therefore includes representations of data structures </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT>, known as thread &ldquo;execution environments,&rdquo; where the operating system stores data concerning those threads&apos; states. (The drawings refer to execution environments </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> as &ldquo;EE</PDAT><HIL><SB><PDAT>T1</PDAT></SB></HIL><PDAT>,&rdquo; &ldquo;EE</PDAT><HIL><SB><PDAT>T2</PDAT></SB></HIL><PDAT>,&rdquo; and &ldquo;EE</PDAT><HIL><SB><PDAT>T3</PDAT></SB></HIL><PDAT>,&rdquo; respectively.) Whereas the number of objects for which memory is allocated at any given time can be extremely large, the number of threads existing at a given time is typically quite small. Execution-environment size is therefore relatively unimportant in comparison with object-structure size, and in most implementations an execution environment contains many fields (and is many times the size of, for instance, the typical object structure). But </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7A</PDAT></FGREF><PDAT> specifically depicts only the fields germane to the subject of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 7A-K</PDAT></FGREF><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="0"><PTEXT><PDAT>A given execution environment&apos;s free-lock-record field contains a pointer to a linked list of what we call &ldquo;lock records&rdquo; allocated to that execution environment. In the illustrated embodiment, a thread&apos;s initialization includes allocation of a pool of lock-record structures, such as lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>, that can be used for synchronization in a manner to be described below. Each lock record contains an owner field that identifies the thread to which it is allocated. Specifically, the owner field contains a pointer to that thread&apos;s execution environment. Execution environment </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT>&apos;s free-lock-records field contains a pointer to lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>, which is the first lock record in a linked list of lock records available for use by thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, and lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>&apos;s next-free field contains a pointer to the next lock record in that linked list. Lock records </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> are the lock records in the linked lists of available lock records allocated to threads T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>, respectively.</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="0"><PTEXT><PDAT>When a thread obtains a lock on an object, it identifies itself as the holder of the lock by selecting a lock record from its pool and placing a pointer to that lock record in the object&apos;s header. Since this places that lock record in use, the thread removes that lock record from its linked list of available lock records: the thread replaces the contents of its execution environment&apos;s free-lock-records field with the contents of that lock record&apos;s next-free field. As will also be described below, though, subsequent synchronization operations by other threads may place those threads&apos; lock records in a different linked list, one whose members belong to threads waiting in one way or another for access to the object, and the lock record additionally includes a next-LR field to support that linked list. When the lock record is initially allocated, this field contains a NULL value.</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7A</PDAT></FGREF><PDAT> represents the situation in which no synchronization activity is occurring. If in that situation thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> encounters code that calls a synchronized method on the object, thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> will need to acquire a lock on that object. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7B</PDAT></FGREF><PDAT> shows the result of thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s acquisition of that lock. As </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7B</PDAT></FGREF><PDAT> shows, the illustrated embodiment&apos;s locking operation removes the hash- and age-field contents from the object structure </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT>&apos;s header. So as not to lose these values, the thread reads them before that removal. In the illustrated embodiment, it does so as part of what we call &ldquo;meta-lock&rdquo; acquisition, which precedes at least some types of monitor-access operations, such as object locking. As will be described below in connection with FIGS. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>A-J, the central purpose of meta-lock acquisition is to accord the thread exclusive access to resources, such as lock records, that support the monitor-access operation.</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="0"><PTEXT><PDAT>After reading the hash and age values as part of meta-lock acquisition, the thread stores them in a field provided for that purpose in the next available lock record. With the hash and age values thus stored, the thread can use the header&apos;s identifier field, which previously held them, to hold the pointer to the lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>. Actually, the identifier field consists of only thirty bits in total, so it can hold only the most-significant thirty bits of the (in this embodiment, thirty-two-bit) lock-record pointer. But this is adequate, because the illustrated embodiment&apos;s lock-record locations are known to be four-byte aligned; the last two bits of any are known always to have the value 00</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>, so the complete address of a lock record can be inferred from a truncated pointer containing only its most-significant thirty bits. Thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> employs a meta-lock-release operation, to be described below in connection with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 9A-J</PDAT></FGREF><PDAT> and </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>, to place this truncated pointer in the header&apos;s identifier field and place the value 01</PDAT><HIL><SB><PDAT>2 </PDAT></SB></HIL><PDAT>in the object&apos;s synchronization-state field </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>, as </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7B</PDAT></FGREF><PDAT> also indicates. That value signifies that the object is locked.</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="0"><PTEXT><PDAT>Although different threads cannot have locks on the same object simultaneously, the Java virtual machine allows a single thread to have more than one lock on an object. To keep track of the number of locks, the lock record includes a lock-count field. To save steps, the value that a typical implementation places in that field when the lock record as initially allocated is one, even though no lock has yet been acquired, since the lock-count field should have that value when the lock record is initially brought into use.</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="0"><PTEXT><PDAT>The meta-lock-acquisition operation actually results in an additional header state between those that </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 7A and B</PDAT></FGREF><PDAT> depict. Such a state also occurs between the states that each other pair of consecutive </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> drawings represents, but we postpone a description of that state until we discuss meta-locking below in connection with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 9A-J</PDAT></FGREF><PDAT>. Also, the header state that results from the meta-lock-release operation would differ from that shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7B</PDAT></FGREF><PDAT> if another thread had attempted to begin a monitor-access operation while thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s was still in progress. Throughout the discussion of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6A-K</PDAT></FGREF><PDAT>, though, we will assume that each thread completes its monitor-access operation before the next thread&apos;s monitor-access operation begins. The way in which the meta-lock-acquisition and -release operations are performed when this assumption is violated will thereafter be described by reference to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 8</PDAT></FGREF><PDAT>, </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>A-K, and </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="0"><PTEXT><PDAT>The usual reason for a thread to lock an object is to read or write one or more of that object&apos;s fields. Let us suppose that a result of thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s reading one of the object fields is its synchronized method&apos;s discovery that the object is not yet in a state required for subsequent method steps. In such a situation, a method may call for its current thread to &ldquo;go to sleep,&rdquo; i.e., to have the operating system suspend the thread and not re-activate it until some condition changes. To do so, the thread calls the object&apos;s waito method, which begins with a monitor-access operation.</PDAT></PTEXT></PARA>
<PARA ID="P-00069" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7C</PDAT></FGREF><PDAT> depicts the result of that monitor-access operation. Specifically, thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> changes the code in the synchronization field </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> to 10</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>. This code indicates that the object is not locked but that there is a thread that is waiting for a lock or, as is the case here, is waiting to be &ldquo;notified&rdquo; about something related to the object. The thread sets its isWaitingForNotify field to its TRUE value to indicate that it is waiting for notification as opposed to a lock. As in the previous monitor-access operation and the other monitor-access operations that </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 7A-K</PDAT></FGREF><PDAT> illustrate, access to the monitor resources is guarded by the meta-locking to be described in connection with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 8</PDAT></FGREF><PDAT>, </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>A-J, and </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="0"><PTEXT><PDAT>Any thread that obtains a lock places a lock record from its pool at the head of the locked object&apos;s linked lock-record list. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7D</PDAT></FGREF><PDAT> illustrates this by showing the result of thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s obtaining a lock on the object while thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> is waiting for notification. Note that thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s locking at this point does not violate the </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> assumption that each monitor-access operation is completed before the next one starts. Thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s wait operation includes more than one monitor-access operation. The first of these, which was to place the thread in the queue of threads waiting for notification, is completed when thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> begins to obtain the lock, even though thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s wait for notification is not.</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="0"><PTEXT><PDAT>As </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7D</PDAT></FGREF><PDAT> shows, one result of thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s locking operation is that thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> has taken a lock record </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> from its linked list of available lock records. It has also placed that lock record at the head of the object&apos;s linked list by pointing the object header&apos;s lock-record pointer to lock record </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> and placing a pointer to lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> in lock record </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT>&apos;s next-LR field. Another result of the locking operation is that the hash and age values that lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> previously contained have been copied into corresponding fields of thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s lock record </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT>. Additionally, thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> has changed the synchronization-state field </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>&apos;s contents to the lock-indicating value, 01</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>Note that FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>D&apos;s representation of thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> contains question marks in the location that previously contained the hash and age fields. In practice, the hash and age values typically still would be in that location. But the hash and age values are updated as necessary only in the object header or the first lock record, not in any other lock record, so the question marks represent the resultant, possibly stale values.</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="0"><PTEXT><PDAT>Although </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7D</PDAT></FGREF><PDAT> depicts lock record </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> as having a lock count of one, it is possible that the synchronized method responsible for the lock is of the recursive variety: it may call itself. In such a situation, each nested call of that routine could obtain a further lock, and the result would be to increment the lock count. When the nested subroutines subsequently start returning, each would release a lock by, among other things, decrementing the lock count. Actually, such multiple locking can result not only from recursive synchronized methods but also from any synchronized method that calls another synchronized method on the same object.</PDAT></PTEXT></PARA>
<PARA ID="P-00074" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7E</PDAT></FGREF><PDAT> illustrates the result of an attempt by a further thread, T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>, to obtain a lock on the object. As </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7D</PDAT></FGREF><PDAT> shows, thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> already has a lock on the object, so thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> takes a lock record </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> from its free-lock-record list and places it at the end of the object&apos;s linked list, not at the beginning. That is, since synchronization-state field </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>&apos;s value is 01</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>, meaning that the object is already locked, thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> follows that object&apos;s lock-record list to lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>, whose NULL next-LR value distinguishes it as the last lock record in the list. It makes that next-LR field point to a lock record chosen from thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>&apos;s pool of available lock records. Since there can be at most one lock-owning thread for a given object, and since that thread&apos;s lock record is at the head of the object&apos;s linked lock-record list, both of the other lock records represent threads that are waiting for the object. Since the isWaitingForNotify field of the execution environment to which lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> points has a TRUE value, whereas that of the execution environment to which lock record </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> points has a FALSE value, </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7E</PDAT></FGREF><PDAT> depicts a state in which lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> represents a thread waiting for notification, while lock record </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> represents a thread waiting to obtain a lock.</PDAT></PTEXT></PARA>
<PARA ID="P-00075" LVL="0"><PTEXT><PDAT>When thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> completes the synchronized method or other synchronized code block, it releases the lock by placing the most-significant thirty bits of its next-LR field&apos;s value in the object&apos;s identifier field, setting that field&apos;s synchronization-state field to 10</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>, resetting its next-LR field to the NULL value, and copying its lock record </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT>&apos;s hash and age fields into the corresponding fields of the next lock record, lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>. It also returns its lock record </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> to the start of its free-lock-record list. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7F</PDAT></FGREF><PDAT> depicts the result.</PDAT></PTEXT></PARA>
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>Note that all of the lock records in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7F</PDAT></FGREF><PDAT> contain lock counts of one, even though none represents a lock on the object. The lock count does not matter for any of those records; that count&apos;s value has meaning only in a lock record that represents an existing lock, i.e., only in the first lock record in a linked list pointed to by an object whose synchronization-state field has the value 01</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>. Leaving a value of one in that field saves a step if the lock record is subsequently used to represent a lock.</PDAT></PTEXT></PARA>
<PARA ID="P-00077" LVL="0"><PTEXT><PDAT>Part of thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s lock-release operation not mentioned above is a system call that results in the operating-system thread scheduler&apos;s reactivating at least one thread, such as thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>, that is waiting to obtain a lock on the object. (Thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> is waiting for notification rather than a lock.) When thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> is reactivated, the object is no longer locked, so thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> thread can obtain a lock on it. To that end, thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> places its lock record </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> at the head of the list, as </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7G</PDAT></FGREF><PDAT> illustrates. That is, it replaces the contents of the object&apos;s lock-record pointer with the first thirty bits of a pointer to its lock record </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT>, places in that lock record&apos;s next-LR field a pointer to the erstwhile first lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>, and resets that lock-record&apos;s next-LR field to a NULL value. It also changes the contents of the object&apos;s synchronization-state field </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> from 10</PDAT><HIL><SB><PDAT>2 </PDAT></SB></HIL><PDAT>(meaning not locked but having a queue of least one waiter) to 01</PDAT><HIL><SB><PDAT>2 </PDAT></SB></HIL><PDAT>(meaning locked).</PDAT></PTEXT></PARA>
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>At this point in the example, we assume that, having obtained a lock on the object, thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> performs a further monitor-access operation, namely, &ldquo;notifying on&rdquo; the object. In the Java programming language, three native methods of the class Object are wait( ), notify( ), and notifyAll( ), which the Java virtual machine usually implements by mapping them to the underlying operating system&apos;s thread-suspension and -resumption operations. The wait( ) method, which thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> performed a monitor-access operation to begin in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7C</PDAT></FGREF><PDAT>, directed the operating system to take that thread out of the queue of activated threads until such time as another thread, in performing the object&apos;s notify( ) method, chooses to deliver the notification to thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00079" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7H</PDAT></FGREF><PDAT> shows what happens when thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> then performs the notify( ) method on the object. Specifically, it follows the linked lock-record list to find the first lock record whose owner is a thread waiting for notification. In this case, that lock record is thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>. Guided by that lock record&apos;s owner pointer, it sets thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s isWaitingForNotify value to FALSE, thereby converting thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> to a waiter for a lock rather than for a notification.</PDAT></PTEXT></PARA>
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>The notifyAll( ) operation is the same as the notify( ) operation, with the exception that the notifying thread notifies each thread awaiting notification, not just the first one.</PDAT></PTEXT></PARA>
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>Thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> then releases its lock on the object, as </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7I</PDAT></FGREF><PDAT> illustrates. Specifically, it changes the object&apos;s synchronization-state field </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> to 10</PDAT><HIL><SB><PDAT>2 </PDAT></SB></HIL><PDAT>to indicate that the record is not locked but does have a queue of at least one waiter associated with it. It then removes its lock record from the linked lock-record list by changing the contents of that lock record&apos;s next-LR field to NULL and redirecting the object&apos;s lock-record pointer to thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>, i.e., placing in that pointer field the first thirty bits of the value from the next-LR field of thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>&apos;s lock record </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> so that it points to the new head of the linked lock-record list. This leaves lock record </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> free for reuse, so thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> returns that record to thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>&apos;s queue of free lock records by placing the pointer from its execution environment&apos;s free-lock-records field in that of lock record </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> and replacing it with a pointer to lock record </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT>. It completes the operation by copying the hash and age fields from lock record </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> into the new first lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>As was mentioned above, the lock-release operation makes system calls to reactivate one or more waiting threads not waiting for notification. Since thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s isWaitingForNotify value is no longer TRUE, this may include thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, in which case the operating system gives it a turn to execute. When it does, it obtains a lock on the object, placing the lock-indicating code 01</PDAT><HIL><SB><PDAT>2 </PDAT></SB></HIL><PDAT>into the object&apos;s synchronization-state field </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>, as </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7J</PDAT></FGREF><PDAT> illustrates.</PDAT></PTEXT></PARA>
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>When thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> has completed the operations for which it required the lock, it releases the lock, as </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7K</PDAT></FGREF><PDAT> illustrates, by returning the hash and age values to the object header&apos;s appropriate fields and setting the object&apos;s synchronization-state code to 00</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>, which indicates that there are no locks or waiters. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7K</PDAT></FGREF><PDAT>, lock records </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> are shown in the states that prevail when they have been returned to their respective threads&apos; pools of available lock records. Note that the only per-object resource required to support thread safety is the two-bit synchronization-state field </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>. Although multiple lock records were additionally needed to support the object&apos;s synchronization operations, these are not per-object resources: they belong to associated threads, and they are bound only to objects on which their threads are currently synchronized. So the number of required lock records is ordinarily negligible in comparison with the number of structures required for per-object resources.</PDAT></PTEXT></PARA>
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>Having reviewed the way in which exemplary monitor-access operations may be performed in the absence of contention for monitor resources, we turn to a discussion of how they acquire and release meta-locks to deal with such contention. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> is a simplified C-language listing of a routine, getMetaLock( ), for performing meta-lock acquisition. It was mentioned in connection with the examples of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 7A-K</PDAT></FGREF><PDAT> that the monitor-access operations depicted in those drawings begin by using the meta-lock-acquisition operation to read the object header&apos;s lock word. In the cases that those drawings illustrate, in which there has been no contention for monitor resources&mdash;i.e., in which the previous monitor-access operation was completed before the current one started&mdash;that lock word is the bit field shown by FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>&apos;s first line to be getMetaLock( )&apos;s return value. The discussion that follows will additionally explain that, when there is contention, get-MetaLock( ) instead returns the value that the lock word would have had if the previous monitor-access operation had been completed before the current one started.</PDAT></PTEXT></PARA>
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>We assume for the sake of illustration that getMetaLock( ) is called in the state that </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7B</PDAT></FGREF><PDAT> represents, i.e., in a state in which the lock word&apos;s first thirty bits are the first thirty bits of the lock-record pointer. As FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>&apos;s first line shows, the arguments that the calling monitor-access operation passes to getMetaLock( )are pointers to the executing thread&apos;s execution environment and to the object on which the thread is attempting to obtain a lock. The heart of the getMetaLock( ) routine in the illustrated embodiment is its third-line step of the placing the value 11</PDAT><HIL><SB><PDAT>2 </PDAT></SB></HIL><PDAT>(referred to in the listing as &ldquo;IsBusy&rdquo;) in the object header&apos;s synchronization-state field, whose contents in the absence of meta-locking are 00</PDAT><HIL><SB><PDAT>2 </PDAT></SB></HIL><PDAT>(no locks or waiters), 01</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>, (locked), or 10</PDAT><HIL><SB><PDAT>2 </PDAT></SB></HIL><PDAT>(waiters only). That value&apos;s meaning is that a thread has a meta-lock on the object, i.e., has a lock on its monitor resources. The same step replaces the identifier field&apos;s contents with the first thirty bits of a pointer to the thread&apos;s execution environment. (Execution environments, too, are four-byte aligned in the illustrated embodiment, so an execution-environment pointer&apos;s value can be inferred from its thirty most-significant bits.)</PDAT></PTEXT></PARA>
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>This third-line replacement is part of a swap operation performed by making a call that takes advantage of the fact that reading the lock-word field&apos;s contents and replacing them can be performed atomically, i.e., can be guaranteed to occur without any intervening operation. In some cases this atomicity is inherent because the instruction set of the processor involved includes an atomic &ldquo;swap&rdquo; operation. In others, it results from the swap&apos;s being implemented as a call to a system-API routine that the operating system does not permit its thread-scheduling operation to interrupt. The resultant atomicity avoids the need for any lower-level lock on the object header.</PDAT></PTEXT></PARA>
<PARA ID="P-00087" LVL="0"><PTEXT><PDAT>If that operation is begun in the state that </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7B</PDAT></FGREF><PDAT> represents, it results in the transition between the states that </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 9A and B</PDAT></FGREF><PDAT> depict. In all </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT> drawings, the object&apos;s structure is on the left, while various fields of thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s, T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s, and T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>&apos;s execution environments are on the right. (Although the drawings depict each execution environment as a single group of contiguous memory locations, and although such an arrangement is beneficial, those skilled in the art will recognize that there is nothing critical about such an organization, and execution-environment fields can in fact be disbursed to suit the particular application.)</PDAT></PTEXT></PARA>
<PARA ID="P-00088" LVL="0"><PTEXT><PDAT>As FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>&apos;s fourth line indicates, getMetaLock( )returns the value of the thus-read lock word so long as the value of its synchronization-state field is not lsBusy (&equals;11</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>), i.e., so long as the calling monitor-access operation does not begin until all previous monitor-access operations have released the meta-lock. This is the situation assumed above in connection with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 7B and C</PDAT></FGREF><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00089" LVL="0"><PTEXT><PDAT>But now suppose that, instead of waiting for thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> to complete the wait-operation commencement that produced the </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7C</PDAT></FGREF><PDAT> state, thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> attempts to begin the subsequent lock operation before the </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7C</PDAT></FGREF><PDAT> state is reached, i.e., while the object&apos;s header is still in the meta-locked state that </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9B</PDAT></FGREF><PDAT> depicts. Thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s attempt to perform a monitor-access operation still begins with the atomic swap operation of FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>&apos;s third line, so it replaces the first thirty bits of thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s execution-environment pointer with the corresponding bits of its own execution-environment pointer. But this time the condition in FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>&apos;s fourth row is false: as </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9B</PDAT></FGREF><PDAT> indicates, the value in the object&apos;s synchronization-state field </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> is 11</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>. So, instead of returning the contents of the object&apos;s lock word, getMetaLock( )returns the return value of another routine. This routine, called getMetaLockSlow( ), returns the value that the object header&apos;s lock word would have had if the previous monitor-access operation had first gone to completion, as it did in FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>C.</PDAT></PTEXT></PARA>
<PARA ID="P-00090" LVL="0"><PTEXT><PDAT>Basically, getMetaLockSlow( ) determines that value by waiting until the previous monitor-access operation has completed. But the predecessor thread does not then write that value back into the object&apos;s lock word, as it would in the absence of contention for the synchronization resources; to do so would erase the object structure&apos;s meta-lock indication, which tells other threads that the necessary synchronization resources are still reserved, as, upon thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s release, they are by thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. Instead, the meta-lock-releasing thread passes that value to its successor through fields in their respective execution environments.</PDAT></PTEXT></PARA>
<PARA ID="P-00091" LVL="0"><PTEXT><PDAT>For communication to occur in that fashion, thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> will ordinarily need to know which thread is its successor, and </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9C</PDAT></FGREF><PDAT> illustrates the result of thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s giving thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> this information by writing thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s execution-environment pointer into an appropriate field of thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> &apos;s execution environment. FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>&apos;s twentieth line represents that step. To do this without risking the inconsistencies in which concurrent access to thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s execution environment could otherwise result, thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> executes the tenth-line system call to obtain a lock on a mutex that the threads associate with T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s execution environment. If some other thread currently has a lock on that mutex, mutexLock( ) suspends the calling thread until the lock is released.</PDAT></PTEXT></PARA>
<PARA ID="P-00092" LVL="0"><PTEXT><PDAT>As FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>&apos;s eleventh and eighteenth lines indicate, the successor-thread-identification operation represented by its twentieth line occurs only if the contents of a bitsForGrab field in the predecessor&apos;s execution environment has a FALSE value. The reason for this condition will be explained presently, but it usually prevails, so that identification operation usually occurs. Having thus identified itself to its predecessor thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> then waits for thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> to complete its monitor-access operation and communicate the resultant release bits&mdash;i.e., the lock-word value that thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> would place in the header if there were no synchronization-resource contention&mdash;to thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00093" LVL="0"><PTEXT><PDAT>To this end, thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> makes the system call of FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>&apos;s twenty-third line. This system call (1) directs the operating system to suspend the calling thread until some other thread &ldquo;signals&rdquo; a condition variable to which the predecessor&apos;s execution environment points in a field not shown, (2) releases the lock on the mutex associated with access to the predecessor&apos;s execution environment, and (3) attempts to reacquire the lock on that mutex when it is awakened. The reason for placing this step in a do-while loop will be set forth presently.</PDAT></PTEXT></PARA>
<PARA ID="P-00094" LVL="0"><PTEXT><PDAT>We now assume that yet another thread, thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>, attempts to begin a monitor-access operation before the previous meta-lock on the monitor resources has been released. Thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> begins just as thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> did. But we will assume for the sake of illustration that the operating system&apos;s thread scheduler ends thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> &apos;s time slice during execution of the instructions that result from, say, FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>&apos;s tenth line. Accordingly, </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9D</PDAT></FGREF><PDAT> shows the object&apos;s lock word as containing the first thirty bits of a pointer to thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>&apos;s execution environment as a result of this step in FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>&apos;s line </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>, but thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> has temporarily been interrupted before it can identify itself to its predecessor by placing a pointer to its execution environment in the succEE field of thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s execution environment.</PDAT></PTEXT></PARA>
<PARA ID="P-00095" LVL="0"><PTEXT><PDAT>When thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> completes the monitor-access operation for which it acquired a meta-lock in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9B</PDAT></FGREF><PDAT>, it must release its meta-lock. To this end, it performs a releaseMetaLock( ) routine, which </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 10</PDAT></FGREF><PDAT> represents by simplified C code. As FIG. </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>&apos;s first line indicates, a monitor-access operation that is releasing a meta-lock passes the releaseMetaLock( ) routine not only pointers to its thread&apos;s execution environment and the object but also releaseBits, which is the data word that will be written into the object&apos;s lock word if no other thread is contending for the synchronization resources.</PDAT></PTEXT></PARA>
<PARA ID="P-00096" LVL="0"><PTEXT><PDAT>In the absence of such contention, that writing occurs in the third and fourth lines&apos; step. That step involves a processor- or operating-system-provided atomic operation known as &ldquo;compare-and-swap.&rdquo; This operation is similar to the swap operation described above in that it reads the lock word&apos;s contents, but it differs from that operation in that replacement of those contents is conditional upon their having a predetermined value. Specifically, the thread performing FIG. </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>&apos;s releaseMetaLocko operation replaces the object&apos;s lock word with the releaseBits value passed to it by the calling monitor-access operation only if that lock word still contains the data word that the thread wrote there when it obtained the meta-lock, i.e., only if no successor has attempted to begin a monitor-access operation in the interim. If none has, then the meta-lock-release operation is completed.</PDAT></PTEXT></PARA>
<PARA ID="P-00097" LVL="0"><PTEXT><PDAT>In the present example, though, threads T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> have both attempted to begin monitor-access operations and thus modified the object&apos;s lock word since thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> obtained the meta-lock. In particular, the header&apos;s lock word is now in use to identify the last meta-lock contender. To avoid erasing this information, the compare-and-swap operation fails, so the releaseBits value is not thereby communicated to thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> through the object&apos;s header. Instead, releaseMetaLocko calls releaseMetaLockSlow( ), as FIG. </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>&apos;s fifth line indicates, to perform that communication through the execution environments.</PDAT></PTEXT></PARA>
<PARA ID="P-00098" LVL="0"><PTEXT><PDAT>In executing releaseMetaLockSlow( ), thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> acquires the mutex that locks its execution environment, as FIG. </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>&apos;s eighth line indicates. It then determines whether its execution environment&apos;s succEE has a non-NULL value, i.e., whether thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s successor has already identified itself. As was explained by reference to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9C</PDAT></FGREF><PDAT>, its successor thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> has in fact done so by placing in that field a pointer to thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s execution environment. The releaseMetaLockSlow( ) routine therefore executes its branch that includes the fourteenth-line step of communicating the releaseBits value to thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> by placing that value in the metaLockBits field of thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s execution environment, as </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9E</PDAT></FGREF><PDAT> indicates. As that drawing also indicates, thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> additionally performs the sixteenth-line step of setting to the TRUE value a gotMetaLockSlow flag, which indicates whether the metaLockBits field of thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s execution environment has received the releaseBits result of the monitor-access operation that thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s predecessor performed.</PDAT></PTEXT></PARA>
<PARA ID="P-00099" LVL="0"><PTEXT><PDAT>Having already used the successor-identity information in its succEE field, thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> then performs the seventeenth-line step of setting that field to a NULL value, as </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9E</PDAT></FGREF><PDAT> also indicates. It then performs the eighteenth-line step of unlocking the mutex that guards access to its execution environment, after which it &ldquo;signals&rdquo; the condition variable that tells the operating system to awaken at least one other thread waiting to acquire that mutex. In other words, it may signal the operating system to cause thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s execution to resume.</PDAT></PTEXT></PARA>
<PARA ID="P-00100" LVL="0"><PTEXT><PDAT>This completes T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s release of its meta-lock. Note that the resultant object-header state depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9E</PDAT></FGREF><PDAT> differs from the result, depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7C</PDAT></FGREF><PDAT>, that the same monitor-access operation produced when there was no contention for the synchronization resources. Specifically, </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9E</PDAT></FGREF><PDAT> does not show the object&apos;s header as containing the waiter-list synchronization-state value and a pointer to a lock record. That information, which thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> needs in order to perform its monitor-access operation, has instead been placed in the metaLockBits field of thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s execution environment.</PDAT></PTEXT></PARA>
<PARA ID="P-00101" LVL="0"><PTEXT><PDAT>Thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> resumes its meta-lock-acquisition operation now that thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> has caused it to be awakened. Specifically, it continues with the do-while loop of FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>&apos;s twenty-second through twenty-fourth lines, at which its operation was suspended in accordance with the condvarWait( ) system call. It will ordinarily have been awakened at this point only after its predecessor has transferred releaseBits to it and thereupon set thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s gotMetaLockSlow value to TRUE. If that value is not TRUE, Thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> suspends itself by again calling condvarwait( ).</PDAT></PTEXT></PARA>
<PARA ID="P-00102" LVL="0"><PTEXT><PDAT>Otherwise, thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> resets gotMetaLockSlow to FALSE so that it will be ready for use by the predecessor thread in any subsequent contended monitor-access operation, as </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9F</PDAT></FGREF><PDAT> indicates. A step in the part of its condvarWait( ) operation that T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> performed after it was awakened was to reacquire the mutex that guards its predecessor&apos;s execution environment, so it performs the twenty-sixth-line step of releasing that mutex. As FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>&apos;s twenty-seventh, twenty-ninth, and fourth lines indicate, getMetaLock( ) then returns to the calling monitor-access operation the value communicated by thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> through thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s execution environment. From the point of view of thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s calling monitor-access operation, the result is just as though there had not been any contention for the meta-lock, and the lock word had accordingly been read from the object&apos;s header.</PDAT></PTEXT></PARA>
<PARA ID="P-00103" LVL="0"><PTEXT><PDAT>Having received that information, the calling monitor-access operation can proceed to completion. When it has done so, thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> calls FIG. </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>&apos;s releaseMetaLock( ) operation to place the resultant releaseBits value in the appropriate location, i.e., in the object&apos;s header or one of the execution environments. Since the header&apos;s execution environment pointer shows that a different thread has made an intervening attempt since thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> acquired the meta-lock that it is now releasing, thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> cannot place its releaseBits value in the header. Instead, it calls releaseMetaLockSlow( ), as thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> did, to place that information in an execution environment.</PDAT></PTEXT></PARA>
<PARA ID="P-00104" LVL="0"><PTEXT><PDAT>Thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s performance of releaseMetaLockSlow( ) differs from thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s, though, because thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> finds a NULL value in its succEE field: thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s successor has not identified itself. So thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> takes that routine&apos;s &ldquo;else&rdquo; branch, in which thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> stores the releaseBits value in its own execution environment rather than that of the (unidentified) successor. Specifically, thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> performs the twenty-second and twenty-third line&apos;s step. In that step, thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> places the releaseBits value in its own execution environment&apos;s metaLockBits field and sets its execution environment&apos;s bitsForGrab value equal to TRUE. That TRUE value indicates that the calling monitor-access operation&apos;s releaseBits output sits in the metaLockBits field of thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s execution environment ready for transmission to its successor. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9G</PDAT></FGREF><PDAT> shows the result.</PDAT></PTEXT></PARA>
<PARA ID="P-00105" LVL="0"><PTEXT><PDAT>Thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> then enters the do-while of FIG. </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>&apos;s twenty-fourth through twenty-sixth lines. That loop releases the mutex that guards the execution environment of the executing thread (here T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>), and it suspends that thread until some other thread signals on the condition variable used in connection with that mutex. This suspension is imposed to avoid a situation that could arise if the meta-lock-releasing thread were allowed to proceed. If it were, the releasing thread could go on to perform synchronization operations on other objects. These synchronization operations could cause the thread to overwrite its metaLockBits field before its original successor had retrieved that field&apos;s contents. The wait imposed by releaseMetaLocko suspends the executing thread until its successor has read those contents.</PDAT></PTEXT></PARA>
<PARA ID="P-00106" LVL="0"><PTEXT><PDAT>Let us now assume that thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> resumes getMetaLockSlow( ) at FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>&apos;s tenth line, where we assumed in connection with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9D</PDAT></FGREF><PDAT> that the operating system&apos;s thread scheduler interrupted it. After thereupon obtaining a lock on the mutex that guards the execution environment of its predecessor, thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, it then determines whether the contents of the bitsForGrab field of its predecessor&apos;s execution environment is TRUE, i.e. whether its predecessor has stored its releaseBits value in its own metaLockBits field. Since thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> has indeed done so, thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> takes getMetaLockSlow( )&apos;s first branch, in which it performs the fourteenth line&apos;s step of copying that field&apos;s contents.</PDAT></PTEXT></PARA>
<PARA ID="P-00107" LVL="0"><PTEXT><PDAT>Thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> then performs getMetaLockSlow( )&apos;s fifteenth-line step of resetting thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s bitsForGrab value to FALSE, as </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9H</PDAT></FGREF><PDAT> indicates. Among other things, this prevents thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s successor with respect to some subsequent monitor-access operation from erroneously concluding that the subsequent operation&apos;s releaseBits output sits in thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos; s metaLockBits field ready for transmission to that successor. And, since thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> has already copied that field&apos;s contents, thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> can now resume execution. So thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> performs the sixteenth-line step of awakening thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> by signaling on the condition variable associated with the mutex that guards thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s execution environment. It then performs the seventeenth-line step of unlocking that mutex. As FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>&apos;s twenty-seventh, twenty-ninth, and fourth lines indicate, getMetaLock( ) then returns to the calling monitor-access operation the value that it obtained from thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s execution environment.</PDAT></PTEXT></PARA>
<PARA ID="P-00108" LVL="0"><PTEXT><PDAT>Thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> accordingly proceeds to perform a locking operation corresponding to the one described above in connection with the transition from </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7D</PDAT></FGREF><PDAT> to FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>E.</PDAT></PTEXT></PARA>
<PARA ID="P-00109" LVL="0"><PTEXT><PDAT>Since thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> signaled on the condition variable upon which thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> had waited, the operating system awakens thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. Thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> thereupon completes releaseMetaLock( ) after verifying in the twenty-sixth-line step that thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> has reset thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s bitsForGrab value, i.e., that the successor thread has indeed read the release bits. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 91</PDAT></FGREF><PDAT> indicates that this results in no change to the object&apos;s header or the illustrated execution-environment fields.</PDAT></PTEXT></PARA>
<PARA ID="P-00110" LVL="0"><PTEXT><PDAT>Thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> eventually completes its locking operation, so it releases its meta-lock by calling releaseMetaLock( ). In this case, the compare-and-swap operation of FIG. </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>&apos;s third and fourth lines finds that the contents of the object header&apos;s lock word are indeed the same as those that thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> left there during its acquisition of the meta-lock. That is, no other thread has attempted to obtain access to the monitor resources since thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> obtained the meta-lock. So the compare-and-swap operation is successful: its swap part proceeds, leaving the releaseBits result of thread T</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>&apos;s monitor-access operation&apos;s in the object&apos;s header, as </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9J</PDAT></FGREF><PDAT> indicates. The </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9J</PDAT></FGREF><PDAT> header state is the same as the state, depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7E</PDAT></FGREF><PDAT>, that resulted when the same monitor-access-operation sequence was performed without meta-lock contention.</PDAT></PTEXT></PARA>
<PARA ID="P-00111" LVL="0"><PTEXT><PDAT>A review of our meta-locking approach reveals that it supports light-weight object locking with a minimum of storage or performance cost, yet it is versatile enough to be used with synchronization operations other than just locking. In a single atomic swap operation, a thread attempting to initiate a monitor-access operation (1) reserves the monitor resources ahead of any successors, (2) learns the object&apos;s current synchronization state if there is no predecessor, (3) learns the identity of any predecessor so that it can suspend itself after arranging for the predecessor to wake it up when the predecessor&apos;s results are available, and (4) identifies itself to any immediate successor for the same purpose. It thus avoids the need to engage in a wasteful busy-wait, or &ldquo;spinning&rdquo; cycles.</PDAT></PTEXT></PARA>
<PARA ID="P-00112" LVL="0"><PTEXT><PDAT>Moreover, although the illustrated embodiment was described in connection with the particular types of monitor resources depicted in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 7A-K</PDAT></FGREF><PDAT>, namely, a linked list of lock records associated with various threads that have performed monitor-access operations, a review of the meta-lock-acquisition and -release operations described above reveals that they do not depend on such resources at all, so they can be employed with other types of object-locking schemes. Also, although the illustrated embodiment&apos;s meta-lock-acquisition and -release operations advantageously involve reading from and writing to object-header fields that additionally are employed for other purposes (to contain the hash and age values, for instance), there is no reason in principle why this type of meta-locking cannot be employed in an arrangement in which the object header includes space dedicated solely to locking and meta-locking&mdash;or meta-locking only.</PDAT></PTEXT></PARA>
<PARA ID="P-00113" LVL="0"><PTEXT><PDAT>Also, there is no reason why the synchronization field needs to be realized in precisely the way the illustrated embodiment realizes it. If the meta-locking is used to guard only locking and unlocking, for instance, a single-bit synchronization field can be adequate. The synchronization field can also be realized as two constituent fields, one to indicate whether monitor access is in progress&mdash;i.e., whether the object is meta-locked&mdash;and another to represent the synchronization state that results when that access is finished.</PDAT></PTEXT></PARA>
<PARA ID="P-00114" LVL="0"><PTEXT><PDAT>The alternative features described above could be used with a header that has a dedicated lock word, for instance. If the meta-locking is used only for locking and unlocking, a single-bit field in the lock word could indicate whether the object is meta-locked, and the remainder of the lock word could specify the lock state by containing an identifier of the locking thread; i.e., a NULL value would indicate that the object is neither locked nor meta-locked.</PDAT></PTEXT></PARA>
<PARA ID="P-00115" LVL="0"><PTEXT><PDAT>Having now considered an approach to meta-locking, we now turn to the teachings of the present invention, in accordance with which the meta-locking operation is dispensed with in some circumstances. As an example, consider an implementation whose operation we describe in connection with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 11A-F</PDAT></FGREF><PDAT>. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11A</PDAT></FGREF><PDAT> is like </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7A</PDAT></FGREF><PDAT> in that it illustrates a situation in which no thread is yet synchronized on the object. In the implementation that we now describe, though, lock-acquisition and -release operations are distinguished from other monitor-access operations in that they are not necessarily preceded by meta-lock acquisition. A thread that is to lock an object first reads the object header&apos;s lock word to determine whether any thread is already synchronized on it or has acquired its meta-lock. If any has, the thread proceeds essentially as described above, acquiring the object&apos;s meta-lock to guard the monitor access in which it will engage.</PDAT></PTEXT></PARA>
<PARA ID="P-00116" LVL="0"><PTEXT><PDAT>But we assume in this example that the object header&apos;s synchronization field </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> has the value that </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11A</PDAT></FGREF><PDAT> depicts. Its value, 00</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>, means that no thread has synchronized on the object or acquired a meta-lock on it.</PDAT></PTEXT></PARA>
<PARA ID="P-00117" LVL="0"><PTEXT><PDAT>Thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> therefore employs a short cut that takes advantage of the fact that locking the object under these circumstances will not require access to any other threads&apos; lock records. As was explained above, lock acquisition under these circumstances simply involves placing the lock word&apos;s hash and age values in the appropriate field of the thread&apos;s first free lock record, removing that record from the free list, and replacing the object header&apos;s lock word with one that points to that lock record and contains the lock-indicating value in its synchronization field. If the other steps precede the lock-word replacement, those other steps are performed on structures to which other threads will not attempt access. This means that the lock acquisition can be accomplished without guarding if the replacement operation, i.e., the step performed on the structure to which other threads do have access, is performed as part of an atomic compare-and-swap operation in which the comparison ensures that no thread has synchronized on the object or acquired a meta-lock on it.</PDAT></PTEXT></PARA>
<PARA ID="P-00118" LVL="0"><PTEXT><PDAT>So thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> appropriately prepares lock record </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> and then performs an atomic compare-and-swap operation in which the expected value of the object-header&apos;s lock word still has the value previously read by thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> as indicating the absence of synchronization or a meta-lock. In the illustrated scenario, the comparison operation does indeed verify that the lock word has the expected value, so thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> replaces the lock word appropriately, as </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11B</PDAT></FGREF><PDAT> illustrates. Thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> has thus locked the object without obtaining and releasing a meta-lock reflected in the object&apos;s header.</PDAT></PTEXT></PARA>
<PARA ID="P-00119" LVL="0"><PTEXT><PDAT>The absence of a need for access to other threads&apos; lock records can also be taken advantage of when a thread is attempting to release an object on which no other thread is synchronized or owns a meta-lock. As was explained above, the release operation under these circumstances involves only replacing the object header&apos;s lock word with a value read from the unlocking thread&apos;s lock record; access is required only to the object header and the releasing thread&apos;s lock record. True, other threads have access to both of these structures. But a straightforward way to perform the lock-release operation safely is to use an atomic &ldquo;double-compare-and-swap&rdquo; operation that makes the replacement of the header&apos;s lock word conditional on the absence not only of any other thread&apos;s meta-lock ownership but also of any other synchronized thread, i.e., on the presence of a NULL value in the lock record&apos;s next-LR field.</PDAT></PTEXT></PARA>
<PARA ID="P-00120" LVL="0"><PTEXT><PDAT>Now, an atomic double-compare-and-swap operation is one that atomically compares the values in two memory locations against respective expected values for these locations and, if both comparisons match, replaces the contents of the memory locations with specified new values. To perform the lock-release operation by using doublecompare-and-swap, the first memory location is the object header&apos;s lock-word field, and the second memory location is the next-LR field of the first lock record, and the swaps occur if the comparisons verify that the header&apos;s lock word still points to the releasing thread&apos;s lock record and that the next-LR field is NULL. One of the resultant swaps replaces the lock word with the stored hash and age values and the 00</PDAT><HIL><SB><PDAT>2 </PDAT></SB></HIL><PDAT>synchronization-state code. The other &ldquo;replaces&rdquo; the next-LR field&apos;s value with NULL, i.e., does not change it.</PDAT></PTEXT></PARA>
<PARA ID="P-00121" LVL="0"><PTEXT><PDAT>The expedited lock-release operation can be performed without meta-locking even if the system involved does not provide a double-compare-and-swap operation. An alternative for such systems is to have the object&apos;s header include a bit position whose value can act as an indication that the first lock record&apos;s next-LR bit is NULL. That is, a list-length indicator would be part of the lock word being replaced, so a single-record list length could be verified by a conventional compare-and-swap operation, as will be explained below.</PDAT></PTEXT></PARA>
<PARA ID="P-00122" LVL="0"><PTEXT><PDAT>One way to modify the above-described embodiment for this purpose is to make room for an extra bit in the synchronization field by requiring that the lock records be eight-byte aligned so that the identifier field can be twenty-nine bits wide rather than thirty when it contains a pointer to a linked lock-record list. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11B</PDAT></FGREF><PDAT> illustrates this approach. That drawing shows that the synchronization-state field has an extra, list-length-indicator bit, which is used to indicate whether the list length is greater than one. The synchronization-state field is thus variable in length: it is three bits long whenever the synchronization-state code is 01</PDAT><HIL><SB><PDAT>2 </PDAT></SB></HIL><PDAT>(the object is locked) or 10</PDAT><HIL><SB><PDAT>2 </PDAT></SB></HIL><PDAT>(threads are waiting for it). That is, it is three bits long when the identifier field is a pointer to an (eight-byte aligned) linked list of lock records. Of course, the list-length indicator does not have to be contiguous to the other synchronization-state-field contents. (Indeed, the other synchronization-state-field bits do not have to be contiguous to each other.)</PDAT></PTEXT></PARA>
<PARA ID="P-00123" LVL="0"><PTEXT><PDAT>A zero value is placed in the list-length-indicator field by at least some monitor-access operations, such as the expedited lock-acquisition operation just described, that leave the object&apos;s linked lock-record list with only one lock record, i.e., with a NULL value in the first lock record&apos;s next-LR field. To support this approach, monitor-access operations must place a one in that extra bit position before they leave the object&apos;s linked lock-record list with more than one lock record: that position will contain a zero only if the first lock record&apos;s next-LR field is NULL.</PDAT></PTEXT></PARA>
<PARA ID="P-00124" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 11C</PDAT></FGREF><PDAT> illustrates the result of such an operation. Under the meta-lock&apos;s protection, thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> has placed itself in the queue of threads waiting to obtain a lock on the object, and in doing so it has set the list-length-indicator bit to one, indicating that the object&apos;s linked lock-record list is greater than one lock record in length.</PDAT></PTEXT></PARA>
<PARA ID="P-00125" LVL="0"><PTEXT><PDAT>When thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> thereafter attempts to release the lock, it starts what may be an expedited lock-release operation by performing an atomic compare-and-swap operation in which the lock word expected to be found in the object&apos;s header consists of (1) the truncated pointer to the releasing thread&apos;s lock record and (2) a synchronization-state value of 001</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>. That 001</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>&apos;s first digit would indicate that the pointed-to lock record&apos;s next-LR field has a NULL value. Its last two digits represent the locked state, as before. But the compare-and-swap operation fails, because the synchronization-state value is 101</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>, not 001</PDAT><HIL><SB><PDAT>2</PDAT></SB></HIL><PDAT>. This means that the lock-release operation will involve access to another thread&apos;s lock record. So thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> cannot use the short cut even though the object&apos;s header is otherwise just as thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> left it. Thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> therefore uses meta-locking to release its lock. As </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11D</PDAT></FGREF><PDAT> indicates, thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s lock-release operation involved writing the hash and age values into thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>&apos;s lock record. It is this access that prevented thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> from using the short cut.</PDAT></PTEXT></PARA>
<PARA ID="P-00126" LVL="0"><PTEXT><PDAT>In some implementations, not all monitor-access operations will reset the synchronization-state field&apos;s most-significant bit to zero whenever they leave the object&apos;s list with at most one lock record. For example, some may reset that bit only during expedited lock-acquisition operations. But </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11D</PDAT></FGREF><PDAT> shows that thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>&apos;s lock-release operation has indeed reset it. So thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> is able to acquire the lock after thread T</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> releases the lock, and </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11E</PDAT></FGREF><PDAT> depicts the result.</PDAT></PTEXT></PARA>
<PARA ID="P-00127" LVL="0"><PTEXT><PDAT>When T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> thereafter releases the lock, it attempts to employ the expedited lock-release operation, and this attempt succeeds. Specifically, the object&apos;s lock-word field now contains exactly the value that thread T</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> left in it. In particular, the list-length-indicator bit is still zero, so there is still only one lock record in the object&apos;s list. The compare-and-swap operation therefore succeeds. Since the lock-release operation removes the sole lock record from the list, the replacement lock word&apos;s identifier field will be thirty bits long and contain the stored hash and age values rather than a (twenty-ninebit) truncated pointer to the object&apos;s now-empty linked lock-record list, as </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11F</PDAT></FGREF><PDAT> indicates. Also, the value of its synchronization-state field will be 00</PDAT><HIL><SB><PDAT>2 </PDAT></SB></HIL><PDAT>to indicate that the object is neither locked nor meta-locked and no thread is waiting for it. The lock will thereby have been released without acquiring or releasing the meta-lock.</PDAT></PTEXT></PARA>
<PARA ID="P-00128" LVL="0"><PTEXT><PDAT>The present invention can therefore be employed in a wide range of embodiments and thus constitutes a significant advance in the art.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00129" LVL="0"><PTEXT><PDAT>1. A computer system configured by computer instructions to operate as a compiler/interpreter that:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to electrical signals representing source code that calls for allocation of an object on which thread execution can be synchronized, produces electrical signals representing object code that directs a processor to allocate to the object an object structure that includes a lock-word field of which a synchronization-state field is a part; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) in response to electrical signals representing source code that calls for a synchronizing execution thread to lock the object, produces electrical signals representing object code that directs the processor in some circumstances to: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) perform on the object&apos;s lock-word field an atomic lock compare-and-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) is successful, performing a lock operation by replacing prereplacement contents of the object&apos;s lock-word field with a lock word in which the synchronization-state field contains a synchronization-state code indicating that the object is locked and not meta-locked without first placing a meta-lock-indicating synchronization code in the synchronization-state field, only if the synchronization-state field in the pre-replacement lock-word-field contents indicate that the object is neither synchronized on nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the lock compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) perform a meta-lock-acquisition operation by replacing pre-replacement contents of the object&apos;s lock-word field with a lock word in which the synchronization-state field contains a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) thereafter perform a lock operation on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00130" LVL="0"><PTEXT><PDAT>2. A computer system as defined in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) the lock word with which the lock compare-and-swap operation replaces the pre-replacement contents of the object&apos;s lock-word field has the release value. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00131" LVL="0"><PTEXT><PDAT>3. A computer system as defined in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) if the lock compare-and-swap operation is unsuccessful, the lock operation is followed by a meta-lock-release operation in which the contents of the object&apos;s lock-word field are replaced with a lock word whose value is the release value if the lock-word-field contents before the meta-lock-release operation are the same as the lock word with which the meta-lock-acquisition operation replaced the contents of the object&apos;s lock-word field. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00132" LVL="0"><PTEXT><PDAT>4. A computer system as defined in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein the lock word with which the meta-lock-acquisition operation replaces pre-replacement contents of the object&apos;s lock-word field includes an identifier of the synchronizing thread.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00133" LVL="0"><PTEXT><PDAT>5. A computer system as defined in claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to electrical signals representing source code that calls for execution of multiple execution threads, the compiler/interpreter produces electrical signals representing object code that for each thread directs a processor to allocate an execution environment; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the identifier of the synchronizing thread identifies the synchronizing thread&apos;s execution environment. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00134" LVL="0"><PTEXT><PDAT>6. A computer system as defined in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to electrical signals representing source code that calls for a synchronizing execution thread to lock the object, the compiler/interpreter produces electrical signals representing object code that directs the processor to perform a preliminary-read operation in which it reads the contents of the lock-word field; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock compare-and-swap operation is performed only if the synchronization-state-field contents of the lock-record field read in the preliminary-read operation indicate that the object is neither synchronized on nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) the lock compare-and-swap operation is successful if the lock-word field&apos;s pre-replacement contents are the same as the contents of the lock-record field read in the preliminary-read operation. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00135" LVL="0"><PTEXT><PDAT>7. A computer system as defined in claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) the lock word with which the lock compare-and-swap operation replaces the pre-replacement contents of the object&apos;s lock-word field has the release value. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00136" LVL="0"><PTEXT><PDAT>8. A computer system as defined in claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) if the lock compare-and-swap operation is unsuccessful, the lock operation is followed by a meta-lock-release operation in which the contents of the object&apos;s lock-word field are replaced with a lock word whose value is the release value if the lock-word-field contents before the meta-lock-release operation are the same as the lock word with which the meta-lock-acquisition operation replaced the contents of the object&apos;s lock-word field. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00137" LVL="0"><PTEXT><PDAT>9. A computer system as defined in claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> wherein the lock word with which the meta-lock-acquisition operation replaces pre-replacement contents of the object&apos;s lock-word field includes an identifier of the synchronizing thread.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00138" LVL="0"><PTEXT><PDAT>10. A computer system as defined in claim </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to electrical signal representing source code that calls for execution of multiple execution threads, the compiler/interpreter produces electrical signals representing object code that for each thread directs a processor to allocate an execution environment; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the identifier of the synchronizing thread identifies the synchronizing thread&apos;s execution environment. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00139" LVL="0"><PTEXT><PDAT>11. A computer system as defined in claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> wherein, in response to electrical signals representing source code that calls for a synchronizing execution thread to release its lock on the object, the compiler/interpreter produces electrical signals representing object code that directs the processor to:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) perform an atomic release compare-and-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) if the object has no more than one thread synchronized on it and pre-replacement contents of the object&apos;s synchronization-state field indicate that the object is not meta-locked, is successful and releases its lock on the object by replacing the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is neither locked nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) if the release compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) replace the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) thereafter release the lock on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00140" LVL="0"><PTEXT><PDAT>12. A computer system as defined in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein, in response to electrical signals representing source code that calls for a synchronizing execution thread to release its lock on the object, the compiler/interpreter produces electrical signals representing object code that directs the processor to:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) perform an atomic release compare-and-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) if the object has no more than one thread synchronized on it and pre-replacement contents of the object&apos;s synchronization-state field indicate that the object is not meta-locked, is successful and releases the synchronizing execution thread&apos;s lock on the object by replacing the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is neither locked nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) if the release compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) replace the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) thereafter release the lock on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00141" LVL="0"><PTEXT><PDAT>13. A computer system as defined in claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> wherein the release compare-and-swap operation is successful only if the pre-replacement contents of the object&apos;s synchronization-state field indicate that the object has no more than one thread synchronized on it.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00142" LVL="0"><PTEXT><PDAT>14. A computer system as defined in claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> wherein, in response to electrical signals representing source code that calls for a synchronizing execution thread to perform a monitor-access operation on the object, the compiler/interpreter produces electrical signals representing object code that directs the processor to perform a monitor-access operation that:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) produces a release value that includes a synchronization-state field that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) indicates whether the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the linked lock-record list has more than one lock record in it, indicates that the object has more than one thread synchronized on it, and, in at least some circumstances, indicates otherwise if the linked lock-record list has no more than one lock record in it; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) replaces pre-replacement contents of the object&apos;s lock-word field with the release value if no successor thread has placed in the object&apos;s lock-word field a synchronization-state code indicating that the object is meta-locked. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00143" LVL="0"><PTEXT><PDAT>15. A computer system configured by computer instructions to operate as acompiler/interpreter that:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to electrical signals representing source code that calls for allocation of an object on which thread execution can be synchronized, produces electrical signals representing object code that directs a processor to allocate to the object an object structure that includes a lock-word field of which a synchronization-state field is a part; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) i n response to electrical signals representing source code that calls for a synchronizing execution th read to release its lock on the object, produces electrical signals representing object code that directs the processor to: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) perform an atomic release compare-and-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) if the object has no more than one thread synchronized on it and pre-replacement contents of the object&apos;s synchronization-state field indicate that the object is not meta-locked, is successful and releases its lock on the object by replacing the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is neither locked nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the release compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) perform a meta-lock-acquisition operation by replacing the pre-replacement contents of the object&apos;s synchronization state field with a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) thereafter release the lock on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00144" LVL="0"><PTEXT><PDAT>16. A computer system as defined in claim </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT> wherein the release compare-and-swap operation is successful only if the pre-replacement contents of the object&apos;s synchronization-state field indicate that the object has no more than one thread synchronized on it.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00017">
<PARA ID="P-00145" LVL="0"><PTEXT><PDAT>17. A computer system as defined in claim </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT> wherein, in response to electrical signals representing source code that calls for a synchronizing execution thread to perform a monitor-access operation on the object, the compiler/interpreter produces electrical signals representing object code that directs the processor to perform a monitor-access operation that:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) produces a release value that includes a synchronization-state field that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) indicates whether the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the linked lock-record list has more than one lock record in it, indicates that the object has no more than one thread synchronized on it, and in at least some circumstances, indicates otherwise if the linked lock-record list has no more than one lock record in it; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) replaces pre-replacement contents of the object&apos;s lock-word field with the release value if no successor thread has placed in the object&apos;s lock-word field a synchronization-state code indicating that the object is meta-locked. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00018">
<PARA ID="P-00146" LVL="0"><PTEXT><PDAT>18. For generating object code, a method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to source code that calls for allocation of an object on which thread execution can be synchronized, producing object code that directs a processor to allocate to the object an object structure that includes a lock-word field of which a synchronization-state field is a part; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) in response to source code that calls for a synchronizing execution thread to lock the object, producing object code that directs the processor in some circumstances to: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) perform on the object&apos;s lock-word field an atomic lock compare and-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) is successful, performing a lock operation by replacing pre-replacement contents of the object&apos;s lock-word field with a lock word in which the synchronization-state field contains a synchronization-state code indicating that the object is locked and not meta-locked without first placing a meta-lock-indicating synchronization code in the synchronization-state field, only if the synchronization-state field in the pre-replacement lock-word-field contents indicate that the object is neither synchronized on nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the lock compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) perform a meta-lock-acquisition operation by replacing pre-replacement contents of the object&apos;s lock-word field with a lock word in which the synchronization-state field contains a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) thereafter perform a lock operation on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00019">
<PARA ID="P-00147" LVL="0"><PTEXT><PDAT>19. A method as defined in claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) the lock word with which the lock compare-and-swap operation replaces the pre-replacement contents of the object&apos;s lock-word field has the release value. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00020">
<PARA ID="P-00148" LVL="0"><PTEXT><PDAT>20. A method as defined in claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) if the lock compare-and-swap operation is unsuccessful, the lock operation is followed by a meta-lock-release operation in which the contents of the object&apos;s lock-word field are replaced with a lock word whose value is the release value if the lock-word-field contents before the meta-lock-release operation are the same as the lock word with which the meta-lock-acquisition operation replaced the contents of the object&apos;s lock-word field. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00021">
<PARA ID="P-00149" LVL="0"><PTEXT><PDAT>21. A method as defined in claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT> wherein the lock word with which the meta-lock-acquisition operation replaces pre-replacement contents of the object&apos;s lock-word field includes an identifier of the synchronizing thread.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00022">
<PARA ID="P-00150" LVL="0"><PTEXT><PDAT>22. A method as defined in claim </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to source code that calls for execution of multiple execution threads, the method produces object code that for each thread directs a processor to allocate an execution environment; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the identifier of the synchronizing thread identifies the synchronizing thread&apos;s execution environment. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00023">
<PARA ID="P-00151" LVL="0"><PTEXT><PDAT>23. A method as defined in claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to source code that calls for a synchronizing execution thread to lock the object, the method produces object code that directs the processor to perform a preliminary-read operation in which it reads the contents of the lock-word field; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock compare-and-swap operation is performed only if the synchronization-state-field contents of the lock-record field read in the preliminary read operation indicate that the object is neither synchronized on nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) the lock compare-and-swap operation is successful if the lock-word field&apos;s pre-replacement contents are the same as the contents of the lock-record field read in the preliminary-read operation. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00024">
<PARA ID="P-00152" LVL="0"><PTEXT><PDAT>24. A method as defined in claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) the lock word with which the lock compare-and-swap operation replaces the pre-replacement contents of the object&apos;s lock-word field has the release value. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00025">
<PARA ID="P-00153" LVL="0"><PTEXT><PDAT>25. A method as defined in claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) if the lock compare-and-swap operation is unsuccessful, the lock operation is followed by a meta-lock-release operation in which the contents of the object&apos;s lock-word field are replaced with a lock word whose value is the release value if the lock-word-field contents before the meta-lock-release operation are the same as the lock word with which the meta-lock-acquisition operation replaced the contents of the object&apos;s lock-word field. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00026">
<PARA ID="P-00154" LVL="0"><PTEXT><PDAT>26. A method as defined in claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> wherein the lock word with which the meta-lock-acquisition operation replaces pre-replacement contents of the object&apos;s lock-word field includes an identifier of the synchronizing thread.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00027">
<PARA ID="P-00155" LVL="0"><PTEXT><PDAT>27. A method as defined in claim </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to source code that calls for execution of multiple execution threads, the method produces object code that for each thread directs a processor to allocate an execution environment; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the identifier of the synchronizing thread identifies the synchronizing thread&apos;s execution environment. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00028">
<PARA ID="P-00156" LVL="0"><PTEXT><PDAT>28. A method as defined in claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> wherein, in response to source code that calls for a synchronizing execution thread to release its lock on the object, the method produces object code that directs the processor to:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) perform an atomic release compare-and-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) if the object has no more than one thread synchronized on it and pre-replacement contents of the object&apos;s synchronization-state field indicate that the object is not meta-locked, is successful and releases its lock on the object by replacing the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is neither locked nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) if the release compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) replace the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) thereafter release the lock on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00029">
<PARA ID="P-00157" LVL="0"><PTEXT><PDAT>29. A method as defined in claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT> wherein, in response to source code that calls for a synchronizing execution thread to release its lock on the object, the method produces object code that directs the processor to:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) perform an atomic release compare-and-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) if the object has no more than one thread synchronized on it and pre-replacement contents of the object&apos;s synchronization-state field indicate that the object is not meta-locked, is successful and releases the synchronizing execution thread&apos;s lock on the object by replacing the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is neither locked nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) if the release compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) replace the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) thereafter release the lock on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00030">
<PARA ID="P-00158" LVL="0"><PTEXT><PDAT>30. A method as defined in claim </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> wherein the release compare-and-swap operation is successful only if the pre-replacement contents of the object&apos;s synchronization-state field indicate that the object has no more than one thread synchronized on it.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00031">
<PARA ID="P-00159" LVL="0"><PTEXT><PDAT>31. A method as defined in claim </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> wherein, in response to source code that calls for a synchronizing execution thread to perform a monitor-access operation on the object, the method produces object code that directs the processor to perform a monitor-access operation that:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) produces a release value that includes a synchronization-state field that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) indicates whether the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the linked lock-record list has more than one lock record in it, indicates that the object has more than one thread synchronized on it, and, in at least some circumstances, indicates otherwise if the linked lock-record list has no more than one lock record in it; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) replaces pre-replacement contents of the object&apos;s lock-word field with the release value if no successor thread has placed in the object&apos;s lock-word field a synchronization-state code indicating that the object is meta-locked. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00032">
<PARA ID="P-00160" LVL="0"><PTEXT><PDAT>32. For generating object code, a method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to source code that calls for allocation of an object on which thread execution can be synchronized, producing object code that directs a processor to allocate to the object an object structure that includes a lock-word field of which a synchronization-state field is a part; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) in response to source code that calls for a synchronizing execution thread to release its lock on the object, producing object code that directs the processor to: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) perform an atomic release compare-and-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) if the object has no more than one thread synchronized on it and pre-replacement contents of the object&apos;s synchronization-state field indicate that the object is not meta-locked, is successful and releases its lock on the object by replacing the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is neither locked nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the release compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) perform a meta-lock-acquisition operation by replacing the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) thereafter release the lock on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00033">
<PARA ID="P-00161" LVL="0"><PTEXT><PDAT>33. A method as defined in claim </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT> wherein the release compare-and-swap operation is successful only if the pre-replacement contents of the object&apos;s synchronization-state field indicate that the object has no more than one thread synchronized on it.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00034">
<PARA ID="P-00162" LVL="0"><PTEXT><PDAT>34. A method as defined in claim </PDAT><HIL><BOLD><PDAT>33</PDAT></BOLD></HIL><PDAT> wherein, in response to source code that calls for a synchronizing execution thread to perform a monitor-access operation on the object, the method produces object code that directs the processor to perform a monitor-access operation that:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) produces a release value that includes a synchronization-state field that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) indicates whether the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the linked lock-record list has more than one lock record in it, indicates that the object has no more than one thread synchronized on it, and in at least some circumstances, indicates otherwise if the linked lock-record list has no more than one lock record in it; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) replaces pre-replacement contents of the object&apos;s lock-word field with the release value if no successor thread has placed in the object&apos;s lock-word field a synchronization-state code indicating that the object is meta-locked. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00035">
<PARA ID="P-00163" LVL="0"><PTEXT><PDAT>35. A computer data signal embodied in a carrier wave and representing a sequence of instructions that, when executed by a computer system, configures the computer system to operate as a compiler/interpreter that:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to electrical signals representing source code that calls for allocation of an object on which thread execution can be synchronized, produces electrical signals representing object code that directs a processor to allocate to the object an object structure that includes a lock-word field of which a synchronization-state field is a part; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) in response to electrical signals representing source code that calls for a synchronizing execution thread to lock the object, produces electrical signals representing object code that directs the processor in some circumstances to: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) perform on the object&apos;s lock-word field an atomic lock compareand-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) is successful, performing a lock operation by replacing pre-replacement contents of the object&apos;s lock-word field with a lock word in which the synchronization-state field contains a synchronization-state code indicating that the object is locked and not meta-locked without first placing a meta-lock-indicating synchronization code in the synchronization-state field, only if the synchronization-state field in the pre-replacement lock-word-field contents indicate that the object is neither synchronized on nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the lock compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) perform a meta-lock-acquisition operation by replacing pre-replacement contents of the object&apos;s lock-word field with a lock word in which the synchronization-state field contains a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) thereafter perform a lock operation on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00036">
<PARA ID="P-00164" LVL="0"><PTEXT><PDAT>36. A computer data signal as defined in claim </PDAT><HIL><BOLD><PDAT>35</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) the lock word with which the lock compare-and-swap operation replaces the pre-replacement contents of the object&apos;s lock-word field has the release value. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00037">
<PARA ID="P-00165" LVL="0"><PTEXT><PDAT>37. A computer data signal as defined in claim </PDAT><HIL><BOLD><PDAT>35</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) if the lock compare-and-swap operation is unsuccessful, the lock operation is followed by a meta-lock-release operation in which the contents of the object&apos;s lock-word field are replaced with a lock word whose value is the release value if the lock-word-field contents before the meta-lock-release operation are the same as the lock word with which the meta-lock-acquisition operation replaced the contents of the object&apos;s lock-word field. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00038">
<PARA ID="P-00166" LVL="0"><PTEXT><PDAT>38. A computer data signal as defined in claim </PDAT><HIL><BOLD><PDAT>35</PDAT></BOLD></HIL><PDAT> wherein the lock word with which the meta-lock-acquisition operation replaces pre-replacement contents of the object&apos;s lock-word field includes an identifier of the synchronizing thread.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00039">
<PARA ID="P-00167" LVL="0"><PTEXT><PDAT>39. A computer data signal as defined in claim </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to electrical signals representing source code that calls for execution of multiple execution threads, the compiler/interpreter produces electrical signals representing object code that for each thread directs a processor to allocate an execution environment; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the identifier of the synchronizing thread identifies the synchronizing thread&apos;s execution environment. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00040">
<PARA ID="P-00168" LVL="0"><PTEXT><PDAT>40. A computer data signal as defined in claim </PDAT><HIL><BOLD><PDAT>35</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to electrical signals representing source code that calls for a synchronizing execution thread to lock the object, the compiler/interpreter produces electrical signals representing object code that directs the processor to perform a preliminary-read operation in which it reads the contents of the lock-word field; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock compare-and-swap operation is performed only if the synchronization-state-field contents of the lock-record field read in the preliminary-read operation indicate that the object is neither synchronized on nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) the lock compare-and-swap operation is successful if the lock-word field&apos;s pre-replacement contents are the same as the contents of the lock-record field read in the preliminary-read operation. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00041">
<PARA ID="P-00169" LVL="0"><PTEXT><PDAT>41. A computer data signal as defined in claim </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results in a linked lock record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) the lock word with which the lock compare-and-swap operation replaces the pre-replacement contents of the object&apos;s lock-word field has the release value. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00042">
<PARA ID="P-00170" LVL="0"><PTEXT><PDAT>42. A computer data signal as defined in claim </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results in a linked jock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) if the lock compare-and-swap operation is unsuccessful, the lock operation is followed by a meta-lock-release operation in which the contents of the object&apos;s lock-word field are replaced with a lock word whose value is the release value if the lock-word-field contents before the meta-lock-release operation are the same as the lock word with which the meta-lock-acquisition operation replaced the contents of the object&apos;s lock-word field. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00043">
<PARA ID="P-00171" LVL="0"><PTEXT><PDAT>43. A computer data signal as defined in claim </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> wherein the lock word with which the meta-lock-acquisition operation replaces pre-replacement contents of the object&apos;s lock-word field includes an identifier of the synchronizing thread.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00044">
<PARA ID="P-00172" LVL="0"><PTEXT><PDAT>44. A computer data signal as defined in claim </PDAT><HIL><BOLD><PDAT>43</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to electrical signals representing source code that calls for execution of multiple execution threads, the compiler/interpreter produces electrical signals representing object code that for each thread directs a processor to allocate an execution environment; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the identifier of the synchronizing thread identifies the synchronizing thread&apos;s execution environment. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00045">
<PARA ID="P-00173" LVL="0"><PTEXT><PDAT>45. A computer data signal as defined in claim </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> wherein, in response to electrical signals representing source code that calls for a synchronizing execution thread to release its lock on the object, the compiler/interpreter produces electrical signals representing object code that directs the processor to:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) perform an atomic release compare-and-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) if the object has no more than one thread synchronized on it and pre-replacement contents of the object&apos;s synchronization-state field indicate that the object is not meta-locked, is successful and releases its lock on the object by replacing the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is neither locked nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) if the release compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) replace the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) thereafter release the lock on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00046">
<PARA ID="P-00174" LVL="0"><PTEXT><PDAT>46. A computer data signal as defined in claim </PDAT><HIL><BOLD><PDAT>35</PDAT></BOLD></HIL><PDAT> wherein, in response to electrical signals representing source code that calls for a synchronizing execution thread to release its lock on the object, the compiler/interpreter produces electrical signals representing object code that directs the processor to:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) perform an atomic release compare-and-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) if the object has no more than one thread synchronized on it and pre-replacement contents of the object&apos;s synchronization-state field indicate that the object is not meta-locked, is successful and releases the synchronizing execution thread&apos;s lock on the object by replacing the pre-replacement contents of the object&apos;s synchroni zation-state field with a synchronization-state code indicating that the object is neither locked nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) if the release compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) replace the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) thereafter release the lock on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00047">
<PARA ID="P-00175" LVL="0"><PTEXT><PDAT>47. A computer data signal as defined in claim </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> wherein the release compare-and-swap operation is successful only if the pre-replacement contents of the object&apos;s synchronization-state field indicate that the object has no more than one thread synchronized on it.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00048">
<PARA ID="P-00176" LVL="0"><PTEXT><PDAT>48. A computer data signal as defined in claim </PDAT><HIL><BOLD><PDAT>47</PDAT></BOLD></HIL><PDAT> wherein, in response to electrical signals representing source code that calls for a synchronizing execution thread to perform a monitor-access operation on the object, the compiler/interpreter produces electrical signals representing object code that directs the processor to perform a monitor-access operation that:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) produces a release value that includes a synchronization-state field that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) indicates whether the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the linked lock-record list has more than one lock record in it, indicates that the object has more than one thread synchronized on it, and, in at least some circumstances, indicates otherwise if the linked lock-record list has no more than one lock record in it; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) replaces pre-replacement contents of the object&apos;s lock-word field with the release value if no successor thread has placed in the object&apos;s lock-word field a synchronization-state code indicating that the object is meta-locked. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00049">
<PARA ID="P-00177" LVL="0"><PTEXT><PDAT>49. A computer data signal embodied in a carrier wave and representing a sequence of instructions that, when executed by a computer system, configures the computer system to operate as a compiler/interpreter that:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to electrical signals representing source code that calls for allocation of an object on which thread execution can be synchronized, produces electrical signals representing object code that directs a processor to allocate to the object an object structure that includes a lock-word field of which a synchronization-state field is a part; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) in response to electrical signals representing source code that calls for a synchronizing execution thread to release its lock on the object, produces electrical signals representing object code that directs the processor to: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) perform an atomic release compare-and-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) if the object has no more than one thread synchronized on it and pre-replacement contents of the object&apos;s synchronization-state field indicate that the object is not meta-locked, is successful and releases its lock on the object by replacing the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is neither locked nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the release compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) perform a meta-lock-acquisition operation by replacing the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) thereafter release the lock on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00050">
<PARA ID="P-00178" LVL="0"><PTEXT><PDAT>50. A computer data signal as defined in claim </PDAT><HIL><BOLD><PDAT>49</PDAT></BOLD></HIL><PDAT>wherein the release compare-and-swap operation is successful only if the pre-replacement contents of the object&apos;s synchronization-state field indicate that the object has no more than one thread synchronized on it.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00051">
<PARA ID="P-00179" LVL="0"><PTEXT><PDAT>51. A computer data signal as defined in claim </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> wherein, in response to electrical signals representing source code that calls for a synchronizing execution thread to perform a monitor-access operation on the object, the compiler/interpreter produces electrical signals representing object code that directs the processor to perform a monitor-access operation that:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) produces a release value that includes a synchronization-state field that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) indicates whether the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the linked lock-record list has more than one lock record in it, indicates that the object has no more than one thread synchronized on it, and in at least some circumstances, indicates otherwise if the linked lock-record list has no more than one lock record in it; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) replaces pre-replacement contents of the object&apos;s lock-word field with the release value if no successor thread has placed in the object&apos;s lock-word field a synchronization-state code indicating that the object is meta-locked. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00052">
<PARA ID="P-00180" LVL="0"><PTEXT><PDAT>52. A storage medium containing instructions readable by a computer system to configure the computer system as a compiler/interpreter that:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to electrical signals representing source code that calls for allocation of an object on which thread execution can be synchronized, produces electrical signals representing object code that directs a processor to allocate to the object an object structure that includes a lock-word field of which a synchronization-state field is a part; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) in response to electrical signals representing source code that calls for a synchronizing execution thread to lock the object, produces electrical signals representing object code that directs the processor in some circumstances to: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) perform on the object&apos;s lock-word field an atomic lock compareand-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) is successful, performing a lock operation by replacing pre-replacement contents of the object&apos;s lock-word field with a lock word in which the synchronization-state field contains a synchronization-state code indicating that the object is locked and not meta-locked without first placing a meta-lock-indicating synchronization code in the synchronization-state field, only if the synchronization-state field in the pre-replacement lock-word-field contents indicate that the object is neither synchronized on nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the lock compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) perform a meta-lock-acquisition operation by replacing pre-replacement contents of the object&apos;s lock-word field with a lock word in which the synchronization-state field contains a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) thereafter perform a lock operation on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00053">
<PARA ID="P-00181" LVL="0"><PTEXT><PDAT>53. A storage medium as defined in claim </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) the lock word with which the lock compare-and-swap operation replaces the pre-replacement contents of the object&apos;s lock-word field has the release value. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00054">
<PARA ID="P-00182" LVL="0"><PTEXT><PDAT>54. A storage medium as defined in claim </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) if the lock compare-and-swap operation is unsuccessful, the lock operation is followed by a meta-lock-release operation in which the contents of the object&apos;s lock-word field are replaced with a lock word whose value is the release value if the lock-word-field contents before the meta-lock-release operation are the same as the lock word with which the meta-lock-acquisition operation replaced the contents of the object&apos;s lock-word field. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00055">
<PARA ID="P-00183" LVL="0"><PTEXT><PDAT>55. A storage medium as defined in claim </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> wherein the lock word with which the meta-lock-acquisition operation replaces pre-replacement contents of the object&apos;s lock-word field includes an identifier of the synchronizing thread.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00056">
<PARA ID="P-00184" LVL="0"><PTEXT><PDAT>56. A storage medium as defined in claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to electrical signals representing source code that calls for execution of multiple execution threads, the compiler/interpreter produces electrical signals representing object code that for each thread directs a processor to allocate an execution environment; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the identifier of the synchronizing thread identifies the synchronizing thread&apos;s execution environment. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00057">
<PARA ID="P-00185" LVL="0"><PTEXT><PDAT>57. A storage medium as defined in claim </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to electrical signals representing source code that calls for a synchronizing execution thread to lock the object, the compiler/interpreter produces electrical signals representing object code that directs the processor to perform a preliminary-read operation in which it reads the contents of the lock-word field; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock compare-and-swap operation is performed only if the synchronization-state-field contents of the lock-record field read in the preliminary-read operation indicate that the object is neither synchronized on nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) the lock compare-and-swap operation is successful if the lock-word field&apos;s pre-replacement contents are the same as the contents of the lock-record field read in the preliminary-read operation. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00058">
<PARA ID="P-00186" LVL="0"><PTEXT><PDAT>58. A storage medium as defined in claim </PDAT><HIL><BOLD><PDAT>57</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results in ed lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) the lock word with which the lock compare-and-swap operation replaces the pre-replacement contents of the object&apos;s lock-word field has the release value. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00059">
<PARA ID="P-00187" LVL="0"><PTEXT><PDAT>59. A storage medium as defined in claim </PDAT><HIL><BOLD><PDAT>57</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) the lock operation results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the lock operation includes producing a release value that includes: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) a synchronization-state field that indicates that the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) an identifier field that identifies the linked lock-record list; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) if the lock compare-and-swap operation is unsuccessful, the lock operation is followed by a meta-lock-release operation in which the contents of the object&apos;s lock-word field are replaced with a lock word whose value is the release value if the lock-word-field contents before the meta-lock-release operation are the same as the lock word with which the meta-lock-acquisition operation replaced the contents of the object&apos;s lock-word field. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00060">
<PARA ID="P-00188" LVL="0"><PTEXT><PDAT>60. A storage medium as defined in claim </PDAT><HIL><BOLD><PDAT>57</PDAT></BOLD></HIL><PDAT> wherein the lock word with which the meta-lock-acquisition operation replaces pre-replacement contents of the object&apos;s lock-word field includes an identifier of the synchronizing thread.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00061">
<PARA ID="P-00189" LVL="0"><PTEXT><PDAT>61. A storage medium as defined in claim </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT> wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to electrical signals representing source code that calls for execution of multiple execution threads, the compiler/interpreter produces electrical signals representing object code that for each thread directs a processor to allocate an execution environment; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) the identifier of the synchronizing thread identifies the synchronizing thread&apos;s execution environment. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00062">
<PARA ID="P-00190" LVL="0"><PTEXT><PDAT>62. A storage medium as defined in claim </PDAT><HIL><BOLD><PDAT>57</PDAT></BOLD></HIL><PDAT> wherein, in response to electrical signals representing source code that calls for a synchronizing execution thread to release its lock on the object, the compiler/interpreter produces electrical signals representing object code that directs the processor to:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) perform an atomic release compare-and-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) if the object has no more than one thread synchronized on it and pre-replacement contents of the object&apos;s synchronization-state field indicate that the object is not meta-locked, is successful and releases its lock on the object by replacing the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is neither locked nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) if the release compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) replace the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) thereafter release the lock on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00063">
<PARA ID="P-00191" LVL="0"><PTEXT><PDAT>63. A storage medium as defined in claim </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> wherein, in response to electrical signals representing source code that calls for a synchronizing execution thread to release its lock on the object, the compiler/interpreter produces electrical signals representing object code that directs the processor to:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) perform an atomic release compare-and-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) if the object has no more than one thread synchronized on it and pre-replacement contents of the object&apos;s synchronization-state field indicate that the object is not meta-locked, is successful and releases the synchronizing execution thread&apos;s lock on the object by replacing the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is neither locked nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) if the release compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) replace the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) thereafter release the lock on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00064">
<PARA ID="P-00192" LVL="0"><PTEXT><PDAT>64. A storage medium as defined in claim </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> wherein the release compare-and-swap operation is successful only if the pre-replacement contents of the object&apos;s synchronization-state field indicate that the object has no more than one thread synchronized on it.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00065">
<PARA ID="P-00193" LVL="0"><PTEXT><PDAT>65. A storage medium as defined in claim </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> wherein, in response to electrical signals representing source code that calls for a synchronizing execution thread to perform a monitor-access operation on the object, the compiler/interpreter produces electrical signals representing object code that directs the processor to perform a monitor-access operation that:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) produces a release value that includes a synchronization-state field that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) indicates whether the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the linked lock-record list has more than one lock record in it, indicates that the object has more than one thread synchronized on it, and, in at least some circumstances, indicates otherwise if the linked lock-record list has no more than one lock record in it; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) replaces pre-replacement contents of the object&apos;s lock-word field with the release value if no successor thread has placed in the object&apos;s lock-word field a synchronization-state code indicating that the object is meta-locked. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00066">
<PARA ID="P-00194" LVL="0"><PTEXT><PDAT>66. A storage medium containing instructions readable by a computer system to configure the computer system as a compiler/interpreter that:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) in response to electrical signals representing source code that calls for allocation of an object on which thread execution can be synchronized, produces electrical signals representing object code that directs a processor to allocate to the object an object structure that includes a lock-word field of which a synchronization-state field is a part; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) in response to electrical signals representing source code that calls for a synchronizing execution thread to release its lock on the object, produces electrical signals representing object code that directs the processor to: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) perform an atomic release compare-and-swap operation that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) if the object has no more than one thread synchronized on it and pre-replacement contents of the object&apos;s synchronization-state field indicate that the object is not meta-locked, is successful and releases its lock on the object by replacing the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is neither locked nor meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) is otherwise unsuccessful and does not replace the pre-replacement contents of the object&apos;s synchronization-state field; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the release compare-and-swap operation is unsuccessful: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a) perform a meta-lock-acquisition operation by replacing the pre-replacement contents of the object&apos;s synchronization-state field with a synchronization-state code indicating that the object is meta-locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>b) thereafter release the lock on the object. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00067">
<PARA ID="P-00195" LVL="0"><PTEXT><PDAT>67. A storage medium as defined in claim </PDAT><HIL><BOLD><PDAT>66</PDAT></BOLD></HIL><PDAT> wherein the release compare-and-swap operation is successful only if the pre-replacement contents of the object&apos;s synchronization-state field indicate that the object has no more than one thread synchronized on it.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00068">
<PARA ID="P-00196" LVL="0"><PTEXT><PDAT>68. A storage medium as defined in claim </PDAT><HIL><BOLD><PDAT>67</PDAT></BOLD></HIL><PDAT> wherein, in response to electrical signals representing source code that calls for a synchronizing execution thread to perform a monitor-access operation on the object, the compiler/interpreter produces electrical signals representing object code that directs the processor to perform a monitor-access operation that:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>A) results in a linked lock-record list, associated with the object, that comprises a lock record associated with each thread synchronized on the object; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>B) produces a release value that includes a synchronization-state field that: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>i) indicates whether the object is locked; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>ii) if the linked lock-record list has more than one lock record in it, indicates that the object has no more than one thread synchronized on it, and in at least some circumstances, indicates otherwise if the linked lock-record list has no more than one lock record in it; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>C) replaces pre-replacement contents of the object&apos;s lock-word field with the release value if no successor thread has placed in the object&apos;s lock-word field a synchronization-state code indicating that the object is meta-locked.</PDAT></PTEXT></CLMSTEP>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314563-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314563-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314563-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314563-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314563-20011106-D00004.TIF">
<EMI ID="EMI-D00005" FILE="US06314563-20011106-D00005.TIF">
<EMI ID="EMI-D00006" FILE="US06314563-20011106-D00006.TIF">
<EMI ID="EMI-D00007" FILE="US06314563-20011106-D00007.TIF">
<EMI ID="EMI-D00008" FILE="US06314563-20011106-D00008.TIF">
<EMI ID="EMI-D00009" FILE="US06314563-20011106-D00009.TIF">
<EMI ID="EMI-D00010" FILE="US06314563-20011106-D00010.TIF">
<EMI ID="EMI-D00011" FILE="US06314563-20011106-D00011.TIF">
<EMI ID="EMI-D00012" FILE="US06314563-20011106-D00012.TIF">
<EMI ID="EMI-D00013" FILE="US06314563-20011106-D00013.TIF">
<EMI ID="EMI-D00014" FILE="US06314563-20011106-D00014.TIF">
<EMI ID="EMI-D00015" FILE="US06314563-20011106-D00015.TIF">
<EMI ID="EMI-D00016" FILE="US06314563-20011106-D00016.TIF">
<EMI ID="EMI-D00017" FILE="US06314563-20011106-D00017.TIF">
<EMI ID="EMI-D00018" FILE="US06314563-20011106-D00018.TIF">
<EMI ID="EMI-D00019" FILE="US06314563-20011106-D00019.TIF">
<EMI ID="EMI-D00020" FILE="US06314563-20011106-D00020.TIF">
<EMI ID="EMI-D00021" FILE="US06314563-20011106-D00021.TIF">
<EMI ID="EMI-D00022" FILE="US06314563-20011106-D00022.TIF">
<EMI ID="EMI-D00023" FILE="US06314563-20011106-D00023.TIF">
<EMI ID="EMI-D00024" FILE="US06314563-20011106-D00024.TIF">
<EMI ID="EMI-D00025" FILE="US06314563-20011106-D00025.TIF">
<EMI ID="EMI-D00026" FILE="US06314563-20011106-D00026.TIF">
<EMI ID="EMI-D00027" FILE="US06314563-20011106-D00027.TIF">
<EMI ID="EMI-D00028" FILE="US06314563-20011106-D00028.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314564-20011106-D00000.TIF SYSTEM "US06314564-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314564-20011106-D00001.TIF SYSTEM "US06314564-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314564-20011106-D00002.TIF SYSTEM "US06314564-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314564-20011106-D00003.TIF SYSTEM "US06314564-20011106-D00003.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314564</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>08968156</PDAT></DNUM></B210>
<B211US><PDAT>08</PDAT></B211US>
<B220><DATE><PDAT>19971117</PDAT></DATE></B220>
</B200>
<B500>
<B510>
<B511><PDAT>G06F  945</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>717 10</PDAT></B521>
<B522><PDAT>717  8</PDAT></B522>
<B522><PDAT>717  9</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Method for resolving arbitrarily complex expressions at link-time</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5193180</PDAT></DNUM>
<DATE><PDAT>19930300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hastings</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 10</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5287490</PDAT></DNUM>
<DATE><PDAT>19940200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Sites</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395500</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5317740</PDAT></DNUM>
<DATE><PDAT>19940500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Sites</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395700</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5404555</PDAT></DNUM>
<DATE><PDAT>19950400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Liu</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395800</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5507030</PDAT></DNUM>
<DATE><PDAT>19960400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Sites</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395800</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5551035</PDAT></DNUM>
<DATE><PDAT>19960800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Arnold et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709315</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5592600</PDAT></DNUM>
<DATE><PDAT>19970100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>DePauw et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345440</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5613120</PDAT></DNUM>
<DATE><PDAT>19970300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Paley et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395710</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5649203</PDAT></DNUM>
<DATE><PDAT>19970700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Sites</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>395709</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5805461</PDAT></DNUM>
<DATE><PDAT>19980900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Fant et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>364488</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B562><NCIT><STEXT><PDAT>IEEE Standard for Microprocessor Universal Format for Object Modules, IEEE Std 695-1990, Feb. 1991.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Unix System V, Release 4, Programmer&apos;s Guide: ANSI C and Programming Support Tools, Prentice-Hall, Inc. , Englewood Cliffs, New Jersey, 1990, pp. 13-30-13-39.</PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
</B560>
<B570>
<B577><PDAT>24</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>395710</PDAT></B582>
<B582><PDAT>395709</PDAT></B582>
<B582><PDAT>395575</PDAT></B582>
<B582><PDAT>395708</PDAT></B582>
<B582><PDAT>395717</PDAT></B582>
</B580>
<B590><B595><PDAT>3</PDAT></B595><B596><PDAT>4</PDAT></B596><B597US>
</B590>
</B500>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>David K.</PDAT></FNM><SNM><STEXT><PDAT>Charles</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Macungie</PDAT></CITY>
<STATE><PDAT>PA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Gerald S.</PDAT></FNM><SNM><STEXT><PDAT>Williams</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Macungie</PDAT></CITY>
<STATE><PDAT>PA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Agere Systems Guardian Corp.</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Orlando</PDAT></CITY><STATE><PDAT>FL</PDAT></STATE></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>02</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Synnestvedt &amp; Lechner LL</PDAT></STEXT></ONM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Mark R.</PDAT></FNM><SNM><STEXT><PDAT>Powell</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Hoang-Vu Antony</PDAT></FNM><SNM><STEXT><PDAT>Nguyen-Ba</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2122</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A method of resolving arbitrarily-complex expressions during the linking operation of an object file is disclosed. This is accomplished by including stack operations in the relocation entries of relocatable object files. By adding stack operations to the relocation entries, postfix notation (also known as &ldquo;reverse Polish notation&rdquo;) can be utilized to allow the resolution of the arbitrarily-complex expressions during the linking operation and within the object file itself.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>FIELD OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>This invention relates to the resolution of arbitrarily-complex expressions as a computer program is linked together, rather than at run-time. Specifically, the present invention enables relocation values in relocatable object files to be specified as arbitrarily-complex expressions.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>Large software systems are commonly divided into components called modules. These modules, usually organized into files called object files (one module per file), must be tied to one another to form executable files before they operate. Before a program can be loaded into an end-user&apos;s computer for use it must be compiled, that is, converted from source code format in which the programmer typically writes the program to object code format which will be recognized by the end-user&apos;s computer. It must also be linked, which includes computing proper addresses of all modules which comprise the compiled program. The output of compiling is usually one or more relocatable object files which are combined during linking into a single executable program. Linking cannot be completed until all modules (object files) are fully defined.</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>Like most programs, an object file comprises lines of code which instruct the computer to carry out specific functions. Quite often an instruction within the object file will make reference to another instruction within the same or another object file. For example, an instruction might tell the computer to go to a particular address in the object file (e.g., line 4) and perform a function.</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>A problem arises when two or more object files are linked. Since each object file is created independently of the other object files, the addresses used in one file will bear no relationship to those of another. For example, if an object file has a starting address of 50, the code addresses for that file will progress upward in sequence (e.g., 51, 52, 53, etc.). When several object files are linked to form an executable file, each line of code in the object files that make up the executable file are assigned new addresses within the executable file. Thus, when a line of code from the object file tells the computer to go to line 52 and perform an operation, line 52 of the executable file may not be the desired line.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>To solve this problem, relocatable object files are used. A relocatable object file is assigned addresses relative to memory location zero. Thus, since the first memory location is a known constant, the location of each line of code in a particular object file can be calculated and the instruction that directs the computer to a particular line can be adjusted accordingly to reflect the location of the line within the executable file in which the object file is used. This allows a programmer to code sections of programs without being concerned about the final arrangement of the code when it is linked to form the executable file.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>An assembler is used to generate a relocatable object file, and the linker then combines the data from the object files. If an instruction or data item within an object file makes reference to another instruction or data item with the same or another object file, this reference may have to be updated. This is traditionally accomplished through the use of relocation entries.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>Each relocation entry consists of three or four fields. The fields identify what data is going to have to be updated, identify a symbol that will eventually point to the correct address for updated data, define how to change the data to be relocated, and identify the offset value (the amount to add or subtract from the data to be relocated) if needed. Relocation entries are capable of being &ldquo;extended&rdquo; so that the files in which the relocation entries reside can be customized to function with a particular piece of hardware (e.g., a Pentium processor).</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>It is desirable to run digital signal processors (DSP&apos;s) and other microprocessors typically used in embedded applications as fast as possible; thus, it is preferable to reduce the number of operations that are required during the execution stage (run time) of operation. To achieve this, as many operations as possible should be performed during &ldquo;build time&rdquo;, which is the compile time and/or link-time, as opposed to the run time, since timing is not as critical during the building of the application as it is during run time.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>Arbitrarily-complex expressions are algebraic expressions that have no artificial limits on nesting depth or the use of particular operators or data items. In software systems, arbitrarily-complex expressions involving relocatable labels can only be resolved at link-time or at run-time because the final values of those labels are not known until the object files are linked together. Generally, expressions in source or object files that involve symbolic labels and that are resolved at link time are limited to simple expressions (e.g., a label plus an immediate value), if such expressions are able to be resolved at all. Linking is the last step in the creation (building) of an executable program and is normally performed by a tool called a linker or loader. Since most object file formats are not capable of representing arbitrarily-complex expressions as relocation values, current development tool sets usually require that arbitrarily-complex expressions be independently specified to the linker through a linker control file, if they are to be performed at link-time.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>A linker control file is an additional file that independently instructs the linker how to compute the arbitrarily-complex expressions. Relocation entries in the object file produced by the assembler instruct the linker how to use the results of the computation. Using linker control files requires additional user intervention to specify the arbitrarily-complex expression when linking. Whereas object files are deliberately written so that they can be used repeatedly for different functions, the linker control file is an extra file that has to be written, debugged and edited each time a group of object files are linked. Additional symbols are required to support the linker control file expressions. Further, the linker control files cannot be used within object files that are stored as modules within library archives, and the linker control files cannot be used in dynamically linked libraries (DLL&apos;s), since both contain only module data and the values in the linker control file will change with each application. Use of linker control files also makes programs more error-prone, since they require the programmer to write the linker control file in order to create &ldquo;dummy&rdquo; symbols. The programmer also has to modify the source program to make reference to the dummy symbols. The linker has to obtain information from both the linker control file and the relocation entry. This places limitation on the ability of the linker to, determine if there are any conflicts between the obtained information and other information in the program (e.g., multiple uses of the same symbols or definitions of a symbol in an object file instead of in a linker control file).</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>If arbitrarily-complex expressions could be built into the object file during build time, then there would be better performance during run-time. Conventional relocation entries are incapable of representing such expressions, however. Thus, if such expressions can be specified at all, they must be explicitly specified to the linker through some other means, such as the above-mentioned linker control file method.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>Specifying arbitrarily-complex expressions directly in the object files would make building programs easier and less error-prone, and would allow libraries of object files to be self-contained and include any expressions that they use in the object file itself. It would also allow expressions to be used in conjunction with deferred (e.g., dynamic) linking, such as using a dynamically linked library (DLL) whose final address is not known until just before it is used.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>Previous attempts to encode expressions into traditional object files have revolved around using strings of characters to represent expressions. This requires reserving a place in the object file to store the strings,and the linker must parse and reinterpret the strings in order to resolve them. This is a time consuming operation which may introduce errors, since the linker is reinterpreting the expression, including symbol names which may not be unique. Conventional standard object file formats do not support such expression strings, which leads to non-standard variants.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>The present invention takes advantage of the ability to extend the relocation entries of object files by including stack operations in the relocation entries. Specifically, by adding PUSH, POP, and EVALUATE operations to the relocation entries, postfix notation (also known as &ldquo;reverse Polish notation&rdquo;) can be utilized to allow the resolution of arbitrarily-complex expressions during the linking operation and within the object file itself.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>In one embodiment, the standard PUSH operation can be used to push a symbol or label onto the stack. This is appropriate when the format of the program allows the use of an addend field. In formats that do not support the addend field, a PUSH IMMEDIATE operation can be used to push a value onto the stack. The stack operations are added to the relocation entries without modifying the object file format. This means that tool developers and end users can use standard object file formats (e.g., ELF or COFF) using standard tools or libraries for accessing them.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWING</PDAT></STEXT></H>
<PARA ID="P-00017" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a table showing a relocation entry of the prior art;</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a table showing relocation entries according to the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3 and </PDAT></FGREF><PDAT>3A are a flowchart of the operation of the present invention.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</PDAT></STEXT></H>
<PARA ID="P-00020" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> shows an example of a prior art relocation entry format in a prior art relocatable object file. In this example, the ELF (Executable and Linking Format) format is utilized; thus, conventional ELF field names (e.g. r_offset) are shown.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, line 1 shows a data pointer, known as a &ldquo;data offset,&rdquo; at column 10. The ELF field name is &ldquo;r_offset&rdquo;. This datum identifies the location at which to apply the relocation action (e.g., the example in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> points to a &ldquo;GOTO instruction&rdquo; reference). For a relocatable file, the value of the offset is expressed in the object file as a byte offset or instruction offset to the storage unit affected by the relocation e.g., if the GOTO instruction reference is the third instruction in the object file, it is coded as &ldquo;3&rdquo; as shown.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><PDAT>Column 20 illustrates the ELF field &ldquo;r_info&rdquo;. This field identifies both the relocation type to apply e.g., &ldquo;GOTO relocation&rdquo;, and the symbol table index with respect to which the relocation must be made, e.g. LABEL1.</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><PDAT>Column 30 illustrates the ELF field &ldquo;r_addend&rdquo;, which, under conventional operation specifies a constant addend used to compute the value to be stored in the relocate field. For example, in the above example, if the source program contained &ldquo;GOTO LABEL1 &plus;5&rdquo;, the addend&apos;s value would be 5. Since the example in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> shows an addend of 0, the source program coded therein reads &ldquo;GOTO LABEL1&rdquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><PDAT>The above explanation illustrates the conventional instructions that are found in the relocation entries of a conventional relocatable object file. Suppose, however, that the source program contains &ldquo;GOTO (LABEL1-LABEL2)/4&rdquo;. Under the prior art methods, a linker control file would have to be created to perform the arithmetic calculations (subtract and divide), with the result from the linker control file calculations being used in the object file. According to the present invention, instead of having to create and invoke a linker control file to perform the subtraction and division operations, stack commands are used directly in the relocation type field of the relocation entry to enable the resolution of these arithmetic operations. A stack is a well-known way to store data such that the last object put on the stack is the first object retrieved (also called LIFO, for last-end-first-out). Stack operations are commonly used, for example, by Hewlett-Packard calculators to calculate arithmetic expressions, taking advantage of postfix (reverse Polish) notation.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><PDAT>Referring to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, according to the present invention, for the operation &ldquo;GOTO (LABEL1-LABEL2)/4&rdquo;, the stack command &ldquo;PUSH LABEL1&rdquo; pushes the value corresponding to LABEL1 onto a stack maintained by the linker. Next, the stack command &ldquo;PUSH LABEL2&rdquo; pushes the value corresponding to LABEL2 onto the stack, on top of the LABEL1 value. &ldquo;Binary EVALUATE&rdquo; at line 3 causes the execution of the mathematical operation &ldquo;SUBTRACT&rdquo; on the top two items on the stack (i.e., LABEL1-LABEL2). This replaces the LABEL1 and LABEL2 items on the stack with the result of the subtraction.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><PDAT>At line 4, the stack command &ldquo;PUSH 4&rdquo; pushes the divisor, in this case, a &ldquo;4&rdquo;, onto the stack. At line 5, &ldquo;Binary EVALUATE&rdquo; causes the execution of the mathematical operation &ldquo;DIVIDE&rdquo; on the top two items on the stack, and replaces the top two stack items with the result of the division. Finally, at line 6, &ldquo;POP&rdquo; removes the result and the &ldquo;GOTO relocation&rdquo; moves it to the proper location for updating the GOTO instruction.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>If the GOTO instruction is the third instruction in the object file; LABEL1 and LABEL2 are the second and third symbols, respectively, referenced in the symbol file (the file that contains the symbol definitions); PUSH, EVALUATE, POP and GOTO Relocation are relocation types 1, 2, 3, and 4, respectively, referenced in a &ldquo;relocation type file&rdquo; (a file that contains the relocation type definitions); the &ldquo;Binary EVALUATE SUBTRACT&rdquo; and &ldquo;Binary EVALUATE DIVIDE&rdquo; are the second and fourth operations, respectively, in the &ldquo;Binary EVALUATE Operation&rdquo; file (a file that contains the Binary EVALUATE Operation definitions), then these operations would be encoded as follows:</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00001">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="3">
<COLSPEC COLNAME="OFFSET" COLWIDTH="49PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="28PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="140PT" ALIGN="CENTER">
<THEAD>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Line 1</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>3,1,2,0</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Line 2</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>3,1,3,0</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Line 3</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>3,2,0,2</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Line 4</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>3,1,0,4</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Line 5</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>3,2,0,4</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Line 6</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>3,3,0,4</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="2" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00028" LVL="0"><PTEXT><PDAT>Relocation is performed by the linker after it knows where all of the instructions and data will reside in the executable file. When a conventional relocation type (e.g., &ldquo;GOTO instruction&rdquo;) is encountered, the value of the specified symbol e.g., LABEL1) is retrieved (0 is used if no symbol is given), and the addend (if used) is added to it. The data at the specified address is updated in a way determined by the relocation type, in a conventional manner.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3 and 3A</PDAT></FGREF><PDAT> are a flowchart illustrating the operation of the present invention as described in more detail below. When a PUSH (a non-conventional relocation type) is encountered, the value of the symbol (plus the addend, if used) is pushed onto a stack, which is initially empty. If no symbol is specified, then the value in the addend field represents an &ldquo;immediate value&rdquo;, i.e., a number that will be added, subtracted, or otherwise used in computation. When an EVALUATE relocation type is encountered, the addend field is used in a different manner than it is used under the prior art. When the EVALUATE relocation type is encountered the value in the addend field identifies what type of EVALUATE to execute, i.e., the addend is simply an identifying code. For example, in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, a &ldquo;2&rdquo; in the addend field indicates a &ldquo;SUBTRACT&rdquo; function and a &ldquo;4&rdquo; indicates a &ldquo;DIVISION&rdquo; function, each as defined in the Binary EVALUATE Operation table discussed above. The selected function is performed on the top items on the stack (the top item for a UNARY EVALUATE, the top two items for a BINARY EVALUATE, and the top three items for a TRINARY EVALUATE). Once the EVALUATE function is performed, the items on the stack subjected to the EVALUATE function are replaced with the single result. When a POP is encountered, the addend field actually contains a conventional relocation type. The value on the top of the stack is removed from the stack and used to update the data at the address specified in a conventional manner.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><PDAT>Although only UNARY, BINARY and TRINARY evaluate operations are disclosed in detail, the EVALUATE operation need not be limited to one of these three. EVALUATE can support zero operands (e.g., to insert an irrational constant such as pi or e, or to access linker-provided information). It also supports a greater number of operands (e.g., to evaluate functions with four or more input arguments). Further, EVALUATE can directly access the stack for the purposes of getting operands or storing results without necessarily removing all operands from the stack and replacing them with the result (as is done in the preferred embodiment).</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><PDAT>In the preferred embodiment, multiple relocation types are assigned to correspond to EVALUATE. At least one relocation type is assigned to each set of operand constraints that may be placed upon the EVALUATE operations (e.g., number of input operands, which may be UNARY, BINARY, or TRINARY). An alternative embodiment uses only one relocation type and encodes the operand constraints into the field that specifies the operation to be performed (the addend field in the preferred embodiment). Another alternative embodiment uses a separate field (such as the symbol pointer, contained in &ldquo;r-info &rdquo;) to specify the operand constraints. Although the only operand constraints recognized in the preferred embodiment are the number of input operands, additional constraints are possible. These could include, for example, whether to remove the operands from the stack, how to provide the results, or which of several stacks to use. Operand constraints could also be applied to the PUSH and POP operations (this would be needed if multiple stacks were used).</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>These operations can also be encoded without the use of an addend field. This can reduce the amount of coding required and also allows the use of the present invention with other formats that do not support an addend field, such as COFF (Common Object File Format). In such a case, if an EVALUATE relocation type is specified the symbol pointer of the &ldquo;r_info&rdquo; field would cause the EVALUATE operation (e.g. SUBTRACT) to be performed. Similarly, if a POP relocation type is specified, the symbol pointer of the &ldquo;r_info&rdquo; field would cause the POP operation (e.g., the previously mentioned &ldquo;GOTO relocation&rdquo; operation) to be performed. An additional PUSH IMMEDIATE relocation type would be used to specify constant values rather than symbols in the symbol field (which can be combined to build larger values that would not fit in the symbol pointer). In other words, the EVALUATE, POP, and PUSH IMMEDIATE relocation types use the symbol field in the same way that the EVALUATE, PUSH, and POP relocation entries use the addend field in the previously describe ELF format example.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>It should be appreciated that variations and modifications of the herein described system and methods, within the scope of the invention will be apparent to those skilled in the art. Accordingly, the foregoing description should be taken as illustrative and not in a limiting sense.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>We claim: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00034" LVL="0"><PTEXT><PDAT>1. A method of resolving an arbitrarily-complex expression before it is inserted into an executable object file, said executable object file having at least one instruction and/or data item requiring relocation, comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>generating a relocatable object file having at least two relocation entries; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>inserting one or more stack operations into each said relocation entry; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>processing said relocatable object file with a linker; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>outputting the result of said processing by said linker to said executable object file, wherein two or more of said relocation entries may be applied to a single instruction and/or data item. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00035" LVL="0"><PTEXT><PDAT>2. A method as set forth in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein said stack operations are inserted in relocation entries of said relocatable object file.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00036" LVL="0"><PTEXT><PDAT>3. A method as set forth in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein said stack operations comprise PUSH, POP, and EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00037" LVL="0"><PTEXT><PDAT>4. A method as set forth in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein said stack operations comprise PUSH, PUSH IMMEDIATE, POP, and EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>5. A method as set forth in claim </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>, wherein said EVALUATE operations comprise UNARY, BINARY, and TRINARY EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>6. A method as set forth in claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, wherein said EVALUATE operations comprise UNARY, BINARY, and TRINARY EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>7. A method of resolving an arbitrarily-complex expression before it is inserted into an executable object file, said executable object file having at least one instruction and/or data file requiring relocation, comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>generating a relocatable object file having at least two relocation entries; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>extending said relocation entries to include one or more stack operations; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>resolving said arbitrarily-complex expression using said stack operations; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>inserting the results of said resolved expression into said relocatable object file; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>processing said relocatable object file with a linker; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>outputting the result of said processing by said linker to said executable object file, wherein two or more of said relocation entries may be applied to a single instruction and/or data item. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>8. A method as set forth in claim </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>, wherein said stack operations are inserted in relocation entries of said relocatable object file.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>9. A method as set forth in claim </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>, wherein said stack operations comprise PUSH, POP, and EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>10. A method as set forth in claim </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>, wherein said stack operations comprise PUSH, PUSH IMMEDIATE, POP, and EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>11. A method as set forth in claim </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>, wherein said EVALUATE operations comprise UNARY, BINARY, and TRINARY EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>12. A method as set forth in claim </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>, wherein said EVALUATE operations comprise UNARY, BINARY, and TRINARY EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>13. In a software system, a method of resolving an arbitrarily-complex operation before it is inserted into an executable object file, said executable object file having at least one instruction and/or item file requiring relocation, comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>generating a relocatable object file having at least one relocation entry; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>extending said relocation entries to include one or more stack operations; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>reading said extended relocation entries; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>calculating a new value of the relocation entries using said stack operations; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>inserting said new value into said relocatable object file; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>processing said relocatable object file with a linker; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>outputting the result of said processing by said linker to said executable object file, wherein two or more of said relocation entries may be applied to a single instruction and/or data item. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>14. A method as set forth in claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, wherein said stack operations are inserted in relocation entries of said relocatable object file.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>15. A method as set forth in claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, wherein said stack operations comprise PUSH, POP, and EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>16. A method as set forth in claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, wherein said stack operations comprise PUSH, PUSH IMMEDIATE, POP, and EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00017">
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>17. A method as set forth in claim </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT>, wherein said EVALUATE operations comprise UNARY, BINARY, and TRINARY EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00018">
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>18. A method as set forth in claim </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>, wherein said EVALUATE operations comprise UNARY, BINARY, and TRINARY EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00019">
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>19. A computer-implemented system for resolving arbitrarily-complex expressions in a relocatable object file at link-time, said system configured to perform the following steps:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>extend the relocation entries of said relocatable object file to include stack operations; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>resolve said arbitrarily-complex expressions using said stack operations; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>insert the results of said resolved expressions into said relocatable object file. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00020">
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>20. A system as set forth in claim </PDAT><HIL><BOLD><PDAT>19</PDAT></BOLD></HIL><PDAT>, wherein said stack operations are inserted in relocation entries of said relocatable object file.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00021">
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>21. A system as set forth in claim </PDAT><HIL><BOLD><PDAT>19</PDAT></BOLD></HIL><PDAT>, wherein said stack operations comprise PUSH, POP, and EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00022">
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>22. A system as set forth in claim </PDAT><HIL><BOLD><PDAT>19</PDAT></BOLD></HIL><PDAT>, wherein said stack operations comprise PUSH, PUSH IMMEDIATE, POP, and EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00023">
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>23. A system as set forth in claim </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>, wherein said EVALUATE operations comprise UNARY, BINARY, and TRINARY EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00024">
<PARA ID="P-00057" LVL="0"><PTEXT><PDAT>24. A system as set forth in claim </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, wherein said EVALUATE operations comprise UNARY, BINARY, and TRINARY EVALUATE operations.</PDAT></PTEXT></PARA>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314564-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314564-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314564-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314564-20011106-D00003.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314565-20011106-D00000.TIF SYSTEM "US06314565-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314565-20011106-D00001.TIF SYSTEM "US06314565-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314565-20011106-D00002.TIF SYSTEM "US06314565-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314565-20011106-D00003.TIF SYSTEM "US06314565-20011106-D00003.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314565</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>09071355</PDAT></DNUM></B210>
<B211US><PDAT>09</PDAT></B211US>
<B220><DATE><PDAT>19980430</PDAT></DATE></B220>
</B200>
<B500>
<B510>
<B511><PDAT>G06F  9445</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>717 11</PDAT></B521>
</B520>
<B540><STEXT><PDAT>System and method for automated identification, retrieval, and installation of multimedia software components</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5539908</PDAT></DNUM>
<DATE><PDAT>19960700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Chen et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5694546</PDAT></DNUM>
<DATE><PDAT>19971200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Reisman</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705 26</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5790796</PDAT></DNUM>
<DATE><PDAT>19980800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Sadowsky</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5845077</PDAT></DNUM>
<DATE><PDAT>19981200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Fawcett</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709221</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5909581</PDAT></DNUM>
<DATE><PDAT>19990600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Park</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5913038</PDAT></DNUM>
<DATE><PDAT>19990600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Griffiths</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5918002</PDAT></DNUM>
<DATE><PDAT>19990600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Klemets et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>714 18</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5963916</PDAT></DNUM>
<DATE><PDAT>19991000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Kaplan</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705 26</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5974572</PDAT></DNUM>
<DATE><PDAT>19991000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Weinberg et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>714 47</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6006241</PDAT></DNUM>
<DATE><PDAT>19991200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Purnaveja et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>707512</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6009274</PDAT></DNUM>
<DATE><PDAT>19991200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Fletcher et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6074434</PDAT></DNUM>
<DATE><PDAT>20000600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Cole et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B562><NCIT><STEXT><PDAT>Ladd et al., &ldquo;Platinum Edition: Using HTML 3.2, Java 1.1 and CGI&rdquo;. Que Corporation, Indianapolis, IN, Chapters 25 and 41, Nov. 1996.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Internet Content Report; &ldquo;Search Engines, Knowbots &amp; Agents: &ldquo;Digital Oil Change&rdquo; uses Internet to Automatically Update Software Products&rdquo;. Communications Industry Researchers, Inc., Gale Group, Nov. 1996.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Business Wire; &ldquo;CyberMedia Oil Change software: How it works&rdquo;. Gale Group, Business Wire, p05140278, May 1996.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>PR Newswire; &ldquo;Position Briefing: Oil Change Can Lower both user and vendor tech support costs&rdquo;. Gale Group, PR Newswire Association, Inc., p514NYTU042, May 1996.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Robinson et al.; &ldquo;ActiveX Magic: An ActiveX Control and DCOM Sample Using ATL&rdquo;. Microsoft Website&lsqb;online&rsqb;. Accessed on Nov. 4, 1999. Retrieved from the Internet:Http://www.microsoft.com, May 1997.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Sankar, K.; &ldquo;Internet Explorer Plug-in and ActiveX Companion&rdquo;. IT Library&lsqb;online&rsqb;. Que Development Group. Chapter 1, Jan. 1997.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Chen, W.; &ldquo;ActiveX Programming Unleashed&rdquo;. IT Library&lsqb;online&rsqb;. Sams Net. Chapter 1, Sep. 1996.</PDAT></STEXT></NCIT><CITED-BY-EXAMINER></B562>
</B560>
<B570>
<B577><PDAT>24</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>395712</PDAT></B582>
<B582><PDAT>709221</PDAT></B582>
<B582><PDAT>717 11</PDAT></B582>
<B582><PDAT>717  1</PDAT></B582>
</B580>
<B590><B595><PDAT>3</PDAT></B595><B596><PDAT>3</PDAT></B596><B597US>
</B590>
</B500>
<B600>
<B680US><DOC><DNUM><PDAT>60/047113</PDAT></DNUM><DATE><PDAT>19970519</PDAT></DATE><KIND><PDAT>00</PDAT></KIND></DOC></B680US>
</B600>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Brian</PDAT></FNM><SNM><STEXT><PDAT>Kenner</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Encinitas</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Kenneth W.</PDAT></FNM><SNM><STEXT><PDAT>Colby</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>San Diego</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Lonnie J.</PDAT></FNM><SNM><STEXT><PDAT>Brownell</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Encinitas</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Intervu, Inc.</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>San Diego</PDAT></CITY><STATE><PDAT>CA</PDAT></STATE></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>02</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Darby &amp; Darby</PDAT></STEXT></ONM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Mark R.</PDAT></FNM><SNM><STEXT><PDAT>Powell</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Kelvin</PDAT></FNM><SNM><STEXT><PDAT>Booker</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2122</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A method for updating software components on a user terminal connected to a network provides for the automatic identification, retrieval, and installation of a selection of software components based on information contained in a script file and furnished by a user. The script file maintains information on current version numbers for the software components, and the method checks that information against stored configuration information to determine whether any components need to be updated. If so, the method simulates a manual transaction between the user terminal and a server storing the desired software component by following instructions set forth in the script file, which is updated as necessary, and sending appropriate user information to the server. The software component acquired thereby is then installed.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<RELAPP>
<BTEXT>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>This application claims the benefit of U.S. Provisional Application No. 60/047,113, filed May 19, 1997, abandoned.</PDAT></PTEXT></PARA>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>The invention relates to a system and method for automating the retrieval and installation of software components, and more particularly, to a software tool which allows a user to automatically download audio/video player software from distributed Internet servers, and to identify and update multimedia software components, thereby providing access to multiple types of audio/video content.</PDAT></PTEXT></PARA>
</BTEXT>
</RELAPP>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>The Internet is a loose network of connected computers spread throughout the world. A message can be sent from any computer on the Internet to any other by specifying a destination address and passing the message from computer to computer via a series of &ldquo;hops.&rdquo; Each computer, or &ldquo;node,&rdquo; on the Internet has a unique Internet address. When an intermediate computer receives a message in transit, the computer checks the intended destination of the message and passes it along accordingly.</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>The Internet is growing, in terms of both size and sophistication, at a rapid rate. In the past, most users of the Internet were academic, research, or institutional users; the Internet was primarily used at that time to transmit and receive electronic mail and network news and to allow transfer of computer files.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>However, since the introduction of the World Wide Web (also known as the &ldquo;Web&rdquo; or the &ldquo;WWW&rdquo;) several years ago, the Internet has begun to host increasing amounts of other types of data of general interest, namely representations of images, articles, etc.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>The Web presents a graphical user interface to the Internet. &ldquo;Web pages,&rdquo; often consisting primarily of text and graphical material, are stored on numerous computers, known as &ldquo;Web servers,&rdquo; throughout the Internet. These Web pages are generally described, in terms of layout and content, by way of a language known as &ldquo;HTML&rdquo; (HyperText Markup Language). Any particular computer linked to the Internet can store one or more Web pages, i.e. computer files in HTML format, for access by users. The Web pages are accessed via a protocol known as &ldquo;HTTP&rdquo; (HyperText Transport Protocol). The HTTP protocol specifies the language by which request are made to transfer data between a server computer and a client computer.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>A software program known as a &ldquo;browser&rdquo; can be used to access and view Web pages across the Internet by specifying the location (i.e. Internet address) of the desired Web page, or more commonly, by &ldquo;hotlinking&rdquo; to Web pages. Two of the most popular browsers are Microsoft Internet Explorer&reg; and Netscape Navigator&reg;. The desired Web page is specified by a uniform resource locator (&ldquo;URL&rdquo;) , which Usually indicates the precise location of the HTML file in the format &ldquo;http://internet.address/directory/filename.html&rdquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>Hotlinking is accomplished as follows. The user first accesses a Web page having a known address, often on the computer located at the user&apos;s ISP (Internet Service Provider). The ISP is the organization providing Internet connectivity to the user. The accessed Web page can contain, in addition to textual and visual data specified in HTML format, &ldquo;links,&rdquo; or embedded information (in the form of URLs) pointing to the Internet addresses of other Web pages, often on other computers throughout the Internet. The user, by selecting a link (often by pointing and clicking with a mouse), can then access other Web pages, which can in turn contain further data and/or additional links.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>The selection of a link causes the browser to issue a request to the server computer specified by the URL, typically via the so-called &ldquo;GET method&rdquo; described by the HTTP specification, version 1.0. A message sent via the GET method requests the server computer to transmit a specified item of data, typically (at first) a Web page in HTML format. The GET request is received and processed by the remote server computer, which then transmits the requested information from wherever in the world it may be located, across the Internet, to the user. The Web page received by the user typically will contain references to embedded images and other non-textual data, which in turn can be processed by the browser, resulting in additional GET requests to retrieve the other data. It should be noted that a GET method request need not directly specify the identity of the requested file; it can contain a code that is processed and decoded by the server computer to identify the requested file.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>Another type of request authorized by HTTP 1.0 is made via the &ldquo;POST method.&rdquo; A message sent via the POST method requests the server to accept a quantity of information and store it in a file or transfer it to an application running on the server computer. The POST method typically is used to send information from the user to the server computer for processing by the server, although the GET method can be used to accomplish this task, as well, via a code-containing URL.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>In recent times, the Web has begun to host highly sophisticated types of multimedia content, such as audio and video data. Various extensions to HTML, such as Netscape&apos;s EMBED tag, allow references to other data to be embedded into Web pages. External programs, or &ldquo;plug-ins,&rdquo; to the browsers can be automatically invoked to handle the data as it is received from the remote Web server computer.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>One problem presented by the proliferation of audio, video, and other types of non-textual data on the Internet relates to the distribution and storage of audio/video data and multimedia software programs for retrieving and playing back audio/video data. Before a video can be transmitted over a computer network, the video must be digitized by encoding the video&apos;s analog signal to &ldquo;1s&rdquo; and &ldquo;0s.&rdquo; In order to reduce the bandwidth required to transmit the digitized video, the video data stream is compressed. Video compression is a process by which redundant data is eliminated from the video data stream so that the overall size of the data stream is reduced. There are many different compression formats which are used to reduce video data streams, for example MPEG, motion JPEG, H.261, Indeo, Cinepak, AVI, QuickTime, TrueMotion, Wavelet, and RealVideo, among others.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>Videos which are transmitted and received in a compressed format must be decompressed before they can be viewed- Decompression of a video is done by a video player coder/decoder, or &ldquo;codec,&rdquo; located at a user&apos;s multimedia terminal, usually as a plug-in or companion to the browser. Generally speaking, a single codec can only recognize and decompress a single compression format or family of related formats.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>When the video clip requested by a user is stored for transmission in a format which can be decompressed by one of the codecs installed at the user terminal, delivery of the video clip to the user can proceed smoothly. This is typically the situation where a subscription service provides video delivery over a confined network. The service will provide the subscribing user with a preferred codec and then store video clips in the same compression format recognized by that codec.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>However, when the service begins to make video clips available over the Internet, it is more likely that the video clips will be requested by a non-subscribing user whose multimedia terminal does not have a codec that recognizes the compression format in which the video clips are stored. If this is the case, the user&apos;s video request must be redirected to a video clip stored in a compression format recognized by the user&apos;s codec, or the user must somehow acquire and install a codec program which is capable of decompressing the desired video clip. In many cases, the video request cannot be redirected to a video clip with a recognizable format, because video clips generally are not stored in a variety of compression formats, due to their large size and the limited storage capacity of the server. In this situation, downloading a new codec is the only alternative.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>A codec program is frequently accessible via a link embedded in the web page referencing the requested video. Thus, it is usually possible to select and download the codec program via the Internet. When a user requests a video clip referenced on a web page, the browser usually prompts the user to acquire the codec necessary to decompress the format of the requested video. However, in order to acquire the codec, the user is forced to hotlink to a different web page, find the correct codec, transmit certain information to the codec provider, download and install the codec, and then try to find the original Web page with the link to the originally requested video file. Each time the user selects a video in a format not recognized by a codec at the user terminal, this process must be repeated.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>Preferably, the process of acquiring and downloading a new codec can be partially or completely automated. This can be done in at least two ways. First, the process can be fully automated by the content provider by acquiring distribution rights to a codec, and then devising an installation script or computer program that is capable of automatically acquiring the codec from the content provider (rather than directly from the codec provider) and then installing the codec. Unfortunately, it can be expensive or difficult to acquire distribution rights in a codec produced by another company, and the creation of an installation script can also be resource-intensive. Second, a script can be created which simply acquires a new codec from the codec provider, with the installation of the codec left to the codec provider (via a script or program usually included with the codec package). However, with the latter alternative, the codec installation process may have an inconsistent &ldquo;look and feel&rdquo; because the installation script was created by an independent codec provider, rather than the content provider.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><PDAT>Most video content providers are constantly enhancing the performance characteristics of their video data and as they do, the codecs which recognize those videos are updated to take advantage of the video enhancement features. In order for a user to determine whether or not his or her codec needs to be updated, or whether an upgraded version of the codec has been released, the user must locate the Web page of the codec provider, compare the information on that page with his own system properties, determine whether he has the latest update or version and then proceed with downloading the latest update or version to the user terminal. If the user wants to keep all multimedia software updated, this process must be repeated for each of the codecs stored in memory.</PDAT></PTEXT></PARA>
<PARA ID="P-00020" LVL="0"><PTEXT><PDAT>Finally, enriched or enhanced video files are distributed randomly across the Internet at the discretion of the content provider. There is no single source, or user&apos;s guide, that advises the user of the location of enhanced video files or the availability of improved multimedia software that can be used to view enhanced video files, nor is there a single source program that enables the user to access all of the data. Web pages embedding references to video files are usually encountered by chance when a user browses the Internet. If a user finds a web page referencing a video file and opens it, he may encounter a link to a content provider or video delivery service that provides access to a list of videos in a particular compression format and a link to a codec that can be used to view the videos carried by that provider. However, these content providers usually do not store videos and codecs in multiple formats, and they do not provide links to differently formatted video content or multimedia software stored at other sites around the Internet.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><PDAT>Thus, a need can be seen for a solution that deals with all of the aforementioned problems in a comprehensive way such that improved access to the best video content is assured and the user&apos;s enjoyment of Internet-delivered audio and video is maximized. Accordingly, a solution is provided herein by way of the following described invention.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00022" LVL="0"><PTEXT><PDAT>A system and a method are provided whereby the identification, acquisition, and installation of multimedia computer software is automated. When a user desires to update the configuration of a user terminal with the latest multimedia software, the software updating tool of the invention determines what components need to be updated, sends the necessary user information to the software component provider&apos;s server, receives the software component (which in one embodiment of the invention is typically a multimedia codec), and installs the component.</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><PDAT>Accordingly, and more specifically, the software updating tool is used to analyze and update the multimedia software at the user terminal (including, for example, a network testing software tool if one is installed), as well as to download multimedia software from distributed servers on the Internet and install the software to the user terminal.</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><PDAT>The multimedia software updating tool downloads a script file from an update service provider coupled to the network. The script file contains a list of multimedia software and upgrades located at various sites on the Internet, a list of servers from which the software can be obtained, and detailed instructions for automating the retrieval of the software. The script file allows the updating tool to adjust to various codecs, changes in the downloading process, and the availability of a single software component or codec from multiple mirror sites.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><PDAT>The software updating tool then analyzes configuration information from the user terminal to determine what multimedia software is stored by the system. The tool then compares a list of the user&apos;s multimedia software with the list of software upgrades contained in the script file. Based on this comparison, the updating tool is able to advise the user as to the availability of upgrades which can be used to enhance the multimedia software preexisting on the user terminal, and also of new multimedia software that is not presently installed on the user terminal. The user then has the option to upgrade his existing multimedia software or download new multimedia software. If the user requests new software or software upgrades, the updating tool uses the instructions in the script file, as well as user information that is input by the user only once and then stored at the user terminal, to simulate manual transactions between the user terminal and the servers where the desired upgrades are stored. This prompts the servers to send the appropriate components. Once the user terminal receives the data, the updating tool initiates installation of the software or software upgrades on the user terminal.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><PDAT>The updating tool is able to determine what portions of the upgrades or software programs are required for functionality; it will then selectively install only those attributes, thereby conserving storage space. In cases where the updating tool must close and reopen the browser to permit the installation of software, the tool will reopen the browser and bring the user back to the web page containing the original video request upon completion of the installation process.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00027" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a block diagram illustrating the relationship among a user terminal, several video server computers, several codec providers, and the update service provider in a multimedia software component updating system according to the invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a flowchart illustrating the functions performed by the software component updating system of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>; and</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> is a flowchart illustrating the functions performed in the downloading step set forth in the flowchart of FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00030" LVL="0"><PTEXT><PDAT>The invention is described below, with reference to detailed illustrative embodiments. It will be apparent that the invention can be embodied in a wide variety of forms, some of which may be quite different from those of the disclosed embodiments. Consequently, the specific structural and functional details disclosed herein are merely representative and do not limit the scope of the invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><PDAT>Referring initially to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, the Internet </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, which is intended to be representative of wide-area communications networks in general, is depicted in the center of the figure. The Internet is known to be an interconnected network of a large number of computers. Although Internet-connected computers that are &ldquo;geographically&rdquo; near each other can be &ldquo;electronically&rdquo; near each other on the Internet, such is not usually the case. However, one computer connected to the Internet can communicate with any other computer connected to the Internet; the message will most likely travel over a path comprising a sequence of links, or &ldquo;hops,&rdquo; between computers that are directly connected to each other.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>A user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> is shown coupled to the Internet </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>. An update service provider </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT>, two codec providers </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT>, and three video servers </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> are also coupled to the Internet </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>. Because all of these computer systems are coupled to and in communication with the Internet </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, communication can be made between any two of the systems, even though there is not necessarily a direct connection between any two of them. In a preferred embodiment of the invention, the multimedia updating function is performed in part by the user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> exchanging requests and information with the update service provider </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT>, at least one codec provider </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> or </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT>, and at least one video server </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>, or </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT>; the specific communications will be discussed in greater detail below.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>In general terms, as discussed in the foregoing Background of the Invention, it has been observed that a substantial number of digital video formats are now in existence. These formats are usually incompatible with each other, and are not interchangeable. Each format has its own advantages and disadvantages. For example, Apple Computer&apos;s QuickTime and Microsoft&apos;s Video for Windows (AVI) schemes are optimized for use with personal computers, and video clips using those formats are relatively easy and fast to create. On the other hand, MPEG-1 (used, for example, for the Video CD and CD-i formats) and MPEG-2 (as used in DVD and direct broadcast satellite applications) provide for high levels of compression, but are slow to compress, and therefore more suited for professional encoding. RealVideo and Vivo formats are also slow to compress, but provide extremely high levels of compression at the expense of image quality, so that video can be transmitted more quickly over relatively slow data connections (such as analog telephone lines).</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><PDAT>A single video clip that is available on the Internet is not usually stored in all of these formats. The video clip provider frequently makes a choice of a single compression scheme, for example MPEG-1, and stores all of its video clips in that format. Accordingly, if a user wishes to view one of that provider&apos;s videos, he must have the proper software, or &ldquo;codec,&rdquo; to decode the compressed data. The invention set forth herein facilitates that by providing simplified and automated access to a quantity of video codecs. Outdated codecs can also be updated automatically by the invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><PDAT>The updating function is performed, in general, as follows. The user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> acquires a script file from the update service provider </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT>. It should be noted that although only one update service provider is illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, the invention is not so limited. When the number of users of the disclosed system becomes large, it is expected that the number of demands for script files will exceed the capacity of a single network server. Accordingly, it is anticipated that a number of update service providers will be coupled to the Internet </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>; a single user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> can select a specific update service provider </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT> by any of a number of means, including manual selection, random selection, geographic proximity, or network efficiency (as determined by a separate network testing program).</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><PDAT>The script file contains information on a variety of multimedia codecs, including the most recent version numbers, specific capabilities of each codec, network locations from which the codecs can be obtained, browser compatibility information, and instructions on how to automatically acquire and install each codec. This information is used by the system in the manner set forth in the discussion below of FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><PDAT>After the script file is acquired, its codec information is compared to that stored at the user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>. This operation may identify certain codecs that are either not installed on the user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> or for which new versions have been released. The user is given the opportunity to select which codecs to install, the corresponding software is acquired from the appropriate codec providers </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT>, and the software is installed to the user&apos;s system.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>The process will now be described in greater detail with reference to FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. When a user wishes to update the codecs installed at the user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>, the multimedia software component updating program is invoked, which performs the sequence of steps set forth. First, a search is undertaken to locate a script file locally at the user terminal (step </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>), without downloading a copy from the update service provider </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT>. If a local script file exists and an expiration date set forth in the script file has not yet passed (step </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT>), then the local script file is reused. Otherwise, a new copy of the script file is downloaded from the update service provider (step </PDAT><HIL><BOLD><PDAT>214</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>After a new script file has been downloaded or it has been determined that an old script file has not expired, the script file is parsed (step </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT>) and analyzed to determine which codecs described in the script file are usable on the user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>. The user terminals system registry is then queried (step </PDAT><HIL><BOLD><PDAT>218</PDAT></BOLD></HIL><PDAT>) to identify which codecs are already installed on the user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>, as well as the version number for each installed codec. The registry is a system configuration file maintained in Microsoft Windows 95 and Windows NT; application programs can post and retrieve registry information to determine or alter system and software configuration data. The codec information in the script file (specifically the codec names, version numbers, and compatibility information) is compared against the codec information stored in the registry. On the basis of this comparison, a list of newly available and uninstalled codecs is formulated.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>It should be noted that the locally stored codec information need not be placed in the Windows system registry, though that approach is standard and presently preferred. Alternatively, a separate configuration file can be maintained by the multimedia software component update system to store the same information. Moreover, the registry and configuration file information queried need not be created by the multimedia software component update system itself (if run a prior time). When codecs (and other software components) are installed, even manually, they frequently update the registry or create their own configuration files, at least to provide information to the browser that the codec is available. When the update system is run for the first time, these additional resources are queried by the invention to determine what codecs have been installed without the inventions assistance.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>At this time, the registry is also queried to determine what network browser is being used. Codecs are frequently available in several different forms. A stand-alone &ldquo;helper&rdquo; application is not integrated with any particular browser, and hence can be used on nearly any user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>. A codec in the form of a Microsoft ActiveX control is usable with Microsoft Internet Explorer and with the most recent versions of Netscape Navigator. A codec in the form of a &ldquo;plug-in&rdquo; is typically used with current and older versions of Netscape Navigator. Accordingly, under certain system configurations, a user might wish to install only certain kinds of codecs, for example plug-ins. By querying the system registry and determining that Netscape Navigator is installed and Microsoft Internet Explorer is not, for example, that determination can be made automatically.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>The user is given the option to install all identified codecs or to select a subset to install. In either case, if there are no new codecs to install, then the multimedia software component update system is finished (step </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT>). Otherwise, the system registry is checked once again (step </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT>) to determine whether sufficient user information is available to download the requested codecs.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>As discussed above, codecs typically are available from codec providers </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT>, who frequently make the codecs available to download free of charge. These codec providers make their money in other ways, for example by licensing the software used to create the compressed video clips in the format supported by their codec. However, when a user wishes to download a codec, he is often faced with the need to fill out various on-line forms with his name, e-mail address, postal address, telephone number, and other information for the codec provider&apos;s records. He may also be asked to consent to a software license agreement before the download is permitted. These factors make the automation of the download process difficult.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>However, as noted above, the script file of the invention contains specific download instructions for each codec. As an example, for a given codec, a first codec provider </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> might request the user&apos;s name and e-mail address before a download is permitted. Accordingly, the invention maintains records of the user&apos;s vital information, including his name, e-mail address, postal address, and other data for use when necessary to download a codec. The information necessary for a particular download operation can be determined by analyzing the script file for all of the codecs to be downloaded. If some of the required information has not already been acquired from the user, or if the invention is being run for the first time, then a form is presented to the user, and the user information is entered (step </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT>). The user information is then stored in the system registry (step </PDAT><HIL><BOLD><PDAT>228</PDAT></BOLD></HIL><PDAT>), so that it will not need to be re-entered by the user when the updating system is run again and additional codecs are requested.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>A codec is then downloaded (step </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT>) by providing the codec provider </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> with the information it would have expected had the user performed this step manually. For example, if a user would have entered information into a sequence of forms, then the updating system simulates the responses the codec provider would have received upon a user filling out the forms manually. This process is discussed in greater detail below, in conjunction with the flowchart of FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>. This download operation can include several exchanges of information between the user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> and the codec provider </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> before the codec file is actually downloaded.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>After the codec is downloaded, it is installed (step </PDAT><HIL><BOLD><PDAT>232</PDAT></BOLD></HIL><PDAT>) according to instructions set forth in the corresponding portion of the script file. Some codecs are provided in the form of a self-extracting archive that need only be invoked. After it is started, the codecs own installation program will take over, prompting the user for additional information as necessary. Other codecs are provided in archive file form; these archive files must be decompressed into temporary storage before the installation program can be invoked. In a preferred embodiment, the multimedia software component updating system can deal with either type of codec, as well as others presently unanticipated. Some codecs can be installed only while the browser is not running. In such cases (specified in the script file), the browser is closed and installation is allowed to proceed. Upon completion of the installation process, the browser is re-opened and caused to re-load the Web page that was previously being viewed.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>After the codec is successfully installed, the system registry is updated with information on the name, version, and type (e.g., ActiveX control or plug-in) of the installed codec (step </PDAT><HIL><BOLD><PDAT>234</PDAT></BOLD></HIL><PDAT>). This information will be used when the updating system is run again, to determine the status of the codecs installed on the system. Then any necessary clean-up is performed (step </PDAT><HIL><BOLD><PDAT>236</PDAT></BOLD></HIL><PDAT>). This can include deleting temporary files created during the installation of a codec, and deleting the downloaded archives themselves, if desired (or, optionally, moving them to a backup location for long-term storage).</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>The acquisition and installation of one new codec is then complete. If there are any additional codecs indicated for installation (step </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT>), the process then repeats. However, on successive downloads, all necessary user information will already have been collected, so the user need not be queried again.</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>As discussed above, the download process can be rather cumbersome; it is dictated by the design of the Internet site through which the software can be acquired. However, in nearly all cases, the process can be described as a &ldquo;conversation&rdquo; between the user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> and the codec provider </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT>; as is set forth in detail in FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>. Because the script file is downloadable and changeable by the update service provider, the updating tool is easily &ldquo;upgraded&rdquo; to accommodate newly released codecs, changes in the processes used to download existing codecs, and multiple geographically-distributed mirror sites from which to download the codec files.</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>At the outset of the download process, the script file is read to identify the instructions, or script, that corresponds to the codec that is to be downloaded (step </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT>). The script contains a sequence of requests and responses intended to simulate the entry of data into forms via a browser.</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>A first request is read from the script and sent to the server identified in the script file (step </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT>). As discussed above, this request can be made via the &ldquo;GET method&rdquo; or the &ldquo;POST method,&rdquo; whichever is required by the server being accessed. A response is then received from the server (step </PDAT><HIL><BOLD><PDAT>314</PDAT></BOLD></HIL><PDAT>). The response is then parsed (step </PDAT><HIL><BOLD><PDAT>316</PDAT></BOLD></HIL><PDAT>). It may indicate that the request was successfully processed, and that the script can move on to the next step. Or the response may indicate that there is an error condition, requiring either retransmission of the same request to the server (at step </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT>) or the need to abort the download process. Alternatively, the request may result in the transmission of the codec file. If the download process is aborted or completed, then the transaction is complete (step </PDAT><HIL><BOLD><PDAT>318</PDAT></BOLD></HIL><PDAT>), and the received file, if any, is stored at the user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> (step </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>While the foregoing description and accompanying flowchart illustrate the general process by which a server at a codec provider&apos;s Internet site is prompted to send a codec file, some specific examples should be illustrative. Accordingly, five different scenarios will be set forth below, each of which shows a possible sequence of requests and responses between the user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> and the codec provider </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>In the first and simplest scenario, the script specifies a single GET request that simply specifies the filename of the requested codec file. For example, the request &ldquo;GET/products/mycodec.exe HTTP/1.0&rdquo; might be sent to the server www.codecprovider.com. The &ldquo;/products/mycodec.exe&rdquo; portion of the GET request identifies the desired codec file. The &ldquo;HTTP/1.0&rdquo; at the end of the request identifies the version of the HTTP protocol under which the request is being made; it is part of all HTTP requests. Following this line of the GET request are additional lines of information transmitted by the browser specifying, among other things, what kinds of data are accepted by the browser. These additional lines are omitted here, as they are system-dependent and would be known and understood by an individual of ordinary skill in the art.</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>In an alternative version of the first scenario, the script specifies a single GET request that identifies the desired codec and includes some information about the user, for example his e-mail address. This type of request might look like &ldquo;GET/cgi-bin/products/download/dl.cgi&quest; product&equals;MyCodec&amp;email&equals;jdoe&commat;user.net HTTP/1.0&rdquo;. The &ldquo;/cgi-bin/products/download/dl.cgi&rdquo; portion of the request identifies a program running on the server that is able to parse the remainder of the request. The &ldquo;product&equals;MyCodec&rdquo; portion identifies the requested file, and &ldquo;email&equals;jdoe&commat;user.net&rdquo; is the user information needed by the codec provider in order to fulfill the request. The question marks and ampersands are simply used as delimiters to identify where the various fields of the request begin and end.</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>In the first scenario, under either GET request alternative, the codec provider </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> responds by sending the desired file. In the first scenario, the download process is completed after a single request and a single response, and it does not iterate.</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>In a second scenario, a first GET request identifies the desired codec and includes certain information about the user. This request might also look like &ldquo;GET/cgi-bin/products/download/dl.cgi&quest;product&equals;MyCodec&amp;email&equals;jdoe&commat;user.net HTTP/1.0&rdquo;. However, in the second scenario, the server responds not by sending the requested codec file, but by sending an HTML file that provides a number of links to download sites, for example several mirror sites in different geographic locations. This response is parsed, a link is selected from the HTML file, and a second GET request is then sent to a particular server. For example, the request &ldquo;GET/products/mycodec.exe HTTP/1.0&rdquo; might be sent to www.usa.codecprovider.com or to www.europe.codecprovider.com, depending on the options in the HTML file and the user&apos;s location (as specified in the user information stored in the system registry). The script for the codec provider </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> is programmed to expect the HTML file received after the first GET request; the multimedia software component updating system is programmed to be able to parse the HTML file, determine the options, and formulate the appropriate second GET request. In the second scenario, two separate GET requests and two separate responses are generated; the second response is the requested codec file. A scheme similar to this is presently used by RealNetwork for access to its RealPlayer codec software.</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="0"><PTEXT><PDAT>In a third scenario, three separate GET requests are used. A first GET request sends some basic user information; a first HTML file is received in response. A second GET request is generated based on the contents of the first HTML file and further user information; a second HTML file is received in response. A third GET request is generated based on the contents of the second HTML file; the codec file is received in response. A scheme similar to this is used by VXtreme for its Web Theater codec package.</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="0"><PTEXT><PDAT>In a fourth scenario, a POST request is first used to send user information to the server. For example, the request &ldquo;POST/products/dl.cgi HTTP/1.0&rdquo;, followed by a quantity of user information, is first sent to the server. The server processes the user information and responds by sending an HTML file. A GET request based on that HTML file is then sent, which results in the codes file being sent. A variation of this approach is presently used to access Macromedia&apos;s Shockwave codec software.</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="0"><PTEXT><PDAT>In a fifth scenario, the FTP (&ldquo;File Transfer Protocol&rdquo;) Internet protocol is used rather than HTTP. The FTP protocol requires a more elaborate sequence of communication than does HTTP. One sample transaction is as follows. The user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> first sends the command &ldquo;USER anonymous&rdquo; to request an anonymous FTP transaction; the server responds by indicating success or failure. The command &ldquo;PASS jdoe&commat;user.com&rdquo; is then sent (in anonymous FTP transactions, the user&apos;s e-mail address is usually requested as the password); the server responds with success or failure. Further command/response pairs are used to determine the server&apos;s operating system type (which can be used to compensate for file format differences), set a passive connection type (in which the user terminal will initiate data connections), set a binary transfer mode (as opposed to text files), determine the size of the file to be downloaded, and finally to retrieve the file. This type of transaction is used by Apple for its QuickTime video codec.</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="0"><PTEXT><PDAT>The preceding five scenarios are set forth as illustrative examples only; many additional possibilities also exist. For example, a server might send a software license agreement as an HTML file, requesting the user to indicate whether he accepts the agreement. This information would be passed along by the invention to the user, as it would not be proper to assume and automate the acceptance of a license agreement. Moreover, different sequences of GET and POST requests may be necessary for a particular codec provider. However, in any of these cases, the script file can be set up to accommodate the particular sequence of requests expected by a codec provider. Moreover, if a codec provider changes its procedure for accessing its codec software, new script files can be provided by the update service provider </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT>. For this reason, as discussed above, script files are provided with expiration dates. If a script file has expired, the user terminal </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> will retrieve a new version before updating is permitted.</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>The foregoing detailed description addresses the issue of identifying, acquiring, and installing multimedia codecs for use in browsing the Internet. However, it should be noted that nothing in the disclosed system or method necessarily limits the invention to that application. The invention can be used to update and maintain any number of software programs or components, in individual or widely disparate fields of use. For example, it is appreciated that the invention could easily be adapted to identify, acquire, and install various other computer programs, such as system utilities, operating system updates, games, or other programs or components that a particular user might be interested in. The invention could easily be modified to accomplish these additional objectives, without undue experimentation, by a person of ordinary skill in the art.</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="0"><PTEXT><PDAT>While certain exemplary structures and operations have been described, the invention is not so limited, and its scope is to be determined according to the claims set forth below.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00063" LVL="0"><PTEXT><PDAT>1. A method for updating software components on a user terminal connected to a network comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>analyzing a script file having an expiration date to ascertain what software components are available based on information in the script file and information provided by the user; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>querying stored configuration information on the user terminal; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining what software components need to be updated; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>simulating a manual transaction between the user terminal and a server to provide user information to the server; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>transferring at least one software component from the server to the user terminal. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00064" LVL="0"><PTEXT><PDAT>2. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein the stored configuration information comprises a system registry.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00065" LVL="0"><PTEXT><PDAT>3. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein the determining step comprises the substeps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>identifying at least one software component having a current version number described in the script file; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>ascertaining whether the software component is installed on the user terminal, and if so, what version number of the software component is installed; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>generating a list of software components that are either not installed on the user terminal or have an installed version number lower than the current version number. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00066" LVL="0"><PTEXT><PDAT>4. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein the simulating step comprises the substeps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>transmitting a request from the user terminal to the server; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving a response from the server. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00067" LVL="0"><PTEXT><PDAT>5. The method of claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, wherein the request comprises an HTTP request formulated from script information in the script file or user information received from a user.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00068" LVL="0"><PTEXT><PDAT>6. The method of claim </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, wherein the HTTP request further comprises link information taken from a prior response from the server.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00069" LVL="0"><PTEXT><PDAT>7. The method of claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, wherein the request comprises an FTP command formulated from script information in the script file or user information received from a user.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00070" LVL="0"><PTEXT><PDAT>8. The method of claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, wherein the simulating step further comprises the substep of repeating the transmitting and receiving steps until the server is ready to transmit the software component.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00071" LVL="0"><PTEXT><PDAT>9. The method of claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, wherein the simulating step further comprises the substeps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>parsing the script file to determine what user information will be required by the server; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>checking whether the required user information is in the stored configuration information, and if not, prompting a user to enter the required user information and storing the required user information in the configuration information. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>10. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, further comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>installing the software component; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>updating the stored configuration information with the name and a version number for the software component. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00073" LVL="0"><PTEXT><PDAT>11. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein the software components are multimedia codecs capable of decompressing digital video.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00074" LVL="0"><PTEXT><PDAT>12. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, further comprising the step of acquiring an original script file from an update service provider.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00075" LVL="0"><PTEXT><PDAT>13. The method of claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, further comprising the step of acquiring a new script file if the expiration date on the original script file has passed.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>14. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein the information provided by the user is at least one of a user name, a user e-mail address and a user postal address.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00077" LVL="0"><PTEXT><PDAT>15. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein the information in the script file is multimedia codec information.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>16. The method of claim </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT>, wherein the multimedia codec information includes at least one of most recent version numbers of the software components, specific capabilities of each codec, network locations from which the codecs can be obtained, browser compatibility information and instructions on how to automatically acquire and install each codec.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00017">
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>17. A method for identifying and downloading software components on a user terminal connected to a network comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>analyzing a script file to ascertain what software components are available based on information in the script file and information provided by the user; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>querying stored configuration information on the user terminal; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining whether a user desires to download any of the available software components; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>simulating a manual transaction between the user terminal and a server to provide user information to the server; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>transferring at least one software component from the server to the user terminal, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein the information provided by the user is at least one of a user name, a user e-mail address and a user postal address. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00018">
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>18. The method of claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT>, wherein the simulating step comprises the substeps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>transmitting a request from the user terminal to the server; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving a response from the server. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00019">
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>19. The method of claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT>, wherein the request comprises an HTTP request formulated from script information in the script file or user information received from a user.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00020">
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>20. The method of claim </PDAT><HIL><BOLD><PDAT>19</PDAT></BOLD></HIL><PDAT>, wherein the HTTP request further comprises link information taken from a prior response from the server.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00021">
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>21. The method of claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT>, wherein the simulating step further comprises the substeps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>parsing the script file to determine what user information will be required by the server; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>checking whether the required user information is in the stored configuration information, and if not, prompting a user to enter the required user information and storing the required user information in the configuration information. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00022">
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>22. The method of claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT>, further comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>installing the software component; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>updating the stored configuration information with a name and a version number for the software component. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00023">
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>23. The method of claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT>, wherein the information in the script file is multimedia codec information.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00024">
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>24. The method of claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, wherein the multimedia codec information includes at least one of most recent version numbers of the software components, specific capabilities of each codec, network locations from which the codes can be obtained, browser compatibility information and instructions on how to automatically acquire and install each codec.</PDAT></PTEXT></PARA>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314565-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314565-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314565-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314565-20011106-D00003.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314566-20011106-D00000.TIF SYSTEM "US06314566-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314566-20011106-D00001.TIF SYSTEM "US06314566-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314566-20011106-D00002.TIF SYSTEM "US06314566-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314566-20011106-D00003.TIF SYSTEM "US06314566-20011106-D00003.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314566</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>09162625</PDAT></DNUM></B210>
<B211US><PDAT>09</PDAT></B211US>
<B220><DATE><PDAT>19980929</PDAT></DATE></B220>
</B200>
<B500>
<B510>
<B511><PDAT>G06F  9445</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>717 11</PDAT></B521>
<B522><PDAT>717 10</PDAT></B522>
<B522><PDAT>709331</PDAT></B522>
<B522><PDAT>709332</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Method and apparatus for &ldquo;Just-in-Time&rdquo; dynamic loading and unloading of computer software libraries</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5410698</PDAT></DNUM>
<DATE><PDAT>19950400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Danneels et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5414854</PDAT></DNUM>
<DATE><PDAT>19950500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Heninger et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5561800</PDAT></DNUM>
<DATE><PDAT>19961000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Sabatella</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5708811</PDAT></DNUM>
<DATE><PDAT>19980100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Arendt et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5838972</PDAT></DNUM>
<DATE><PDAT>19981100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Matsuzuka et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5901315</PDAT></DNUM>
<DATE><PDAT>19990500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Edwards et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717  4</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5953534</PDAT></DNUM>
<DATE><PDAT>19990900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Romer et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5960204</PDAT></DNUM>
<DATE><PDAT>19990900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Yinger et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B562><NCIT><STEXT><PDAT>Gordon Letwin, </PDAT><HIL><ITALIC><PDAT>Inside OS/2</PDAT></ITALIC></HIL><PDAT>. Microsoft Press, 1988, pp. 89-116. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Ed Iacobucci, </PDAT><HIL><ITALIC><PDAT>OS/2 Programmer&apos;s Guide</PDAT></ITALIC></HIL><PDAT>. Osborne McGraw-Hill, 1988, pp. 131-138. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><HIL><ITALIC><PDAT>Inside Macintosh</PDAT></ITALIC></HIL><PDAT>, vol. 1, pp. I-12, I-13, Addison-Wesley Publishing Company, Inc., 1985. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><HIL><ITALIC><PDAT>Inside Macintosh</PDAT></ITALIC></HIL><PDAT>, vol. 11, pp. II-53&mdash;II-64, Addison-Wesley Publishing Company, 1985. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>PR Newswire; &ldquo;The Open Group Releases High Performance Java(TM) Byte Code Compiler for HP&apos;s HP-UX Operating System&rdquo;. PR Newswire, p1203NEW034, Dec. 1997.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>IBM Corporation; &ldquo;Mapping Imported Symbols at Link Time to Improve Load Time on the Office Systems/2 Operating System&rdquo;. IBM Technical Disclosure Bulletin, pp. 539-540, Sep. 1995.</PDAT></STEXT></NCIT><CITED-BY-EXAMINER></B562>
</B560>
<B570>
<B577><PDAT>77</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>717 11</PDAT></B582>
<B582><PDAT>717 10</PDAT></B582>
<B582><PDAT>709331</PDAT></B582>
<B582><PDAT>709332</PDAT></B582>
</B580>
<B590><B595><PDAT>3</PDAT></B595><B596><PDAT>7</PDAT></B596><B597US>
</B590>
</B500>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Yan J.</PDAT></FNM><SNM><STEXT><PDAT>Arrouye</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Cupertino</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Sean J.</PDAT></FNM><SNM><STEXT><PDAT>Findley</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Gilroy</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Keith L.</PDAT></FNM><SNM><STEXT><PDAT>Mortensen</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Sunnyvale</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Apple Computer, Inc.</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Cupertino</PDAT></CITY><STATE><PDAT>CA</PDAT></STATE></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>02</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Helene Plotka Workman</PDAT></STEXT></ONM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Kakali</PDAT></FNM><SNM><STEXT><PDAT>Chaki</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Kelvin</PDAT></FNM><SNM><STEXT><PDAT>Booker</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2122</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A method and system for providing &ldquo;just-in-time&rdquo; dynamic loading and unloading of libraries. Library code is loaded into memory just prior to the actual execution of a routine in that library and is unloaded from memory after the execution of the library routine is completed. According to the present invention, a library structure having a library loader and a library implementation module. The library loader provides the same entry points as the library itself and contains code to drive the loading and unloading of the library implementation module which actually contains the code to implement the library call. At the beginning of the execution of an application or other software module, the library loaders for libraries needed by that application or other software module, are loaded into memory and unloaded upon completion of that application or other software module. The library loaders control the loading and unloading of the library implementation modules, which contain the actual code which implements the library call, so that the library code itself is only in memory while in use during execution of the library call. A sequence of library calls to the same library is preferably detected and managed so as to avoid unnecessary unloading/reloading of the same library.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<RELAPP>
<BTEXT>
<H LVL="1"><STEXT><PDAT>RELATED PATENT APPLICATIONS</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>The present patent application is related to co-pending, commonly assigned U.S. Patent Applications Arrouye, et al., U.S. patent application Ser. No. 09/161,758 for &ldquo;A METHOD AND SYSTEM FOR TRANSPARENTLY TRANSFORMING OBJECTS FOR APPLICATION PROGRAMS&rdquo;, Arrouye et al., U.S. patent application Ser. No. 09/162,125 for &ldquo;A MULTI-REPOSITORY DISPLAY SYSTEM USING SEPARATE PRESENTATION, ADAPTATION AND ACCESS LAYERS&rdquo;, and Arrouye et al., U.S. patent application Ser. No. 09/162,126 for &ldquo;PERSISTENT STATE DATABASE FOR OPERATING SYSTEM SERVICES&rdquo;, the disclosures of which are herein incorporated by reference.</PDAT></PTEXT></PARA>
</BTEXT>
</RELAPP>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>LIMITED COPYRIGHT WAIVER</PDAT></STEXT></H>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>A portion of the disclosure of this patent document contains material to which the claim of copyright protection is made. The copyright owner has no objection to the facsimile reproduction by any person of the patent document or the patent disclosure, as it appears in the U.S. Patent and Trademark Office file or records, but reserves all other rights whatsoever.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>FIELD OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>The invention relates generally to the loading and unloading of software library modules on a computer system and, more specifically, to a method and apparatus for dynamically loading and unloading software library modules as needed on a &ldquo;just-in-time&rdquo; basis.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>Generally, a software library module (herein called a &ldquo;library&rdquo;), a collection of software routines, is formed so that software routines can be used by a plurality of applications without rewriting the software routines for each application. There may be a plurality of libraries and each library can be either shared or non-shared. A shared library is one which can be used by more than one application. A non-shared library is one which is only used by the application that calls it. Traditionally, shared libraries are dynamically loaded during runtime, while non-shared libraries are linked into a program during creation of the program&apos;s executable file.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>Some systems dynamically load libraries which are needed by applications or other software modules. For example, when loading a particular software application or module, herein denoted as &ldquo;Software A&rdquo; for illustrative purposes only, these systems check whether there are any libraries which will be needed in order to execute Software A. These systems then load those needed libraries into memory, load Software A into memory and begin execution of Software A. The libraries remain loaded in memory until execution of Software A completes. After the execution of Software A is complete, Software A and the loaded libraries are unloaded from memory.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>The loaded libraries in the above example occupy memory space during the entire execution of Software A, regardless of whether Software A uses them all of the time. Even if Software A were to use a particular library for only a fraction of the execution time of Software A, that particular library would remain loaded in memory for the entire execution of Software A, resulting in an undesirable waste of memory resources.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>Thus, depending on the amount of usage of a library by a particular application or module, the above approach undesirably results in inefficient use of memory resources. It is desirable therefore, to provide a mechanism which is capable of loading libraries in a manner which promotes efficient use of memory resources.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>Briefly, in accordance with the present invention, this objective, among others, is achieved by a method and system which provides &ldquo;just-in-time&rdquo; dynamic loading and unloading of libraries. A library is loaded into memory just prior to the actual execution of a routine in that library and is unloaded from memory when the execution of the library routine is completed. Thus, a library occupies memory while in use during execution of a routine in that library and does not unnecessarily occupy memory during periods of non use when no routines in that library are executing.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>To achieve &ldquo;just-in-time&rdquo; loading of libraries, the present invention extracts the entry points of the library and each library is split into two components, a library loader and a library implementation module. The library loader provides the same entry points as the library and contains code to drive the loading and unloading of the library implementation module which actually contains the code to implement the library call. Preferably, at the beginning of the execution of an application or other software module, the library loaders for libraries needed by that application or other software module, are loaded into memory and unloaded upon completion of that application or other software module. The library loaders control the loading and unloading of the library implementation modules, which contain the actual code which implements the library call, so that the library code itself is only in memory while in use during execution of the library call.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>According to an aspect of the invention, a sequence of library calls to the same library is detected and managed so as to avoid unnecessary unloading/reloading of the same library and to avoid substantially degrading execution performance.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>By deferring the loading of a library until just prior to when a routine in the library is actually executed by the application or other software module, the present invention advantageously provides more efficient use of memory resources. By only loading into memory at any given time libraries which are actually in use, the invention reduces the overall memory requirement to execute a particular application or other software module. This produces the further advantages of either being able to execute more software in the same amount of memory or in being able to execute the same software in less memory, ultimately reducing the cost of producing the device that runs the code module.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>Although the invention is particularly advantageous in hardware/software systems with limited memory, the advantages of the invention can be realized in other hardware/software systems as well.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>These and other features of the present inventions, and the advantages offered thereby, are explained in detail hereinafter with reference to specific embodiments illustrated in the accompanying drawings.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00015" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a general block diagram of a computer system incorporating the invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> illustrates software components of a computer system incorporating the invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> is a block diagram illustrating a library structure;</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> illustrates a library loader having the same entry points as its corresponding library;</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> is a flowchart generally depicting the steps performed in during a general loading and unloading of a library;</PDAT></PTEXT></PARA>
<PARA ID="P-00020" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is a flow chart generally depicting the steps performed a more sophisticated loading and unloading a library; and</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is a flow chart depicting the steps performed in an embodiment of the invention between blocks </PDAT><HIL><BOLD><PDAT>614</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>618</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> when </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> the determination at block </PDAT><HIL><BOLD><PDAT>614</PDAT></BOLD></HIL><PDAT> is that the library is in memory.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION</PDAT></STEXT></H>
<PARA ID="P-00022" LVL="0"><PTEXT><PDAT>To facilitate an understanding of the present invention and the advantages offered thereby, features of the invention are described and illustrated with reference to the use of the invention in a computer running the Mac OS operating system developed by Apple Computer, Inc. It will be appreciated by those having familiarity with the relevant technology, however, that the principles of the present invention are not limited to this particular operating environment. Rather, the invention can be beneficially employed within any type of computer operating environment in which software libraries are dynamically loaded during run-time.</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><PDAT>The following description is presented to enable one of ordinary skill in the art to make and use the invention and is provided in the context of a patent application and its requirements. Various modifications to a preferred embodiment will be readily apparent to those skilled in the art and the generic principles herein may be applied to other embodiments. Thus, the present invention is not intended to be limited to the embodiment shown but is to be accorded the widest scope consistent with the principles and features described herein.</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a block diagram illustrating an exemplary computer system, of the type in which the present invention can be employed. The exemplary system includes a computer </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> connected to one or more external peripheral devices </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT>. The computer </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> includes a central processing unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, a main memory which is typically implemented in the form of a random access memory </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>, a static memory that can comprise a read only memory </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT> and a permanent storage device, such as a magnetic or optical disk </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT>. The computer </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> could be, for example, a PowerPC or G3 computer, developed by Apple Computer, Inc.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><PDAT>The CPU </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> communicates with each of these forms of memory through an internal bus </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT>. The one or more peripheral devices </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> include, but are not limited to, a data entry device such as a keyboard </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT>, a cursor control device </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> such as a mouse, trackball, a pen and stylus, a touch-sensitive screen, a trackpad, a microphone, a joystick, a camera or the like, a display device </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> and, optionally, an audio device such as speakers (not shown). The display device </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT>, such as a CRT monitor or an LCD screen, provides a visual display of the information that is being processed within the computer. Each of these external peripheral devices communicates with the CPU </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> by means of one or more input/output ports </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> on the computer </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>. Input/output ports </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> also allow computer </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> to interact with a local area network server, an external network, such as the Internet, or an external storage device.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> illustrates software </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> used in conjunction with computer </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> embodying the present invention. This software </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> typically includes an operating system </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT>, at least one library </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT>, and at least one software module </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> such as, for example, an application. The operating system </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT>, such as Mac OS, typically controls the allocation and usage of the hardware resources such as memory, central processing unit time, disk space and peripheral devices. Alternative operating systems which could be used with other computers include, but are not limited to, Windows 95, Windows 98 or Unix. Alternatively, other software, besides operating systems, which happens to perform the function of loading and unloading libraries from memory can utilize the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>The operating system </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> is typically stored in permanent memory, such as for example disk </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, and loaded into random access memory, such as for example RAM </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, for execution. For a particular software module </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT>, the operating system loads libraries </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> needed during execution of that particular software module </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> into RAM </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> for use during execution of the particular software module </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><PDAT>When an application or other software module references a library routine in such a way that that execution of that application or other software module directly causes execution of that library routine, it is common to say that the application or other software module &ldquo;calls&rdquo; that library routine. It is also common to denote the execution of the library routine as a &ldquo;library routine call&rdquo;. Typically an application programmer&apos;s interface, otherwise known as an &ldquo;API&rdquo;, is used to refer to a set of entry points that provide a particular function. An entry point is used to call a particular routine. The entry point typically defines and identifies the routine being called and any arguments, parameters or other information that is being passed to the library routine. A library is a collection software routines, each routine having its own entry point.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><PDAT>The present invention provides for &ldquo;just in time&rdquo; dynamic loading and unloading of software libraries. In other words, libraries are loaded into memory as they are needed, rather than being held in memory during an entire execution of an application or other software module. In particular, the actual code for a particular library is loaded into memory just prior to when a library routine from that library is executed by the application or other software module.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><PDAT>To achieve this objective, among others, the present invention provides a library loader for each library. The library loader for a specific library provides the same entry points as that specific library and contains code to drive the loading and unloading of the library implementation module which actually contains the code to implement the library call.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><PDAT>The library loaders for libraries needed by an application or other software module, are loaded into memory at a time which is prior to execution of any of the needed libraries and unloaded upon completion of that application or other software module. The library loaders are loaded, for example, at or near the beginning of the execution of an application or other software module. In other embodiments the loading of library loaders may not be after execution of the application or other software module begins, but occurs at least some time prior to use of any of the needed libraries. In other embodiments, the loading of a particular library loader occurs at any time prior to the execution of a routine in that library by the application or other software module.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>Each library loader controls the loading and unloading of the actual code which implements the library call, so that the library code itself is only in memory while in use during execution of the library call.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>According to an aspect of the invention, the above library loader mechanism can be implemented using a library structure. As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>, a library structure </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> comprises a library loader </PDAT><HIL><BOLD><PDAT>302</PDAT></BOLD></HIL><PDAT> and a library implementation module </PDAT><HIL><BOLD><PDAT>304</PDAT></BOLD></HIL><PDAT>. Library loader </PDAT><HIL><BOLD><PDAT>302</PDAT></BOLD></HIL><PDAT> contains the same entry points, as illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, as those of the library, as well as code for loading and unloading the library implementation module </PDAT><HIL><BOLD><PDAT>304</PDAT></BOLD></HIL><PDAT>. Library implementation module </PDAT><HIL><BOLD><PDAT>304</PDAT></BOLD></HIL><PDAT> contains the actual code which implements the library call.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><PDAT>Generally, as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>, the library loader </PDAT><HIL><BOLD><PDAT>302</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3 and 4</PDAT></FGREF><PDAT>) for a particular library is preferably loaded into memory just prior to, at the start of, or closely after the execution of an application or other software module referencing the particular library. As previously discussed, the timing of the loading may vary based on the particular implementation as long as the library loader is loaded prior to execution of the corresponding library call.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT> it is determined which libraries may potentially be needed during execution of the application or other software module. The mechanism used for determining which libraries may be needed, where the information is stored and how it can be accessed, is typically run-time dependent. Typically, each executable application or other software module contains a table indicating which libraries are needed to run the executable application or other software module. This table can be, for example, a table of strings, each string being a name of an external library that is needed to run the executable application or other software module. The name is then used to find the physical storage for the imported library. Alternatively, the table can include symbols not contained in the executable application or other software module to indicate of external binary symbols/libraries used by the executable application or other software module. Other suitable data structures besides a table can be used as well.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><PDAT>According to the invention, this table, or other suitable data structure, is traversed to determine which library loaders to load. The library loaders for libraries which are indicated by the table or other suitable data structure as being needed by the application or other software module during execution are loaded into memory. Preferably this occurs just prior to, at or otherwise near the launch of the application or other software module. Alternatively, the loading of library loaders may occur at a time subsequent to, but not near to, the launching of the application or other software module and before the execution by that application or other software module of a routine contained in a dynamically loaded library. As is well understood by someone of ordinary skill in the art, any suitable method can be used to access and traverse the table or other suitable data structure.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>512</PDAT></BOLD></HIL><PDAT>, the library loader for each potentially needed library is loaded into memory. At step </PDAT><HIL><BOLD><PDAT>514</PDAT></BOLD></HIL><PDAT> the execution of the application or other software module begins. Alternatively, Step </PDAT><HIL><BOLD><PDAT>514</PDAT></BOLD></HIL><PDAT> may precede steps </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>512</PDAT></BOLD></HIL><PDAT> such that steps </PDAT><HIL><BOLD><PDAT>510</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>512</PDAT></BOLD></HIL><PDAT> are executed as part of execution of the application or other software module, at the beginning of such execution.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>516</PDAT></BOLD></HIL><PDAT> when a library routine is executed, control passes to step </PDAT><HIL><BOLD><PDAT>518</PDAT></BOLD></HIL><PDAT>. Since the library loader </PDAT><HIL><BOLD><PDAT>302</PDAT></BOLD></HIL><PDAT> contains the same entry points as the library (in effect, the library implementation module </PDAT><HIL><BOLD><PDAT>304</PDAT></BOLD></HIL><PDAT>), when a library call is encountered during execution of the application or other software module, the library call results in the library loader for that library being invoked. The library loader then loads the library implementation module for the library at step </PDAT><HIL><BOLD><PDAT>518</PDAT></BOLD></HIL><PDAT>. Once loaded, the library implementation module executes the library call at step </PDAT><HIL><BOLD><PDAT>520</PDAT></BOLD></HIL><PDAT>. After the execution of the library call is completed, the library loader unloads the library implementation module at step </PDAT><HIL><BOLD><PDAT>522</PDAT></BOLD></HIL><PDAT> and control is transferred back to the application or other software module and execution proceeds at step </PDAT><HIL><BOLD><PDAT>516</PDAT></BOLD></HIL><PDAT>. If at step </PDAT><HIL><BOLD><PDAT>516</PDAT></BOLD></HIL><PDAT> a library routine is not executed, then the application or other software module executing proceeds until a library routine call is encountered at step </PDAT><HIL><BOLD><PDAT>516</PDAT></BOLD></HIL><PDAT> or until execution of the application or other software module is completed at step </PDAT><HIL><BOLD><PDAT>524</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>Preferably, prior to loading a library implementation module into memory, the library loader first determines whether the library implementation module is already loaded in memory. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is a flowchart generally depicting the steps performed during the loading and unloading of a library in this manner.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT>, at step </PDAT><HIL><BOLD><PDAT>610</PDAT></BOLD></HIL><PDAT>, an application or other software module containing a call to a routine in a library actually calls a corresponding routine in a library loader for a library. Preferably, the corresponding routine in the library loader has an entry point identical to that of the routine in the library. Preferably, this library loader is already resident in memory. At step </PDAT><HIL><BOLD><PDAT>612</PDAT></BOLD></HIL><PDAT>, the library loader keeps track of another call to the routine. Preferably, this is accomplished by maintaining a use count for the library. In that case, the library loader increases the use count for the library to indicate that another call to the routine has been made. Typically, this step entails incrementing a use count by a specific value, hereafter referred to as an &ldquo;incrementing value&rdquo;. For example, the incrementing value can be one (1).</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>614</PDAT></BOLD></HIL><PDAT>, it is determined whether the library implementation module for the library is already loaded into memory. This determination can be based on the use count. When the use count is less than to the incrementing value, it indicates that the library implementation module for the library is not already loaded into memory (in other words, it indicates a value of zero (0) prior to step </PDAT><HIL><BOLD><PDAT>612</PDAT></BOLD></HIL><PDAT>). When the use count is greater than or equal to the incrementing value, it indicates that the library implementation module for the library is already in memory. If the library implementation module for the library is not already in memory, it is loaded into memory at step </PDAT><HIL><BOLD><PDAT>616</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>In either case, processing then continues at step </PDAT><HIL><BOLD><PDAT>618</PDAT></BOLD></HIL><PDAT> wherein the routine in the library implementation module for the library is executed and control returns to the routine in the library loader. At step </PDAT><HIL><BOLD><PDAT>620</PDAT></BOLD></HIL><PDAT>, the routine in the library loader indicates that execution has completed, preferably by decreasing the use count of the library by the incrementing value. At step </PDAT><HIL><BOLD><PDAT>622</PDAT></BOLD></HIL><PDAT>, it is determined whether the library implementation library for the library should be unloaded from memory. Typically, this is accomplished by checking whether the use count for the library is equal to zero (0), indicating that the library is no longer being used. If it is determined that the library implementation library for the library should be unloaded from memory, then at step </PDAT><HIL><BOLD><PDAT>624</PDAT></BOLD></HIL><PDAT>, the library implementation module is either unloaded or scheduled for unloading, depending on the embodiment of the invention. In either case, control then returns to the application or other software module at step </PDAT><HIL><BOLD><PDAT>626</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>According to an aspect of the invention, the above method and system can be modified to account for sequences of library calls that might result in repeated loading and unloading of the same library implementation modules. Rather than unloading a library at step </PDAT><HIL><BOLD><PDAT>624</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT>, the library is scheduled for unloading. Additionally, the steps shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> are performed in between steps </PDAT><HIL><BOLD><PDAT>614</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>618</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> when the determination at block </PDAT><HIL><BOLD><PDAT>614</PDAT></BOLD></HIL><PDAT> is that the library is in memory. This aspect of the invention can advantageously be used to avoid substantially degrading execution performance.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>As shown at step </PDAT><HIL><BOLD><PDAT>710</PDAT></BOLD></HIL><PDAT>, it is determined whether the library implementation module for the library is scheduled to be unloaded. If so, then at step </PDAT><HIL><BOLD><PDAT>712</PDAT></BOLD></HIL><PDAT>, the unload is cancelled. The specific mechanism for canceling an unload depends on the particular implementation. If a flag is used to indicate that a library implementation module is scheduled for unload, then the flag is set to indicate cancellation of that unload. If a use count, rather than a flag, is used, the use count is incremented in order to cancel the unload. Other mechanisms, depending on the implementation, can be used.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>In either case, control returns to block </PDAT><HIL><BOLD><PDAT>618</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> where the library routine is then executed and the subsequent steps of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> are then performed as previously described.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>The determination that a library is scheduled for unloading can be implemented in a variety of ways. In an embodiment of the invention a flag can be used for each library to indicate whether the library is scheduled for unloading. In an alternative embodiment of the invention, a use count can be used. For example, the use count can be a counter which is incremented every time the library is executed and decremented every time the library completes execution. If the use count equals zero and the library is loaded in memory, then the library is considered to be scheduled for unload.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>The delay imposed between scheduling a library for unloading and actually unloading the library is a trade-off between using memory resources longer and assuming the risk of having to unload and reload a library. In an embodiment of the invention, the actual unloading of a library is delayed for a fixed, pre-determined time period, thereby allowing subsequent calls to that library to occur within that time period without unloading and reloading of the library. For example, a time delay of two milliseconds can be used. If at the end of the delay the library is still not in use, e.g. the use count equals zero, then the library is unloaded from memory. If the library is in use, then the unload is cancelled.</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>The determination of a suitable time delay preferably takes into account the cost of loading and unloading a library. Generally, the higher the cost of loading and unloading a library, the longer a library should be maintained in memory, i.e. the longer the time delay should be, just in case the library is subsequently called again.</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>Alternatively, each call to the library can reset the delay. For example, if the delay is set at two milliseconds, then a library which is scheduled for unloading will be deleted after two milliseconds unless it is referenced again during that delay. If the library is referenced again during the delay, then when the library is then later rescheduled for unloading, the delay is reset to two milliseconds.</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>In other embodiments, variable, rather than fixed, predetermined delays may be used. Alternatively, the handling of scheduled unloading might be based on criteria other than time. Such criteria can include, but is not limited to, system resources such as process scheduling or deferred execution.</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>The following example illustrates the invention in operation for an application or other software module, denoted as &ldquo;Module A&rdquo;. In this example there are two libraries, Library A and Library B. Library A contains Routine A and Library B contains Routine B. The tracking of library usage is achieved by appropriately incrementing and decrementing a use count for each library. The use count for each library is initialized to zero (0).</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>Module A contains three library calls shown in pseudocode as follows:</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="2"><PTEXT><PDAT>Module A</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="3"><PTEXT><PDAT>BEGIN;</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="4"><PTEXT><PDAT>CALL Routine A;</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="4"><PTEXT><PDAT>CALL Routine B;</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="4"><PTEXT><PDAT>CALL Routine B;</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="3"><PTEXT><PDAT>END;</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="0"><PTEXT><PDAT>In operation, prior to or contemporaneous with the execution of Module A, the library loaders for Library A and Library B are loaded into memory. The &ldquo;CALL Routine A&rdquo; results in execution of a routine in the library loader for Library A, the routine corresponding to Routine A in the library implementation module for Library A, e.g. the routine with the same entry point as Routine A. The library loader routine increments a use count by an incrementing value. It is then determined whether the use count equals the incrementing value, indicating that the library implementation module is either not in memory or is scheduled to be unloaded. If the use count equals the incrementing value, then it is determined whether the library implementation module is in memory, but scheduled to be unloaded. If so, then the unload is cancelled. If the library implementation module is not in memory, it is loaded into memory. In this case, the use count equals the incrementing value, so the library implementation module is loaded into memory.</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="0"><PTEXT><PDAT>Once the library implementation module is loaded into memory or once it is determined that the library implementation module is already in memory, the Routine A is executed. After Routine A completes execution, control returns to the routine in the library loader for Library A which decreases the use count of Library A by the incrementing value. In this case, the use count is then equal to zero (0).</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>It is then determined whether the use count for Library A equals zero (0). If so, Library A is scheduled to unload and control returns to Module A. If the use count does not equal zero (0), then control returns to Module A. In this case, the use count is equal to zero (0), so Library A is scheduled to be unloaded.</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="0"><PTEXT><PDAT>The &ldquo;CALL Routine B&rdquo; code is then executed in a similar fashion to the &ldquo;CALL Routine A&rdquo; code discussed above.</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="0"><PTEXT><PDAT>The second &ldquo;CALL Routine B&rdquo; code is also executed in a similar manner to the previous calls, except that in this case, the library implementation module is found to be already loaded into memory, but scheduled for unloading. Therefore, the unloading is cancelled. Thus, a sequence of calls to the same library does not result in unnecessary unloading and reloading of the library. Rather the library is maintained in memory for execution of the sequence of calls and is then unloaded.</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="0"><PTEXT><PDAT>The above example illustrates that the present invention more efficiently utilizes memory resources because the size of a library loader is typically significantly smaller than the size of a library and a library typically does not occupy memory resources when no routines in that library are executing. Additionally, aspects of the invention provide for this efficient use of memory resources without incurring significant processor and I/O (disk) overhead for unnecessary loading and unloading, as might occur during a sequence of calls to the same library. This efficient use of memory resources means that more applications can execute within a given memory resource or that less memory needs to be available to execute a particular set of applications.</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="0"><PTEXT><PDAT>The invention can be used in any computer software environment in which software libraries or the like are dynamically loaded during runtime. The invention is not limited to use with shared libraries, but can be used with other types of libraries, code or the like, such as non-shared libraries, so long as the other types of libraries are dynamically loaded during runtime, rather than linked with the program during creation of the program&apos;s executable file.</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="0"><PTEXT><PDAT>The invention can be incorporated directly into an operating system or can be employed separately at another software layer above the operating system and even at the application level. For example, the invention can be used in a Navigation Services context as described in co-pending, commonly-assigned patent applications Arrouye, et al., U.S. Patent Application Serial No., &ldquo;An Application Programming Interface Adapted To Transform Objects For An Application Program&rdquo;, the disclosure of which is herein incorporated by reference.</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="0"><PTEXT><PDAT>The Navigation Services provides an API and associated software libraries which provide services that allow applications or other software modules and their end-users to access, display and otherwise manipulate a variety of software objects, such as, but not limited to, files, databases, FTP objects, and/or other information.</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="0"><PTEXT><PDAT>Navigation Services implements the present invention by implementing two libraries, a Navigation Services Loader (&ldquo;NS Loader&rdquo;) and a Navigation Services Implementation Module (&ldquo;NSIM&rdquo;). The Navigation Services API&apos;s are exported into a NS Loader which is a library loader as previously described. For each entry point in the Navigation Services API, the NS Loader contains a corresponding entry point. Each entry point into the library contains code to control the loading and unloading of the library implementation module for the library containing the code to implement the routine to which the entry point corresponds. That library implementation module is loaded into memory if that library implementation module is not already in memory. In either case, the routine in the library implementation module which corresponds to the entry point in the NS Loader is then executed.</PDAT></PTEXT></PARA>
<PARA ID="P-00069" LVL="0"><PTEXT><PDAT>For example, among other features and API&apos;s, the Navigation Services provides a &ldquo;get file&rdquo; (&ldquo;NavGetFile) and a &ldquo;put file&rdquo;(&ldquo;NavPutFile&rdquo;) interface. The &ldquo;get file&rdquo; interface provides access to a software object, while the &ldquo;put file&rdquo; provides for the local storing of software objects. Among other entry points, the NS Loader contains an entry point for NavGetFile and for NavPutFile. In operation, when an application makes a NavGetFile call, a call is made to the NavGetFile entry point in the NS Loader. The NavGetFile entry point has associated code for controlling the loading and unloading of the NSIM which contains the actual code for executing the NavGetFile routine. If the NSIM is not already in memory, then the NSIM is loaded into memory. In either case, the NavGetFile routine in the NSIM is then executed. Thus, in operation, the actual code for implementing NavGetFile is dynamically loaded into memory &ldquo;just in time&rdquo; according to the invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="0"><PTEXT><PDAT>The invention can be further employed within a routine in a library implementation module to achieve more advantages at a lower level of granularity. For example, a routine in the library implementation module may itself need one or more other software libraries in order to execute. In that case, a library structure can be provided for each of the other software libraries, thereby allowing dynamic just-in-time loading of those other software libraries.</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="0"><PTEXT><PDAT>An example of this in Navigation Services can be found in the NavGetFile routine. Part of the functionality provided by the NavGetFile routine is to retrieve a specified software object, e.g. a file, database record, FTP object. The code to access a particular object, such as an FTP object, may be contained in another software library, such as an FTP server library. Since the code is only used to retrieve FTP objects, it is not desirable to have the FTP server library code occupy memory unless the retrieval of an FTP object or other FTP server routine is to occur. In this case, Navigation Services advantageously uses the invention to dynamically &ldquo;just-in-time&rdquo; load the FTP server library when it is needed to implement retrieval of an FTP object. A library structure is created for the FTP server library and the library structure is advantageously used as previously described above.</PDAT></PTEXT></PARA>
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>Although in Navigation Services the NS Loader contains an entry point for virtually every Navigation Services API, in other applications, embodiments or implementations, the invention can be selectively applied to software libraries. The selective application of the invention can be based on the relative size of the software library and amount or frequency of usage of the routines in the library. The larger the binary code and the less frequent the usage, the more advantageous it is to use the invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="0"><PTEXT><PDAT>Although the invention has been described with respect to a conventional computer system, the invention is not limited to this specific environment. The invention can be employed in other hardware/software environments, including, but not limited to, cellular phones, cable boxes, office copiers and other embedded systems.</PDAT></PTEXT></PARA>
<PARA ID="P-00074" LVL="0"><PTEXT><PDAT>The foregoing description has been limited to a specific embodiment of this invention. It will be apparent, however, that variations and modifications may be made to the invention with the attainment of some or all of its advantages. Therefore, it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>We claim: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00075" LVL="0"><PTEXT><PDAT>1. A method for dynamically and automatically loading and unloading a software library to and out of memory in a computer, said software library including one or more library routines and capable of being referenced by an application or other software module, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining which software libraries are potentially needed during execution of the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, said loading occurring anytime before a library routine of the potentially needed library is executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library, said loading occurring prior to when a library routine of the software library is to be executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing the loaded library implementation module for the library routine being executed; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>automatically unloading from memory the library implementation module after the execution of the library routine is completed, wherein the software library is unloaded automatically without an explicit unload request from the application or other software module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>2. The method as defined in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said loading of a library loader for each potentially needed library occurs either just prior to or contemporaneous with the execution of the application or other software module.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00077" LVL="0"><PTEXT><PDAT>3. The method as defined in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said loading of a library loader for each potentially needed library occurs after execution of the application or other software module begins but before any library of the potentially needed library is executed by the application or other software module.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>4. A method for dynamically and automatically loading and unloading a software library to and from memory in a computer, said software library capable of being referenced by an application or other software module, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining which libraries are potentially needed during execution of the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, said loading occurring anytime before any library of the potentially needed library is executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library containing a library routine, said loading occurring prior to when said library routine is to be executed by the application or other software module, said loading comprising the steps of: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>determining whether the library implementation module is in memory; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is not in memory, then loading the library implementation module; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is in memory and scheduled to be unloaded, then canceling the scheduled unloading of the library implementation module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing the loaded library implementation module for the library routine being executed; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>automatically scheduling the unloading of the library implementation module; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>unless the scheduled unload has been cancelled, automatically unloading the library implementation module as scheduled, wherein the software library is scheduled for unload and unloaded automatically without an explicit unload request from the application or other software module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>5. The method as defined in claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> wherein said loading of a library loader for each potentially needed library occurs either just prior to or contemporaneous with the execution of the application or other software module.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>6. The method as defined in claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> wherein said step of scheduling the unloading of the library implementation module includes delaying the unloading of the library for a specified delay and unloading the library implementation module upon completion of the delay.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>7. The method as defined in claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> wherein said specified delay is a time delay.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>8. The method as defined in claim </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT> wherein said time delay is fixed.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>9. The method as defined in claim </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT> wherein said time delay is variable.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>10. The method as defined in claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> wherein said specified delay is based on system resources.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>11. A method for dynamically loading a software library into memory in a computer, said software library capable of being used by a plurality of applications or other software modules, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading a software library into memory prior to or contemporaneous with execution of a library routine in said software library; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>automatically unloading said software library from memory after completion of execution of said library routine if it is determined that the software library is not being referenced by any application or other software module, wherein the software library is unloaded automatically without an explicit unload request from the application or other software module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>12. A method for dynamically loading and unloading a software library of one or more software routines into and out of memory in a computer, said software library capable of being referenced by an application or other software module, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading a software library into memory; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>after completion of execution of a library routine in said software library, delaying for a delay period unloading of said software library from memory. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00087" LVL="0"><PTEXT><PDAT>13. The method as defined in claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> wherein said step of delaying the unloading of the software library includes setting an associated criteria and unloading the software library if after said associated criteria has been met, said software library is not being referenced by an application or other software module.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00088" LVL="0"><PTEXT><PDAT>14. The method as defined in claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> wherein said delay period is time-based.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00089" LVL="0"><PTEXT><PDAT>15. The method as defined in claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> further comprising the step of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>canceling a delayed unloading of a software library if a library routine of the software library is referenced by an application or other software module during the delay period. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00090" LVL="0"><PTEXT><PDAT>16. The method as defined in claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> wherein said delay period is based on system resources.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00017">
<PARA ID="P-00091" LVL="0"><PTEXT><PDAT>17. The method as defined in claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> wherein said step of scheduling the unloading of the library implementation module comprises the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>setting an associated criteria; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>unsetting an associated criteria if said scheduled unloading is cancelled; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>resetting the associated criteria if the library implementation module is again scheduled for unloading. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00018">
<PARA ID="P-00092" LVL="0"><PTEXT><PDAT>18. A library structure for a dynamic software library, said library structure stored in a computer-readable medium, said library structure comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a library loader specifying entry points corresponding to entry points in the software library; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a library implementation module containing computer code to implement the software library, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein said library loader contains code for automatically unloading said library implementation module from memory such that the software library is unloaded automatically without an explicit unload request from the application or other software module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00019">
<PARA ID="P-00093" LVL="0"><PTEXT><PDAT>19. The library structure as defined in claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT>, wherein said library loader is loaded into memory at or near the beginning of execution of an application program or other software module referencing said software library.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00020">
<PARA ID="P-00094" LVL="0"><PTEXT><PDAT>20. The library structure as defined in claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT>, wherein said library loader is loaded into memory such that said library loader is in memory prior to a call of said software library by an application program or other software module.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00021">
<PARA ID="P-00095" LVL="0"><PTEXT><PDAT>21. A computer-readable medium having stored thereon instructions for causing a computer to perform the following steps:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining one or more software libraries which are potentially needed during execution of an application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, said loading occurring anytime before a library routine of the potentially needed library is executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library, said loading occurring prior to when a library routine of the software library is to be executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing the loaded library implementation module for the library routine being executed; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>automatically unloading from memory the library implementation module after the execution of the library routine is completed, wherein the software library is unloaded automatically without an explicit unload request from the application or other software module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00022">
<PARA ID="P-00096" LVL="0"><PTEXT><PDAT>22. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> wherein said loading of a library loader for each potentially needed library occurs either just prior to or contemporaneous with the execution of the application or other software module.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00023">
<PARA ID="P-00097" LVL="0"><PTEXT><PDAT>23. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> wherein said loading of a library loader for each potentially needed library occurs after execution of the application or other software module begins but before any library routine of the potentially needed library is executed by the application or other software module.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00024">
<PARA ID="P-00098" LVL="0"><PTEXT><PDAT>24. A computer-readable medium having stored thereon instructions for causing a computer to perform the following steps:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining one or more software libraries which are potentially needed during execution of an application or other software module, each software library containing one or more library routines; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, said loading occurring anytime before a library routine of the potentially needed library is executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library containing a library routine, said loading occurring just prior to when said library routine is to be executed by the application or other software module, said loading including </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>determining whether the library implementation module is in memory, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is not in memory, then loading the library implementation module, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is in memory and scheduled for unloading from memory, then canceling the scheduled unloading of the library implementation module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing the loaded library implementation module for the library routine being executed; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>automatically scheduling the unloading of the library implementation module; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>unless the scheduled unload has been cancelled, automatically unloading the library implementation module as scheduled, wherein the software library is scheduled for unload and unloaded automatically without an explicit unload request from the application or other software module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00025">
<PARA ID="P-00099" LVL="0"><PTEXT><PDAT>25. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> wherein said loading of a library loader for each potentially needed library occurs either just prior to or contemporaneous with the execution of the application or other software module.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00026">
<PARA ID="P-00100" LVL="0"><PTEXT><PDAT>26. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> wherein said loading of a library loader for each potentially needed library occurs after execution of the application or other software module begins but before any library routine of the potentially needed library is executed by the application or other software module.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00027">
<PARA ID="P-00101" LVL="0"><PTEXT><PDAT>27. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> wherein said step of scheduling the unloading of the library implementation module includes delaying the unloading of the library for a specified delay and unloading the library implementation module upon completion of the delay.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00028">
<PARA ID="P-00102" LVL="0"><PTEXT><PDAT>28. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT> wherein said specified delay is a time delay.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00029">
<PARA ID="P-00103" LVL="0"><PTEXT><PDAT>29. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> wherein said time delay is fixed.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00030">
<PARA ID="P-00104" LVL="0"><PTEXT><PDAT>30. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> wherein said time delay is variable.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00031">
<PARA ID="P-00105" LVL="0"><PTEXT><PDAT>31. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT> wherein said specified delay is based on system resources.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00032">
<PARA ID="P-00106" LVL="0"><PTEXT><PDAT>32. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> wherein said step of scheduling the unloading of the library implementation module comprises the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>setting an associated criteria; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>unsetting an associated criteria if said scheduled unloading is cancelled; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>resetting the associated criteria if the library implementation module is again scheduled for unloading. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00033">
<PARA ID="P-00107" LVL="0"><PTEXT><PDAT>33. A computer-readable medium having stored thereon instructions for causing a computer to perform the following steps:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading a software library into memory; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>automatically unloading said software library from memory after completion of execution of said library routine by delaying the unloading for a delay period. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00034">
<PARA ID="P-00108" LVL="0"><PTEXT><PDAT>34. A method for dynamically and automatically loading and unloading a software library to and from memory in a computer, said software capable of being referenced by an application or other software module, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining which software libraries are potentially needed during execution of the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, said loading occurring anytime before any library of the potentially needed library is executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library containing a library routine, said loading occurring after the start of execution of the application or other software module and prior to when said library routine is to be executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing the loaded library implementation module for the library routine being executed; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>automatically unloading from memory the library implementation module after the execution of the library routine is completed, wherein the software library is unloaded automatically without an explicit unload request from the application or other software module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00035">
<PARA ID="P-00109" LVL="0"><PTEXT><PDAT>35. The method as defined in claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> wherein the loading, unloading, scheduling of unloading and canceling of scheduled unloading are handled by the library loader of the software library, the library loader handling those actions automatically without receiving an explicit request for those actions from the application or other software module.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00036">
<PARA ID="P-00110" LVL="0"><PTEXT><PDAT>36. A method for dynamically loading a software library into memory in a computer, said software capable of being used by an application or other software module, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining which software libraries are potentially needed during execution of the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, said loading occurring anytime before any library of the potentially needed library is executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library containing a library routine, said loading occurring just prior to when said library routine is to be executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing the loaded library implementation module for the library routine being executed; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>unloading from memory the library implementation module after the execution of the library routine is completed, wherein said loading of a library loader for each potentially needed library occurs after execution of the application or other software module begins but before any library of the potentially needed library is executed by the application or other software module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00037">
<PARA ID="P-00111" LVL="0"><PTEXT><PDAT>37. A method for dynamically loading a software library into memory in a computer, said software library capable of being used by an application or other software module, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining which libraries are potentially needed during execution of the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, said loading occuring after execution of the application or other software module begins but before any library of the potentially needed library is executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library containing a library routine, said loading occurring just prior to when said library routine is to be executed by the application or other software module, said loading comprising the steps of: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>determining whether the library implementation module is in memory; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is not in memory, then loading the library implementation module; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is in memory, then canceling the scheduled unloading of the library implementation module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing the loaded library implementation module for the library routine being executed; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>scheduling the unloading of the library implementation module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00038">
<PARA ID="P-00112" LVL="0"><PTEXT><PDAT>38. A method for dynamically loading a software library into memory in a computer, said software library capable of being used by an application or other software module, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining which libraries are potentially needed during execution of the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, said loading occurring anytime before any library of the potentially needed library is executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library containing a library routine, said loading occurring just prior to when said library routine is to be executed by the application or other software module, said loading comprising the steps of: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>determining whether the library implementation module is in memory; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is not in memory, then loading the library implementation module; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is in memory, then canceling the scheduled unloading of the library implementation module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing the loaded library implementation module for the library routine being executed; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>scheduling the unloading of the library implementation module, wherein said step of scheduling the unloading of the library implementation module includes setting a time delay and unloading the library implementation module if after said time delay has been met, said library implementation module is not in use. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00039">
<PARA ID="P-00113" LVL="0"><PTEXT><PDAT>39. The method as defined in claim </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> wherein said time delay is fixed.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00040">
<PARA ID="P-00114" LVL="0"><PTEXT><PDAT>40. The method as defined in claim </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> wherein said time delay is variable.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00041">
<PARA ID="P-00115" LVL="0"><PTEXT><PDAT>41. A method for dynamically loading a software library into memory in a computer, said software library capable of being used by an application or other software module, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining which libraries are potentially needed during execution of the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, said loading occurring anytime before any library of the potentially needed library is executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library containing a library routine, said loading occurring just prior to when said library routine is to be executed by the application or other software module, said loading comprising the steps of: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>determining whether the library implementation module is in memory; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is not in memory, then loading the library implementation module; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is in memory, then canceling the scheduled unloading of the library implementation module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing the loaded library implementation module for the library routine being executed; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>scheduling the unloading of the library implementation module, wherein said step of scheduling the unloading of the library implementation module includes setting an associated critera based on system resources and unloading the library implementation module if after said associated criteria has been met, said library implementation module is not in use. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00042">
<PARA ID="P-00116" LVL="0"><PTEXT><PDAT>42. A method for dynamically loading a software library into memory in a computer, said software library capable of being used by an application or other software module, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining which libraries are potentially needed during execution of the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, said loading occurring anytime before any library of the potentially needed library is executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library containing a library routine, said loading occurring just prior to when said library routine is to be executed by the application or other software module, said loading comprising the steps of: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>determining whether the library implementation module is in memory; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is not in memory, then loading the library implementation module; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is in memory, then canceling the scheduled unloading of the library implementation module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing the loaded library implementation module for the library routine being executed; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>scheduling the unloading of the library implementation module, wherein said step of scheduling the unloading of the library implementation module includes setting an associated criteria, unsetting an associated criteria if said scheduled unloading is cancelled, and resetting the associated criteria if the library implementation module is again scheduled for unloading. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00043">
<PARA ID="P-00117" LVL="0"><PTEXT><PDAT>43. A method for dynamically loading a software library into memory in a computer, said software library capable of being used by an application or other software module, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading a software library into memory just prior to or contemporaneous with execution of a library routine in said software library; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>scheduling said software library from memory after completion of execution of said library routine, wherein said step of scheduling the unloading of the library implementation module includes setting a time delay and unloading the library implementation module if after said time delay has been met, said library implementation module is not in use. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00044">
<PARA ID="P-00118" LVL="0"><PTEXT><PDAT>44. The method as defined in claim </PDAT><HIL><BOLD><PDAT>43</PDAT></BOLD></HIL><PDAT> wherein said time delay is fixed.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00045">
<PARA ID="P-00119" LVL="0"><PTEXT><PDAT>45. The method as defined in claim </PDAT><HIL><BOLD><PDAT>43</PDAT></BOLD></HIL><PDAT> wherein said time delay is variable.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00046">
<PARA ID="P-00120" LVL="0"><PTEXT><PDAT>46. A method for dynamically loading a software library into memory in a computer, said software library capable of being used by an application or other software module, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading a software library into memory just prior to or contemporaneous with execution of a library routine in said software library; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>scheduling said software library from memory after completion of execution of said library routine, wherein said step of scheduling the unloading of the library implementation module includes setting an associated criteria based on system resources and unloading the library implementation module if after said associated criteria has been met, said library implementation module is not in use. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00047">
<PARA ID="P-00121" LVL="0"><PTEXT><PDAT>47. A method for dynamically loading a software library into memory in a computer, said software library capable of being used by an application or other software module, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading a software library into memory just prior to or contemporaneous with execution of a library routine in said software library; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>scheduling said software library from memory after completion of execution of said library routine, wherein said step of scheduling the unloading of the library implementation module includes setting an associated criteria, unsetting an associated criteria if said scheduled unloading is cancelled, and resetting the associated criteria if the library implementation module is again scheduled for unloading. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00048">
<PARA ID="P-00122" LVL="0"><PTEXT><PDAT>48. A computer-readable medium having stored thereon instructions for causing a computer to perform the following steps:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining one or more software libraries which are potentially needed during execution of an application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, said loading occurring anytime before any library of the potentially needed library is executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library containing a library routine, said loading occurring just prior to when said library routine is to be executed by the application or other software module, said loading including determining whether the library implementation module is in memory, if the library implementation module is not in memory, then loading the library implementation module, and if the library implementation module is in memory, then canceling the scheduled unloading of the library implementation module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing the loaded library implementation module for the library routine being executed; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>scheduling the unloading of the library implementation module, wherein said step of scheduling the unloading of the library implementation module includes setting an associated criteria based on system resources and unloading the library implementation module if after said associated criteria has been met, said library implementation module is not in use. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00049">
<PARA ID="P-00123" LVL="0"><PTEXT><PDAT>49. A computer-readable medium having stored thereon instructions for causing a computer to perform the following steps:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining one or more software libraries which are potentially needed during execution of an application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, said loading occurring anytime before any library of the potentially needed library is executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library containing a library routine, said loading occurring just prior to when said library routine is to be executed by the application or other software module, said loading comprising the steps of: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>determining whether the library implementation module is in memory; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is not in memory, then loading the library implementation module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is in memory, then canceling the scheduled unloading of the library implementation module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing the loaded library implementation module for the library routine being executed; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>scheduling the unloading of the library implementation module, wherein said step of scheduling the unloading of the library implementation module includes setting an associated criteria, unsetting an associated criteria if said scheduled unloading is cancelled, and resetting the associated criteria if the library implementation module is again scheduled for unloading. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00050">
<PARA ID="P-00124" LVL="0"><PTEXT><PDAT>50. A method for automatic unloading of a dynamically-loaded software library from memory in a computer, said software library including one or more library routines and capable of being referenced or otherwise invoked by an application or other software module, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining whether any application or other software module is referencing the software library; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>automatically unloading the software library from memory if it is determined that the software library is not being referenced by any application or other software module, wherein the software library is unloaded automatically without an explicit unload request from the application or other software module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00051">
<PARA ID="P-00125" LVL="0"><PTEXT><PDAT>51. The method as defined in claim </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> wherein said software library is comprised of a library loader and a library implementation module, the library loader specifying entry points corresponding to entry points in the software library and the library implementation module containing computer code to implement the software library, said method further comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, a library loader for a library being loaded by the time the application or other software module executes a routine in that library; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library, said loading occurring prior to when a library routine of the software library is executed by the application or other software module, said loading handled by the library loader for the software library; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein the step of unloading the software library is handled by the library loader for that software library. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00052">
<PARA ID="P-00126" LVL="0"><PTEXT><PDAT>52. The method as defined in claim </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> wherein said step of automatically unloading the software library comprises the step of delaying the unloading of the software library for a specified delay and unloading the software library upon completion of the delay.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00053">
<PARA ID="P-00127" LVL="0"><PTEXT><PDAT>53. The method as defined in claim </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT>, wherein said step of automatically unloading the software library further comprises the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining at completion of the delay whether the software library is being referenced by an application or other software module; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>unloading the software module only if the software library is not being referenced by an application or other software module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00054">
<PARA ID="P-00128" LVL="0"><PTEXT><PDAT>54. The method as defined in claim </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> further comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>when an application or other software module references or otherwise invokes a routine in a software library, determining whether the software library is subject to a delayed unloading; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>if the software library is subject to a delayed unloading, cancelling the delayed unloading. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00055">
<PARA ID="P-00129" LVL="0"><PTEXT><PDAT>55. The method as defined in claim </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> wherein said specified delay is a time-based delay.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00056">
<PARA ID="P-00130" LVL="0"><PTEXT><PDAT>56. The method as defined in claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said time-based delay is fixed.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00057">
<PARA ID="P-00131" LVL="0"><PTEXT><PDAT>57. The method as defined in claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said time-based delay is variable.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00058">
<PARA ID="P-00132" LVL="0"><PTEXT><PDAT>58. The method as defined in claim </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> wherein said specified delay is based on system resources.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00059">
<PARA ID="P-00133" LVL="0"><PTEXT><PDAT>59. A method for dynamically and automatically loading and unloading a software library to and from memory in a computer, said software library capable of being referenced by an application or other software module, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining which libraries are potentially needed during execution of the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, said loading occurring anytime before any library of the potentially needed library is executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library containing a library routine, said loading occurring prior to when said library routine is to be executed by the application or other software module, said loading comprising the steps of: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>determining whether the library implementation module is in memory; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is not in memory, then loading the library implementation module; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing the loaded library implementation module for the library routine being executed; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>scheduling the unloading of the library implementation module when the library implementation module is no longer referenced by any application or other software module, the scheduling based on a specified criteria; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>automatically unloading the library implementation module when the specified criteria has been met, wherein the software library is unloaded automatically without an explicit unload request from the application or other software module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00060">
<PARA ID="P-00134" LVL="0"><PTEXT><PDAT>60. The method as defined in claim </PDAT><HIL><BOLD><PDAT>59</PDAT></BOLD></HIL><PDAT> wherein the scheduled unloading is cancelled if the library implementation module is being referenced by an application or other software module when the specified criteria has been met.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00061">
<PARA ID="P-00135" LVL="0"><PTEXT><PDAT>61. The method as defined in claim </PDAT><HIL><BOLD><PDAT>59</PDAT></BOLD></HIL><PDAT> wherein the scheduled unloading is cancelled if the library implementation module is referenced by an application or other software module before the specified criteria has been met.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00062">
<PARA ID="P-00136" LVL="0"><PTEXT><PDAT>62. The library structure as defined in claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT> wherein the entry points specified by the library loader are identical to entry points in the software library.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00063">
<PARA ID="P-00137" LVL="0"><PTEXT><PDAT>63. A computer-readable medium having stored thereon instructions for causing a computer to perform the following steps:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining whether any application or other software module is referencing a software library; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>automatically unloading the software library from memory if it is determined that the software library is not being referenced by any application or other software module, wherein the software library is unloaded from memory automatically without an explicit unload request from the application or other software module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00064">
<PARA ID="P-00138" LVL="0"><PTEXT><PDAT>64. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> wherein said software library is comprised of a library loader and a library implementation module, the library loader specifying entry points corresponding to entry points in the software library and the library implementation module containing computer code to implement the software library, said computer-readable medium having stored thereon further instructions for causing a computer to perform the further steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, a library loader for a library being loaded by the time the application or other software module executes a routine in that library; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library, said loading occurring prior to when a library routine of the software library is executed by the application or other software module, said loading handled by the library loader for the software library; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein the step of unloading the software library is handled by the library loader for that software library. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00065">
<PARA ID="P-00139" LVL="0"><PTEXT><PDAT>65. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> wherein said step of automatically unloading the software library comprises the step of delaying the unloading of the software library for a specified delay and unloading the software library upon completion of the delay.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00066">
<PARA ID="P-00140" LVL="0"><PTEXT><PDAT>66. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT>, wherein said step of automatically unloading the software library further comprises the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining at completion of the delay whether the software library is being referenced by an application or other software module; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>unloading the software module only if the software library is not being referenced by an application or other software module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00067">
<PARA ID="P-00141" LVL="0"><PTEXT><PDAT>67. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> having stored thereon further instructions for causing a compute to perform the further steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>when an application or other software module references or otherwise invokes a routine in a software library, determining whether the software library is subject to a delayed unloading; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>if the software library is subject to a delayed unloading, cancelling the delayed unloading. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00068">
<PARA ID="P-00142" LVL="0"><PTEXT><PDAT>68. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> wherein said specified delay is a time-based delay.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00069">
<PARA ID="P-00143" LVL="0"><PTEXT><PDAT>69. The computer-readable as defined in claim </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> wherein said time-based delay is fixed.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00070">
<PARA ID="P-00144" LVL="0"><PTEXT><PDAT>70. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> wherein said time-based delay is variable.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00071">
<PARA ID="P-00145" LVL="0"><PTEXT><PDAT>71. The method as defined in claim </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> wherein said specified delay is based on system resources.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00072">
<PARA ID="P-00146" LVL="0"><PTEXT><PDAT>72. A computer-readable medium having stored thereon instructions for causing a computer to perform the following steps:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining which libraries are potentially needed during execution of the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library loader for each potentially needed library, said loading occurring anytime before any library of the potentially needed library is executed by the application or other software module; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading into memory a library implementation module for a software library containing a library routine, said loading occurring prior to when said library routine is to be executed by the application or other software module, said loading comprising the steps of: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>determining whether the library implementation module is in memory; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>if the library implementation module is not in memory, then loading the library implementation module; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing the loaded library implementation module for the library routine being executed; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>scheduling the unloading of the library implementation module when the library implementation module is no longer referenced by any application or other software module, the scheduling based on a specified criteria; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>automatically unloading the library implementation module when the specified criteria has been met, wherein the software library is unloaded automatically without an explicit unload request from the application or other software module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00073">
<PARA ID="P-00147" LVL="0"><PTEXT><PDAT>73. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>72</PDAT></BOLD></HIL><PDAT> wherein the scheduled unloading is cancelled if the library implementation module is being referenced by an application or other software module when the specified criteria has been met.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00074">
<PARA ID="P-00148" LVL="0"><PTEXT><PDAT>74. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>72</PDAT></BOLD></HIL><PDAT> wherein the scheduled unloading is cancelled if the library implementation module is referenced by an application or other software module before the specified criteria has been met.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00075">
<PARA ID="P-00149" LVL="0"><PTEXT><PDAT>75. A computer system for automatic unloading of a dynamically-loaded software library from memory in a computer, said software library including one or more library routines and capable of being referenced or otherwise invoked by an application or other software module, said computer system comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>one or more software libraries, each software library containing one or more library routines; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>means for determining whether any application or other software module is referencing the software library; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>means for automatically unloading the software library from memory if it is determined that the software library is not being referenced by any application or other software module, wherein the software library is unloaded automatically without an explicit unload request from the application or other software module. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00076">
<PARA ID="P-00150" LVL="0"><PTEXT><PDAT>76. The computer-readable medium as defined in claim </PDAT><HIL><BOLD><PDAT>33</PDAT></BOLD></HIL><PDAT> wherein said step of automatically unloading said software library from memory further comprises the step of canceling a delayed unloading of a software library if a library routine of the software library is referenced by an application or other software module during the delay period.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00077">
<PARA ID="P-00151" LVL="0"><PTEXT><PDAT>77. The method as defined in claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> wherein said step of scheduling the unloading of the library implementation module includes delaying the unloading of the library for a specified delay and unless otherwise indicated unloading the library implementation module upon completion of the delay.</PDAT></PTEXT></PARA>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314566-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314566-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314566-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314566-20011106-D00003.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314567-20011106-D00000.TIF SYSTEM "US06314567-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314567-20011106-D00001.TIF SYSTEM "US06314567-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314567-20011106-D00002.TIF SYSTEM "US06314567-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314567-20011106-D00003.TIF SYSTEM "US06314567-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314567-20011106-D00004.TIF SYSTEM "US06314567-20011106-D00004.TIF" NDATA TIF>
<!ENTITY US06314567-20011106-D00005.TIF SYSTEM "US06314567-20011106-D00005.TIF" NDATA TIF>
<!ENTITY US06314567-20011106-D00006.TIF SYSTEM "US06314567-20011106-D00006.TIF" NDATA TIF>
<!ENTITY US06314567-20011106-D00007.TIF SYSTEM "US06314567-20011106-D00007.TIF" NDATA TIF>
<!ENTITY US06314567-20011106-D00008.TIF SYSTEM "US06314567-20011106-D00008.TIF" NDATA TIF>
<!ENTITY US06314567-20011106-D00009.TIF SYSTEM "US06314567-20011106-D00009.TIF" NDATA TIF>
<!ENTITY US06314567-20011106-D00010.TIF SYSTEM "US06314567-20011106-D00010.TIF" NDATA TIF>
<!ENTITY US06314567-20011106-D00011.TIF SYSTEM "US06314567-20011106-D00011.TIF" NDATA TIF>
<!ENTITY US06314567-20011106-D00012.TIF SYSTEM "US06314567-20011106-D00012.TIF" NDATA TIF>
<!ENTITY US06314567-20011106-D00013.TIF SYSTEM "US06314567-20011106-D00013.TIF" NDATA TIF>
<!ENTITY US06314567-20011106-D00014.TIF SYSTEM "US06314567-20011106-D00014.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314567</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>09192077</PDAT></DNUM></B210>
<B211US><PDAT>09</PDAT></B211US>
<B220><DATE><PDAT>19981113</PDAT></DATE></B220>
</B200>
<B500>
<B510>
<B511><PDAT>G06F  9445</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>717 11</PDAT></B521>
<B522><PDAT>717 10</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Apparatus and method for transferring state data when performing on-line replacement of a running program code and data</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4825354</PDAT></DNUM>
<DATE><PDAT>19890400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Agrawal et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>707 10</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5333308</PDAT></DNUM>
<DATE><PDAT>19940700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Ananthanpilla</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>714  4</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5359730</PDAT></DNUM>
<DATE><PDAT>19941000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Marron</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5377309</PDAT></DNUM>
<DATE><PDAT>19941200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Sonobe et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>706 60</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5555418</PDAT></DNUM>
<DATE><PDAT>19960900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Nilsson et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 10</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5696989</PDAT></DNUM>
<DATE><PDAT>19971200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Miura et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>710 24</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6016553</PDAT></DNUM>
<DATE><PDAT>20000100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Schneider et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>714 21</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6101327</PDAT></DNUM>
<DATE><PDAT>20000800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Holte-Rost et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>717 11</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B562><NCIT><STEXT><PDAT>Title: Socket programming in the data communication laboratory, author: Toll, ACM, 1995.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Title: Encapsulation of parallelism in the volcano query processing system, author: Grafe, ACM, 1990.* </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Title: Migrating Sockets&mdash;End system support for networking with quality of service guarantees, author: Yau, IEEE, 1998.</PDAT></STEXT></NCIT><CITED-BY-EXAMINER></B562>
</B560>
<B570>
<B577><PDAT>18</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>717 11</PDAT></B582>
<B582><PDAT>717 10</PDAT></B582>
<B582><PDAT>707 10</PDAT></B582>
</B580>
<B590><B595><PDAT>14</PDAT></B595><B596><PDAT>15</PDAT></B596><B597US>
</B590>
</B500>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Roy T.</PDAT></FNM><SNM><STEXT><PDAT>Oberhauser</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Santa Clara</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Michael Lawrence</PDAT></FNM><SNM><STEXT><PDAT>Saboff</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>San Jose</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Hewlett-Packard Company</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Palo Alto</PDAT></CITY><STATE><PDAT>CA</PDAT></STATE></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>02</PDAT>
</B732US>
</B730>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Kakali</PDAT></FNM><SNM><STEXT><PDAT>Chaki</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Chameli C.</PDAT></FNM><SNM><STEXT><PDAT>Das</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2122</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>Apparatus and method are provided for transferring state data between computer software programs within the same software process. The apparatus and method does not require a special operating system, but instead only requires the use of a few standard operating system calls (i.e, fork and exec, etc.), so therefore is highly portable between different operating system machine types. The apparatus and method have complete flexibility to change arguments or return values and change calling order, function names, function code, and the like within the new version of the program.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>1. Field of the Invention</PDAT></PTEXT></PARA>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>The present invention is generally related to a system of processing updated software programs and, more particularly, is related to a system and method for transferring state data between different versions of software programs.</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>2. Description of Related Art</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>As known in the computer and software arts, software programs undergo many changes during their product life. The changes either enhance the system through updates or remove problems (i.e., bugs) from the program steps. In either circumstance, the software program is usually replaced with a new version of the program.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>Typically, when a software program is replaced with a new version, the old version of the program is terminated and the new version is started. This, however, creates a problem where the program operation is interrupted for some time period.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>While there are some solutions for on-line software version changes, these techniques suffer from the following problems. One problem with computer systems in the prior art that are designed to allow real-time software updates is that they require a special operating system or support changes within the operating system. These changes may include modifications to the compilers and/or linkers.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>Another problem is that operating systems designed to allow software program updates on-line or on-the-fly, use indirect addressing tables to link different modules together utilizing complicated mechanisms. The use of indirect addressing tables impacts the performance of the overall system software.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>The prior art also suffers the problem of transferring the state from the old process to the new process, along with transferring control using the stack monitoring system. However, this transferring of the state to the new version program in the new process suffers the following performance problems.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>First, the main function of the program in either the old version or the new version can never change.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>While the stack can be used and transferred from the old program in the old process to the new program in the new process, no new procedure area layers can be added. New procedure area layers cannot be added because they would cause errors in the processing since they would be returning to procedures at different addresses.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>Furthermore, when transferring control from an old version of a program in an old process to a new version of a program in a new process, the assumption that the program counter can be converted implies that the offset to a function or procedure may never change due to the offset addressing within the version of the program.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>Transferring from an old program/process to a new version program/process also assumes that no extra global or static variables can be added or deleted. The reason is that this would cause errors in the execution of the new program/process.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>Next, the transfer from an old program/process to a new version program/process implies that the addresses of the data remain constant across the two version, i.e., there is no reordering or optimization changes, etc.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>For the return value or parameter format changes, an intraprocedure is written that adds extra overhead on each function call and make it more difficult to maintain the software.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>Additionally, stack monitoring techniques cannot guarantee that the old program/process is not performing a time critical task when the state transfer routine is initiated.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>Also, the new program/process loses attributes associated with the old process such as the process identification (ID), all the network connections, file connections, and the like, when the old process is terminated to restart within the new process.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>In addition, to initiate state transfer, one inserts an illegal instruction and assumes there can be no other causes for this illegal instruction or trap, which would thereby make it possible to initiate a state transfer at the wrong time.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><PDAT>Hence, software users have lacked the ability to allow a program running in a process to be replaced with a new version of a program within the same process without loss of service or state.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00020" LVL="0"><PTEXT><PDAT>The present invention is generally directed to an apparatus and method system and method for transferring state data between software programs within the same process. In accordance with one aspect of the invention, the apparatus and method repeatedly determine if a newer online program exists for an executing online program, save online program data if a newer online program exists, terminate the online program, execute the newer online program to provide the requested service, and utilize the preserved current program data during the newer online program&apos;s execution. The apparatus and method for on-line replacement of a program running in a process do not require a special operating system, but instead use a few standard operating system calls (i.e, fork and exec, etc.). Therefore, the apparatus is highly portable between different operating system machine types.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><PDAT>In accordance with one embodiment of the apparatus and method of the present invention, a checkpoint methodology allows the programmer maximum flexibility in addressing upgrade/replacement program issues and determines where, when and how the transition to a new version of a program should occur with least impact to the services.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><PDAT>In accordance with another embodiment of the present invention, procedures have complete flexibility to change arguments or return values and change calling order, function names, function code and the like within the new version of the program since stack monitoring techniques are not being used.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00023" LVL="0"><PTEXT><PDAT>The accompanying drawings incorporated in and forming a part of the specification illustrate several aspects of the present invention, and together with the description, serve to explain the principles of the invention. Moreover, in the drawings, like reference numerals designate corresponding parts throughout the several views. In the drawings:</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a block diagram of a computer system having user system processes in the operating system.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a block diagram showing the prior arts of state transition from a first program running within process A and transferring state to a second program within process B.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> is a block diagram of the present invention showing the flow between the old program within the parent process to the new program running within the parent process utilizing a child process to save data variables, including the state information of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> is a block diagram showing the memory layout of a process within the operating system as shown in FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> is a flow chart of the prior art method for transitioning from program </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> in process A to an updated program B in process </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> as shown in FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is a flow chart of the method to update/replace the program within process A by utilizing check points and saving state information by forking a child process as shown in FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7A</PDAT></FGREF><PDAT> is a flow chart of the child process transfer routine of the present invention, as shown in FIG. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7B</PDAT></FGREF><PDAT> is a flow chart of the parent state transfer routine of the present invention, as shown in FIG. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 8A</PDAT></FGREF><PDAT> is a flowchart of the send next data item subroutine of the present invention, as shown in FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>A.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 8B</PDAT></FGREF><PDAT> is a flowchart of the parent process retrieve data subroutine, as shown in FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>B.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 9A</PDAT></FGREF><PDAT> is a block diagram of the variable data packet used to transfer a data item from the old child process to the new parent process.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 9B</PDAT></FGREF><PDAT> is a block diagram for the hash table variable data translation process.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 10A</PDAT></FGREF><PDAT> is a flowchart of an alternative embodiment for the sending the next data item routine of the present invention as referenced in FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>A.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 10B</PDAT></FGREF><PDAT> is a flowchart of an alternative embodiment for receiving the data item as referenced in FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>B.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 11</PDAT></FGREF><PDAT> is a block diagram of an alternative embodiment for the heap allocation variable data translation process.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</PDAT></STEXT></H>
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>Reference will now be made in detail to the description of the invention as illustrated in the drawings. While the invention will be described in connection with these drawings, there is no intent to limit it to the embodiment or embodiments disclosed therein. On the contrary, the intent is to cover all alternatives, modifications, and equivalents included within the spirit and scope of the invention as defined by the appended claims.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>As illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a computer system </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> which generally comprises a processor </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>, a storage device(s) </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, and system memory </PDAT><HIL><BOLD><PDAT>31</PDAT></BOLD></HIL><PDAT> with an operating system </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT>. Both the storage device </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> and memory </PDAT><HIL><BOLD><PDAT>31</PDAT></BOLD></HIL><PDAT> include instructions that are executed by the processor </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>. Storage device(s) </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> can be, for example, in any one or combination of the following: compact disc read only memory (CD-ROM), disk, diskette, cartridge, cassette, ROM or the like. The memory </PDAT><HIL><BOLD><PDAT>31</PDAT></BOLD></HIL><PDAT> can be either one or a combination of the common types of memory such as for example, but not limited to, erasable programmable read only memory (EPROM), electronically erasable programmable read only memory (EEPROM), flash memory, programmable read only memory (PROM), random access memory (RAM), read only memory (ROM), flash memory, Dynamic random access memory (DRAM), Static random access memory (SRAM), system memory, or the like. The processor </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> accepts data from memory </PDAT><HIL><BOLD><PDAT>31</PDAT></BOLD></HIL><PDAT> or storage device </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> over the local interface or bus </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>. Direction from the user can be signaled by using an input device(s) for example, a mouse </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>, keyboard </PDAT><HIL><BOLD><PDAT>25</PDAT></BOLD></HIL><PDAT>, or the like. The action input and result output are displayed on the display terminal </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>. Parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> executes an old version of the program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> and child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> is used to save and transfer the state data.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>Parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT>, the old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT>, the new program </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT>, a checkpoint and swap management library </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>, a child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT>, and a registry </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT>, all of which can be implemented in hardware, software, firmware, or a combination thereof. In the preferred embodiment(s), the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT>, old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT>, new program </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT>, checkpoint and swap management library </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>, child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> and the registry </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> are implemented in software or firmware that is stored in a memory and that is executed by a suitable instruction execution system.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>Illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a well known method of updating a running process. Normally, when a process </PDAT><HIL><BOLD><PDAT>41</PDAT></BOLD></HIL><PDAT> is to be updated on-line, the program calls a state saving routine </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> that saves the state information of the program executing in process A </PDAT><HIL><BOLD><PDAT>41</PDAT></BOLD></HIL><PDAT>. Once the state data is saved, process A </PDAT><HIL><BOLD><PDAT>41</PDAT></BOLD></HIL><PDAT> terminates and process B </PDAT><HIL><BOLD><PDAT>51</PDAT></BOLD></HIL><PDAT> is executed. Process B </PDAT><HIL><BOLD><PDAT>51</PDAT></BOLD></HIL><PDAT> retrieves the state data utilizing the retrieve state data routine </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT>. Then, while process B </PDAT><HIL><BOLD><PDAT>51</PDAT></BOLD></HIL><PDAT> is not done, it performs the program task, and if an update is requested, then it is done and it continues the loop processing and repeats the steps in program running in process B at </PDAT><HIL><BOLD><PDAT>51</PDAT></BOLD></HIL><PDAT>. This method is time consuming and requires an extra data storage area for saving the state information.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>Illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> is online replacement of a program running in a process using the checkpoint system of the present invention. As parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> executes the old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT>, the old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> executes code which periodically checks to see if old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> is done. If the old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> is not done, parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> continues to perform the program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> tasks checks if program update is requested </PDAT><HIL><BOLD><PDAT>71</PDAT></BOLD></HIL><PDAT> and continues loop processing. In the preferred embodiment, the check if a program update is requested is accessing the Checkpoint and Swap Management Library </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> via </PDAT><HIL><BOLD><PDAT>71</PDAT></BOLD></HIL><PDAT>, which further checks the registry file </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> via link </PDAT><HIL><BOLD><PDAT>72</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>Checkpoint and swap management library </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>, when accessed, checks the registry file or program version service number </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT>, via the check registry communication </PDAT><HIL><BOLD><PDAT>72</PDAT></BOLD></HIL><PDAT>. If the registry file or program version service </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> indicates that no new program version has been put in service, then the checkpoint in swap management library </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> returns to the old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> via return of check </PDAT><HIL><BOLD><PDAT>71</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>In the event that a new program version is to be placed in service, the checkpoint and swap management library </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> forks a child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> via link </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT>. The child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> is created with a complete copy of the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT>, including variables and state data information. The checkpoint and swap management library </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> terminates the old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> and executes the new program </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT>, via the exec command </PDAT><HIL><BOLD><PDAT>75</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>The new program </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> may contain new or deleted variables and/or routines. The new program </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> initializes its data and retrieves the state data from the child via communication link </PDAT><HIL><BOLD><PDAT>76</PDAT></BOLD></HIL><PDAT>. The new program </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> performs any needed data transformations on the retrieved state data. The new program </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> continues processing from the checkpoint utilizing the state information acquired from the child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT>, and, while not done, performs the registry check </PDAT><HIL><BOLD><PDAT>71</PDAT></BOLD></HIL><PDAT>, and the program task, and loops until done as described above with regard to program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT>. The apparatus and method for online replacement of a program running in a process using checkpoints will be explained further with regard to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT>, </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>A and </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>B.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>Illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> is the memory map of each user process for the system illustrated in FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>. The kernel </PDAT><HIL><BOLD><PDAT>33</PDAT></BOLD></HIL><PDAT> provides interprocess communication </PDAT><HIL><BOLD><PDAT>78</PDAT></BOLD></HIL><PDAT> facilitator interprocess communications via link </PDAT><HIL><BOLD><PDAT>76</PDAT></BOLD></HIL><PDAT>. Process A memory </PDAT><HIL><BOLD><PDAT>81</PDAT></BOLD></HIL><PDAT> includes a stack area </PDAT><HIL><BOLD><PDAT>82</PDAT></BOLD></HIL><PDAT>, a heap area </PDAT><HIL><BOLD><PDAT>83</PDAT></BOLD></HIL><PDAT>, an uninitialized data area </PDAT><HIL><BOLD><PDAT>84</PDAT></BOLD></HIL><PDAT>, an initialized data area </PDAT><HIL><BOLD><PDAT>85</PDAT></BOLD></HIL><PDAT>, and a text or program code area </PDAT><HIL><BOLD><PDAT>86</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>Process B memory </PDAT><HIL><BOLD><PDAT>91</PDAT></BOLD></HIL><PDAT> and any other processes also include stack area </PDAT><HIL><BOLD><PDAT>92</PDAT></BOLD></HIL><PDAT>, heap area </PDAT><HIL><BOLD><PDAT>93</PDAT></BOLD></HIL><PDAT>, the uninitialized data area </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT>, initialized data area </PDAT><HIL><BOLD><PDAT>95</PDAT></BOLD></HIL><PDAT>, and the text or program code area </PDAT><HIL><BOLD><PDAT>96</PDAT></BOLD></HIL><PDAT> in their process. The Process B (i.e. the child process) is an exact copy of the parent process A memory </PDAT><HIL><BOLD><PDAT>81</PDAT></BOLD></HIL><PDAT> when the fork command is executed, and explained above with reference to FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>Illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> is the prior methodology of performing an online update of a program version. The current process </PDAT><HIL><BOLD><PDAT>41</PDAT></BOLD></HIL><PDAT> is initialized at step </PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT> and executed at step </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>. A check for updates or changes to an application in the current process </PDAT><HIL><BOLD><PDAT>41</PDAT></BOLD></HIL><PDAT> is performed at step </PDAT><HIL><BOLD><PDAT>113</PDAT></BOLD></HIL><PDAT>. If the update or change to current process check is negative at step </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT>, then the current process </PDAT><HIL><BOLD><PDAT>41</PDAT></BOLD></HIL><PDAT> continues executing at step </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>. If the update/change to the current process </PDAT><HIL><BOLD><PDAT>41</PDAT></BOLD></HIL><PDAT> is affirmative at step </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT>, then the state information is saved to a file at step </PDAT><HIL><BOLD><PDAT>115</PDAT></BOLD></HIL><PDAT>. Next, the current process </PDAT><HIL><BOLD><PDAT>41</PDAT></BOLD></HIL><PDAT> is terminated at step </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>Execution of the new version of a program in the new process </PDAT><HIL><BOLD><PDAT>51</PDAT></BOLD></HIL><PDAT> is performed at step </PDAT><HIL><BOLD><PDAT>121</PDAT></BOLD></HIL><PDAT>. The new version of a program in the new process </PDAT><HIL><BOLD><PDAT>51</PDAT></BOLD></HIL><PDAT> with a new process ID first retrieves the state information from a file at step </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>. The new version of the program in the new process </PDAT><HIL><BOLD><PDAT>51</PDAT></BOLD></HIL><PDAT> then initializes the new process </PDAT><HIL><BOLD><PDAT>51</PDAT></BOLD></HIL><PDAT> with the saved state information retrieved from the stack or file at step </PDAT><HIL><BOLD><PDAT>123</PDAT></BOLD></HIL><PDAT>, and thereafter the new process </PDAT><HIL><BOLD><PDAT>51</PDAT></BOLD></HIL><PDAT> attempts to restart from the termination point of the old process </PDAT><HIL><BOLD><PDAT>41</PDAT></BOLD></HIL><PDAT> at step </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT>. Finally, the new process </PDAT><HIL><BOLD><PDAT>51</PDAT></BOLD></HIL><PDAT> is set as a current process in step </PDAT><HIL><BOLD><PDAT>129</PDAT></BOLD></HIL><PDAT> and continues execution at step </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>. As illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>, the prior art requires execution of the new version of the program in a new process.</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>The flow charts of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-10B</PDAT></FGREF><PDAT> show the architecture, functionality, and operation of a possible implementation of the replacing a running program code and data within the same process software. In this regard, each block represents a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that in some alternative implementations, the functions noted in the blocks may occur out of the order. For example, two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved, as will be further clarified hereinbelow.</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>Illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is the apparatus and method of the present invention. The apparatus and method provides a distinct advantage in that the termination of the old program and process is not required in order to execute a new version of a program.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>First, the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) is initialized at step </PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT> and, in step </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT>, the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> executes the old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> while not done at step </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT>. At step </PDAT><HIL><BOLD><PDAT>133</PDAT></BOLD></HIL><PDAT>, the old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> checks the registry </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>), via link </PDAT><HIL><BOLD><PDAT>72</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>), for updates or changes to the old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT>. The check for updates or changes to the old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT>, also includes accessing a program version service as described with regard to FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>. If, in step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT>, there is not an update or change to the old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT>, the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> returns to step </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT> to continue execution of old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>If at step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT>, the update or change to a old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) within the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> is indicated, then the old program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> runs a checkpoint </PDAT><HIL><BOLD><PDAT>73</PDAT></BOLD></HIL><PDAT> and saves the state information by forking a child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) at step </PDAT><HIL><BOLD><PDAT>135</PDAT></BOLD></HIL><PDAT>, herein further defined with regard to FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>A. Next, the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> replaces the entire memory area </PDAT><HIL><BOLD><PDAT>81</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>) with the code and data of the new version of the program </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) at step </PDAT><HIL><BOLD><PDAT>141</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>Next, the new program version </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT>, in the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT>, is executed at step </PDAT><HIL><BOLD><PDAT>142</PDAT></BOLD></HIL><PDAT>. In the preferred embodiment, this is performed by utilizing the exec system call within the Unix operating system. It is well known that there are equivalent system calls in other operating systems that would perform the same function.</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>The new program </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> in the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> then progresses to block </PDAT><HIL><BOLD><PDAT>143</PDAT></BOLD></HIL><PDAT> in which the state information is retrieved from the child </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT>, using a state retrieval routine </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT>, herein further defined with regard to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7B</PDAT></FGREF><PDAT> at step </PDAT><HIL><BOLD><PDAT>143</PDAT></BOLD></HIL><PDAT>. Once the state information has been retrieved and the new program </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> is initialized within parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT>, the new program </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> then jumps to the checkpoint code, at step </PDAT><HIL><BOLD><PDAT>149</PDAT></BOLD></HIL><PDAT>, for subsequent execution and then returns to step </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT> to execute within the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> and repeats the foregoing method.</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="0"><PTEXT><PDAT>The transfer of the process state from the old process (parent) to the new process (child) can be accomplished using several means. These include Sun&apos;s XDR/RPC, The Open Group&apos;s DCE RPC and ASN.1 compilers. Since the present invention doesn&apos;t require the remote capabilities of the RPC methods, so the present invention is a simplification of those processes. In fact, the use of the SUN XDR methodology used in conjunction with a simple, local interprocess communication mechanism is sufficient. Other similar methods can be constructed that take advantage of the local nature of the transfer.</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="0"><PTEXT><PDAT>The greater area of difficulty is automating the transfer of the process state so that an application programmer does not have to be made aware of the details of the transfer.</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="0"><PTEXT><PDAT>Illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7A</PDAT></FGREF><PDAT> is the initialization of the child state transfer routine </PDAT><HIL><BOLD><PDAT>150</PDAT></BOLD></HIL><PDAT> of the preferred embodiment. The child state transfer routine </PDAT><HIL><BOLD><PDAT>150</PDAT></BOLD></HIL><PDAT> is initialized at step </PDAT><HIL><BOLD><PDAT>151</PDAT></BOLD></HIL><PDAT>. Next, the child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) tries to detect the parent at step </PDAT><HIL><BOLD><PDAT>152</PDAT></BOLD></HIL><PDAT>. If no parent </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) is detected, the child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> then continues to repeat the check until a parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> is detected. Once a parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> is detected at step </PDAT><HIL><BOLD><PDAT>152</PDAT></BOLD></HIL><PDAT>, the child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> checks if all data has been sent at step </PDAT><HIL><BOLD><PDAT>153</PDAT></BOLD></HIL><PDAT>. If all the data is not sent, the child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> sends the next data identifier, type, size and value at step </PDAT><HIL><BOLD><PDAT>154</PDAT></BOLD></HIL><PDAT>, herein further defined with regard to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 8A</PDAT></FGREF><PDAT>, </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>A or </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>A. The child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> then returns to step </PDAT><HIL><BOLD><PDAT>153</PDAT></BOLD></HIL><PDAT> to again check if all data has been sent. Once all the data has been sent, the child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> terminates at step </PDAT><HIL><BOLD><PDAT>159</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="0"><PTEXT><PDAT>Illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7B</PDAT></FGREF><PDAT> is the state transfer routine </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> of the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>), according to the preferred embodiment of the present invention. First, the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> state transfer routine </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> tests if there is a child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) present at step </PDAT><HIL><BOLD><PDAT>161</PDAT></BOLD></HIL><PDAT>. If no child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> is detected at step </PDAT><HIL><BOLD><PDAT>161</PDAT></BOLD></HIL><PDAT>, the state transfer routine </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> progresses to continue step </PDAT><HIL><BOLD><PDAT>169</PDAT></BOLD></HIL><PDAT> where the new program </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) is executed.</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>If a child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> is detected, the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> state transfer routine </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> moves to step </PDAT><HIL><BOLD><PDAT>162</PDAT></BOLD></HIL><PDAT> and establishes contact with the child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> by setting up interprocess communication </PDAT><HIL><BOLD><PDAT>76</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>78</PDAT></BOLD></HIL><PDAT> between the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> and the child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT>. In the preferred embodiment, the interprocess communication </PDAT><HIL><BOLD><PDAT>76</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) and </PDAT><HIL><BOLD><PDAT>78</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>) is facilitated using sockets. Thereafter, the parent state transfer routine </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> establishes an identifier hash table </PDAT><HIL><BOLD><PDAT>211</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>B), a mapping address table </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>), and a reference list </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>). Then, at step </PDAT><HIL><BOLD><PDAT>164</PDAT></BOLD></HIL><PDAT>, parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> state transfer routine </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> tests to determine if all data has been retrieved. If there is more data to be retrieved, then at step </PDAT><HIL><BOLD><PDAT>165</PDAT></BOLD></HIL><PDAT>, parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> state transfer routine </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> retrieves the data identifier </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>A), type </PDAT><HIL><BOLD><PDAT>205</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>A), size </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9A</PDAT></FGREF><PDAT>) and value </PDAT><HIL><BOLD><PDAT>207</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9A</PDAT></FGREF><PDAT>) from the child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT>. The parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> receives data routine </PDAT><HIL><BOLD><PDAT>165</PDAT></BOLD></HIL><PDAT> is herein further defined with regard to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 8B</PDAT></FGREF><PDAT> or </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>B.</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="0"><PTEXT><PDAT>The parent state transfer routine </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> then returns to step </PDAT><HIL><BOLD><PDAT>164</PDAT></BOLD></HIL><PDAT> to again check if all data items have been retrieved, and loops between steps </PDAT><HIL><BOLD><PDAT>164</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>165</PDAT></BOLD></HIL><PDAT> until all data items have been retrieved. Once all the data items have been retrieved, then the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> state transfer routine </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> progresses to step </PDAT><HIL><BOLD><PDAT>166</PDAT></BOLD></HIL><PDAT> and checks if there is reference list data </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11</PDAT></FGREF><PDAT>) to be processed. If there is reference list data </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> to be processed at step </PDAT><HIL><BOLD><PDAT>166</PDAT></BOLD></HIL><PDAT>, then the parent state transfer routine </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> takes the old address </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT>/</PDAT><HIL><BOLD><PDAT>265</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11</PDAT></FGREF><PDAT>) and finds a corresponding new address </PDAT><HIL><BOLD><PDAT>258</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11</PDAT></FGREF><PDAT>) and updates that reference since it has the reference address </PDAT><HIL><BOLD><PDAT>263</PDAT></BOLD></HIL><PDAT>/</PDAT><HIL><BOLD><PDAT>266</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11</PDAT></FGREF><PDAT>) at step </PDAT><HIL><BOLD><PDAT>167</PDAT></BOLD></HIL><PDAT>. The updating of the reference list </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> is further defined with regard to FIG. </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="0"><PTEXT><PDAT>After the next reference new address is determined and the reference updated at step </PDAT><HIL><BOLD><PDAT>167</PDAT></BOLD></HIL><PDAT>, the routine then returns to check if there is more reference data to be processed at step </PDAT><HIL><BOLD><PDAT>166</PDAT></BOLD></HIL><PDAT>, and repeats the steps </PDAT><HIL><BOLD><PDAT>167</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>166</PDAT></BOLD></HIL><PDAT> loop if there is more reference data to be processed. If there is no more reference data to be processed, parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> state transfer routine </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT> then continues to step </PDAT><HIL><BOLD><PDAT>169</PDAT></BOLD></HIL><PDAT>, which returns for continued execution of the new program </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="0"><PTEXT><PDAT>Illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8A</PDAT></FGREF><PDAT> is the flowchart of the send next data item subroutine </PDAT><HIL><BOLD><PDAT>154</PDAT></BOLD></HIL><PDAT>A, in which the data variable is sent from the child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) to the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> (as referenced in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7A</PDAT></FGREF><PDAT>, step </PDAT><HIL><BOLD><PDAT>154</PDAT></BOLD></HIL><PDAT>). First, the child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> retrieves the ID of the next variable in step </PDAT><HIL><BOLD><PDAT>181</PDAT></BOLD></HIL><PDAT>. The child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> converts the variable data into a data packet </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9A</PDAT></FGREF><PDAT>) using the address and size to retrieve the data value at step </PDAT><HIL><BOLD><PDAT>182</PDAT></BOLD></HIL><PDAT>. The data packet </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT> is further defined in detail with regard to FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>A.</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="0"><PTEXT><PDAT>The child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> then sends the data packet to the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> at step </PDAT><HIL><BOLD><PDAT>183</PDAT></BOLD></HIL><PDAT> and then exits the send next data subroutine </PDAT><HIL><BOLD><PDAT>154</PDAT></BOLD></HIL><PDAT>A at step </PDAT><HIL><BOLD><PDAT>189</PDAT></BOLD></HIL><PDAT>. The send next data item subroutine called from </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7A</PDAT></FGREF><PDAT>, step </PDAT><HIL><BOLD><PDAT>154</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="0"><PTEXT><PDAT>Illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8B</PDAT></FGREF><PDAT> is the flowchart of the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> retrieve data subroutine </PDAT><HIL><BOLD><PDAT>165</PDAT></BOLD></HIL><PDAT>A. First, in step </PDAT><HIL><BOLD><PDAT>191</PDAT></BOLD></HIL><PDAT>, the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> reads a data packet </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9A</PDAT></FGREF><PDAT>) into a memory. The parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> performs a hash table lookup using the ID string at step </PDAT><HIL><BOLD><PDAT>192</PDAT></BOLD></HIL><PDAT>. Thereafter, the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> next checks to see if the data item has a data type or size change at step </PDAT><HIL><BOLD><PDAT>193</PDAT></BOLD></HIL><PDAT>. If the data item has changed its data type or its size, the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> executes a conversion or mapping routine </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11</PDAT></FGREF><PDAT>) at step </PDAT><HIL><BOLD><PDAT>194</PDAT></BOLD></HIL><PDAT>. After the conversion or mapping routine </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> is executed at step </PDAT><HIL><BOLD><PDAT>194</PDAT></BOLD></HIL><PDAT> or if the data item or size has not changed in step </PDAT><HIL><BOLD><PDAT>194</PDAT></BOLD></HIL><PDAT>, then the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> replaces the variable value with a new value at step </PDAT><HIL><BOLD><PDAT>195</PDAT></BOLD></HIL><PDAT>. The parent process retrieve data subroutine </PDAT><HIL><BOLD><PDAT>165</PDAT></BOLD></HIL><PDAT>A is then exited at step </PDAT><HIL><BOLD><PDAT>191</PDAT></BOLD></HIL><PDAT> and returns to step </PDAT><HIL><BOLD><PDAT>165</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>B).</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="0"><PTEXT><PDAT>Illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9A</PDAT></FGREF><PDAT> is the block diagram of the variable data packet </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9A</PDAT></FGREF><PDAT>) used by the child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) to send the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) the data items to be transferred from the child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> to the new parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT>. The first data segment within the variable data packet </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT> is the packet type field </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT>, used to indicate the type of packet and format (e.g., control data). The next data field is packet size field </PDAT><HIL><BOLD><PDAT>203</PDAT></BOLD></HIL><PDAT>, which indicates the length of the variable data packet </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT>. This data packet size field </PDAT><HIL><BOLD><PDAT>203</PDAT></BOLD></HIL><PDAT> allows the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> to identify the actual length of the variable data packet </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="0"><PTEXT><PDAT>The next item in the variable data packet </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT> is the identifier field </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT>. The identifier field </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> indicates the data item reference or identification name. The data type field </PDAT><HIL><BOLD><PDAT>205</PDAT></BOLD></HIL><PDAT> indicates the type of data for the variable. As known in the art, there are numerous different data types, including, but not limited to, integer, real number, text character, floating point numbers, arrays, linked lists, and the like. The size field </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> indicates the size of the variable. The value of the variable is identified in the value field </PDAT><HIL><BOLD><PDAT>207</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00069" LVL="0"><PTEXT><PDAT>Illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9B</PDAT></FGREF><PDAT> is the block diagram for the hash table static data translation process </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>. The hash table </PDAT><HIL><BOLD><PDAT>211</PDAT></BOLD></HIL><PDAT> contains numerous addresses of verification data structures </PDAT><HIL><BOLD><PDAT>213</PDAT></BOLD></HIL><PDAT>. The parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) uses the variable packet </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT> identifier </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> to find the corresponding data variable utilizing the hash table </PDAT><HIL><BOLD><PDAT>211</PDAT></BOLD></HIL><PDAT>. The hash table determines the address of </PDAT><HIL><BOLD><PDAT>213</PDAT></BOLD></HIL><PDAT> based on the hash of ID </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT>. The parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> next verifies that the data type </PDAT><HIL><BOLD><PDAT>205</PDAT></BOLD></HIL><PDAT>, data size </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT>, and data type from </PDAT><HIL><BOLD><PDAT>213</PDAT></BOLD></HIL><PDAT> match and the size from </PDAT><HIL><BOLD><PDAT>213</PDAT></BOLD></HIL><PDAT> match before using the value address in </PDAT><HIL><BOLD><PDAT>213</PDAT></BOLD></HIL><PDAT> to update the actual variable residing in the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> data segment </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="0"><PTEXT><PDAT>One alternative embodiment method for automating the transfer uses variable description information from a compiler (not shown) usually made available to a debugger. Using this information, the state transfer mechanism can transfer all variables allocated in the global data portion of the process. The transfer of heap allocated data values needs to be handled as part of the processing of the global values that reference the heap. The transfer mechanism needs to traverse all data structures allocated in the heap and transfer them as a hierarchy of components. This transfer might require programmer supplied descriptions of the data structures involved or explicit management of the data transfer depending on the data types used.</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="0"><PTEXT><PDAT>Using the system described in the commonly-assigned and co-pending U.S. Patent Application entitled &ldquo;MEMORY MANAGEMENT TECHNIQUES FOR ON-LINE REPLACEABLE SOFTWARE&rdquo;, Ser. No. 09/120,261 filed on jul. 21, 1998, herein incorporated by reference, to show how the heap allocated data can be transferred when all data to be preserved in the transfer is allocated using the system described therein.</PDAT></PTEXT></PARA>
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>In summary, an allocation of enduring memory, that is memory to be preserved, includes an application specific ID that the application can use for future reference to indicate the allocated data&apos;s type. The system described therein also includes routines for iterating through all of the memory allocated using the system.</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="0"><PTEXT><PDAT>Illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 10A</PDAT></FGREF><PDAT> is a flowchart of an alternate heap data send subroutine </PDAT><HIL><BOLD><PDAT>154</PDAT></BOLD></HIL><PDAT>B for sending heap data as performed within step </PDAT><HIL><BOLD><PDAT>154</PDAT></BOLD></HIL><PDAT> in FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>A. First, the child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) reads the heap allocation data at step </PDAT><HIL><BOLD><PDAT>221</PDAT></BOLD></HIL><PDAT>. If there is more heap allocation data to be processed, the child process then transfers the heap allocation data using the appropriate packet conversion function </PDAT><HIL><BOLD><PDAT>274</PDAT></BOLD></HIL><PDAT> at step </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT>. Thereafter, the child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> encodes each reference with the old address at step </PDAT><HIL><BOLD><PDAT>223</PDAT></BOLD></HIL><PDAT>. The child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> then packages and sends the data to the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) at step </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT>. The process then transfers to step </PDAT><HIL><BOLD><PDAT>229</PDAT></BOLD></HIL><PDAT> which exits the subroutine and returns to step </PDAT><HIL><BOLD><PDAT>154</PDAT></BOLD></HIL><PDAT> in FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>A.</PDAT></PTEXT></PARA>
<PARA ID="P-00074" LVL="0"><PTEXT><PDAT>Illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 10B</PDAT></FGREF><PDAT> is a flowchart of an alternate heap data receive subroutine </PDAT><HIL><BOLD><PDAT>165</PDAT></BOLD></HIL><PDAT>B for receiving heap data as referenced in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7B</PDAT></FGREF><PDAT>, at step </PDAT><HIL><BOLD><PDAT>165</PDAT></BOLD></HIL><PDAT>. First, the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) reads the data packet </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9A</PDAT></FGREF><PDAT>) at step </PDAT><HIL><BOLD><PDAT>231</PDAT></BOLD></HIL><PDAT>. The parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> then decodes the received heap object at step </PDAT><HIL><BOLD><PDAT>232</PDAT></BOLD></HIL><PDAT>, using the conversion function </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>). Next, the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> allocates new storage utilizing the e-malloc function (tags and tracks malloc&apos;d data) at step </PDAT><HIL><BOLD><PDAT>233</PDAT></BOLD></HIL><PDAT>. The parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> then stores the received heap object at step </PDAT><HIL><BOLD><PDAT>234</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00075" LVL="0"><PTEXT><PDAT>The parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> saves the new address created in the e-malloc function at step </PDAT><HIL><BOLD><PDAT>235</PDAT></BOLD></HIL><PDAT> in a mapping address table </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT>, herein described in further detail with reference to FIG. </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>. The parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> saves the old references and reference addresses in a reference list </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> herein defined in further detail with regard to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11</PDAT></FGREF><PDAT>, at step </PDAT><HIL><BOLD><PDAT>236</PDAT></BOLD></HIL><PDAT>. It then exits the subroutine at step </PDAT><HIL><BOLD><PDAT>239</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>Illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11</PDAT></FGREF><PDAT> is the block diagram for the heap allocation data translation process of the parent process </PDAT><HIL><BOLD><PDAT>61</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) and child process </PDAT><HIL><BOLD><PDAT>65</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) utilizing parent process translation apparatus </PDAT><HIL><BOLD><PDAT>251</PDAT></BOLD></HIL><PDAT> and child process translation apparatus </PDAT><HIL><BOLD><PDAT>271</PDAT></BOLD></HIL><PDAT>. For every data type that is to be allocated, the application program </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) creates a heap type dispatch table </PDAT><HIL><BOLD><PDAT>252</PDAT></BOLD></HIL><PDAT> between the ID </PDAT><HIL><BOLD><PDAT>253</PDAT></BOLD></HIL><PDAT> used when allocating that type and the conversion routine </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> used to convert that data type to and from a data packet </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>A). The transfer mechanism, utilizing the iteration method, will find all heap allocated objects as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, convert them to data packets </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>A), and transfer them using the appropriate conversion routine </PDAT><HIL><BOLD><PDAT>254</PDAT></BOLD></HIL><PDAT> applying the reverse conversion in the parent process variable translation </PDAT><HIL><BOLD><PDAT>251</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00077" LVL="0"><PTEXT><PDAT>Since it is likely that data will not be placed at the same address in the new program </PDAT><HIL><BOLD><PDAT>63</PDAT></BOLD></HIL><PDAT>, pointer linkages need to be updated in the parent process translation apparatus </PDAT><HIL><BOLD><PDAT>251</PDAT></BOLD></HIL><PDAT>. This is handled by sending a tag, consisting of the old location, along with every pointed to object as shown in FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>A. The old address </PDAT><HIL><BOLD><PDAT>257</PDAT></BOLD></HIL><PDAT> is placed in a table </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT> in the new process </PDAT><HIL><BOLD><PDAT>251</PDAT></BOLD></HIL><PDAT> as part of the transfer. The data contents of the table are the new addresses </PDAT><HIL><BOLD><PDAT>258</PDAT></BOLD></HIL><PDAT> in the new process </PDAT><HIL><BOLD><PDAT>251</PDAT></BOLD></HIL><PDAT>. All pointers references are transferred as a special type that is placed into a linked list </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> in the new process </PDAT><HIL><BOLD><PDAT>251</PDAT></BOLD></HIL><PDAT> with the original address </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT> and a pointer to the new pointer </PDAT><HIL><BOLD><PDAT>263</PDAT></BOLD></HIL><PDAT>. When the transfer is complete, the linked list </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> is processed an element at a time. The old address </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT> is used as the key to the table </PDAT><HIL><BOLD><PDAT>256</PDAT></BOLD></HIL><PDAT> where the new address </PDAT><HIL><BOLD><PDAT>258</PDAT></BOLD></HIL><PDAT> is retrieved and placed into the new referencing pointer.</PDAT></PTEXT></PARA>
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>The on-line replacement of a running program comprises an ordered listing of executable instructions for implementing logical functions, can be embodied in any computer-readable medium for use by or in connection with an instruction execution system, apparatus, or device, such as a computer-based system, processor-containing system, or other system that can fetch the instructions from the instruction execution system, apparatus, or device and execute the instructions. In the context of this document, a &ldquo;computer-readable medium&rdquo; can be any means that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.</PDAT></PTEXT></PARA>
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>The computer readable medium can be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a nonexhaustive list) of the computer-readable medium would include the following: an electrical connection (electronic) having one or more wires, a portable computer diskette (magnetic), a random access memory (RAM) (magnetic), a read-only memory (ROM) (magnetic), an erasable programmable read-only memory (EPROM or Flash memory) (magnetic), an optical fiber (optical), and a portable compact disc read-only memory (CDROM) (optical).</PDAT></PTEXT></PARA>
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>Note that the computer-readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via for instance optical scanning of the paper or other medium, then compiled, interpreted or otherwise processed in a suitable manner if necessary, and then stored in a computer memory.</PDAT></PTEXT></PARA>
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>The foregoing description has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Obvious modifications or variations are possible in light of the above teachings.</PDAT></PTEXT></PARA>
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>The embodiment or embodiments discussed were chosen and described to provide the best illustration of the principles of the invention and its practical application to thereby enable one of ordinary skill in the art to utilize the invention in various embodiments and with various modifications as are suited to the particular use contemplated. All such modifications and variations are within the scope of the invention as determined by the appended claims when interpreted in accordance with the breadth to which they are fairly and legally entitled.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>1. A computer apparatus for transferring data during online program replacement, said apparatus comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a means for executing a current program for providing a requested service; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a means for determining if a newer program exists for providing said requested service; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a means for forking a child process to save current program data if said newer program exists; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein said executing means further comprises: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a means for terminating said current program after saving said current program data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a means for executing said newer program to provide said requested service; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>wherein said newer program further comprises: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a means for utilizing said saved current program data during said newer program execution. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>2. The apparatus of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein said child process further comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a means for transferring said saved current program data to said newer program upon detecting the execution of said newer program. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>3. The apparatus of claim </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, wherein said transferring means further comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a means for retrieving a variable from said saved current program data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a means for converting said saved current program data into converted saved program data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a means for loading a container with said converted saved program data; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a means for transmitting said container to said newer program. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>4. The apparatus of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein said newer program further comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a means for establishing contact with said child process; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a means for receiving a container from said child process. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00087" LVL="0"><PTEXT><PDAT>5. The apparatus of claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, wherein said receiving means further comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a means for retrieving said saved current program data from said container; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a means for converting said saved current program data into a data identifier, a data type and a data value; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a means for mapping said data identifier, said data type and said data value into a program address mapping table; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a means for loading said data value into a corresponding data address in said newer program. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00088" LVL="0"><PTEXT><PDAT>6. The apparatus of claim </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT> wherein said mapping means further comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a means for transforming a characteristic of said data value, wherein said characteristic is selected from the group consisting of said data type, a data size, or said data value. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00089" LVL="0"><PTEXT><PDAT>7. A method for use in computer system for transferring data during online program replacement, said method comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing a current program for providing a requested service; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining if a newer program exists for providing said requested service; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>forking a child process to save current program data if said newer program exists; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>terminating said current program after saving said current program data if said newer program exists; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>executing said newer program to provide said requested service if said newer program exists; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>utilizing said saved current program data during said newer program execution. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00090" LVL="0"><PTEXT><PDAT>8. The method of claim </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>, wherein said forking a child process step further comprising the step of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>transferring said saved current program data to said newer program upon detecting the execution of said newer program. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00091" LVL="0"><PTEXT><PDAT>9. The method of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>, wherein said transferring step further comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>retrieving a variable from said saved current program data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>converting said saved current program data into converted saved program data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading a container with said converted saved program data; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>transmitting said container to said newer program. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00092" LVL="0"><PTEXT><PDAT>10. The apparatus of claim </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>, wherein said transfer logic further comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>logic configured to retrieve a variable from said saved service providing logic data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>logic configured to convert said saved service providing logic data into converted saved logic data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>logic configured to load a container with said converted saved logic data; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>logic configured to transmit said container to said newer service providing logic. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00093" LVL="0"><PTEXT><PDAT>11. The method of claim </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>, wherein said utilizing said current program data step further comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>establishing contact with said child process; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving a container from said child process. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00094" LVL="0"><PTEXT><PDAT>12. The method of claim </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>, wherein said utilizing said current program data step further comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>retrieving said saved current program data from said container; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>converting said saved current program data into a data identifier, a data type and a data value; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>mapping said data identifier, said data type and said data value into a program address mapping table; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>corresponding said data identifier to a data variable in said newer program; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>loading said data value into a data variable address in said newer program. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00095" LVL="0"><PTEXT><PDAT>13. The method of claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, wherein said corresponding step further comprising the step of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>transforming a characteristic of said data value, wherein said characteristic is selected from the group consisting of said data type, a data size, or said data value. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00096" LVL="0"><PTEXT><PDAT>14. A computer apparatus for transferring data during online program replacement, said apparatus comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a processor; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a logic configured to provide a requested service; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a logic configured to determine if a newer service providing logic exists for providing said requested service; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a logic configured to fork a child process to save service providing logic data if said newer service providing logic exists; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a logic configured to terminate said requested service providing logic after saving said service providing logic data if said newer service providing logic exists; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a logic configured to execute said newer service providing logic to provide said requested service if said newer service providing logic exists; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a logic configured to acquire and utilize said service providing logic data during said newer service providing logic execution. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00097" LVL="0"><PTEXT><PDAT>15. The apparatus of claim </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>, wherein said child process further comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>logic configured to transfer said saved service providing logic data to said newer service providing logic upon detecting the execution of said newer service providing logic. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00098" LVL="0"><PTEXT><PDAT>16. The apparatus of claim </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT>, wherein said acquire and utilize logic further comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>logic configured to establishing contact with said child process; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>logic configured to receive a container from said child process. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00017">
<PARA ID="P-00099" LVL="0"><PTEXT><PDAT>17. The apparatus of claim </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>, wherein said receive logic further comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>logic configured to retrieve said saved service providing logic data from said container; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>logic configured to convert said saved service providing logic data into a data identifier, a data type and a data value; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>logic configured to map said data identifier, said data type and said data value into a program address mapping table; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>logic configured to load said data value into a corresponding data address in said newer service providing logic. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00018">
<PARA ID="P-00100" LVL="0"><PTEXT><PDAT>18. The apparatus of claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT>, wherein said map logic further comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>logic configured to transform a characteristic of said data value, wherein said characteristic is selected from a group consisting of said data type, a data size, or said data value.</PDAT></PTEXT></CLMSTEP>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314567-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314567-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314567-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314567-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314567-20011106-D00004.TIF">
<EMI ID="EMI-D00005" FILE="US06314567-20011106-D00005.TIF">
<EMI ID="EMI-D00006" FILE="US06314567-20011106-D00006.TIF">
<EMI ID="EMI-D00007" FILE="US06314567-20011106-D00007.TIF">
<EMI ID="EMI-D00008" FILE="US06314567-20011106-D00008.TIF">
<EMI ID="EMI-D00009" FILE="US06314567-20011106-D00009.TIF">
<EMI ID="EMI-D00010" FILE="US06314567-20011106-D00010.TIF">
<EMI ID="EMI-D00011" FILE="US06314567-20011106-D00011.TIF">
<EMI ID="EMI-D00012" FILE="US06314567-20011106-D00012.TIF">
<EMI ID="EMI-D00013" FILE="US06314567-20011106-D00013.TIF">
<EMI ID="EMI-D00014" FILE="US06314567-20011106-D00014.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314568-20011106-D00000.TIF SYSTEM "US06314568-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314568-20011106-D00001.TIF SYSTEM "US06314568-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314568-20011106-D00002.TIF SYSTEM "US06314568-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314568-20011106-D00003.TIF SYSTEM "US06314568-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314568-20011106-D00004.TIF SYSTEM "US06314568-20011106-D00004.TIF" NDATA TIF>
<!ENTITY US06314568-20011106-D00005.TIF SYSTEM "US06314568-20011106-D00005.TIF" NDATA TIF>
<!ENTITY US06314568-20011106-D00006.TIF SYSTEM "US06314568-20011106-D00006.TIF" NDATA TIF>
<!ENTITY US06314568-20011106-D00007.TIF SYSTEM "US06314568-20011106-D00007.TIF" NDATA TIF>
<!ENTITY US06314568-20011106-D00008.TIF SYSTEM "US06314568-20011106-D00008.TIF" NDATA TIF>
<!ENTITY US06314568-20011106-D00009.TIF SYSTEM "US06314568-20011106-D00009.TIF" NDATA TIF>
<!ENTITY US06314568-20011106-D00010.TIF SYSTEM "US06314568-20011106-D00010.TIF" NDATA TIF>
<!ENTITY US06314568-20011106-D00011.TIF SYSTEM "US06314568-20011106-D00011.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314568</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>09226763</PDAT></DNUM></B210>
<B211US><PDAT>09</PDAT></B211US>
<B220><DATE><PDAT>19990106</PDAT></DATE></B220>
</B200>
<B300>
<B310><DNUM><PDAT>10-013161</PDAT></DNUM></B310>
<B320><DATE><PDAT>19980108</PDAT></DATE></B320>
<B330><CTRY><PDAT>JP</PDAT></CTRY></B330>
</B300>
<B500>
<B510>
<B511><PDAT>H04N  710</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>725 34</PDAT></B521>
<B522><PDAT>725 38</PDAT></B522>
<B522><PDAT>725 61</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Broadcast-program viewing method and system to allow customized viewing based on user input</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4750213</PDAT></DNUM>
<DATE><PDAT>19880600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Novak</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>455 67</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5410344</PDAT></DNUM>
<DATE><PDAT>19950400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Graves et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  1</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5589945</PDAT></DNUM>
<DATE><PDAT>19961200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Abecassis</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>386 83</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6002394</PDAT></DNUM>
<DATE><PDAT>19991200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Schein et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345327</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6025868</PDAT></DNUM>
<DATE><PDAT>20000200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Russo</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  3</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6160570</PDAT></DNUM>
<DATE><PDAT>20001200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Sitnik</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  1</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>2-310877</PDAT></DNUM>
<DATE><PDAT>19901200</PDAT></DATE>
<CTRY><PDAT>JP</PDAT></CTRY>
</DOC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>3-80782</PDAT></DNUM>
<DATE><PDAT>19910400</PDAT></DATE>
<CTRY><PDAT>JP</PDAT></CTRY>
</DOC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>8-235840</PDAT></DNUM>
<DATE><PDAT>19960900</PDAT></DATE>
<CTRY><PDAT>JP</PDAT></CTRY>
</DOC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>9-70011</PDAT></DNUM>
<DATE><PDAT>19970300</PDAT></DATE>
<CTRY><PDAT>JP</PDAT></CTRY>
</DOC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>9-182019</PDAT></DNUM>
<DATE><PDAT>19970700</PDAT></DATE>
<CTRY><PDAT>JP</PDAT></CTRY>
</DOC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>9-200687</PDAT></DNUM>
<DATE><PDAT>19970700</PDAT></DATE>
<CTRY><PDAT>JP</PDAT></CTRY>
</DOC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>9-312811</PDAT></DNUM>
<DATE><PDAT>19971200</PDAT></DATE>
<CTRY><PDAT>JP</PDAT></CTRY>
</DOC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B562><NCIT><STEXT><PDAT>Japanese Office Action issued Jan. 28, 2000 a related application and English translation of revelant portions.</PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
</B560>
<B570>
<B577><PDAT>20</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>348  1</PDAT></B582>
<B582><PDAT>348  7</PDAT></B582>
<B582><PDAT>348 10</PDAT></B582>
<B582><PDAT>455  42</PDAT></B582>
<B582><PDAT>345327</PDAT></B582>
<B582><PDAT>345328</PDAT></B582>
<B582><PDAT>709219</PDAT></B582>
<B582><PDAT>725  9</PDAT></B582>
<B582><PDAT>725 25</PDAT></B582>
<B582><PDAT>725 32</PDAT></B582>
<B582><PDAT>725 35</PDAT></B582>
<B582><PDAT>725 34</PDAT></B582>
<B582><PDAT>725 37</PDAT></B582>
<B582><PDAT>725 51</PDAT></B582>
<B582><PDAT>725 59</PDAT></B582>
<B582><PDAT>725100</PDAT></B582>
<B582><PDAT>725 38</PDAT></B582>
<B582><PDAT>725109</PDAT></B582>
<B582><PDAT>725 46</PDAT></B582>
<B582><PDAT>725 61</PDAT></B582>
</B580>
<B590><B595><PDAT>11</PDAT></B595><B596><PDAT>14</PDAT></B596><B597US>
</B590>
</B500>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Katsuhiro</PDAT></FNM><SNM><STEXT><PDAT>Ochiai</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Tokyo</PDAT></CITY>
<CTRY><PDAT>JP</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Hiroshi</PDAT></FNM><SNM><STEXT><PDAT>Matoba</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Tokyo</PDAT></CITY>
<CTRY><PDAT>JP</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>NEC Corporation</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Tokyo</PDAT></CITY><CTRY><PDAT>JP</PDAT></CTRY></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>03</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Ostrolenk, Faber, Gerb &amp; Soffen, LLP</PDAT></STEXT></ONM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Victor R.</PDAT></FNM><SNM><STEXT><PDAT>Kostak</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B748US><PDAT>2611</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A broadcast-program viewing method is provided, which is capable of optionally viewing broadcast programs transmitted by a broadcasting station according to a viewer&apos;s taste or desire. In the step (a), original broadcast programs transmitted by a broadcasting station are received and stored onto an information storage medium capable of random access. Each of the received original broadcast programs contains items having attribute information. In the step (b), the attribute information for the items of the received original broadcast programs is acquired and stored onto the information storage medium. In the step (c), viewer&apos;s information is specified according to a viewer&apos;s taste or desire. In the step (d), the attribute information for the items of the received original broadcast programs and the specified viewer&apos;s information are compared to designate at least one desired item in the items of the received original broadcast programs having a desired relationship with the inputted viewer&apos;s information. In the step (e), the at least one desired item in the items of the received original broadcast programs are reproduced according to the specified viewer&apos;s information as a viewer&apos;s program.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>1. Field of the Invention</PDAT></PTEXT></PARA>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>The present invention relates to a broadcast-program viewing method and system and more particularly, to a viewing method and a viewing system of broadcast programs such as television (TV) programs capable of viewing the programs from a different angle from those transmitted by a broadcast station or stations according to a viewer&apos;s or subscriber&apos;s taste.</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>2. Description of the Prior Art</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> schematically shows a receiving method of TV programs transmitted from various broadcasting stations.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>As seen from </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, a broadcasting station </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT> transmits a radio wave conveying a lot of TV programs to the sky. The radio wave thus transmitted travels through the sky and then, is received by a receiving antenna </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> mounted by a viewer or subscriber. The radio wave thus received is sent to a broadcast receiving terminal, i.e., a TV set </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>, provided by the viewer. The TV set </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> extracts the transmitted picture and sound information from the received radio wave and reproduces them at a screen and speakers of the TV set </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>. Through these processes, the viewer becomes able to view the desired TV programs transmitted from the broadcasting station </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT> as necessary.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>The transmitted TV programs may be recorded onto a video tape by the use of a video tape recorder (VTR). In this case, the viewer is able to view the recorded programs at any time he wants.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>Although the above explanation describes the TV programs, the same explanation may be applied to sound broadcasting (i.e., radio) programs. In this case, a listener listens directly the transmitted programs at a radio receiver, or listens indirectly the recorded programs onto a cassette tape by the use of a tape recorder.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>Typically, the contents of the TV programs have been fixed prior to the transmission from the broadcasting station </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT>, and it has been difficult for the viewers or subscribers to apply any revision and/or modification to the TV programs after the program editing has been completed. Therefore, it has been usual that the viewers view the TV programs without any change as transmitted from the broadcasting station </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2A</PDAT></FGREF><PDAT> schematically shows the configuration of a TV program PR transmitted from the broadcasting station </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT>. This program PR may be termed an &ldquo;original TV program&rdquo;. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2B</PDAT></FGREF><PDAT> schematically shows the configuration of a TV program PR&prime; viewed by the viewer. This program PR&prime; may be termed a &ldquo;viewer&apos;s TV program&rdquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>As seen from </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2A</PDAT></FGREF><PDAT>, the original TV program PR contains items A, B, C, D, and E and F sequentially arranged with time. Also, as seen from </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2B</PDAT></FGREF><PDAT>, the viewer&apos;s TV program PR&prime; contains the same items A, B, C, D, E and F as that of the original TV program PR, and the timing order or arrangement of these items A, B, C, D, and E and F is the same as that of the original TV program PR.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>Conventionally, to change the order of sequentially-transmitted original TV programs and/or to select and combine desired ones of the original TV programs or their desired items, the viewer needs to store the programs onto a video tape or tapes by using his VTR. Then, he needs to reedit the stored original TV programs as desired by fast-forwarding and/or rewinding the video tape or tapes and/or by selectively dubbing the necessary items of the programs from one of the stored tapes to another. Thus, it is essential for the viewer to carry out complicated and/or troublesome operations for this purpose.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>Accordingly, an object of the present invention is to provide a broadcast-program viewing method and a broadcast-program viewing system that make it possible to view broadcast programs transmitted by a broadcasting station or stations from a different angle.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>Another object of the present invention is to provide a broadcast-program viewing method and a broadcast-program viewing system capable of optionally viewing broadcast programs transmitted by a broadcasting station or stations according to a viewer&apos;s taste or desire.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>The above objects together with others not specifically mentioned will become clear to those skilled in the art from the following description.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>According to a first aspect of the present invention, a broadcast-program viewing method is provided, which is comprised of the following steps (a) to (e).</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="1"><PTEXT><PDAT>(a) Original broadcast programs transmitted by a broadcasting station are received and stored onto an information storage medium capable of random access. Each of the received original broadcast programs contains items having attribute information.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="1"><PTEXT><PDAT>(b) The attribute information for the items of the received original broadcast programs is acquired and stored onto the information storage medium.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="1"><PTEXT><PDAT>(c) Viewer&apos;s information is specified according to a viewer&apos;s taste or desire.</PDAT></PTEXT></PARA>
<PARA ID="P-00020" LVL="1"><PTEXT><PDAT>(d) The attribute information for the items of the received original broadcast programs and the specified viewer&apos;s information are compared to designate at least one desired item in the items of the received original broadcast programs having a desired relationship with the specified viewer&apos;s information.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="1"><PTEXT><PDAT>(e) The at least one desired item designated in the items of the received original broadcast programs is reproduced according to the specified viewer&apos;s information as a viewer&apos;s program.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><PDAT>With the broadcast-program viewing method according to the first aspect of the present invention, each of the received original broadcast programs contains the items having the attribute information, and the attribute information for the items is acquired and stored onto the information storage medium.</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><PDAT>Then, the attribute information for the items of the received original broadcast programs is compared with the specified viewer&apos;s information, thereby designating at least one desired item in the items of the received original broadcast programs having the desired relationship with the specified viewer&apos;s information. Subsequently, the at least one desired item designated in the items of the received original broadcast programs is reproduced according to the specified viewer&apos;s information as the viewer&apos;s program.</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><PDAT>As a result, the viewer is able to view the original broadcast programs transmitted by the broadcasting station from a different angle. In other words, because the viewer&apos;s program is readily varied by changing the viewer&apos;s information, the viewer is able to optionally view the original broadcast programs transmitted by the broadcasting station according to his taste or desire.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><PDAT>In a preferred embodiment of the method according to the first aspect of the present invention, the items of the received original broadcast programs are selected and/or rearranged along a time axis according to the specified viewer&apos;s information in the step (e).</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><PDAT>In still another preferred embodiment of the method according to the first aspect of the present invention, the attribute information for the items of the received original broadcast programs is acquired through a different path from a broadcasting wave conveying the original broadcast programs.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>In this case, the attribute information may be acquired through a communication line such as the INTERNET using a communication receiver such as a modem.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><PDAT>In a further preferred embodiment of the method according to the first aspect of the present invention, the attribute information for the items of the received original broadcast programs is acquired through a broadcasting wave conveying the original broadcast programs.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><PDAT>In this case, the attribute information is preferably transmitted from the broadcasting station transmitting the original programs and then, received along with the original broadcast programs. However, the attribute information may be transmitted from a different broadcasting station from the broadcasting station transmitting the original programs.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><PDAT>In a still further preferred embodiment of the method according to the first aspect of the present invention, the viewer&apos;s program is (i) a digest of at least one of the broadcast programs transmitted by the broadcasting station, (ii) a program obtained by reediting at least two ones of the broadcast programs transmitted by the broadcasting station, or (iii) a program obtained by rearranging the items of the broadcast programs transmitted by the broadcasting station along a time axis.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><PDAT>According to a second aspect of the present invention, a broadcast-program viewing system is provided, which is comprised of the following elements (a) to (e).</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="1"><PTEXT><PDAT>(a) An information storage subsystem for storing original broadcast programs transmitted by a broadcasting station onto an information storage medium. The information storage subsystem is capable of random access to the information storage medium. Each of the original broadcast programs contains items having attribute information.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="1"><PTEXT><PDAT>(b) An attribute information receiver for acquiring the attribute information for the items of the original broadcast programs.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="1"><PTEXT><PDAT>(c) An input subsystem for allowing a viewer to input viewer&apos;s information according to the viewer&apos;s taste or desire.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="1"><PTEXT><PDAT>(d) A controller for controlling the information storage subsystem and the attribute information receiver in such a way that the attribute information for the items of the received original broadcast programs and the inputted viewer&apos;s information are compared to designate at least one desired item in the items of the received original broadcast programs having a desired relationship with the inputted viewer&apos;s information.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="1"><PTEXT><PDAT>(e) An output subsystem for reproducing the designated at least one desired item in the items of the received original broadcast programs according to the inputted viewer&apos;s information as a viewer&apos;s program.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><PDAT>With the broadcast-program viewing system according to the second aspect of the present invention, the attribute information for the items of the received original broadcast programs is acquired by the attribute information receiver and stored onto the random-accessible information storage medium by the use of the information storage subsystem. Then, under the control of the controller, the attribute information for the items is compared with the inputted viewer&apos;s information to designate the at least one desired item in the items of the received original broadcast programs having the desired relationship with the inputted viewer&apos;s information. The at least one desired item designated in the items of the received original broadcast programs are reproduced by the output subsystem according to the inputted viewer&apos;s information as the viewer&apos;s program.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>As a result, the viewer is able to view the broadcast programs transmitted by the broadcasting station from a different angle. In other words, because the viewer&apos;s program is readily varied by changing the viewer&apos;s information, the viewer is able to optionally view the broadcast programs transmitted by the broadcasting station according to his taste or desire.</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>In a preferred embodiment of the system according to the second aspect of the present invention, the items of the received original broadcast programs are selected and/or rearranged along a time axis according to the inputted viewer&apos;s information.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>In another preferred embodiment of the system according to the second aspect of the present invention, the attribute information receiver acquires the attribute information for the items of the received original broadcast programs through a different path from a broadcasting wave conveying the original broadcast programs.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>In this case, the attribute information may be acquired through a communication line such as the INTERNET using a communication receiver such as a modem.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>In a still another preferred embodiment of the system according to the second aspect of the present invention, the attribute information receiver acquires the attribute information for the items of the received original broadcast programs through a broadcasting wave conveying the original broadcast programs.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>In this case, the attribute information is preferably transmitted from the broadcasting station transmitting the original programs and then, received along with the original broadcast programs. However, the attribute information may be transmitted from a different broadcasting station from the broadcasting station transmitting the original programs.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>In a further preferred embodiment of the system according to the second aspect of the present invention, the controller controls the information storage subsystem and the attribute information receiver in such a way that the viewer&apos;s program is (i) a digest of at least one of the original broadcast programs transmitted by the broadcasting station, (ii) a program obtained by reediting at least two ones of the original broadcast programs transmitted by the broadcasting station, or (iii) a program obtained by rearranging the items of at least one of the original broadcast programs transmitted by the broadcasting station along a timing axis.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>In the broadcast-program viewing method and system according to the first and second aspects of the present invention, the words &ldquo;broadcast program&rdquo;, &ldquo;item&rdquo;, &ldquo;attribute information&rdquo;, and &ldquo;viewer&apos;s information&rdquo;, has the following meanings.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>The &ldquo;broadcast program&rdquo; means a broadcast program such as a TV program transmitted from a broadcasting station with or without wire. For example, any program such as &ldquo;Seven O&apos;clock News&rdquo; and &ldquo;Young&apos;s and Old&apos;s Songs&rdquo; provided by the terrestrial or satellite broadcasting system or the cable television (CATV) system, e.g., the Nihon Hoso Kyokai (NHK), Sky PerfecTV&excl;&reg;, or the like.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>The &ldquo;broadcast program&rdquo; consists of elements or constituents that are sequentially arranged along the time axis. In other words, the &ldquo;broadcast program&rdquo; is the combination of the sequentially-arranged elements or constituents. Each of the elements or constituents of the &ldquo;broadcast program&rdquo; is optionally defined or partitioned by the &ldquo;start time&rdquo; or &ldquo;start frame&rdquo; and the &ldquo;end time&rdquo; or &ldquo;end frame&rdquo;. Each of the elements or constituents typically contains at least one scene.</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>The &ldquo;item&rdquo; is equal to any one of the elements or constituents of the &ldquo;broadcast program&rdquo;. Therefore, similar to the elements or constituents of the &ldquo;broadcast program&rdquo;, the &ldquo;item&rdquo; is optionally defined or partitioned by the &ldquo;start time&rdquo; or &ldquo;startframe&rdquo; and the &ldquo;endtime&rdquo; or &ldquo;endframe &rdquo; in the &ldquo;broadcast program&rdquo; concerned.</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>For example, it is supposed that the TV program termed the &ldquo;Seven O&apos;clock News&rdquo; is designed to be started at the time 7:00:00 (i.e., just seven o&apos;clock) and ended at the time 8:00:00 (i.e., just eight o&apos;clock) and ended at the time. In this case, if the &ldquo;weather forecast&rdquo; is designed to be broadcasted from the start time 7:40:00 (i.e., 40 minutes past seven) to the end time 7:41:30 (i.e., 41 minutes and 30 seconds past seven) in the &ldquo;Seven O&apos;clock News&rdquo;, the &ldquo;weather forecast&rdquo; is an element or constituent of the &ldquo;Seven O&apos;clock News&rdquo;. It can be said that the &ldquo;weather forecast&rdquo; is an &ldquo;item&rdquo; of the &ldquo;Seven O&apos;clock News&rdquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>A part of the &ldquo;weather forecast&rdquo; (for example, only one scene displaying a single weather map in the &ldquo;weather forecast&rdquo;) may be defined as an &ldquo;item&rdquo; of the &ldquo;Seven O&apos;clock News&rdquo;. This is realized by changing the above-described start and end times.</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>The &ldquo;attribute information&rdquo; means the information representing the content of the &ldquo;item&rdquo;, which is defined to be able to be compared with the inputted or specified &ldquo;viewer&apos;s information&rdquo; for the purpose of designating the at least one desired item.</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>Typically, the &ldquo;attribute information&rdquo; contains at least one &ldquo;topic&rdquo; or &ldquo;subject&rdquo; about the content of the &ldquo;item&rdquo;, which serves as a keyword at the comparison with the &ldquo;viewer&apos;s information&rdquo;. The &ldquo;attribute information&rdquo; may contain some additional data indicating the &ldquo;class&rdquo; of the content of the &ldquo;item&rdquo;, such as the headline, show business, professional baseball, weather, and greetings. The &ldquo;topic&rdquo; or &ldquo;subject&rdquo; may be simply represented by the use of a character string. The additional data also may be represented by the use of a character string.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>The &ldquo;viewer&apos;s information&rdquo; means the information representing the taste or desire of the viewer. In other words, the &ldquo;viewer&apos;s information&rdquo; means the information specifying the &ldquo;item or items&rdquo; of the &ldquo;broadcast program or programs&rdquo; that the viewer wants or does not want to view.</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>The &ldquo;viewer&apos;s information&rdquo; may simply contain any keyword and/or code. In this case, to compare the &ldquo;viewer&apos;s information&rdquo; with the &ldquo;attribute information&rdquo;, the keyword and/or code of the &ldquo;viewer&apos;s information&rdquo; is compared with the &ldquo;topic&rdquo; or &ldquo;subject&rdquo; or &ldquo;class&rdquo; of the &ldquo;attribute information&rdquo;.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>In order that the present invention may be readily carried into effect, it will now be described with reference to the accompanying drawings.</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a schematic illustration showing a receiving method of broadcast programs transmitted from a broadcasting station.</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 2A and 2B</PDAT></FGREF><PDAT> are schematic illustrations showing the configuration of an original TV program transmitted from the broadcasting station and that of a viewer&apos;s TV program viewed by the viewer, respectively.</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> is a flowchart showing the steps of a broadcast-program viewing method according to a first embodiment of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> is a schematic illustration showing the configuration of an original TV program transmitted from a broadcasting station, in which the relationship between the timing arrangement of the items of the program and their attribute information are also shown.</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> is a block diagram showing the configuration of a broadcast-program viewing system according to the first embodiment of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is a schematic illustration showing the configuration of a viewer&apos;s program viewed by the viewer, in which the items of the original TV program are selected.</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is a schematic illustration showing the configuration of a viewer&apos;s program viewed by the viewer, in which the time order of the same items of the original TV program are rearranged.</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 8A and 8B</PDAT></FGREF><PDAT> are schematic illustrations showing the configuration of two original TV programs transmitted from the broadcasting station and that of a viewer&apos;s program viewed by the viewer, respectively, in which the items of the two original TV programs are selected and mixed in the viewer&apos;s program.</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT> is a schematic illustration showing the program map or list for the viewer&apos;s program shown in FIG. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 10</PDAT></FGREF><PDAT> is a schematic illustration showing the program map or list for the viewer&apos;s program shown in FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 11</PDAT></FGREF><PDAT> is a schematic illustration showing the program map or list for the viewer&apos;s program shown in FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT> is a block diagram showing the configuration of a broadcast-program viewing system according to a second embodiment of the present invention.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</PDAT></STEXT></H>
<PARA ID="P-00068" LVL="0"><PTEXT><PDAT>Preferred embodiments of the present invention will be described bellow while referring to the drawings attached.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>FIRST EMBODIMENT</PDAT></STEXT></H>
<PARA ID="P-00069" LVL="0"><PTEXT><PDAT>A broadcast-program viewing method according to a first embodiment of the present invention is carried out according to an algorithm shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> by the use of a broadcast-program viewing system shown in FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="0"><PTEXT><PDAT>As seen from </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>, the broadcast-program viewing system according to the first embodiment of present invention is comprised of a TV tuner </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>, a hard disk drive </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, a modem </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, a main memory </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>, a controller or Central Processing Unit (CPU) </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT>, an output subsystem </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT> (i.e., a color display and speakers), and an input subsystem </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT> (i.e., a keyboard and a mouse or a control pad)</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="0"><PTEXT><PDAT>A digital-modulated radio wave transmitted from a broadcasting station (not shown) and conveying various original TV programs is received by an antenna (not shown), thereby outputting a radio signal S</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>The TV tuner </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> receives the radio signal S</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and selects a desired channel of a viewer to output a program signal S</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> to the hard disk unit </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="0"><PTEXT><PDAT>The hard disk drive </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> stores the original TV programs of the desired channel that have been transmitted by the program signal S</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> onto a hard disk </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a</PDAT></ITALIC></HIL><PDAT>. The hard disk drive </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> is capable of random access to the disk </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a</PDAT></ITALIC></HIL><PDAT>, i.e., the stored information.</PDAT></PTEXT></PARA>
<PARA ID="P-00074" LVL="0"><PTEXT><PDAT>The modem </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> receives a communication signal S</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> through a communication line </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT> such as the INTERNET. The communication signal S</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> contains the attribute information of the original TV programs of the desired channel that have been transmitted from the broadcasting station. The attribute information of the original TV programs is readily prepared by automatically extracting the predesigned keywords and/or codes from the original TV programs at the broadcast station itself or any other organization.</PDAT></PTEXT></PARA>
<PARA ID="P-00075" LVL="0"><PTEXT><PDAT>Subsequently, the modem </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> sends the acquired attribute information of the original TV programs to the hard disk drive </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> as an attribute information signal S</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>. The attribute information is then stored onto the hard disk </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>in the hard disk drive </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>The attribute information contains at least one &ldquo;topic&rdquo; or &ldquo;subject&rdquo; about the content of the item, which serves as a keyword at the comparison with the viewer&apos;s information. The attribute information further contains an additional data indicating the &ldquo;class&rdquo; of the content of the &ldquo;item&rdquo;, such as the headline, show business, professional baseball, weather, and greetings. The &ldquo;topic&rdquo; or &ldquo;subject&rdquo; and &ldquo;class&rdquo; are simply represented by the use of a character string or strings.</PDAT></PTEXT></PARA>
<PARA ID="P-00077" LVL="0"><PTEXT><PDAT>The input subsystem </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT> is used to input the viewer&apos;s information according to the viewer&apos;s taste or desire into this broadcast-program viewing system. The input system </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT> sends a viewer&apos;s information signal S</PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT> according to the viewer&apos;s information thus inputted to the hard disk drive </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> through a bus line </PDAT><HIL><BOLD><PDAT>19</PDAT></BOLD></HIL><PDAT>. The inputted viewer&apos;s information is then stored in the hard disk </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the drive </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>The controller or CPU </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT> sends control signals SC to the TV tuner </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>, the hard disk unit </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, and the modem </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, thereby controlling the whole operation of this broadcast-program viewing system. Under the control of the CPU </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT>, a viewer&apos;s program signal S</PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT> reproducing a viewer&apos;s TV program according to the viewer&apos;s taste or desire is generated as an output signal of this broadcast-program viewing system by the use of the program signal S</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, the attribute information signal S</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, and the viewer&apos;s information signal S</PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>. The viewer&apos;s program signal S</PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT> is then sent to the output subsystem </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>The output subsystem </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT> is used to reproduce the viewer&apos;s TV program produced in this broadcast-program viewing system. The output subsystem </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT> typically contains a color monitor (not shown) and speakers (not shown). The reproduced pictures of the viewer&apos;s TV program are displayed on a screen of the color monitor and the reproduced sounds of the viewer&apos;s TV program are emitted by the speakers.</PDAT></PTEXT></PARA>
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>Next, the broadcast-program viewing method according to the first embodiment of the present invention is explained below with reference to FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>In the step </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the original TV programs transmitted by the broadcasting station are received by the antenna, and the desired channel or channels of the viewer is/are selected by the TV tuner </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>. The selected original TV programs are stored onto the hard disk </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>in the hard disk drive </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>If the original TV programs are transmitted by an analog-modulated radio wave, the original TV programs are converted to digital data by a use of a suitable encoder (not shown) prior to the storage onto the hard disk </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a. </PDAT></ITALIC></HIL></PTEXT></PARA>
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>Each of the received original broadcast programs contains at least one item having attribute information. Therefore, the attribute information for the item or items of the received original TV programs is acquired by the modem </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> through the communication line </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT> and then, the acquired attribute information is stored onto the hard disk </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>in the hard disk drive </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> in the step </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. The attribute information may be acquired during, before, or after the broadcasting or receiving time of the original TV programs.</PDAT></PTEXT></PARA>
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>Thereafter, in the step </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>, the viewer&apos;s information according to the viewer&apos;s taste or desire is inputted by the viewer into this broadcast-program viewing system using the input subsystem </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>In the step </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, the stored attribute information for the items of the received original TV programs and the inputted viewer&apos;s information are compared under the control of the CPU </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT>. Specifically, the attribute information for the items of the received original TV programs and the viewer&apos;s information are read out from the hard disk </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>to thereby find the desired items of the received original TV programs that satisfy the viewer&apos;s information.</PDAT></PTEXT></PARA>
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>Using the desired items of the received original TV programs thus found, a viewer&apos;s program map or list is formed and stored onto the hard disk </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>in the step </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00087" LVL="0"><PTEXT><PDAT>Simply, the viewer&apos;s information consists of at least one keyword or character string that specifies the desired items of the original TV programs. Usually, the viewer&apos;s information further consists of an additional data specifying the reproduction order or time arrangement of the desired items. On the other hand, the attribute information contains at least one &ldquo;topic&rdquo; or &ldquo;subject&rdquo; and &ldquo;class&rdquo; data about the content of the item. Therefore, the viewer&apos;s program map or list includes the items of the original TV programs relating to the viewer&apos;s information, the comparison result, and the reproduction order of the desired items.</PDAT></PTEXT></PARA>
<PARA ID="P-00088" LVL="0"><PTEXT><PDAT>Finally, in the step </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>, the desired items of the received original TV programs are reproduced by the output subsystem </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT> according to the reproduction order in the program map formed in the step </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT> as a viewer&apos;s program.</PDAT></PTEXT></PARA>
<PARA ID="P-00089" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> shows a configuration example of one of the received original TV programs, in which this original program PR contains six items A, B, C, D, E, and F arranged along a time axis.</PDAT></PTEXT></PARA>
<PARA ID="P-00090" LVL="0"><PTEXT><PDAT>As seen from </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, the first item A, which starts at the time to and ends at the time t</PDAT><HIL><SB><PDAT>1</PDAT></SB></HIL><PDAT>, has attribute information A-INF(1). The second item B, which starts at the time t</PDAT><HIL><SB><PDAT>1 </PDAT></SB></HIL><PDAT>and ends at a time t</PDAT><HIL><SB><PDAT>1</PDAT></SB></HIL><PDAT>, has attribute information A-INF(2). The third item C, which starts at the time t</PDAT><HIL><SB><PDAT>2 </PDAT></SB></HIL><PDAT>and ends at the time t</PDAT><HIL><SB><PDAT>3</PDAT></SB></HIL><PDAT>, has attribute information A-INF(3). The fourth item D, which starts at the time t</PDAT><HIL><SB><PDAT>3 </PDAT></SB></HIL><PDAT>and ends at the time t</PDAT><HIL><SB><PDAT>4</PDAT></SB></HIL><PDAT>, has attribute information A-INF(4). The fifth item E, which starts at the time t</PDAT><HIL><SB><PDAT>4 </PDAT></SB></HIL><PDAT>and ends at the time t</PDAT><HIL><SB><PDAT>5</PDAT></SB></HIL><PDAT>, has attribute information A-INF(5). The sixth item F, which starts at the time t</PDAT><HIL><SB><PDAT>5 </PDAT></SB></HIL><PDAT>and ends at the time t</PDAT><HIL><SB><PDAT>6</PDAT></SB></HIL><PDAT>, has attribute information A-INF(6).</PDAT></PTEXT></PARA>
<PARA ID="P-00091" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> shows a configuration of the viewer&apos;s program PR&prime;, in which the viewer&apos;s program PR&prime; contains the four items A, B, D, and F of the original TV program PR shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> while the reproduction order of these items A, B, D, and F is unchanged. In this case, the viewer&apos;s program PR&prime; is obtained as a digest of the original TV program PR of FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00092" LVL="0"><PTEXT><PDAT>The viewer&apos;s program map or list for the viewer&apos;s program PR&prime; of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is shown in FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>. As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT>, each of the six items A, B, C, D, E, and F of the original TV program PR are compared with the inputted viewer&apos;s information V-INF and then, the comparison result for these items is listed in the program map along with their reproducing time. According to this map, the viewer&apos;s program is produced from the original TV program PR and played back at the output subsystem </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00093" LVL="0"><PTEXT><PDAT>The viewer&apos;s program PR&prime; of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is effective for the case where the viewer wants to view only the news items relating to a desired foreign country.</PDAT></PTEXT></PARA>
<PARA ID="P-00094" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> shows another configuration of the viewer&apos;s program PR&prime;, in which the viewer&apos;s program PR&prime; contains the six items A, B, C, D, E, and F of the original TV program PR shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> while the reproduction order of these items A, B, C, D, E, and F is changed. In this case, the viewer&apos;s program PR&prime; is obtained as an item rearrangement of the original TV program PR of FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00095" LVL="0"><PTEXT><PDAT>The viewer&apos;s program map or list for the viewer&apos;s program PR&prime; of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is shown in FIG. </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>. As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 10</PDAT></FGREF><PDAT>, each of the six items A, B, C, D, E, and F of the original TV program PR are compared with the inputted viewer&apos;s information V-INF and then, the comparison result for these items is listed in the program map along with their reproducing time. According to this map, the viewer&apos;s program is produced from the original TV program PR and played back at the output subsystem </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00096" LVL="0"><PTEXT><PDAT>The viewer&apos;s program PR&prime; of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is effective for the case where the viewer wants to view the news items of the news program according to his desired time order arranged dependent on the level of pleasure or enjoyment.</PDAT></PTEXT></PARA>
<PARA ID="P-00097" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 8B</PDAT></FGREF><PDAT> shows still another configuration of the viewer&apos;s program PR&prime;, in which the viewer&apos;s program PR&prime; contains the six items A, H, C, I, G, and F of the two original TV programs PR</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and PR</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8A</PDAT></FGREF><PDAT> while the reproduction order of the items A, B, C, D, E, and F of the program PR</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and the items G, H, I, and J of the program PR</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> is changed. In this case, the viewer&apos;s program PR&prime; is obtained as an item selection and combination (or, cut and rearrangement) of the original TV programs PR</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and PR</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>A.</PDAT></PTEXT></PARA>
<PARA ID="P-00098" LVL="0"><PTEXT><PDAT>The viewer&apos;s program map or list for the viewer&apos;s program PR&prime; of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8B</PDAT></FGREF><PDAT> is shown in FIG. </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>. As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11</PDAT></FGREF><PDAT>, each of the ten items A, B, C, D, E, F, G, H, I, and J of the two original TV programs PR</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and PR</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> are compared with the inputted viewer&apos;s information V-INF and then, the comparison result for these items is listed in the program map along with their reproducing time. According to this map, the viewer&apos;s program PR&prime; is produced from the original TV programs PR</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and PR</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and played back at the output subsystem </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00099" LVL="0"><PTEXT><PDAT>The viewer&apos;s program PR&prime; of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8B</PDAT></FGREF><PDAT> is effective for the case where the viewer wants to view only the desired news items (e.g., sport news) of the two news programs according to his desired time order.</PDAT></PTEXT></PARA>
<PARA ID="P-00100" LVL="0"><PTEXT><PDAT>Besides, the attribute information is comprised of at least one &ldquo;row&rdquo; describing the &ldquo;start time&rdquo;, the &ldquo;end time&rdquo;, and the &ldquo;content&rdquo; of the item. Therefore, it is supposed that the original TV program PR is a &ldquo;Seven O&apos;clock News&rdquo; having the following attribute information.</PDAT></PTEXT></PARA>
<CWU>
<TABLE-US ID="TABLE-US-00001">
<TABLE-CALS>
<TABLE FRAME="NONE" COLSEP="0" ROWSEP="0">
<TGROUP ALIGN="LEFT" COLSEP="0" ROWSEP="0" COLS="4">
<COLSPEC COLNAME="OFFSET" COLWIDTH="21PT" ALIGN="LEFT">
<COLSPEC COLNAME="1" COLWIDTH="56PT" ALIGN="LEFT">
<COLSPEC COLNAME="2" COLWIDTH="56PT" ALIGN="LEFT">
<COLSPEC COLNAME="3" COLWIDTH="84PT" ALIGN="LEFT">
<THEAD>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="3" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>Start time,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>End time,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>Content</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="3" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</THEAD>
<TBODY VALIGN="TOP">
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>07:00:00,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>     07:05:00,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>headlines X,   Y, Z,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>07:05:00,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>07:06:00,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>T. Kimura/</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>show business,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>07:06:00,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>07:07:30,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>S. Nagashima/</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>baseball/sport/</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>home run,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>07:07:30,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>07:10:20,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>weather forecast,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY><PTEXT><PDAT>07:10:20,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>07:11:00,</PDAT></PTEXT></ENTRY>
<ENTRY><PTEXT><PDAT>end greeting,</PDAT></PTEXT></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY NAMEST="OFFSET" NAMEEND="3" ALIGN="CENTER" ROWSEP="1"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</TABLE-CALS>
</TABLE-US>
</CWU>
<PARA ID="P-00101" LVL="0"><PTEXT><PDAT>If the &ldquo;Seven O&apos;clock News&rdquo; having the above-described attribute information is used as the original TV program PR, at least one word or character string listed in the &ldquo;content&rdquo; of the item is used as the viewer&apos;s information. For example, to specify the second item that starts at 07:05:00 and ends at 07:06:00, at least one of the character strings &ldquo;T. Kimura&rdquo; and &ldquo;show business&rdquo; is specified by the viewer. To specify the fourth item that starts at 07:07:30 and ends at 07:10:20, it is sufficient that a single character string &ldquo;weather forecast&rdquo; is specified by the viewer.</PDAT></PTEXT></PARA>
<PARA ID="P-00102" LVL="0"><PTEXT><PDAT>The controller </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT> controls to carry out a keyword retrieval or full-text retrieval to find the character string or strings thus specified to find the items including the specified string or strings, thereby forming the viewer&apos;s program map or list.</PDAT></PTEXT></PARA>
<PARA ID="P-00103" LVL="0"><PTEXT><PDAT>Next, an example of the notation of the attribute information of the program item is explained below.</PDAT></PTEXT></PARA>
<PARA ID="P-00104" LVL="0"><PTEXT><PDAT>The program item can be expressed by the use of the following notation as</PDAT></PTEXT></PARA>
<PARA ID="P-00105" LVL="2"><PTEXT><PDAT>&lsqb;attribute information&rsqb;:&equals;&lsqb;row&rsqb; &lsqb;attribute-information ending mark&rsqb;</PDAT></PTEXT></PARA>
<PARA ID="P-00106" LVL="0"><PTEXT><PDAT>In this notation, the content of &lsqb;row&rsqb; is expressed by the combination of the start time and the end time of the item, the content information of the item, and the row-partitioning mark as</PDAT></PTEXT></PARA>
<PARA ID="P-00107" LVL="2"><PTEXT><PDAT>&lsqb;row&rsqb;:&equals;&lsqb;start time&rsqb; &lsqb;end time&rsqb; &lsqb;content information&rsqb; &lsqb;row partitioning mark&rsqb;</PDAT></PTEXT></PARA>
<PARA ID="P-00108" LVL="2"><PTEXT><PDAT>&lsqb;start time&rsqb;:&equals;&lsqb;year&rsqb; &lsqb;month&rsqb; &lsqb;day&rsqb; &lsqb;hour&rsqb; &lsqb;minute&rsqb; &lsqb;second&rsqb; &lsqb;millisecond&rsqb;</PDAT></PTEXT></PARA>
<PARA ID="P-00109" LVL="2"><PTEXT><PDAT>&lsqb;end time&rsqb;:&equals;&lsqb;year&rsqb; &lsqb;month&rsqb; &lsqb;day&rsqb; &lsqb;hour&rsqb; &lsqb;minute&rsqb; &lsqb;second&rsqb; &lsqb;millisecond&rsqb;</PDAT></PTEXT></PARA>
<PARA ID="P-00110" LVL="2"><PTEXT><PDAT>&lsqb;content information&rsqb;:&equals;(any character(s) and mark(s) except for the row-partitioning mark)</PDAT></PTEXT></PARA>
<PARA ID="P-00111" LVL="0"><PTEXT><PDAT>The values of &lsqb;year&rsqb;, &lsqb;month&rsqb;, &lsqb;day&rsqb;, &lsqb;hour&rsqb;, &lsqb;minute&rsqb;, &lsqb;second&rsqb;, and &lsqb;millisecond&rsqb; have 4 figures, 2 figures, 2 figures, 2 figures, 2 figures, 2 figures, and 3 figures, respectively. These values are right-aligned in each pair of these brackets and a value of &ldquo;0&rdquo; is inserted into each unfilled figure.</PDAT></PTEXT></PARA>
<PARA ID="P-00112" LVL="0"><PTEXT><PDAT>As the &lsqb;row-partitioning mark&rsqb;, a popular carriage-return mark &ldquo;CR&rdquo; or any other character or mark may be used.</PDAT></PTEXT></PARA>
<PARA ID="P-00113" LVL="0"><PTEXT><PDAT>As the &lsqb;attribute-information ending mark&rsqb;, any character or mark may be used according to the applied operating system (OS).</PDAT></PTEXT></PARA>
<PARA ID="P-00114" LVL="0"><PTEXT><PDAT>With the broadcast-program viewing method according to the first embodiment of the present invention, each of the received original TV programs PR contains the items having the attribute information, and the attribute information for the items is acquired and stored onto the hard disk </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>in the hard disk drive </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00115" LVL="0"><PTEXT><PDAT>Then, the attribute information for the items of the received original TV programs PR is compared with the specified viewer&apos;s information V-INF, thereby designating at least one desired item in the items of the received original TV programs PR having the desired relationship with the specified viewer&apos;s information V-INF. Subsequently, the at least one desired item designated in the items of the received original TV programs PR is reproduced according to the specified viewer&apos;s information V-INF as the viewer&apos;s program PR&prime;.</PDAT></PTEXT></PARA>
<PARA ID="P-00116" LVL="0"><PTEXT><PDAT>As a result, the viewer is able to view the original TV programs PR transmitted by the broadcasting station from a different angle. In other words, because the viewer&apos;s program PR&prime; is readily varied by changing the viewer&apos;s information V-INF, the viewer is able to optionally view the original TV programs PR transmitted by the broadcasting station according to his taste or desire.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SECOND EMBODIMENT</PDAT></STEXT></H>
<PARA ID="P-00117" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT> shows a broadcast-program viewing system according to a second embodiment of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00118" LVL="0"><PTEXT><PDAT>This viewing system has the same configuration as that of the broadcast-program viewing system according to the first embodiment shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> except that the modem </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> is omitted and the attribute information is acquired by the TV tuner </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>. The attribute information is transmitted as a signal S</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>&prime; through a radio wave.</PDAT></PTEXT></PARA>
<PARA ID="P-00119" LVL="0"><PTEXT><PDAT>Therefore, explanation about the same configuration as that of the first embodiment is omitted here by attaching the same reference numerals to the same elements in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT> for the sake of simplification of description.</PDAT></PTEXT></PARA>
<PARA ID="P-00120" LVL="0"><PTEXT><PDAT>The same viewing method as that of the first embodiment is carried out in this system of FIG. </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>. Therefore, it is obvious that the broadcast-program viewing system according to the second embodiment has the same advantages as those in the first embodiment. There is an additional advantage that the modem </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> can be omitted and therefore, the fabrication cost of the system is decreased.</PDAT></PTEXT></PARA>
<PARA ID="P-00121" LVL="0"><PTEXT><PDAT>While the preferred embodiments of the present invention have been described, it is to be understood that modifications will be apparent to those skilled in the art without departing from the spirit of the invention. The scope of the invention, therefore, is to be determined solely by the following claims.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00122" LVL="0"><PTEXT><PDAT>1. A method of viewing broadcast programs transmitted by a broadcasting station, the programs being comprised of a plurality of separate program items broadcast in a time sequence, the method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>storing the broadcast programs in a random access information storage medium; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving transmitted attribute information characterizing the respective program items and storing the received attribute information in the information storage medium; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>generating and storing a body of viewer preference information; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>comparing the program item attribute information and the stored viewer preference information to identify one or more program items having a desired relationship with the viewer preference information; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>reproducing the individual identified program items for viewing from the information storage medium </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein the time sequence of the program items is rearranged according to viewer preference information. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00123" LVL="0"><PTEXT><PDAT>2. A method of viewing broadcast programs transmitted by a broadcasting station, the programs being comprised of a plurality of separate program items, the method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>storing the broadcast programs in a random access information storage medium; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving transmitted attribute information characterizing the respective program items and storing the received attribute information in the information storage medium; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>generating and storing a body of viewer preference information; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>comparing the program item attribute information and the stored viewer preference information to identify one or more program items having a desired relationship with the viewer preference information; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>reproducing the individual identified program items for viewing from the information storage medium, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein the program attribute information is transmitted from a different broadcasting station from the broadcasting station transmitting the broadcast programs. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00124" LVL="0"><PTEXT><PDAT>3. A system for viewing broadcast programs, the programs being comprised of separate program items broadcast in a time sequence, the viewing system comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>an information storage subsystem including a random access storage medium </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a first information processing sub-system which is operative to store broadcast programs transmitted by a broadcasting station in the random access storage medium; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a program attribute sub-system which is operative to store transmitted attribute information concerning the respective program items; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>an input subsystem which allows a viewer to input preference information; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a controller for controlling the information storage subsystem and the program attribute sub-system to compare the program item attribute information and the inputted viewer preference information and to identify one or more program item having a desired relationship with the inputted viewer preference information; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>an output sub-system which reproduces the individual identified program items for viewing from the random access storage medium, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein the controller is operative to rearrange the time sequence of the program items according to the viewer preference information. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00125" LVL="0"><PTEXT><PDAT>4. A system for viewing broadcast programs, the programs being comprised of separate program items, the viewing system comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>an information storage subsystem including a random access storage medium </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a first information processing sub-system which is operative to store broadcast programs transmitted by a broadcasting station in the random access storage medium; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a program attribute sub-system which is operative to store transmitted attribute information concerning the respective program items; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>an input subsystem which allows a viewer to input preference information; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a controller for controlling the information storage subsystem and the program attribute sub-system to compare the program item attribute information and the inputted viewer preference information and to identify one or more program item having a desired relationship with the inputted viewer preference information; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>an output sub-system which reproduces the individual identified program items for viewing from the random access storage medium, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein the program attribute sub-system receives the program item information from a different broadcasting station from the broadcasting station transmitting the broadcast programs. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00126" LVL="0"><PTEXT><PDAT>5. A method of editing information programs transmitted by broadcasters comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving transmitted programs, each program being comprised of a series of separate program items which collectively constitute a coherent program presentable as transmitted without editing </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>storing the transmitted programs in a random access information storage medium; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving transmitted attribute information characterizing the respective program items </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>storing the transmitted attribute information in the information storage medium; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>generating and storing a body of viewer preference information; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>comparing the program item attribute information and the stored viewer preference information to identify one or more program items having a desired relationship with the viewer preference information; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>reproducing the individual identified program items for viewing from the information storage medium. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00127" LVL="0"><PTEXT><PDAT>6. The method as claimed in claim </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, wherein the attribute information is transmitted by different paths from the transmitted programs.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00128" LVL="0"><PTEXT><PDAT>7. The method as claimed in claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>, wherein the program attribute information is received on demand over a communication network connected to a communication receiver.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00129" LVL="0"><PTEXT><PDAT>8. The method as claimed in claim </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, wherein the program attribute information is received from the broadcasting waves conveying the transmitted programs.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00130" LVL="0"><PTEXT><PDAT>9. The method as claimed in claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>, wherein attribute information is received from the broadcasters along with the transmitted programs.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00131" LVL="0"><PTEXT><PDAT>10. The method as claimed in claim </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, further including reproducing for presentation a digest of at least one transmitted program.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00132" LVL="0"><PTEXT><PDAT>11. The method as claimed in claim </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, further including:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>editing at least two separate transmitted programs; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>reproducing at least one program item from each of the edited programs for presentation. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00133" LVL="0"><PTEXT><PDAT>12. The method as claimed in claim </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, wherein the program items are transmitted in a time sequence, and further including:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>rearranging the time sequence of the programs items of at least one of the transmitted programs; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>reproducing the program items for presentation in the rearranged time sequence. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00134" LVL="0"><PTEXT><PDAT>13. A system for editing information programs transmitted by broadcasters, the system comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a receiver for transmitted programs, each program being comprised of series of separate program items which collectively constitute a coherent program presentable as transmitted without editing; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>an information storage subsystem including a random access storage medium coupled to the receiver; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a first information processing sub-system which is operative to store the transmitted program in the random access storage medium; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a program attribute sub-system which is operative to receive transmitted attribute information concerning the respective program items; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>an input subsystem which allows a user to input preference information; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a controller for controlling the information storage subsystem and the program attribute sub-system to compare the program item attribute information and the inputted user preference information and to identify up to all of the program items as having a desired relationship with the inputted preference information; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>an output sub-system which reproduces the identified program items for presentation from the random access storage medium. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00135" LVL="0"><PTEXT><PDAT>14. The system as claimed in claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, wherein the program attribute sub-system is operative to receive the attribute information over a different path from the corresponding transmitted program.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00136" LVL="0"><PTEXT><PDAT>15. The system as claimed in claim </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>, wherein the program attribute sub-system is operative to receive the program attribute information on demand over a communication network.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00137" LVL="0"><PTEXT><PDAT>16. The system as claimed in claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, wherein the program attribute sub-system is operative to receive the program item attribute information by processing the broadcasting waves conveying the transmitted programs.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00017">
<PARA ID="P-00138" LVL="0"><PTEXT><PDAT>17. The system as claimed in claim </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>, wherein the program attribute sub-system receives the program item attribute information from a broadcaster along with a transmitted program.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00018">
<PARA ID="P-00139" LVL="0"><PTEXT><PDAT>18. The system as claimed in claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, wherein the output sub-system is operative to reproduce for presentation a digest of at least one transmitted program.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00019">
<PARA ID="P-00140" LVL="0"><PTEXT><PDAT>19. The system as claimed in claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, wherein the controller is operative to control the information storage subsystem and the program attribute sub-system to compare the inputted user preference information with program item attribute information for at least two separate transmitted programs and to identify up to all of the program items as having a desired relationship with the inputted preference information.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00020">
<PARA ID="P-00141" LVL="0"><PTEXT><PDAT>20. The system as claimed in claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, wherein the program items are transmitted in a time sequence, and wherein the controller is operative to rearrange the time sequence of the program items of at least one transmitted program; and</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>the output subsystem is operative to reproduce the program items for presentation in the rearranged time sequence.</PDAT></PTEXT></CLMSTEP>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314568-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314568-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314568-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314568-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314568-20011106-D00004.TIF">
<EMI ID="EMI-D00005" FILE="US06314568-20011106-D00005.TIF">
<EMI ID="EMI-D00006" FILE="US06314568-20011106-D00006.TIF">
<EMI ID="EMI-D00007" FILE="US06314568-20011106-D00007.TIF">
<EMI ID="EMI-D00008" FILE="US06314568-20011106-D00008.TIF">
<EMI ID="EMI-D00009" FILE="US06314568-20011106-D00009.TIF">
<EMI ID="EMI-D00010" FILE="US06314568-20011106-D00010.TIF">
<EMI ID="EMI-D00011" FILE="US06314568-20011106-D00011.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314569-20011106-D00000.TIF SYSTEM "US06314569-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314569-20011106-D00001.TIF SYSTEM "US06314569-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314569-20011106-D00002.TIF SYSTEM "US06314569-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314569-20011106-D00003.TIF SYSTEM "US06314569-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314569-20011106-D00004.TIF SYSTEM "US06314569-20011106-D00004.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314569</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>09200212</PDAT></DNUM></B210>
<B211US><PDAT>09</PDAT></B211US>
<B220><DATE><PDAT>19981125</PDAT></DATE></B220>
</B200>
<B500>
<B510>
<B511><PDAT>H04N  5445</PDAT></B511>
<B512><PDAT>G06T  100</PDAT></B512>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>725 37</PDAT></B521>
<B522><PDAT>725142</PDAT></B522>
<B522><PDAT>345328</PDAT></B522>
</B520>
<B540><STEXT><PDAT>System for video, audio, and graphic presentation in tandem with video/audio play</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4616327</PDAT></DNUM>
<DATE><PDAT>19861000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Rosewarne et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4786967</PDAT></DNUM>
<DATE><PDAT>19881100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Smith, III et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4839743</PDAT></DNUM>
<DATE><PDAT>19890600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Best et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4847700</PDAT></DNUM>
<DATE><PDAT>19890700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Freeman</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5353121</PDAT></DNUM>
<DATE><PDAT>19941000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Young et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5446505</PDAT></DNUM>
<DATE><PDAT>19950800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Chang Soo</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348738</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5541738</PDAT></DNUM>
<DATE><PDAT>19960700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Mankovitz</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5585858</PDAT></DNUM>
<DATE><PDAT>19961200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Harper et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5592551</PDAT></DNUM>
<DATE><PDAT>19970100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Lett et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5689305</PDAT></DNUM>
<DATE><PDAT>19971100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Ng et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348416</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5708764</PDAT></DNUM>
<DATE><PDAT>19980100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Borvel et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5734720</PDAT></DNUM>
<DATE><PDAT>19980300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Salganicoff</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>380 20</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5737030</PDAT></DNUM>
<DATE><PDAT>19980400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hong et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5754783</PDAT></DNUM>
<DATE><PDAT>19980500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Mendelsen et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709217</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5774666</PDAT></DNUM>
<DATE><PDAT>19980600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Portuesi</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709218</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5929849</PDAT></DNUM>
<DATE><PDAT>19990700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Kikinis</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345327</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5969715</PDAT></DNUM>
<DATE><PDAT>19991000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Dougherty et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345327</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6006241</PDAT></DNUM>
<DATE><PDAT>19991200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Punaveja et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>707512</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6144972</PDAT></DNUM>
<DATE><PDAT>20001100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Abe, et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>707501</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6192183</PDAT></DNUM>
<DATE><PDAT>20010200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Taniguchi et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>386 52</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
</B560>
<B570>
<B577><PDAT>28</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>348  9</PDAT></B582>
<B582><PDAT>348 10</PDAT></B582>
<B582><PDAT>348473</PDAT></B582>
<B582><PDAT>348474</PDAT></B582>
<B583US><PDAT>348476-485</PDAT></B583US>
<B582><PDAT>348563</PDAT></B582>
<B582><PDAT>348564</PDAT></B582>
<B582><PDAT>348584</PDAT></B582>
<B582><PDAT>348589</PDAT></B582>
<B582><PDAT>348590</PDAT></B582>
<B582><PDAT>348600</PDAT></B582>
<B582><PDAT>348906</PDAT></B582>
<B583US><PDAT>348  1- 13</PDAT></B583US>
<B582><PDAT>348586</PDAT></B582>
<B582><PDAT>348588</PDAT></B582>
<B583US><PDAT>455  2-  63</PDAT></B583US>
<B582><PDAT>725 37</PDAT></B582>
<B582><PDAT>725142</PDAT></B582>
<B582><PDAT>725112</PDAT></B582>
<B582><PDAT>345328</PDAT></B582>
</B580>
<B590><B595><PDAT>4</PDAT></B595><B596><PDAT>4</PDAT></B596><B597US>
</B590>
</B500>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Richard Steven</PDAT></FNM><SNM><STEXT><PDAT>Chernock</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Newton</PDAT></CITY>
<STATE><PDAT>CT</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Paolo</PDAT></FNM><SNM><STEXT><PDAT>Dettori</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Bedford Hills</PDAT></CITY>
<STATE><PDAT>NY</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Frank Andre</PDAT></FNM><SNM><STEXT><PDAT>Schaffa</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Hartsdale</PDAT></CITY>
<STATE><PDAT>NY</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>David Israel</PDAT></FNM><SNM><STEXT><PDAT>Seidman</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>New York</PDAT></CITY>
<STATE><PDAT>NY</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>International Business Machines Corporation</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Armonk</PDAT></CITY><STATE><PDAT>NY</PDAT></STATE></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>02</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Scully, Scott, Murphy &amp; Presser</PDAT></STEXT></ONM></NAM>
</PARTY-US>
</B741>
<B741>
<PARTY-US>
<NAM><FNM><PDAT>Douglas W.</PDAT></FNM><SNM><STEXT><PDAT>Cameron, Esq.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Andrew</PDAT></FNM><SNM><STEXT><PDAT>Faile</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Reuben M.</PDAT></FNM><SNM><STEXT><PDAT>Brown</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2611</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A method for displaying an enhanced multimedia presentation including personalized supplementary audio, video, and graphic content selectable by a user and rendered by a receiving device, comprises the steps of: communicating a multimedia presentation file to the receiving device, the multimedia presentation file comprising base multimedia presentation content and, frame-synchronized information including starting frame timing identifier, ending frame timing identifier, starting frame spatial coordinates, ending frame spatial coordinates, and motion vector specifications for describing frame-accurate location, motion and timing of the personalized supplementary audio, video, and graphic content, the frame-synchronized information indicating one or more free areas of the multimedia presentation absent significant base multimedia content; extracting the frame-synchronized information from the multimedia presentation file; retrieving the personalized supplementary content from the receiving device; decoding the personalized supplementary content at a time sufficiently in advance of the starting frame timing identifier; and the receiving device selecting an indicated free area and initiating display of one or more items of the personalized supplementary content at frame-accurate times between the starting frame timing identifier and ending frame timing identifier at the frame coordinates in accordance with the frame-synchronized information.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>1. Field of the Invention</PDAT></PTEXT></PARA>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>The present invention relates to the displaying of graphics objects such as text or sprites overlaying a multimedia television presentation, and more specifically to the display of animated graphics or play out of video or audio coordinated with a multimedia presentation.</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>2. Description of Prior Art</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>Many video applications, including interactive and multimedia applications, take advantage of the video viewer&apos;s equipment capability to display graphics overlays on the video screen such as a TV or a PC monitor. These graphics displays either dominate the entire screen, as in the case of many electronic program guides or menus, or sections thereof. The video behind these graphic overlays is entirely or partially obscured, thereby interfering with the viewing experience. Systems for the presentation of electronic program guides, such as described in U.S. Pat. Nos. 5,737,030, 5,592,551, 5,541,738, and 5,353,121, display these guides either on a screen devoid of video or one which uses a still frame or moving video simply as a background, with no coordination between the location of items in the video and the location of graphics overlays.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>Currently, Viewers&apos; equipment, such as set-top boxes (STB), does not have the capability to determine where objects are located in the video. Determination of object&apos;s location in a video is necessary in order to place the graphics objects, such as the on-screen text or animate characters, in locations which do not interfere with objects appearing in the video presentation.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>Systems such as the one described in U.S. Pat. No. 5,585,858 attempt to coordinate video and graphic displays by including in the broadcast stream, or pre-storing at the viewers&apos; equipment, graphic overlay screens designed to be compatible with the video content. However, these screens must be created well in advance of the presentation, and thus lack the flexibility to create and display non-interfering graphics overlays adaptively. In addition, those systems display graphics at specific &ldquo;trigger points&rdquo; in the presentation, not at arbitrary points throughout the presentation.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>Other systems which add graphics or audio content to an existing presentation, such as described in U.S. Pat. No. 5,708,764, require the active participation of the viewer in the process of presentation. The viewer, for example, may be required to answer a number of questions before or during the presentation, the responses are then displayed on the screen at predetermined times.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>Systems which allow the personalization of content for individual users are well known in the context of Web browsing. Other systems, such as systems described in U.S. Pat. Nos. 5,585,858 and 4,616,327, provide a limited number of introductions, by the viewers&apos; equipment of predetermined text or graphics. Some systems, such as described in U.S. Pat. Nos. 4,839,743, 4,786,967, and 4,847,700, provide audio and/or video personalization through the selection among a small number of alternate video and audio tracks which are broadcast simultaneously. The selection is performed at the viewer&apos;s equipment.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>What is needed is a system whereby the location and timing of video objects and audio events are made available to the viewers&apos; display equipment, giving that equipment the flexibility to add non-interfering graphics or audio when and where it sees fit, in an adaptive manner throughout a presentation, rather than at limited points. This ability will allow the viewers&apos; equipment to create a tandem video/audio/graphics presentation without requiring viewers&apos; active participation in the presentation process. That system must allow coordination of graphics content that is not pre-stored, such as broadcast news bulletins, and perform still or animated graphics overlay of video, addition or replacement of video, and audio replacement in coordination with the existing video and audio content of a presentation.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>The present invention is a system for the definition and use of information which enables the display or playing of audio, video or graphics objects in tandem with the video and audio play of a digital video presentation. The presentation thus enhanced may be available via a broadcast or in a video-on-demand scenario. The video distribution system over which the video is made available can be a one-way system, such as a terrestrial television broadcast, or a two-way communication, such as a hybrid fiber/coaxial cable system with return channel capability.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>The invention enables the tandem presentation of additional audio, video, or graphics by defining video and audio &ldquo;holes&rdquo; in the video or audio presentation at which there is no significant video or audio activity. &ldquo;Holes&rdquo; are locations and times in the video presentation. Graphics or audio objects are appropriately presented by the STB in those &ldquo;holes&rdquo;. The STB is notified as to the location and/or times associated with these &ldquo;holes&rdquo;, as well as other information which characterizes the material which the STB must present.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>With this information, this invention allows the STB to judiciously place graphics objects on screen or play audio or video content, and avoid interference with video objects or audio events. The graphics objects displayed by the STB can be static or dynamic, i.e., animated. Thus, the invention also enables the creation of video presentations in which objects in the original video or animation interact and move in tandem with video or graphics objects which are added by the viewer&apos;s equipment. For example, a cartoon may be created in which several characters are seen on screen at once and a &ldquo;hole&rdquo; is left for the addition of an animated character which is added by the viewer&apos;s equipment such as an STB.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>Alternatively, the &ldquo;hole&rdquo; could be defined at the location of a relatively less important character which can be obscured by the STB-animated character. The viewers whose STB does not support the present invention will still be able to see a presentation with no video &ldquo;holes&rdquo;. The information as to what type of character can be added, at what screen locations, at what times, and optionally, the motion of the added character must be delivered to the STB in advance of the display of the character.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>Similarly, the invention allows tandem audio play between the audio content of the presentation and audio content which is introduced by the STB.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>The invention allows for the personalization of the video, graphics or audio content introduced by the STB. The personalization is achieved by a viewer when he or she specifies several personal parameters, such as name and age through a viewer interface. To continue the above example, a child&apos;s name may be entered in the STB&apos;s personalization information. When viewing the prepared presentation, the STB-animated character can display this child&apos;s name, when this character is presented in the location of video &ldquo;holes&rdquo;. Alternatively, the STB can play an audio clip of the child&apos;s name during audio &ldquo;holes.&rdquo; Personalized audio or video clips may be recorded and stored in the STB for use in the tandem play.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>Thus, the present invention allows a single version of material such as a cartoon presentation to be created and broadcast, yet be viewed and heard differently by various viewers, and tailored to them specifically. A hybrid presentation is in effect created, the sum of the original presentation and the graphics and/or audio which is introduced by the viewers&apos; STB into the &ldquo;holes.&rdquo;</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>Accordingly, in the present invention personalization information, audio and video segments and possibly &ldquo;hole&rdquo; information are stored in the STB. The STB receives a multimedia presentation stream embedded with &ldquo;hole&rdquo; information. The &ldquo;hole&rdquo; information is embedded into the stream during an authoring stage, where the creator of the presentation determines the &ldquo;hole&rdquo; locations and times. That &ldquo;hole&rdquo; information is extracted on the STB, and audio and video segments and personalization information previously stored on the STB, are coordinated with the &ldquo;holes&rdquo; and displayed in tandem with the multimedia presentation.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00019" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a view of a monitor screen displaying an animated presentation with the location of a video &ldquo;hole&rdquo; indicated.</PDAT></PTEXT></PARA>
<PARA ID="P-00020" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is the view of the same screen as </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, with the addition of an STB-animated character in the video &ldquo;hole&rdquo; location.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> is a flowchart showing steps involved in extracting and processing a &ldquo;hole&rdquo; information from a multimedia presentation stream.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> shows typical equipment necessary for the extraction of &ldquo;hole&rdquo; information and display of tandem content.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00023" LVL="0"><PTEXT><PDAT>The steps necessary to prepare and to play a presentation with tandem STB video graphics display and/or audio or video play according to the invention include:</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="2"><PTEXT><PDAT>1. defining video and audio &ldquo;holes&rdquo; during an authoring stage and embedding them as part of control information in the presentation stream with video and audio;</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="2"><PTEXT><PDAT>2. performing personalization on viewer&apos;s STB;</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="2"><PTEXT><PDAT>3. delivering the presentation stream to viewer&apos;s STB;</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="2"><PTEXT><PDAT>4. extracting the control information from the presentation stream and parsing by the STB; and</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="2"><PTEXT><PDAT>5. displaying video and audio of the presentation stream together with graphics, audio, or video objects provided by the STB during the time and location of the &ldquo;holes&rdquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="7"><PTEXT><PDAT>Authoring Stage</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><PDAT>In order to specify the location and time of video and audio &ldquo;holes&rdquo;, a video presentation must be marked with control information. In the preferred embodiment, this is done offline, through the use of an authoring system designed for this marking process and described in U.S. patent application Ser. No. 09/032,491.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><PDAT>The control information may also be added in real time to a live presentation in progress, by specifying video &ldquo;holes&rdquo; to the STB. The STB will use this information to display text associated with the program, e.g., news or a sports program, and broadcast along with the video and audio. The choice of text for display can be based on personalization information already stored in the STB.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>The authoring system accepts as input video/audio content. An author steps through the content, marking locations of video and/or audio &ldquo;holes.&rdquo; The markings thus created are used by the authoring system to create control information describing these &ldquo;holes&rdquo;, which is inserted into the video/audio content.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>In the preferred embodiment, the control information takes the form of HTML tags which indicate:</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="2"><PTEXT><PDAT>1. &ldquo;hole&rdquo; identifier used to coordinate &ldquo;hole&rdquo; with insertion application.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="2"><PTEXT><PDAT>2. &ldquo;hole&rdquo; type, e.g., video or audio,</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="2"><PTEXT><PDAT>3. beginning time of &ldquo;hole&rdquo;,</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="2"><PTEXT><PDAT>4. ending time of &ldquo;hole&rdquo;,</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="2"><PTEXT><PDAT>5. beginning screen location of &ldquo;hole&rdquo;, e.g., x, y coordinates in video,</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="2"><PTEXT><PDAT>6. ending screen location of &ldquo;hole&rdquo; e.g., x, y coordinates in video,</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="2"><PTEXT><PDAT>7. motion vector for &ldquo;hole&rdquo; movement in video,</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="2"><PTEXT><PDAT>8. description of bitmap(s) to be insert in video &ldquo;hole&rdquo;, and</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="2"><PTEXT><PDAT>9. volume level for inserted audio.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>An automatic object recognition may be incorporated into the authoring system to simplify the authoring process. An author specifies the initial location of a video object, e.g., a less-significant character, and its subsequent locations are detected by the authoring system, which inserts appropriate control information into the stream as the object moves.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>For digital video streams, the Motion Pictures Experts Group (MPEG-2) compression for audio and video signals, and MPEG-2 Systems transport for the transport of those signals may be used. Because of the high bit rate requirements of digital video, a compression method is usually applied to a video before transmission over a network. In the preferred embodiment, video and audio content are compressed using MPEG-2 compression, as specified in ISO/IEC 13818-2 for video and ISO/IEC 13818-3 for audio.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>The MPEG-2 standard also specifies how presentations consisting of audio and video elementary streams can be multiplexed together in a &ldquo;transport stream&rdquo;. This is specified in the MPEG-2 Systems Specification, ISO/IEC 13818-1. The MPEG-2 Systems Specification accommodates the inclusion in a presentation&apos;s transport stream of non-video and non-audio streams, by use of &ldquo;private data&rdquo; streams. All transport stream packets, regardless of content, are of a uniform size (188 bytes) and format. &ldquo;Program-Specific Information&rdquo;, which is also carried in the transport stream, carries the information regarding which elementary streams have been multiplexed in the transport stream, what type of content they carry, and how they may be demultiplexed. In this embodiment, the control information is carried in an MPEG-2 Transport Stream private data stream.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>In the embodiment utilizing MPEG-2 video, beginning and ending times for &ldquo;hole&rdquo; specification are specified in terms of the Presentation Time Stamp (PTS) of the frames where the &ldquo;hole&rdquo; appears. PTSs are typically present in every frame to every third frame, and this is sufficient for synchronization, since the frame rate for NTSC video is 30 frames/second. Video &ldquo;holes&rdquo; are rectangular, and thus specified by a pair of (x, y) coordinates. Other embodiments may use more complex polygons to describe video &ldquo;hole&rdquo; shape, and require more coordinates and a specification of which polygon is to be used. The video &ldquo;hole&rdquo; movement is linear between the beginning and ending screen location. Again, more complex functions may be specified in other embodiments to describe video &ldquo;hole&rdquo; movement.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="7"><PTEXT><PDAT>Delivery Stage</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>The control information may be expressly created for the function of the present invention with &ldquo;holes&rdquo; left in the video and/or audio for insertion of the content by the STB. In order to show a full presentation to those viewers whose STB does not support the present invention, &ldquo;holes&rdquo; may actually be a default unit of video or audio content. Presentations which were not designed for the present invention may be retrofitted to accommodate it, i.e., &ldquo;holes&rdquo; may be found in the existing content areas and/or sounds which can be overlaid.</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>After forming the control information, the video presentation together with such control information may be transported to the viewer&apos;s STB by being sent</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="2"><PTEXT><PDAT>a. in the video blanking interval of an analog video signal and extracted by the viewers&apos; equipment in a manner similar to that used for closed-caption information;</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="2"><PTEXT><PDAT>b. in a separate Vestigial Side Band channel;</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="2"><PTEXT><PDAT>c. within a digital video/audio stream, and extraction of embedded data is performed by the viewers&apos; equipment in a manner similar to that used for the extraction of video or audio streams.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="7"><PTEXT><PDAT>The STB</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> shows typical equipment necessary for the present invention. It comprises a television set or a monitor screen </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, cable </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> to receive the multimedia presentation, the STB 5 to accept, process and to forward the resulting presentation over cable </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>, to be displayed on the monitor screen </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>. MPEG-2 demultiplexers, MPEG-2 audio decoders and MPEG-2 video decoders are now widely available. The C-Cube C19110 Transport Demultiplexer, C-Cube C19100 MPEG-2 Video Decoder, and Crystal Semiconductor CS4920 MPEG Audio Decoder are examples. In the preferred embodiment, the video and audio decoders may be implemented together in a single chip, such as the IBM CD21 MPEG-2 Audio/Video decoder. If not incorporated in the audio and video decoder, an intermediate IC is necessary at the output of the decoders to convert from digital to analog and, in the case of video, encode to the desired video analog signal format such as NTSC, PAL, or SECAM. S-video output from these IC&apos;s is optional.</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>The on-screen graphics objects which overlay video content are rendered using the on-screen display (OSD) functions of the MPEG-2 Video Decoder in the STB. These decoders vary in the sophistication of the OSD which they offer and in the application program interfaces (API) which are used to control the OSD. Individual pixels can be addressed, and bitmaps are used for many text and graphic objects. A minimum level of OSD graphics capability offers 16 colors. A preferred capability offers 256 colors and multi-level blending capability. The blending capability of the OSD allows for varying degrees of opacity for the graphics overlay.</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>Overlay of audio content is performed by the STB audio decoder in the case of MPEG audio or by the STB processor utilizing an API to a media player. File formats supported by this player include &ldquo;.wav&rdquo;, &ldquo;.rmi&rdquo;, and &ldquo;.mid&rdquo;. Alternatively, the audio playing function can be incorporated into the STB&apos;s application itself. Video replacement or addition can be performed by an additional video decoder in the STB. Systems with &ldquo;picture-in-picture&rdquo; capability can use this feature for addition or replacement of video objects.</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="0"><PTEXT><PDAT>In either case, the audio being played is mixed with or preempts the original audio of the presentation, utilizing the STB&apos;s audio output. In another embodiment, one in which two tracks of audio are available, one for music and one for dialogue, the STB can replace the content of the latter tract while allowing the former to continue as usual.</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="0"><PTEXT><PDAT>The presentation of the present invention, which is to be viewed, may be broadcast using the NTSC or PAL for analog or ATSC or DVB for digital television standards. In another embodiment, the presentation may be viewed and controlled on a per-users basis, as with a video-on-demand systems or viewing from a video tape.</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="0"><PTEXT><PDAT>The processing power needed to implement the present invention can be easily accommodated by the processing capabilities of the processors in most current STB&apos;s, which start at roughly 1 MIP. This processor runs the video/audio content insertion application, and controls the use of the OSD and audio functions.</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="0"><PTEXT><PDAT>An STB 5 typically has between 1 and 4 MB of RAM. The program of the present invention needs to be downloaded to or stored in the RAM of the STB, it would occupy approximately up to 0.5 MB.</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>Only a small amount of the STB 5 storage is required to store personalization information for all viewers in a household. In the preferred embodiment, personalization information for each viewer includes:</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="2"><PTEXT><PDAT>1. name,</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="2"><PTEXT><PDAT>2. age,</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="2"><PTEXT><PDAT>3. content restrictions, e.g., PG-13,</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="2"><PTEXT><PDAT>4. text preference, e.g., large type,</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="2"><PTEXT><PDAT>5. enable audio replacement,</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="2"><PTEXT><PDAT>6. enable video replacement, and</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="2"><PTEXT><PDAT>7. pointer to sprite associated with viewer.</PDAT></PTEXT></PARA>
<PARA ID="P-00069" LVL="0"><PTEXT><PDAT>This information needs to be stored in non-volatile memory in order to persist when the viewers&apos; STB is powered off or during power failures. Typical STB&apos;s have non-volatile RAM for this purpose.</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 1 and 2</PDAT></FGREF><PDAT> provide example screen displays according to a presentation prepared initially for a tandem play. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> shows a screen </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> of an animated program with one video character </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT>. The location of a &ldquo;hole&rdquo; </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> is indicated by dotted lines </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT>. The dotted lines </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> around the &ldquo;hole&rdquo; </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> are only illustrative, and would not appear in the actual program. Control information concerning the location of the &ldquo;hole&rdquo; </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> is embedded in the video stream and extracted by the STB.</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> shows the same screen with the addition of an STB-animated character </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> which is displayed in the location of a &ldquo;hole&rdquo; </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT>. Alternatively, the STB could have used the &ldquo;hole&rdquo; </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> for display of graphics text describing the character, for example.</PDAT></PTEXT></PARA>
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>It is also possible to prepare for a presentation utilizing a mechanism that looks for locations of &ldquo;holes&rdquo; </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> which occur naturally in the audio and video presentation. Alternatively, &ldquo;holes&rdquo; </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> may be created in a presentation by blanking out sections of the existing audio track or obscuring sections of the video screen.</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="0"><PTEXT><PDAT>The logical flow of the application which is loaded into the STB and used to parse control data of the video presentation stream and to display information stored in the STB in the &ldquo;holes&rdquo; </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> of the presentation, is shown in FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>. The Program Specification Information (PSI) of the current presentation is parsed at step </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT>. A determination is made at step </PDAT><HIL><BOLD><PDAT>81</PDAT></BOLD></HIL><PDAT> whether any control information with &ldquo;holes&rdquo; locations will be arriving with this presentation. If the information will not be arriving, the program control returns to step </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT>, and the next presentation will be parsed. If the information will be arriving, then at step </PDAT><HIL><BOLD><PDAT>82</PDAT></BOLD></HIL><PDAT> demultiplexer queues are setup to receive it. At step </PDAT><HIL><BOLD><PDAT>83</PDAT></BOLD></HIL><PDAT>, a determination is made whether the control data has arrived in demultiplexer queues, if not, the test at step </PDAT><HIL><BOLD><PDAT>83</PDAT></BOLD></HIL><PDAT> is repeated. When the information has arrived at the queues, it is parsed at step </PDAT><HIL><BOLD><PDAT>84</PDAT></BOLD></HIL><PDAT> to ascertain the HTML tags. At step </PDAT><HIL><BOLD><PDAT>85</PDAT></BOLD></HIL><PDAT> the HTML tags are matched with the &ldquo;hole&rdquo; information. If there is no match, the program control returns to step </PDAT><HIL><BOLD><PDAT>83</PDAT></BOLD></HIL><PDAT>. If there is a match, step </PDAT><HIL><BOLD><PDAT>86</PDAT></BOLD></HIL><PDAT> assigns the received data to associated variables, and returns program control to step </PDAT><HIL><BOLD><PDAT>83</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00074" LVL="0"><PTEXT><PDAT>When all the information about &ldquo;holes&rdquo; and the overlay information is parsed and assembled in the STB, then it becomes a straight forward, commonly known task of the STB to overlay content at given &ldquo;hole&rdquo; coordinates with overlay data while displaying the presentation stream on a video monitor. A similar process applies to audio &ldquo;holes.&rdquo;</PDAT></PTEXT></PARA>
<PARA ID="P-00075" LVL="0"><PTEXT><PDAT>While the invention has been particularly shown and described with respect to illustrative and preferred embodiments thereof, it will be understood by those skilled in the art that the foregoing and other changes in form and details may be made therein without departing from the spirit and scope of the invention that should be limited only by the scope of the appended claims.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>Having thus described our invention, what we claim as new, and desire to secure by Letters Patent is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>1. A method for displaying an enhanced multimedia presentation including personalized supplementary audio, video, and graphic content selectable by a user and rendered by a receiving device, the method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>communicating a multimedia presentation file to said receiving device, said multimedia presentation file comprising base multimedia presentation content and, frame-synchronized information including starting frame timing identifier, ending frame timing identifier, starting frame spatial coordinates, ending frame spatial coordinates, and motion vector specifications for describing frame-accurate location, motion and timing of said personalized supplementary audio, video, and graphic content, said frame-synchronized information indicating one or more free areas of said multimedia presentation absent significant base multimedia content; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>extracting said frame-synchronized information from said multimedia presentation file; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>retrieving said personalized supplementary audio, video and graphic content from said receiving device; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>decoding said personalized supplementary audio, video and graphic content at a time sufficiently in advance of said starting frame timing identifier; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>said receiving device selecting an indicated free area and initiating display of one or more items of said personalized supplementary audio, video and graphic content at frame-accurate times between said starting frame timing identifier and ending frame timing identifier at said frame coordinates in accordance with said frame-synchronized information. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00077" LVL="0"><PTEXT><PDAT>2. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein said supplementary audio, video, and graphic content is stored in said receiving device.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>3. The method of claim </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, wherein said supplementary audio, video, and graphic content is communicated with said multimedia presentation base content.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>4. The method of claim </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information is determined and embedded in said multimedia presentation file in an authoring step prior to the communication step.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>5. The method of claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> wherein said frame-synchronized information is allowed to be altered in said receiving device via a user interface.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>6. The method of claim </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information further includes: an identifier for coordination with an video/audio content insertion application, a media type, and, description of a bitmap if said video is to be inserted, and volume level if audio is to be inserted.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>7. The method of claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information is defined in such a way that displaying of said supplementary audio, video and graphic content will not interfere with viewing of said multimedia presentation base content.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>8. The method of claim </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information is defined in frame-synchronized coordination with visible objects in said multimedia presentation base content.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>9. The method of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information is defined in such a way that supplementary audio play can be performed without interfering with the sound of said multimedia presentation base content.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>10. The method of claim </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information is defined in such a way that supplementary audio content can be introduced in coordination with the audio units of said multimedia presentation base content.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>11. The method of claim </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information is used in displaying said supplementary audio, video, and graphic content in such a way as not to interfere with the viewing or hearing of said multimedia presentation base content.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00087" LVL="0"><PTEXT><PDAT>12. The method of claim </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information is used in displaying said supplementary audio, video, and graphic content which are coordinated with base audio, video and graphic content of said multimedia presentation, forming a hybrid of coordinated presentation from the conjunction of said base multimedia presentation content and said supplementary audio, video, and graphic content.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00088" LVL="0"><PTEXT><PDAT>13. The method of claim </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, wherein personalization information is stored in said receiving device via said user interface.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00089" LVL="0"><PTEXT><PDAT>14. The method of claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, wherein said personalization information includes: said viewer&apos;s name, said viewer&apos;s age, content restriction for said viewer, text preference, audio replacement enablement switch, video replacement enablement switch, and a pointer to a sprite associated with a viewer.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00090" LVL="0"><PTEXT><PDAT>15. A computer program device readable by a machine, tangibly embodying a program of instructions executable by a machine to perform method steps for displaying an enhanced multimedia presentation including personalized supplementary audio, video, and graphic content selectable by a user and rendered by a receiving device, the method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>communicating a multimedia presentation file to said receiving device, said multimedia presentation file comprising base multimedia presentation content and, frame-synchronized information including starting frame timing identifier, ending frame timing identifier, starting frame spatial coordinates, ending frame spatial coordinates, and motion vector specifications for describing frame-accurate location, motion and timing of said personalized supplementary audio, video, and graphic content, said frame-synchronized information representing free areas of said multimedia presentation absent significant base multimedia content; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>extracting said frame-synchronized information from said multimedia presentation file; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>retrieving said personalized supplementary audio, video and graphic content from said receiving device; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>decoding said personalized supplementary audio, video and graphic content at a time sufficiently in advance of said starting frame timing identifier; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>selecting an indicated free area and initiating display of one or more items of said personalized supplementary audio, video and graphic content at frame-accurate times between said starting frame timing identifier and ending frame timing identifier at said frame coordinates in accordance with said frame-synchronized information. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00091" LVL="0"><PTEXT><PDAT>16. The method of claim </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT>, wherein said supplementary audio, video, and graphic content is stored in said receiving device.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00017">
<PARA ID="P-00092" LVL="0"><PTEXT><PDAT>17. The method of claim </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>, wherein said supplementary audio, video, and graphic content is communicated with said multimedia presentation base content.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00018">
<PARA ID="P-00093" LVL="0"><PTEXT><PDAT>18. The method of claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information is determined in an authoring step prior to the communication step.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00019">
<PARA ID="P-00094" LVL="0"><PTEXT><PDAT>19. The method of claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information is allowed to be altered in said receiving device via a user interface.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00020">
<PARA ID="P-00095" LVL="0"><PTEXT><PDAT>20. The method of claim </PDAT><HIL><BOLD><PDAT>19</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information further includes: an identifier for coordination with an video/audio content insertion application, a media type, and, description of a bitmap if said video is to be inserted, and volume level if audio is to be inserted.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00021">
<PARA ID="P-00096" LVL="0"><PTEXT><PDAT>21. The method of claim </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information is defined in such a way that displaying of said supplementary audio, video and graphic content will not interfere with viewing of said multimedia presentation base content.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00022">
<PARA ID="P-00097" LVL="0"><PTEXT><PDAT>22. The method of claim </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information is defined in frame-synchronized coordination with visible objects in said multimedia presentation base content.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00023">
<PARA ID="P-00098" LVL="0"><PTEXT><PDAT>23. The method of claim </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information is defined in such a way that supplementary audio play can be performed without interfering with the sound of said multimedia presentation base content.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00024">
<PARA ID="P-00099" LVL="0"><PTEXT><PDAT>24. The method of claim </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information is defined in such a way that supplementary audio content can be introduced in coordination with the audio units of said multimedia presentation base content.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00025">
<PARA ID="P-00100" LVL="0"><PTEXT><PDAT>25. The method of claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information is used in displaying said supplementary audio, video, and graphic content in such a way as not to interfere with the viewing or hearing of said, multimedia presentation base content.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00026">
<PARA ID="P-00101" LVL="0"><PTEXT><PDAT>26. The method of claim </PDAT><HIL><BOLD><PDAT>25</PDAT></BOLD></HIL><PDAT>, wherein said frame-synchronized information is used in displaying said supplementary audio, video, and graphic content which are coordinated with base audio, video and graphic content of said multimedia presentation, forming a hybrid of coordinated presentation from the conjunction of said base multimedia presentation content and said supplementary audio, video, and graphic content.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00027">
<PARA ID="P-00102" LVL="0"><PTEXT><PDAT>27. The method of claim </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>, wherein personalization information is stored in a receiving device via said user interface.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00028">
<PARA ID="P-00103" LVL="0"><PTEXT><PDAT>28. The method of claim </PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT>, wherein said personalization information includes: said viewer&apos;s name, said viewer&apos;s age, content restriction for said viewer, text preference, audio replacement enablement switch, video replacement enablement switch, and a pointer to a sprite associated with a viewer.</PDAT></PTEXT></PARA>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314569-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314569-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314569-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314569-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314569-20011106-D00004.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314570-20011106-D00000.TIF SYSTEM "US06314570-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00001.TIF SYSTEM "US06314570-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00002.TIF SYSTEM "US06314570-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00003.TIF SYSTEM "US06314570-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00004.TIF SYSTEM "US06314570-20011106-D00004.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00005.TIF SYSTEM "US06314570-20011106-D00005.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00006.TIF SYSTEM "US06314570-20011106-D00006.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00007.TIF SYSTEM "US06314570-20011106-D00007.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00008.TIF SYSTEM "US06314570-20011106-D00008.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00009.TIF SYSTEM "US06314570-20011106-D00009.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00010.TIF SYSTEM "US06314570-20011106-D00010.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00011.TIF SYSTEM "US06314570-20011106-D00011.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00012.TIF SYSTEM "US06314570-20011106-D00012.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00013.TIF SYSTEM "US06314570-20011106-D00013.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00014.TIF SYSTEM "US06314570-20011106-D00014.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00015.TIF SYSTEM "US06314570-20011106-D00015.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00016.TIF SYSTEM "US06314570-20011106-D00016.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00017.TIF SYSTEM "US06314570-20011106-D00017.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00018.TIF SYSTEM "US06314570-20011106-D00018.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00019.TIF SYSTEM "US06314570-20011106-D00019.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00020.TIF SYSTEM "US06314570-20011106-D00020.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00021.TIF SYSTEM "US06314570-20011106-D00021.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00022.TIF SYSTEM "US06314570-20011106-D00022.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00023.TIF SYSTEM "US06314570-20011106-D00023.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00024.TIF SYSTEM "US06314570-20011106-D00024.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00025.TIF SYSTEM "US06314570-20011106-D00025.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00026.TIF SYSTEM "US06314570-20011106-D00026.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00027.TIF SYSTEM "US06314570-20011106-D00027.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00028.TIF SYSTEM "US06314570-20011106-D00028.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00029.TIF SYSTEM "US06314570-20011106-D00029.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00030.TIF SYSTEM "US06314570-20011106-D00030.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00031.TIF SYSTEM "US06314570-20011106-D00031.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00032.TIF SYSTEM "US06314570-20011106-D00032.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00033.TIF SYSTEM "US06314570-20011106-D00033.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00034.TIF SYSTEM "US06314570-20011106-D00034.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00035.TIF SYSTEM "US06314570-20011106-D00035.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00036.TIF SYSTEM "US06314570-20011106-D00036.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00037.TIF SYSTEM "US06314570-20011106-D00037.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00038.TIF SYSTEM "US06314570-20011106-D00038.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00039.TIF SYSTEM "US06314570-20011106-D00039.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00040.TIF SYSTEM "US06314570-20011106-D00040.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00041.TIF SYSTEM "US06314570-20011106-D00041.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00042.TIF SYSTEM "US06314570-20011106-D00042.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00043.TIF SYSTEM "US06314570-20011106-D00043.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00044.TIF SYSTEM "US06314570-20011106-D00044.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00045.TIF SYSTEM "US06314570-20011106-D00045.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00046.TIF SYSTEM "US06314570-20011106-D00046.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00047.TIF SYSTEM "US06314570-20011106-D00047.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00048.TIF SYSTEM "US06314570-20011106-D00048.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00049.TIF SYSTEM "US06314570-20011106-D00049.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00050.TIF SYSTEM "US06314570-20011106-D00050.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00051.TIF SYSTEM "US06314570-20011106-D00051.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00052.TIF SYSTEM "US06314570-20011106-D00052.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00053.TIF SYSTEM "US06314570-20011106-D00053.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00054.TIF SYSTEM "US06314570-20011106-D00054.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00055.TIF SYSTEM "US06314570-20011106-D00055.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00056.TIF SYSTEM "US06314570-20011106-D00056.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00057.TIF SYSTEM "US06314570-20011106-D00057.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00058.TIF SYSTEM "US06314570-20011106-D00058.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00059.TIF SYSTEM "US06314570-20011106-D00059.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00060.TIF SYSTEM "US06314570-20011106-D00060.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00061.TIF SYSTEM "US06314570-20011106-D00061.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00062.TIF SYSTEM "US06314570-20011106-D00062.TIF" NDATA TIF>
<!ENTITY US06314570-20011106-D00063.TIF SYSTEM "US06314570-20011106-D00063.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314570</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>08798478</PDAT></DNUM></B210>
<B211US><PDAT>08</PDAT></B211US>
<B220><DATE><PDAT>19970210</PDAT></DATE></B220>
</B200>
<B300>
<B310><DNUM><PDAT>8-022274</PDAT></DNUM></B310>
<B320><DATE><PDAT>19960208</PDAT></DATE></B320>
<B330><CTRY><PDAT>JP</PDAT></CTRY></B330>
</B300>
<B500>
<B510>
<B511><PDAT>H04N  714</PDAT></B511>
<B512><PDAT>G06F 1300</PDAT></B512>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>725 40</PDAT></B521>
<B522><PDAT>725 43</PDAT></B522>
<B522><PDAT>725 61</PDAT></B522>
<B522><PDAT>345353</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Data processing apparatus for facilitating data selection and data processing in at television environment with reusable menu structures</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5220500</PDAT></DNUM>
<DATE><PDAT>19930600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Baird et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705 36</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5280573</PDAT></DNUM>
<DATE><PDAT>19940100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Kuga et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345338</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5297249</PDAT></DNUM>
<DATE><PDAT>19940300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Bernstein et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>707501</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5367619</PDAT></DNUM>
<DATE><PDAT>19941100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Dipaolo et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345352</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5392387</PDAT></DNUM>
<DATE><PDAT>19950200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Fitzpatrick et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345352</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5404393</PDAT></DNUM>
<DATE><PDAT>19950400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Remillard</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>379 9325</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5412720</PDAT></DNUM>
<DATE><PDAT>19950500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hoarty</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>380 15</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5432902</PDAT></DNUM>
<DATE><PDAT>19950700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Matsumoto</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345338</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5442795</PDAT></DNUM>
<DATE><PDAT>19950800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Levine et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345349</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5513308</PDAT></DNUM>
<DATE><PDAT>19960400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Mori</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345337</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5530869</PDAT></DNUM>
<DATE><PDAT>19960600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Salle</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345352</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5541662</PDAT></DNUM>
<DATE><PDAT>19960700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Adams et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348460</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5550746</PDAT></DNUM>
<DATE><PDAT>19960800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Jacobs</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>700231</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5555496</PDAT></DNUM>
<DATE><PDAT>19960900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Tackbary et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705 27</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5570126</PDAT></DNUM>
<DATE><PDAT>19961000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Blahut et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>725 93</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5574494</PDAT></DNUM>
<DATE><PDAT>19961100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Marics</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>725 37</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5583560</PDAT></DNUM>
<DATE><PDAT>19961200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Florin et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>725 40</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5585838</PDAT></DNUM>
<DATE><PDAT>19961200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Lawler et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>725 41</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5623613</PDAT></DNUM>
<DATE><PDAT>19970400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Rowe et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345353</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5628004</PDAT></DNUM>
<DATE><PDAT>19970500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Gormley et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>707104</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5635979</PDAT></DNUM>
<DATE><PDAT>19970600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Kostreski et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>725132</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5663757</PDAT></DNUM>
<DATE><PDAT>19970900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Morales</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>725 40</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5664133</PDAT></DNUM>
<DATE><PDAT>19970900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Malamud et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345352</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5694176</PDAT></DNUM>
<DATE><PDAT>19971200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Bruette et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>725 43</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5721897</PDAT></DNUM>
<DATE><PDAT>19980200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Rubinstein</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>707  2</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5722041</PDAT></DNUM>
<DATE><PDAT>19980200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Freadman</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>725 82</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5726702</PDAT></DNUM>
<DATE><PDAT>19980300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hamaguchi et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>725 43</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5734853</PDAT></DNUM>
<DATE><PDAT>19980300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hendricks et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345352</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5774109</PDAT></DNUM>
<DATE><PDAT>19980600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Winksy et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345124</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5774361</PDAT></DNUM>
<DATE><PDAT>19980600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Colarelli, III et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>701 29</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5784583</PDAT></DNUM>
<DATE><PDAT>19980700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Redpath</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345353</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5809471</PDAT></DNUM>
<DATE><PDAT>19980900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Brodsky</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>704275</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5828420</PDAT></DNUM>
<DATE><PDAT>19981000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Marshall et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>725 39</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5844620</PDAT></DNUM>
<DATE><PDAT>19981200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Coleman et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348461</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5862395</PDAT></DNUM>
<DATE><PDAT>19990100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Bier</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709318</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5877765</PDAT></DNUM>
<DATE><PDAT>19990300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Dickman et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345357</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5880768</PDAT></DNUM>
<DATE><PDAT>19990300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Lemmons et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>725 41</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5974253</PDAT></DNUM>
<DATE><PDAT>19991000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Nahaboo et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345353 X</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6005561</PDAT></DNUM>
<DATE><PDAT>19991200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hawkins et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>725 39</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6005601</PDAT></DNUM>
<DATE><PDAT>19991200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Ohkara et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>725 52</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>52477</PDAT></DNUM>
<DATE><PDAT>19930100</PDAT></DATE>
<CTRY><PDAT>JP</PDAT></CTRY>
</DOC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5002477</PDAT></DNUM>
<DATE><PDAT>19930100</PDAT></DATE>
<CTRY><PDAT>JP</PDAT></CTRY>
</DOC>
<PIC><PDAT>G06F  906</PDAT></PIC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5265957</PDAT></DNUM>
<DATE><PDAT>19931000</PDAT></DATE>
<CTRY><PDAT>JP</PDAT></CTRY>
</DOC>
<PIC><PDAT>G06F  314</PDAT></PIC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>2538499</PDAT></DNUM>
<DATE><PDAT>19960900</PDAT></DATE>
<CTRY><PDAT>JP</PDAT></CTRY>
</DOC>
<PIC><PDAT>G06F  314</PDAT></PIC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B562><NCIT><STEXT><PDAT>Foss, Carolyn L., &ldquo;Tools for Reading and Browsing Hypertext&rdquo;, Information Processing and management, vol. 25, No. 4, pp. 407-418, Jan. 1989.</PDAT></STEXT></NCIT><CITED-BY-EXAMINER></B562>
</B560>
<B570>
<B577><PDAT>11</PDAT></B577>
<B578US><PDAT>5</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>348 13</PDAT></B582>
<B582><PDAT>345352</PDAT></B582>
<B582><PDAT>345353</PDAT></B582>
<B582><PDAT>345357</PDAT></B582>
<B582><PDAT>725 40</PDAT></B582>
<B582><PDAT>725 39</PDAT></B582>
<B582><PDAT>725 43</PDAT></B582>
<B582><PDAT>725 52</PDAT></B582>
<B582><PDAT>725 61</PDAT></B582>
</B580>
<B590><B595><PDAT>63</PDAT></B595><B596><PDAT>65</PDAT></B596><B597US>
</B590>
</B500>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Hidekazu</PDAT></FNM><SNM><STEXT><PDAT>Tanigawa</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Hirakata</PDAT></CITY>
<CTRY><PDAT>JP</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Kazuo</PDAT></FNM><SNM><STEXT><PDAT>Okamura</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Hirakata</PDAT></CITY>
<CTRY><PDAT>JP</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Kiyokazu</PDAT></FNM><SNM><STEXT><PDAT>Yamanaka</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Ashiya</PDAT></CITY>
<CTRY><PDAT>JP</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Junichi</PDAT></FNM><SNM><STEXT><PDAT>Hirai</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Suita</PDAT></CITY>
<CTRY><PDAT>JP</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Matsushita Electric Industrial Co., Ltd.</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Osaka</PDAT></CITY><CTRY><PDAT>JP</PDAT></CTRY></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>03</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Price and Gess</PDAT></STEXT></ONM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Kakali</PDAT></FNM><SNM><STEXT><PDAT>Chaki</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Jeffrey Allen</PDAT></FNM><SNM><STEXT><PDAT>Rossi</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2122</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A data processing apparatus which displays a set of document data on a display unit together with an operation menu which has operation items related to the set of document data. In the apparatus, the document data storage unit stores a plurality of sets of document data of different contents which are indicated by sets of content information. The operation menu information storage unit stores a plurality of sets of operation menu information which each contain operation items that correspond to a content of document data. The first indication operation unit indicates a display of a set of document data. The second indication operation unit indicates an addition of a display of an operation menu to a display of document data. The operation menu generation unit receives an indication from the second indication operation unit, obtains the content information of the displayed data from the document data storage unit, extracts a corresponding set of operation menu information from the operation menu information storage unit, and generates an operation menu with the extracted operation items as menu items. The display control unit reads a set of document data from the document data storage unit, has the data displayed on the display unit in accordance with an indication from the first indication operation unit, and has the operation menu generated by the operation menu generation unit displayed in a window provided on the display unit.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>1. Field of the Invention</PDAT></PTEXT></PARA>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>The present invention relates to a data processing apparatus which generates and displays operation menus for facilitating operation execution or data selection for multimedia display data including text, graphics, and sound.</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>2. Description of the Related Art</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>A first example of a conventional data processing apparatus which displays operation menus is a data processing apparatus which receives teletext broadcasts and displays an index for selecting the content of the teletext or for returning from a selected item of teletext to the index. This operation menu does not change in response to the content of the broadcast teletext, but is rather an operation menu whose menu items are fixed.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>A second example of a conventional data processing apparatus is the Internet browser software &ldquo;NETSCAPE NAVIGATOR&rdquo; (Registered Trade Mark) produced by Netscape Communications, Inc. &ldquo;NETSCAPE NAVIGATOR&rdquo; is an application for accessing the World Wide Web (often abbreviated to &ldquo;WWW&rdquo;) which is a distributed information system based on a concept called &ldquo;Hypertext&rdquo;. A detailed description of the World Wide Web is given in the article &ldquo;Media Integration by the World Wide Web&rdquo; which appeared in the Jouhou Shori Gakkai Data Base System Research Report 100-21 (Oct. 14, 1994).</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>The main function of the NETSCAPE NAVIGATOR is to read information written in HTML (Hypertext Markup Language), and to interpret and display its content. When information which shows a link to another page (called a Uniform Resource Locator or &ldquo;URL&rdquo;) is selected using a pointing device such as a mouse, NETSCAPE NAVIGATOR takes data from the link address indicated by the URL and displays it. NETSCAPE NAVIGATOR is also able to display predetermined menus for &ldquo;hot spots&rdquo; which are special marks provided in the display data (such as marks showing link addresses). A description of NETSCAPE NAVIGATOR is given between pages 93 and 99 of the September 1995 edition of &ldquo;Internet User&rdquo; magazine (Softbank Publishing).</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>As described above, the content of menus for the first example of a conventional data processing apparatus is fixed. As a result, it is not possible to select menu items in accordance with the content of broadcast teletext.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>With the second conventional technique, while predetermined menus are displayed for hot spots displayed with the predetermined mark, making it possible to change the display to the data associated with the hot spot or to selectively perform a plurality of operations for the hot spot, it is not possible to change the operation menus in accordance with the content of the hot spots. As a result, the apparatus becomes more difficult to use since unnecessary menu items are displayed for hot spots.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>When looking through a set of pages which are connected by such links, it has been necessary to pass through the pages one at a time, so that it has not been possible to view a page which is two or more links away from the present hot spot by making only one selection operation.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>In actual Internet pages, hot spots which represent links also tend to be distributed throughout the page, so that it is difficult for users to see all of the available links when making a selection. In particular, when a user is unsure as to which hot spot to select, the user has to go to the trouble of moving the mouse cursor a considerable distance over the screen.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>When using a conventional browser, the only information which the user can refer to when selecting a hot spot is the information given by the hot spot itself, so that users can often end up switching to data which does not serve their purpose.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>Finally, most conventional browsers assume the user is using a pointing device such as a mouse, so that such selections become difficult if the user has to use the ten key pad on a remote control unit.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>In view of the stated problems, it is a primary object of the present invention to provide a data processing apparatus which allows the selection of menu items which change depending on the content of document data or on the type of a key word included in document data.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>It is a second object of the present invention to provide a data processing apparatus which can display a menu which enables a user to understand the content of data linked to the data being displayed.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>A third object of the present invention is to provide a data processing apparatus which can enable a user to understand the content of other sets of data which are linked to a data section included in a set of data.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>A fourth object of the present invention is to provide a data processing apparatus which can display data several links away in a hierarchy as menu items in a hierarchical menu displayed with a present set of data.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>A fifth object of the present invention is to provide a data processing apparatus which reduces the trouble the user has to go to in moving the focus of a data section, by having each data section included in a set of data displayed for a predetermined time.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><PDAT>A sixth object of the present invention is to provide a data processing apparatus which, in order to facilitate the selection of data linked to a data section, has data related to a data section in the focus condition added to the display.</PDAT></PTEXT></PARA>
<PARA ID="P-00020" LVL="0"><PTEXT><PDAT>A seventh object of the present invention is to provide a data processing apparatus which enables the user to make a rapid selection of a data section, even when there is a large number of data section in the displayed data.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><PDAT>An eighth object of the present invention is to provide a data processing apparatus which can display data directly related to a data section in accordance with an operation of a channel number button on a television remote controller.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><PDAT>The primary object can be achieved by a data processing apparatus which displays a set of document data on a display unit together with an operation menu which has operation items for operation executions related to said set of document data, the data processing apparatus including: a document data storage unit for storing a plurality of sets of document data which are to be displayed by the display unit, wherein each set of document data has a different data content and is stored together with a set of content information which corresponds to said data content; an operation menu information storage unit for storing a plurality of sets of operation menu information which are each made up of a set of operation items which correspond to a content of a set of document data; a first indication operation unit for indicating a display of a set of document data, in accordance with a user operation; a second indication operation unit for indicating an addition of a display of an operation menu to the displayed set of document data, in accordance with a user operation; an operation menu generation unit for receiving an indication from the second indication operation unit, for obtaining the content information of the displayed set of document data from the document data storage unit, for extracting the set of operation menu information which corresponds to the obtained content information from the operation menu information storage unit, and for generating an operation menu which has the operation items in the extracted set of operation menu information as menu items; and a display control unit for reading a set of document data from the document data storage unit and having the set of document data displayed on the display unit in accordance with an indication from the first indication operation unit, and for having the operation menu generated by the operation menu generation unit displayed in a window provided on the display unit.</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><PDAT>The above primary object can also be achieved by a data processing apparatus which displays a set of document data including key words on a display unit together with an operation menu which has operation items for operation executions related to the set of document data, the data processing apparatus including: a document data storage unit for storing a set of document data, including key words, which is to be displayed by the display unit; an operation menu information storage unit for storing a plurality of sets of operation menu information which are each made up of a set of operation items which correspond to a type of key word; a first indication operation unit for indicating a display of a set of document data in accordance with a user operation; a first display control unit for receiving an indication from the first indication operation unit, for reading a set of document data from the document data storage unit, and for having the read set of document data displayed by the display unit; a key word selecting operation unit for selecting a key word in the set of document data displayed by the display unit, in accordance with a user operation; a second display control unit for having a key word, which is indicated as one of a default and a selection by the key word selecting operation unit, in the set of document data displayed on the display unit displayed in focus; a second indication operation unit for indicating a display of an operation menu for the key word in focus, in accordance with a user operation; an operation menu generation unit for receiving an indication from the second indication operation unit, for reading the set of operation menu information which corresponds to the type of the key word in focus on the display unit from the operation menu information storage unit, and for generating an operation menu which has the operation items in the read set of operation menu information as menu items; and a third display control unit for having the operation menu generated by said operation menu generation unit displayed in a window provided on the display unit.</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><PDAT>With the above construction it is possible to display an operation menu which corresponds to the content of a document or to key words.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><PDAT>Here, the data processing apparatus may further include: a menu item focusing/deciding operation unit for focusing on a menu item in the operation menu displayed on the display unit in accordance with a user operation and for deciding on the focused menu item in accordance with a user operation; and an operation execution unit for executing an operation program of the operation item which is the menu item decided on by the menu item focusing/deciding operation unit.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><PDAT>With the above construction it is possible to facilitate operation execution for the displayed document data or key words.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>The data processing apparatus may further include: a document data obtaining unit for receiving a text-multiplexed broadcast transmitted by a television station and obtaining a set of document data by separating text data from the received text-multiplexed broadcast; and a document data writing unit for writing the set of document data received by the document data obtaining unit into the document data storage unit.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><PDAT>With the above construction, document data in text-multiplexed broadcasts can be put to good use.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><PDAT>The second object of the present invention can be achieved by a data processing apparatus including a display unit, the data processing apparatus including: a data storage unit for storing a plurality of sets of data, together with links which each connect an arbitrary set of data to another set of data; data display indication operation unit for indicating a set of data to be displayed, in accordance with a user operation; a first display control unit for reading a set of data stored in the data storage unit in accordance with an indication from the data display indication operation unit and having the read set of data displayed on the display unit; a menu display indication operation unit for indicating a display of a menu related to sets of data which are linked to a set of data displayed on the display unit, in accordance with a user operation; a first menu generation unit for obtaining a data part of each set of data which is directly linked to the set of data displayed on the display unit and for generating a menu which has the obtained data parts as menu items; and a second display control unit for having the menu generated by the first menu generation unit displayed in addition to the set of data displayed by the display unit.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><PDAT>With the above construction, the menu items of menus show the content of data linked to the data being displayed.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><PDAT>The data processing apparatus may further include: a menu item selecting operation unit for selecting a menu item in a menu displayed by the display unit, in accordance with a user operation; a second menu generation unit for obtaining a data part of each set of data which is directly linked to the set of data which includes the menu item selected by the menu item selecting operation unit and for generating an additional menu which has the obtained data parts as menu items; and a third display control unit for having the additional menu generated by the second menu generation unit added to a display of menus on the display unit as a submenu, wherein if a selection of a menu item in an additional menu is made by the menu item selecting operation unit, the second menu generation unit may generate a new additional menu and the third display control unit has the new additional menu added to the display on the display unit as a next submenu.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>Here, each set of data stored in the data storage unit may include a title and one of the first menu generating unit and the second menu generating unit may obtain the title included in each linked set of data and use the obtained titles as menu items.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>With the above construction, the content of sublevels can be quickly understood from the menus.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><PDAT>The third object of the present invention can be achieved by a data processing apparatus including a display unit, the data processing apparatus including: a data storage unit for storing a plurality of sets of data which include data sections, together with links which each connect a data section in an arbitrary set of data to another set of data; a data display indication operation unit for indicating a set of data to be displayed, in accordance with a user operation; a first display control unit for reading a set of data from the data storage unit in accordance with an indication from the data display indication operation unit, and having the read set of data displayed on the display unit; a menu display indication operation unit for indicating a display of a menu related to sets of data which are linked to a data section included in the set of data displayed on the display unit, in accordance with a user operation; a first menu generation unit for generating a menu based on sets of data which are directly linked a data section included in the set of data displayed on the display unit, in accordance with an indication from the menu display indication operation unit; and a second display control unit for having the menu generated by the first menu generation unit displayed in addition to the set of data displayed by the display unit.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><PDAT>Here, the first menu generating unit may include: a first menu item obtaining unit for obtaining a part of each set of data directly linked to a data section, wherein there is a plurality of sets of data directly linked to the data section; and a first menu generating unit for generating a menu which has the parts of each set of data obtained by the first menu item obtaining unit as menu items.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><PDAT>Here also, each set of data stored in the data storage unit may include a title, and each first menu item obtaining unit may obtain the title included in each linked set of data.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><PDAT>Here, the data processing apparatus may further include: a menu item selection operation unit for selecting a menu item in a menu displayed by the display unit, in accordance with a user operation; a second menu generation unit for reading data sections included in a set of data which includes a title which is the menu item selected by the menu item selection operation unit from the data storage unit, and for generating an additional menu which has the read data sections as menu items; and a third display control unit for having the additional menu generated by the second menu generation unit added to a display of the menu on the display unit as a submenu.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>Here, the data processing apparatus may further include: an additional menu item selection operation unit for selecting a menu item in an additional menu displayed on the display unit, in accordance with a user operation; a third menu generation unit for reading parts of sets of data which are directly linked to a data section which is the menu item selected by the additional menu item selection operation unit from the data storage unit, and for generating a new additional menu which has the read parts of sets of data as menu items; and a fourth display control unit for having the new additional menu generated by the third menu generation unit added to a display of the menu and the additional menu on the display unit as a lower-level submenu.</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>Here, the first menu generation unit may include: a first menu item obtaining unit for obtaining data sections in a set of data directly linked to a data section, wherein there is only one set of data directly linked to the data section in the data storage unit; and a first menu generating unit for generating a menu which has the data sections obtained by the first menu item obtaining unit as menu items.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>The data processing apparatus may further include: a menu item selection operation unit for selecting a menu item in a menu displayed by the display unit, in accordance with a user operation; a second menu generation unit for reading a part of each set of data directly linked to the data section which is the menu item selected by the menu item selection operation unit from the data storage unit, and for generating an additional menu which has the read parts of sets of data as menu items; and a third display control unit for having the additional menu generated by the second menu generation unit added to a display of the menu on the display unit as a submenu.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>With the above construction, the content of sublevels can be quickly understood from the menus.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>Here, the data processing apparatus may further include a data section display control unit for having data sections included in the set of data being displayed on the display unit displayed in a new window.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>With the above construction, the user can easily view the data sections in the present set of data which are linked to other sets of data.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>The fourth object of the present invention can be achieved by a data processing apparatus which further includes: a data display updating operation unit for indicating a display of data directly linked to menu item in an additional menu most recently added to the display on the display unit, in accordance with a user operation; and a fourth display control unit for receiving an indication from the data display updating operation unit, for reading a set of data which includes the selected menu item from the data storage unit, and for having the read set of data displayed by the display unit in place of the set of data which the first display control unit had displayed.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>Also, the data processing apparatus may include: a data display updating indication operation unit for indicating an updating of data display, in accordance with a user operation; and a data updating control unit for reading a set of data which includes a selected menu item in a latest new additional menu to be displayed on the display unit from the data storage unit in accordance with an indication from the data display updating indication operation unit, and for having the read set of data displayed by the display unit in place of the set of data which the first display control unit had displayed.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>Here, the data processing apparatus of may further include: a data display updating indication operation unit for indicating an updating of data display, in accordance with a user operation; and a data updating control unit for reading a set of data which includes a selected menu item in the latest additional menu to be displayed on the display unit from the data storage unit in accordance with an indication from the data display updating indication operation unit, and for having the read set of data displayed by the display unit in place of the set of data which the first display control unit had displayed.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>With the above construction, the user can easily have data which is several links away from the displayed data displayed.</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>The fifth object of the present invention can be achieved by a data processing apparatus including a display unit, the data processing apparatus including: a data storage unit for storing a plurality of sets of data which include data sections, together with links which each connect a data section in an arbitrary set of data to another set of data; a data display indication operation unit for indicating a set of data to be displayed, in accordance with a user operation; a first display control unit for reading a set of data from the data storage unit in accordance with an indication from the data display indication operation unit, and having the read set of data displayed in a window provided on the display unit; a focus display state data indicating unit for indicating a focus display state of a data section currently in focus in the set of data displayed on the display unit, the focus display state differing from a display state used for other data sections in the set of data; a second display control unit for receiving an indication from the focus display state data indicating unit, and for having the indicated data section displayed in the focus display state in a display of the display unit; a data display updating indication operation unit for indicating a display of a set of data linked to the data section in the focus display state on the display unit, in accordance with a user operation; and a third display control unit for reading a set of data which is directly linked to the data section in the focus display state from the data storage unit and having the read set of data displayed by the display unit in place of the set of data which the first display control unit had displayed.</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>The focus display state data indicating unit may include: a default unit for indicating, when a set of data is displayed on the display unit, a predetermined data section as a data section in the focus display state; and a timer unit for measuring a time for which an Nth data section is in the focus display state and for giving an indication to move the focus display state to an (N&plus;1)th data section at a predetermined time interval.</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>The focus display state data indicating unit may include: a default unit for indicating, when a set of data is displayed on the display unit, a predetermined data section as a data section in the focus display state; a focus display time storage unit for storing a focus display time which shows how long each data section in each set of data is displayed in the focus display state; and a timer unit for reading, when an Nth data section in a set of data being displayed on the display unit is in the focus display state, a focus display time for the Nth data section from the focus display time storage unit, and for giving an indication to move the focus display state to an (N&plus;1)th data section when the Nth data section has been displayed in the focus display state for the read focus display time.</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>With the above construction, the focus condition is moved from data section to data section at a predetermined interval, which further facilitates data display updating indications by the user.</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>The sixth object of the present invention can be achieved by a data processing apparatus which further includes a data appending display control unit for reading, when display of a data section included in a displayed set of data in the focus display state is commenced, a set of data which is directly linked to the data section in the focus display state from the data storage unit, and for having the read set of data displayed in a new window.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>With the above construction, a user can view data before updating the display.</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>The seventh object of the present invention can be achieved by a data processing apparatus including a display unit, the data processing apparatus including: a data storage unit for storing a plurality of sets of data which, include data sections, together with links which each connect a data section in an arbitrary set of data to another set of data; a data display indication operation unit for indicating a set of data to be displayed, in accordance with a user operation; a first display control unit for reading a set of data from the data storage unit in accordance with an indication from the data display indication operation unit, and having the read set of data displayed in a window provided on the display unit; a window division indicating unit for indicating, when a number of data sections included in a set of data displayed by the first display control unit exceeds a predetermined number, a division of a display of the window into virtual windows; and a window division display control unit for dividing the display of the window on the display unit into virtual windows, in accordance with an indication from the window division indicating unit.</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>The window division indicating unit may include: a number of data sections calculation unit for counting a total number NE of data sections which are included in the set of data displayed on the display unit; a division judging unit for judging whether the total number NE exceeds a maximum number of data sections NS for one virtual window; and a division position indicating unit for positioning, when the division judging unit judges that the total number NE exceeds the maximum number NS, a pointer at a start of the displayed set of data in the data storage unit, for moving the pointer and counting a number of data sections until the maximum number of data sections NS have been counted, and for indicating a position of a dividing line for dividing the window based on a pointer position when the maximum number of data sections NS have been counted.</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>The data processing apparatus may further include: a current virtual window indication operation unit for indicating a current virtual window to have a focus condition, in accordance with a user operation; a current virtual window display control unit for having one out of the virtual windows displayed by the window division display control unit on the display unit displayed in a display state which shows the focus condition, based on one of a default and an indication from the current virtual window indication operation unit; a focus condition data section indication operation unit for indicating a data section in the focus condition, out of data sections in a set of data in the current virtual window on the display unit, which is to be displayed in a display state that enables the data section to be distinguished from other data sections; a second display control unit for receiving an indication from the focus condition data section indication operation unit, and having the indicated data section displayed on the display unit in the display state for the focus condition; a data display updating indication operation unit for indicating a display of a set of data which is directly linked to the data section displayed on the display unit in the focus condition, based on a user operation; and a third display control unit for reading the set of data linked to the data section displayed on the display unit in the focus condition from the data storage unit, based on an indication from the data display updating indication operation unit, and having the read set of data displayed in place of the set of data which the first display control unit had displayed.</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="0"><PTEXT><PDAT>With the above construction, virtual windows are displayed with only a predetermined number of data sections being allowed in each virtual window, facilitating user selection of a data section in a current virtual window.</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="0"><PTEXT><PDAT>The eighth object of the present invention can be achieved by a data processing apparatus which further includes: a data section number assigning unit for assigning, when the window division indicating unit indicates division of the window into virtual windows, a number to each data section included in each virtual window in order up to the maximum number NS; a current virtual window indicating operation unit for indicating a current virtual window to be displayed in the focus condition, in accordance with a user operation; a virtual window data section number display control unit for having one out of the virtual windows displayed by the window division display control unit on the display unit displayed in a display state which shows a focus condition, based on one of a default and an indication from the current virtual window indication operation unit, and for having the numbers assigned by the data section number assigning unit displayed for data sections in the current virtual window; a data display updating indication operation unit for indicating a display of a set of data which is directly linked to a data section displayed on the display unit, based on a user operation; and a second display control unit for reading, based on an indication from the data display updating indication operation unit, the set of data linked to an indicated data section from the data storage unit, and having the read set of data displayed in place of the set of data which the first display control unit had displayed.</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="0"><PTEXT><PDAT>Here, the highest number is assigned by the data section number assigning unit to a data section may be &ldquo;12&rdquo;, and the data display updating indication operation unit may indicate a data section by means of an operation of a channel number button on a television remote controller.</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="0"><PTEXT><PDAT>The eighth object can also be achieved by a data processing apparatus including a display unit, the data processing apparatus including: a data storage unit for storing a plurality of sets of data which include data sections, together with links which each connect a data section in an arbitrary set of data to another set of data; a data display indication operation unit for indicating a set of data to be displayed, in accordance with a user operation; a first display control unit for reading a set of data from the data storage unit in accordance with an indication from the data display indication operation unit, and having the read set of data displayed in a window provided on the display unit; a data section number assigning unit for assigning a number in order to each data section included in a set of data displayed on the display unit; a data section number display control unit for having each data section included in a set of data displayed on the display unit displayed with the number assigned by the data section number assigning unit; a data display updating indication operation unit for indicating a display of data linked to a data section displayed on the display unit, in accordance with a user operation; and a second display control unit for reading, in accordance with an indication from the data display updating indication operation unit, a set of data which is directly linked to the indicated data section from the data storage unit and for having the read set of data displayed in place of the set of data which the first display control unit had displayed.</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>With the above construction, data display updating can be performed vary rapidly, increasing the performance of the apparatus.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00062" LVL="0"><PTEXT><PDAT>These and other objects, advantages and features of the invention will become apparent from the following description taken in conjunction with the accompanying drawings which illustrate a specific embodiment of the invention. In the drawings:</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> shows the construction of the data processing apparatus of the first embodiment of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> shows example documents stored in the document storage unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> shows the menu information stored in the menu information storage unit in the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> shows the execution operation correspondence table stored in the operation execution unit in the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> shows a remote controller which is a specific example of an input operation unit in the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> shows an example display of a document on the display unit in the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00069" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> shows an example display of an operation menu on the display unit in the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> also shows an example display of an operation menu on the display unit in the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT> is a flowchart for explaining the operation which has a document stored in the document storage unit of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00072" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 10</PDAT></FGREF><PDAT> is a flowchart for explaining the display operation for the display unit in the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 11</PDAT></FGREF><PDAT> shows the construction of the data processing apparatus of the second embodiment of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00074" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT> shows an example of a document stored in the document storage unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00075" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 13</PDAT></FGREF><PDAT> is a table which shows the key words stored in the document storage unit of the present invention and their types;</PDAT></PTEXT></PARA>
<PARA ID="P-00076" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 14</PDAT></FGREF><PDAT> shows the menu information stored in the menu information storage unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00077" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 15</PDAT></FGREF><PDAT> shows an example display of a program list on the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00078" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 16</PDAT></FGREF><PDAT> is an example display of an operation menu on the display unit of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00079" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 17</PDAT></FGREF><PDAT> is an example display of an operation menu on the display unit of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00080" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 18</PDAT></FGREF><PDAT> is an example data display of the display unit for an operation execution by the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00081" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 19</PDAT></FGREF><PDAT> is a flowchart for explaining the operation of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00082" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 20</PDAT></FGREF><PDAT> shows the construction of the data processing apparatus of the third embodiment of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00083" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 21</PDAT></FGREF><PDAT> shows the data stored in the data storage unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00084" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 22</PDAT></FGREF><PDAT> is an example of display data on the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00085" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 23</PDAT></FGREF><PDAT> is an example of a menu displayed by the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00086" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 24</PDAT></FGREF><PDAT> is another example of a menu displayed by the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00087" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 25</PDAT></FGREF><PDAT> is an example display of a hierarchical menus on the display unit of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00088" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 26</PDAT></FGREF><PDAT> is an example data display according to an execution of a menu item in the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00089" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 27</PDAT></FGREF><PDAT> is a flowchart for explaining the operation of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00090" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 28</PDAT></FGREF><PDAT> shows the construction of the data processing apparatus of the fourth embodiment of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00091" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 29</PDAT></FGREF><PDAT> shows the data stored in the data storage unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00092" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 30</PDAT></FGREF><PDAT> is an example display of a menu by the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00093" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 31</PDAT></FGREF><PDAT> is an example display of hierarchical menus by the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00094" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 32</PDAT></FGREF><PDAT> is another example display of hierarchical menus by the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00095" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 33</PDAT></FGREF><PDAT> is another example display of hierarchical menus by the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00096" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 34</PDAT></FGREF><PDAT> is an example data display according to an execution of a menu item in the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00097" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 35</PDAT></FGREF><PDAT> shows other data stored by the data storage unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00098" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 36</PDAT></FGREF><PDAT> is an example of data displayed by the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00099" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 37</PDAT></FGREF><PDAT> shows a menu which is added to data on the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00100" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 38</PDAT></FGREF><PDAT> is an example display of hierarchical menus by the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00101" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 39</PDAT></FGREF><PDAT> is another example display of hierarchical menus by the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00102" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 40</PDAT></FGREF><PDAT> is an example data display of a menu which has text items in the data as menu items in the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00103" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 41</PDAT></FGREF><PDAT> shows an example display of the menu in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 40</PDAT></FGREF><PDAT> in hierarchical format;</PDAT></PTEXT></PARA>
<PARA ID="P-00104" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 42</PDAT></FGREF><PDAT> shows the construction of the data processing apparatus of the fifth embodiment of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00105" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 43</PDAT></FGREF><PDAT> shows the data stored in the data storage unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00106" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 44</PDAT></FGREF><PDAT> shows an example display of data by the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00107" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 45</PDAT></FGREF><PDAT> shows another example display of data by the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00108" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 46</PDAT></FGREF><PDAT> is a flowchart for explaining the operation of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00109" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 47</PDAT></FGREF><PDAT> shows the construction of the data processing apparatus of the sixth embodiment of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00110" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 48</PDAT></FGREF><PDAT> shows the focus time correspondence table stored by the data storage unit in the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00111" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 49</PDAT></FGREF><PDAT> shows the construction of the data processing apparatus of the seventh embodiment of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00112" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 50</PDAT></FGREF><PDAT> shows an example display of data by the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00113" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 51</PDAT></FGREF><PDAT> shows another example display of data by the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00114" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 52</PDAT></FGREF><PDAT> shows the construction of the data processing apparatus of the eighth embodiment of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00115" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 53</PDAT></FGREF><PDAT> shows the data stored in the data storage unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00116" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 54</PDAT></FGREF><PDAT> shows an example display of data by the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00117" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 55</PDAT></FGREF><PDAT> shows an example display of a virtual window in the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00118" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 56</PDAT></FGREF><PDAT> shows an example display of the current virtual window in the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00119" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 57</PDAT></FGREF><PDAT> shows another example display of the current virtual window in the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00120" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 58</PDAT></FGREF><PDAT> shows another example display of the current virtual window in the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00121" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 59</PDAT></FGREF><PDAT> is a flowchart for explaining the operation of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00122" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 60</PDAT></FGREF><PDAT> shows the construction of the data processing apparatus of the ninth embodiment of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00123" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 61</PDAT></FGREF><PDAT> shows the text item number correspondence table stored by the data storage unit of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00124" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 62</PDAT></FGREF><PDAT> shows example display of data by the display unit of the present embodiment;</PDAT></PTEXT></PARA>
<PARA ID="P-00125" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 63</PDAT></FGREF><PDAT> shows a recording medium for recording a program which realizes the functions of all of the construction elements of the data storage apparatuses explained in the first to ninth embodiments;</PDAT></PTEXT></PARA>
<PARA ID="P-00126" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 64</PDAT></FGREF><PDAT> shows the recording medium and its case; and</PDAT></PTEXT></PARA>
<PARA ID="P-00127" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 65</PDAT></FGREF><PDAT> shows the installation of the recording medium into a computer system.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DESCRIPTION OF THE PREFERRED EMBODIMENT</PDAT></STEXT></H>
<PARA ID="P-00128" LVL="0"><PTEXT><PDAT>The following is a description of data processing apparatus of the present invention which will refer to several preferred embodiments.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>First Embodiment</PDAT></STEXT></H>
<PARA ID="P-00129" LVL="0"><PTEXT><PDAT>The construction of the data processing apparatus of the first embodiment of the present invention is shown in FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>. As shown in the drawing, the data processing apparatus is composed of a broadcast receiving unit </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT>, a separating unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT>, a display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>, a document storage unit </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>, a menu information storage unit </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>, an operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>, a clock unit </PDAT><HIL><BOLD><PDAT>107</PDAT></BOLD></HIL><PDAT>, an input operation unit </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT>, an input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>, a control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, a menu generating unit </PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT>, and a display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00130" LVL="0"><PTEXT><PDAT>The broadcast receiving unit </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT> receives a television broadcast from a TV station and sends the received signal to the separating unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT>. On receiving a reception indication for a predetermined image signal of an execution module from the operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>, the broadcast receiving unit </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT> receives the image signal and sends it to the separating unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00131" LVL="0"><PTEXT><PDAT>The separating unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> judges whether the image signal received from the broadcast receiving unit </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT> is a text-multiplexed broadcast signal, and if so, separates the character data signal from the image signal. It sends the image signal to the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> and converts the separated character data signal into character codes. The separating unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> then stores the set of converted character codes in the document storage unit </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> as one set of document data and, having referred to the clock unit </PDAT><HIL><BOLD><PDAT>107</PDAT></BOLD></HIL><PDAT>, records the reception time in the document.</PDAT></PTEXT></PARA>
<PARA ID="P-00132" LVL="0"><PTEXT><PDAT>Here, each set of document data is also provided with content information which shows its content.</PDAT></PTEXT></PARA>
<PARA ID="P-00133" LVL="0"><PTEXT><PDAT>When the reception signal received from the broadcast receiving unit </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT> is not a text-multiplexed broadcast signal, the separating unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> sends the reception signal as it is to the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>. Accordingly, the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> is also informed when the broadcast receiving unit </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT> receives image signal having received an indication from the operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00134" LVL="0"><PTEXT><PDAT>The display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> is made up of a TV receiver which reproduces the images and sound in the TV broadcasts received by the broadcast receiving unit </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT>. Under the control of the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>, it also displays the documents sent in text-multiplexed broadcast signals, as well as operation menus. When the broadcast receiving unit </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT> receives a predetermined image signal in accordance with a program in an execution module sent from the operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>, this image signal will also be reproduced by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00135" LVL="0"><PTEXT><PDAT>The document storage unit </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> can be made up of RAM (Random Access Memory), and stores the sets of document data included in the text-multiplexed broadcast signals and their reception times, both of which are written in by the separating unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT>. This document storage unit </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> stores a plurality of sets of document data whose contents are different.</PDAT></PTEXT></PARA>
<PARA ID="P-00136" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> shows the content of documents (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) and (</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>) which are stored in the document storage unit </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>. The content of document data </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT> which represents document (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) is shopping information which can be understood from the title &ldquo;Second Hand Car Information&rdquo;. This document data </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT> is stored together with the content information </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> &ldquo;Shopping Information&rdquo; and the reception time </PDAT><HIL><BOLD><PDAT>203</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00137" LVL="0"><PTEXT><PDAT>Document data </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> for document (</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>) is stored together with the content information </PDAT><HIL><BOLD><PDAT>205</PDAT></BOLD></HIL><PDAT> &ldquo;Traffic Information&rdquo; and the reception time </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> &ldquo;14:15 Oct. 26 1995&rdquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00138" LVL="0"><PTEXT><PDAT>The sets of document data </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> and the content information </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>205</PDAT></BOLD></HIL><PDAT> for documents (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) and (</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>) are transmitted by the TV station and the reception times </PDAT><HIL><BOLD><PDAT>203</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> are recorded by the separating unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00139" LVL="0"><PTEXT><PDAT>The menu information storage unit </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> can be made up of ROM (Read Only Memory), and stores predetermined menu information for generating operation menus. This menu information corresponds to the content information for document data, such as document data </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT>, transmitted from the TV station. Here, </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> shows examples of the menu information stored in the menu information storage unit </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT> as menu information (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) and menu information (</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>). It should be noted here that while the present embodiment describes the case where menu information is already stored in the menu information storage unit </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>, such information may instead be transmitted by a broadcast station.</PDAT></PTEXT></PARA>
<PARA ID="P-00140" LVL="0"><PTEXT><PDAT>Menu information (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) shows that the information for generating an operation menu is written in as tagged information that resembles SGML (Standard Generalized Markup Language). This menu information (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) corresponds to the content information of the document data </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT> &ldquo;Traffic Information&rdquo;. This is to say, the operation menu for &ldquo;Traffic Information&rdquo; shown by menu information (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) has the operation items &ldquo;Print&rdquo;, &ldquo;Image Display&rdquo;, and &ldquo;Show Traffic Report&rdquo; as items </PDAT><HIL><BOLD><PDAT>301</PDAT></BOLD></HIL><PDAT>, and the commands executed by the selection of each operation item as the execution operations </PDAT><HIL><BOLD><PDAT>302</PDAT></BOLD></HIL><PDAT>. As one example, the command &ldquo;print&rdquo; is shown corresponding to when the operation item &ldquo;Print&rdquo; is selected.</PDAT></PTEXT></PARA>
<PARA ID="P-00141" LVL="0"><PTEXT><PDAT>In the operation menu for &ldquo;Shopping Information&rdquo; shown by menu information (</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>), the operations &ldquo;Show Details&rdquo;, &ldquo;Print&rdquo;, and &ldquo;Order&rdquo; are given as items </PDAT><HIL><BOLD><PDAT>303</PDAT></BOLD></HIL><PDAT>, and &ldquo;show image&rdquo;, &ldquo;print&rdquo; and &ldquo;send fax&rdquo; are given as the corresponding execution operations </PDAT><HIL><BOLD><PDAT>304</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00142" LVL="0"><PTEXT><PDAT>The operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> stores an execution operation correspondence table for each set of menu information. As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, execution operation correspondence table </PDAT><HIL><BOLD><PDAT>401</PDAT></BOLD></HIL><PDAT> stores a set of link information </PDAT><HIL><BOLD><PDAT>403</PDAT></BOLD></HIL><PDAT> to an execution module corresponding to each execution operation </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT>. It should be noted here that this execution operation correspondence table </PDAT><HIL><BOLD><PDAT>401</PDAT></BOLD></HIL><PDAT> corresponds to the menu information (</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>) shown in FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00143" LVL="0"><PTEXT><PDAT>On receiving notification of content information and an operation item from the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, the operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> reads the execution operation corresponding to the item in the menu information which corresponds to the content information stored in the menu information storage unit </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>. The operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> then has the execution module corresponding to the execution operation </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> in the execution operation correspondence table </PDAT><HIL><BOLD><PDAT>401</PDAT></BOLD></HIL><PDAT> for the present menu information executed. It should be noted here that this execution of the execution module will only be described by means of one specific example, since it does not form the gist of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00144" LVL="0"><PTEXT><PDAT>As one example, when document (</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>) in FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and the operation menu corresponding to operation menu (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) corresponding to menu information (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> are displayed by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>, and notification of &ldquo;Traffic Information&rdquo; and the operation item &ldquo;Image Display&rdquo; is received from the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, the operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> operates in accordance with the program in the &ldquo;show image&rdquo; execution module in execution operation correspondence table (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) (not illustrated), and gives the broadcast receiving unit </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT> an indication of the channel for image signal reception which is to be used in image display. Here, it should be noted that the transmission of an image signal is achieved by a digital satellite broadcast.</PDAT></PTEXT></PARA>
<PARA ID="P-00145" LVL="0"><PTEXT><PDAT>The program for the &ldquo;print&rdquo; execution module described above gives an indication to a printer (not illustrated) to make a hard copy of document (</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>) which is currently displayed on the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00146" LVL="0"><PTEXT><PDAT>The input operation unit </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> can be composed, for example, of the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>, and is used to transmit an operation signal, corresponding to a user operation, to the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00147" LVL="0"><PTEXT><PDAT>The remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> can be provided with buttons such as a &ldquo;Document Display&rdquo; button </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT>, a &ldquo;Menu Display&rdquo; button </PDAT><HIL><BOLD><PDAT>503</PDAT></BOLD></HIL><PDAT>, an &ldquo;Enter&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT>, an &ldquo;Up&rdquo; button </PDAT><HIL><BOLD><PDAT>505</PDAT></BOLD></HIL><PDAT>, a &ldquo;Down&rdquo; button </PDAT><HIL><BOLD><PDAT>506</PDAT></BOLD></HIL><PDAT>, a &ldquo;Left&rdquo; button </PDAT><HIL><BOLD><PDAT>507</PDAT></BOLD></HIL><PDAT>, a &ldquo;Right&rdquo; button </PDAT><HIL><BOLD><PDAT>508</PDAT></BOLD></HIL><PDAT>, and a &ldquo;Next&rdquo; button </PDAT><HIL><BOLD><PDAT>509</PDAT></BOLD></HIL><PDAT>. When the user presses the &ldquo;Document Display&rdquo; button </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT>, the &ldquo;Menu Display&rdquo; button </PDAT><HIL><BOLD><PDAT>503</PDAT></BOLD></HIL><PDAT>, or the &ldquo;Enter&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT>, a signal requesting document display, a signal requesting menu display, or a signal for operation initiation is transmitted to the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>. Similarly, when the user presses either the &ldquo;Up&rdquo; button </PDAT><HIL><BOLD><PDAT>505</PDAT></BOLD></HIL><PDAT> or the &ldquo;Down&rdquo; button </PDAT><HIL><BOLD><PDAT>506</PDAT></BOLD></HIL><PDAT>, a signal for moving the focus an operation item either up or down on the display of the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> is sent to the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>. Here, the &ldquo;focus&rdquo; of an operation item refers to a display condition, such as a highlight or shading, which allows easy discrimination of an indicated menu item from the other menu items.</PDAT></PTEXT></PARA>
<PARA ID="P-00148" LVL="0"><PTEXT><PDAT>On receiving a signal requesting document display, a signal requesting menu display, or a signal for operation initiation from the input operation unit </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT>, the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> gives the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> an indication for document display, for operation menu display, or for operation execution. In the same way, on receiving a signal to move the focus of an operation item up or down, it gives the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> an indication for up or down movement of the operation item focus.</PDAT></PTEXT></PARA>
<PARA ID="P-00149" LVL="0"><PTEXT><PDAT>On receiving a document display indication from the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> refers to the clock unit </PDAT><HIL><BOLD><PDAT>107</PDAT></BOLD></HIL><PDAT> and reads the present time, before reading the reception times </PDAT><HIL><BOLD><PDAT>203</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> added to the sets of document data </PDAT><HIL><BOLD><PDAT>201</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> stored in the document storage unit </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>, selecting the document data with the reception time which is closest to the present time (document data </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> in the present embodiment), and giving an indication to the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> which identifies the selected document data.</PDAT></PTEXT></PARA>
<PARA ID="P-00150" LVL="0"><PTEXT><PDAT>On receiving an operation menu display indication from the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> reads the content information of the document being displayed by the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> on the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> from the document storage unit </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> and sends it to the menu generating unit </PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT>. It should be noted here that when the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> receives an operation menu display indication and the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> is not having a document displayed by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> sends the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> an indication for &ldquo;Error Message Display&rdquo;. When a document such as that shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> (described below) is being displayed in the document display region </PDAT><HIL><BOLD><PDAT>601</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> reads the content information </PDAT><HIL><BOLD><PDAT>205</PDAT></BOLD></HIL><PDAT> shown in FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and gives an indication of &ldquo;Traffic Information&rdquo; to the menu generation unit </PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00151" LVL="0"><PTEXT><PDAT>On receiving an indication for up or down movement of the operation item focus from the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> also gives the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> an indication for such up or down movement.</PDAT></PTEXT></PARA>
<PARA ID="P-00152" LVL="0"><PTEXT><PDAT>On receiving an operation execution indication from the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> refers to the control status of the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> and finds the operation item in the operation menu displayed on the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> which is currently in focus using oblique shading . The control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> then notifies the operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> of the focussed operation item and the content information. It should be noted here that if a document and operation menu are not being displayed on the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> when the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> receives an operation execution indication, the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> sends the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> an indication for &ldquo;Error Message Display&rdquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00153" LVL="0"><PTEXT><PDAT>On receiving a notification of content information from the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, the menu generating unit </PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT> reads the menu information which corresponds to the content information from the menu information storage unit </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>, arid generates an operation menu with the read items as operation items. It then informs the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> of the generated operation menu.</PDAT></PTEXT></PARA>
<PARA ID="P-00154" LVL="0"><PTEXT><PDAT>As described above, an operation menu is generated in accordance with the content of the document which is being displayed by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>, so that the operation menu does not have a fixed content, as was the case with conventional apparatuses.</PDAT></PTEXT></PARA>
<PARA ID="P-00155" LVL="0"><PTEXT><PDAT>On receiving notification from the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> of document data to be displayed, the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> reads the document data from the document storage unit </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>, opens a window in the fixed region for displaying documents, and has the document displayed.</PDAT></PTEXT></PARA>
<PARA ID="P-00156" LVL="0"><PTEXT><PDAT>Here, when documents (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) and (</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>) of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> are stored in the document storage unit </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>, the more recent of the documents, document (</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>), is displayed by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>, as shown in FIG. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>. Aside from the document display region </PDAT><HIL><BOLD><PDAT>601</PDAT></BOLD></HIL><PDAT>, the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> displays a TV image. Also, the first piece of traffic information in the document in the document display region </PDAT><HIL><BOLD><PDAT>601</PDAT></BOLD></HIL><PDAT>, &ldquo;5km tailback between Deyashiki and Kosei Nenkin Hospital&rdquo;, is focused using shading to show that it is the default.</PDAT></PTEXT></PARA>
<PARA ID="P-00157" LVL="0"><PTEXT><PDAT>On receiving a notification of an operation menu generated by the menu generating unit </PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> has the operation menu displayed in a predetermined menu display region of the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00158" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> shows the operation menu </PDAT><HIL><BOLD><PDAT>701</PDAT></BOLD></HIL><PDAT> which is displayed when document (</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>) is displayed in the document display region </PDAT><HIL><BOLD><PDAT>601</PDAT></BOLD></HIL><PDAT> as shown in FIG. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>. Here, the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> has the first operation item in operation menu </PDAT><HIL><BOLD><PDAT>701</PDAT></BOLD></HIL><PDAT>, &ldquo;Print&rdquo;, focused using shading to show that it is the default.</PDAT></PTEXT></PARA>
<PARA ID="P-00159" LVL="0"><PTEXT><PDAT>On receiving an indication for an up or down movement of the focussed operation item from the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> moves the shaded display up or down to focus on a new operation item.</PDAT></PTEXT></PARA>
<PARA ID="P-00160" LVL="0"><PTEXT><PDAT>Operation menu </PDAT><HIL><BOLD><PDAT>801</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> shows how the display changes when a &ldquo;Down&rdquo; indication is received during the display of the operation menu </PDAT><HIL><BOLD><PDAT>701</PDAT></BOLD></HIL><PDAT> shown in FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>. This drawing shows the operation item &ldquo;Image Display&rdquo; is newly focused as the indicated operation item.</PDAT></PTEXT></PARA>
<PARA ID="P-00161" LVL="0"><PTEXT><PDAT>On receiving an &ldquo;Error Message Display&rdquo; indication from the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> has an error panel displayed in a window provide near the document display region of the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00162" LVL="0"><PTEXT><PDAT>When the operation menu </PDAT><HIL><BOLD><PDAT>801</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> is being displayed by the data processing apparatus described above and the user presses the &ldquo;Enter&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT> on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> which is the input operation unit </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT>, an image depicting the currently focused item &ldquo;5km tailback between Deyashiki and Kosei Nenkin Hospital&rdquo; is displayed in a different part of the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> to the document display region </PDAT><HIL><BOLD><PDAT>601</PDAT></BOLD></HIL><PDAT> and the menu display region.</PDAT></PTEXT></PARA>
<PARA ID="P-00163" LVL="0"><PTEXT><PDAT>The following is an explanation of the operation of the present embodiment with reference to the flowcharts in FIGS. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT> shows the processing as, far as the storage of the received document in the document storage unit </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>, and </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 10</PDAT></FGREF><PDAT> shows the processing as far as the display of the document and operation menu on the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> and the operation execution.</PDAT></PTEXT></PARA>
<PARA ID="P-00164" LVL="0"><PTEXT><PDAT>First, the broadcast receiving unit </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT> receives a TV broadcast (S</PDAT><HIL><BOLD><PDAT>902</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00165" LVL="0"><PTEXT><PDAT>The separating unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> judges whether the TV broadcast received by the broadcast receiving unit </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT> is a text-multiplexed broadcast signal (S</PDAT><HIL><BOLD><PDAT>904</PDAT></BOLD></HIL><PDAT>). If the signal is not a text-multiplexed broadcast signal, a return is performed to step S</PDAT><HIL><BOLD><PDAT>902</PDAT></BOLD></HIL><PDAT>, but if the received signal is a text-multiplexed broadcast signal, the separating unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> separates the character data signal and the image signal (S</PDAT><HIL><BOLD><PDAT>906</PDAT></BOLD></HIL><PDAT>). The separating unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> then converts the separated character data signal into character codes (S</PDAT><HIL><BOLD><PDAT>908</PDAT></BOLD></HIL><PDAT>), and has the character codes stored in the document storage unit </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> as document data to which the reception time is added (S</PDAT><HIL><BOLD><PDAT>910</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00166" LVL="0"><PTEXT><PDAT>The input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> waits for the transmission of an operation signal from the input operation unit </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>1002</PDAT></BOLD></HIL><PDAT>). On receiving an operation signal, the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> gives the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> a notification showing the nature of the received operation signal (S</PDAT><HIL><BOLD><PDAT>1004</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00167" LVL="0"><PTEXT><PDAT>The control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> judges whether the received indication is a document display indication (S</PDAT><HIL><BOLD><PDAT>1006</PDAT></BOLD></HIL><PDAT>), and if not advances to S</PDAT><HIL><BOLD><PDAT>1012</PDAT></BOLD></HIL><PDAT>. On receiving a document display indication, the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> gives the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> a display indication for a most recently received document in the document storage unit </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>1008</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00168" LVL="0"><PTEXT><PDAT>The display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> has the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> display the document (S</PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT>), and the processing returns to S</PDAT><HIL><BOLD><PDAT>1002</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00169" LVL="0"><PTEXT><PDAT>In S</PDAT><HIL><BOLD><PDAT>1012</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> judges whether the indication from the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> is an operation menu display indication, and if not, the processing advances to S</PDAT><HIL><BOLD><PDAT>1028</PDAT></BOLD></HIL><PDAT>. If the received indication is an operation menu display indication, the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> judges whether a document is already being displayed by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>1014</PDAT></BOLD></HIL><PDAT>). When no document is being displayed, the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> gives the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> an indication for error message display. The display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> then has an error message displayed by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>1026</PDAT></BOLD></HIL><PDAT>), and the processing returns to S</PDAT><HIL><BOLD><PDAT>1002</PDAT></BOLD></HIL><PDAT>. When a document is being displayed, the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> obtains the content information for the document currently being displayed by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>1016</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00170" LVL="0"><PTEXT><PDAT>The control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> informs the menu generating unit </PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT> of the obtained content information and gives an indication for operation menu generation (S</PDAT><HIL><BOLD><PDAT>1018</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00171" LVL="0"><PTEXT><PDAT>The menu generating unit </PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT> reads the menu information corresponding to the content information from the menu information storage unit </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>, generates an operation menu (S</PDAT><HIL><BOLD><PDAT>1020</PDAT></BOLD></HIL><PDAT>), and informs the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> of the generated operation menu (S</PDAT><HIL><BOLD><PDAT>1022</PDAT></BOLD></HIL><PDAT>). The display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> has the operation menu displayed by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> in addition to the document being displayed (S</PDAT><HIL><BOLD><PDAT>1024</PDAT></BOLD></HIL><PDAT>), and the processing returns to S</PDAT><HIL><BOLD><PDAT>1002</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00172" LVL="0"><PTEXT><PDAT>In S</PDAT><HIL><BOLD><PDAT>1028</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> judges whether the indication from the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> was an operation initiation indication, and if not, the processing returns to S</PDAT><HIL><BOLD><PDAT>1002</PDAT></BOLD></HIL><PDAT>. If the indication was an operation initiation indication, the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> judges whether a document and an operation menu are being displayed and whether an operation item is currently in focus (S</PDAT><HIL><BOLD><PDAT>1030</PDAT></BOLD></HIL><PDAT>). If not, the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> has an error message displayed (S</PDAT><HIL><BOLD><PDAT>1036</PDAT></BOLD></HIL><PDAT>), and the processing returns to S</PDAT><HIL><BOLD><PDAT>1002</PDAT></BOLD></HIL><PDAT>. On the other hand, when an operation item is in focus, the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> gives an indication for operation execution to the operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>1032</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00173" LVL="0"><PTEXT><PDAT>The operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> performs operation execution in accordance with the focused operation item (S</PDAT><HIL><BOLD><PDAT>1034</PDAT></BOLD></HIL><PDAT>) and the processing returns to S</PDAT><HIL><BOLD><PDAT>1002</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00174" LVL="0"><PTEXT><PDAT>It should be noted here that while the present embodiment states that the displayed operation menus charge in accordance with the content of the document being displayed, it is equally possible for the displayed operation menus to change with the different &ldquo;key words&rdquo; in the document being displayed.</PDAT></PTEXT></PARA>
<PARA ID="P-00175" LVL="0"><PTEXT><PDAT>In more detail, when the expression &ldquo;traffic jam&rdquo; is included in a document, an operation menu corresponding to the content information &ldquo;Traffic Information&rdquo; in the menu information may be displayed, or when the words &ldquo;second hand car&rdquo; appear in a document, an operation menu corresponding to the content information &ldquo;Shopping Information&rdquo; in the menu information may be displayed.</PDAT></PTEXT></PARA>
<PARA ID="P-00176" LVL="0"><PTEXT><PDAT>The present embodiment states that the content information for changing the displayed operation menus is transmitted from a TV station, although the reception time added to document data by the separating unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> may instead be used to change the content of operation menus. In such a situation, menu information corresponding to reception times is stored in the menu information storage unit </PDAT><HIL><BOLD><PDAT>105</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>Second Embodiment</PDAT></STEXT></H>
<PARA ID="P-00177" LVL="0"><PTEXT><PDAT>The construction of the data processing apparatus of the second embodiment of the present invention is shown in FIG. </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>. As shown in the drawing, the data processing apparatus is composed of a broadcast receiving unit </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT>, a separating unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT>, a display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>, a document storage unit </PDAT><HIL><BOLD><PDAT>1101</PDAT></BOLD></HIL><PDAT>, a menu information storage unit </PDAT><HIL><BOLD><PDAT>1102</PDAT></BOLD></HIL><PDAT>, an operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>, an input operation unit </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT>, an input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>, a control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT>, a menu generating unit </PDAT><HIL><BOLD><PDAT>1104</PDAT></BOLD></HIL><PDAT>, and a display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT>. Here, construction elements which are the same as the first embodiment have been given the same reference numerals and their explanation has been omitted, so that the following explanation will focus on the elements which are unique to the present embodiment.</PDAT></PTEXT></PARA>
<PARA ID="P-00178" LVL="0"><PTEXT><PDAT>The document storage unit </PDAT><HIL><BOLD><PDAT>1101</PDAT></BOLD></HIL><PDAT> can be made up of RAM or the like, and stores document data transmitted in text-multiplexed broadcasts, key words included in the document data, and a list of attributes of the key words. Here, &ldquo;key words&rdquo; are phrases in the document data to which operation menus have been attached.</PDAT></PTEXT></PARA>
<PARA ID="P-00179" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT> shows an example of the content of program data </PDAT><HIL><BOLD><PDAT>1201</PDAT></BOLD></HIL><PDAT> which is document data that includes key words. Program data </PDAT><HIL><BOLD><PDAT>1201</PDAT></BOLD></HIL><PDAT> includes a plurality of key words </PDAT><HIL><BOLD><PDAT>1202</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>1203</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>1204</PDAT></BOLD></HIL><PDAT>, . . . which have each been underlined.</PDAT></PTEXT></PARA>
<PARA ID="P-00180" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 13</PDAT></FGREF><PDAT> shows a table </PDAT><HIL><BOLD><PDAT>1301</PDAT></BOLD></HIL><PDAT> made up of each of the key words </PDAT><HIL><BOLD><PDAT>1202</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>1203</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>1204</PDAT></BOLD></HIL><PDAT>, . . . included in the program data </PDAT><HIL><BOLD><PDAT>1201</PDAT></BOLD></HIL><PDAT>, and types </PDAT><HIL><BOLD><PDAT>1302</PDAT></BOLD></HIL><PDAT> which are the attributes of the key words. As examples, the type of the key word &ldquo;Entertainment News&rdquo; is &ldquo;program title&rdquo;, and the type of the key word &ldquo;Hiromi Iijima&rdquo; is &ldquo;cast&rdquo;. Here, types are names of classifications which are used to classify the content of key words.</PDAT></PTEXT></PARA>
<PARA ID="P-00181" LVL="0"><PTEXT><PDAT>The menu information storage unit </PDAT><HIL><BOLD><PDAT>1102</PDAT></BOLD></HIL><PDAT> can be composed of ROM, and stores predetermined menu information for generating operation menus. Here, </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 14</PDAT></FGREF><PDAT> shows menu information </PDAT><HIL><BOLD><PDAT>1401</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>1402</PDAT></BOLD></HIL><PDAT> stored by the menu information storage unit </PDAT><HIL><BOLD><PDAT>1102</PDAT></BOLD></HIL><PDAT>. In this figure, menu information </PDAT><HIL><BOLD><PDAT>1401</PDAT></BOLD></HIL><PDAT> represents menu information (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) corresponding to the type of key word &ldquo;program title&rdquo;, while menu information </PDAT><HIL><BOLD><PDAT>1402</PDAT></BOLD></HIL><PDAT> represents menu information (</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>) corresponding to the type of key word &ldquo;cast&rdquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00182" LVL="0"><PTEXT><PDAT>Menu information </PDAT><HIL><BOLD><PDAT>1401</PDAT></BOLD></HIL><PDAT> includes each operation item to be displayed as part of an operation menu as items </PDAT><HIL><BOLD><PDAT>1403</PDAT></BOLD></HIL><PDAT> and execution operations </PDAT><HIL><BOLD><PDAT>1404</PDAT></BOLD></HIL><PDAT> to be performed corresponding to a selection of each item </PDAT><HIL><BOLD><PDAT>1403</PDAT></BOLD></HIL><PDAT>. Menu information </PDAT><HIL><BOLD><PDAT>1402</PDAT></BOLD></HIL><PDAT> is the same.</PDAT></PTEXT></PARA>
<PARA ID="P-00183" LVL="0"><PTEXT><PDAT>As in the first embodiment, when the user presses the &ldquo;Left&rdquo; button </PDAT><HIL><BOLD><PDAT>507</PDAT></BOLD></HIL><PDAT> or the &ldquo;Right&rdquo; button </PDAT><HIL><BOLD><PDAT>508</PDAT></BOLD></HIL><PDAT> on the input operation unit </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT>, a signal for moving the focus to the previous or next key word is transmitted to the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>. Here, the conception of previous and next key words is set so that the programs in a part of the program guide </PDAT><HIL><BOLD><PDAT>1501</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 15</PDAT></FGREF><PDAT> for an earlier time band are considered as previous, with, for a same time band, a key word at top left being first and a key word at bottom left being last.</PDAT></PTEXT></PARA>
<PARA ID="P-00184" LVL="0"><PTEXT><PDAT>On receiving a signal from the input operation unit </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> indicating movement of the key word focus to a previous or next key word, the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> gives an indication for movement of the key word focus to either the previous or next key word to the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00185" LVL="0"><PTEXT><PDAT>On receiving an indication for document display from the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> directs the display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT> to have the program data </PDAT><HIL><BOLD><PDAT>1201</PDAT></BOLD></HIL><PDAT> stored in the document storage unit </PDAT><HIL><BOLD><PDAT>1101</PDAT></BOLD></HIL><PDAT> displayed on the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00186" LVL="0"><PTEXT><PDAT>On receiving an indication for menu display from the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> refers to the display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT> to find out which key word in the program guide </PDAT><HIL><BOLD><PDAT>1501</PDAT></BOLD></HIL><PDAT> displayed by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> is currently in focus, before reading the type corresponding to the focused key word from the table </PDAT><HIL><BOLD><PDAT>1301</PDAT></BOLD></HIL><PDAT> in the document storage unit </PDAT><HIL><BOLD><PDAT>1101</PDAT></BOLD></HIL><PDAT>. It then informs the display control unit </PDAT><HIL><BOLD><PDAT>1104</PDAT></BOLD></HIL><PDAT> of this corresponding type.</PDAT></PTEXT></PARA>
<PARA ID="P-00187" LVL="0"><PTEXT><PDAT>On receiving a signal from the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> for moving a focus of the key word to a previous or next key word, the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> gives an indication to the display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT> to have the key word focus moved from its present position to either the previous or next key word.</PDAT></PTEXT></PARA>
<PARA ID="P-00188" LVL="0"><PTEXT><PDAT>On being informed by the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> of the type of key word, the menu generating unit </PDAT><HIL><BOLD><PDAT>1104</PDAT></BOLD></HIL><PDAT> reads either menu information (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) or menu information (</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>) corresponding to this type from the menu information </PDAT><HIL><BOLD><PDAT>1401</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>1402</PDAT></BOLD></HIL><PDAT> stored by the menu information storage unit </PDAT><HIL><BOLD><PDAT>1102</PDAT></BOLD></HIL><PDAT> and generates an operation menu which has every item </PDAT><HIL><BOLD><PDAT>1403</PDAT></BOLD></HIL><PDAT> as its operation items. It then sends the generated operation menu to the display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00189" LVL="0"><PTEXT><PDAT>On receiving an indication for a display of program data </PDAT><HIL><BOLD><PDAT>1201</PDAT></BOLD></HIL><PDAT> from the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> reads the program data </PDAT><HIL><BOLD><PDAT>1201</PDAT></BOLD></HIL><PDAT> from the document storage unit </PDAT><HIL><BOLD><PDAT>1101</PDAT></BOLD></HIL><PDAT> and, as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 15</PDAT></FGREF><PDAT>, has the program table </PDAT><HIL><BOLD><PDAT>1501</PDAT></BOLD></HIL><PDAT> displayed in a window provided on the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>. Here, techniques for generating a program guide from program information are already well-known in the U.S.A. in such fields as CATV.</PDAT></PTEXT></PARA>
<PARA ID="P-00190" LVL="0"><PTEXT><PDAT>The program guide </PDAT><HIL><BOLD><PDAT>1501</PDAT></BOLD></HIL><PDAT> is composed so that programs broadcast at each time band </PDAT><HIL><BOLD><PDAT>1503</PDAT></BOLD></HIL><PDAT> and their cast are written for each TV channel </PDAT><HIL><BOLD><PDAT>1502</PDAT></BOLD></HIL><PDAT>, with key words being provided with an underline </PDAT><HIL><BOLD><PDAT>1504</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00191" LVL="0"><PTEXT><PDAT>On being informed of the operation menu generated by the menu generating unit </PDAT><HIL><BOLD><PDAT>1104</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT> prepares a window to the bottom right of a key word which is currently in focus and displays the operation menu in this window.</PDAT></PTEXT></PARA>
<PARA ID="P-00192" LVL="0"><PTEXT><PDAT>On receiving an indication from the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> to move to the focus display to a previous or next key word, the display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT> has the focus display moved from the current key word to the previous or next key word so that the new key word is displayed in focus using shading on the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00193" LVL="0"><PTEXT><PDAT>It should be noted here that when the program guide is first shown on the display </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>, the first key word is displayed with a highlight as the default.</PDAT></PTEXT></PARA>
<PARA ID="P-00194" LVL="0"><PTEXT><PDAT>Here also, since the same construction elements are provided and the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> is provided with the same functions as the control unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> in the first embodiment, changes in the focus status of the operation items in the operation menu are handled in the same way as before.</PDAT></PTEXT></PARA>
<PARA ID="P-00195" LVL="0"><PTEXT><PDAT>The following is an explanation of specific examples Of user operations of the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> which is used as input operation unit </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> and of operation menus displayed by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> for the data processing apparatus constructed as described above.</PDAT></PTEXT></PARA>
<PARA ID="P-00196" LVL="0"><PTEXT><PDAT>The following explanation assumes that the program guide </PDAT><HIL><BOLD><PDAT>1501</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 15</PDAT></FGREF><PDAT> is displayed in a window by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> and the key word &ldquo;Entertainment News&rdquo; is currently in focus. Here, if the user presses the &ldquo;Menu Display&rdquo; button </PDAT><HIL><BOLD><PDAT>503</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT> has the operation menu </PDAT><HIL><BOLD><PDAT>1601</PDAT></BOLD></HIL><PDAT> for the type &ldquo;program title&rdquo; corresponding to &ldquo;Entertainment News&rdquo; displayed. If the user then presses the &ldquo;Right&rdquo; button </PDAT><HIL><BOLD><PDAT>508</PDAT></BOLD></HIL><PDAT> and the &ldquo;Menu Display&rdquo; button </PDAT><HIL><BOLD><PDAT>503</PDAT></BOLD></HIL><PDAT>, the operation menu </PDAT><HIL><BOLD><PDAT>1701</PDAT></BOLD></HIL><PDAT> for the type &ldquo;cast&rdquo; corresponding to the key word &ldquo;Hiromi Iijima&rdquo; is displayed. If the user presses the &ldquo;Down&rdquo; button </PDAT><HIL><BOLD><PDAT>506</PDAT></BOLD></HIL><PDAT> and then the &ldquo;Enter&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT>, the operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> executes the program in the &ldquo;show profile&rdquo; execution module for the operation item &ldquo;show profile&rdquo;, and the display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT> has the display of the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> changed to that shown in FIG. </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT>. As a result, a window showing the profile </PDAT><HIL><BOLD><PDAT>1801</PDAT></BOLD></HIL><PDAT> of the key word &ldquo;Hirorni Iijima&rdquo; is displayed overlapping the window which displays the program guide </PDAT><HIL><BOLD><PDAT>1501</PDAT></BOLD></HIL><PDAT>. It should be noted here that the profile of &ldquo;Hiromi Iijima&rdquo; which is necessary for the execution of the program in this &ldquo;show profile&rdquo; execution module and the mail address which is necessary for the execution of the program in the &ldquo;mail&rdquo; execution module are transmitted as character data in the text-multiplexed broadcast and are stored by the operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>. This operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> is also capable of sending electronic mail via a network which is not illustrated in the drawings, and stores photographs and the like in a data base which is readied beforehand.</PDAT></PTEXT></PARA>
<PARA ID="P-00197" LVL="0"><PTEXT><PDAT>The following is an explanation of the operation of the present embodiment with reference to the flowchart in FIG. </PDAT><HIL><BOLD><PDAT>19</PDAT></BOLD></HIL><PDAT>. Here, the storage of the received document in the document storage unit </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> is the same as in the first embodiment, so that no further description of this operation will be given. As a slight difference, it is not necessary to record the reception time in the program data </PDAT><HIL><BOLD><PDAT>1201</PDAT></BOLD></HIL><PDAT>, so that that operation is omitted.</PDAT></PTEXT></PARA>
<PARA ID="P-00198" LVL="0"><PTEXT><PDAT>The input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> waits for the transmission of an operation signal from the input operation unit </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>1902</PDAT></BOLD></HIL><PDAT>). On receiving an operation signal, the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> gives the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> a notification showing the nature of the received operation signal (S</PDAT><HIL><BOLD><PDAT>1904</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00199" LVL="0"><PTEXT><PDAT>The control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> judges whether the received indication is a document display indication (S</PDAT><HIL><BOLD><PDAT>1906</PDAT></BOLD></HIL><PDAT>), and if not, the processing advances to S</PDAT><HIL><BOLD><PDAT>1912</PDAT></BOLD></HIL><PDAT>. On receiving a document display indication, the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> gives the display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT> a display indication for a received document which is stored in the document storage unit </PDAT><HIL><BOLD><PDAT>1101</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>1908</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00200" LVL="0"><PTEXT><PDAT>The display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT> has the display unit </PDAT><HIL><BOLD><PDAT>113</PDAT></BOLD></HIL><PDAT> display the document (Sl</PDAT><HIL><BOLD><PDAT>910</PDAT></BOLD></HIL><PDAT>), and the processing returns to S</PDAT><HIL><BOLD><PDAT>1902</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00201" LVL="0"><PTEXT><PDAT>In S</PDAT><HIL><BOLD><PDAT>1912</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> judges whether the indication from the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> is an operation menu display indication, and if not, the processing advances to S</PDAT><HIL><BOLD><PDAT>1928</PDAT></BOLD></HIL><PDAT>. If the received indication is an operation menu display indication, the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> judges whether a document is already being displayed by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>1914</PDAT></BOLD></HIL><PDAT>). When no document is being displayed, the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> gives the display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT> an indication for error message display. The display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT> then has an error message displayed by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>1926</PDAT></BOLD></HIL><PDAT>), and the processing returns to S</PDAT><HIL><BOLD><PDAT>1902</PDAT></BOLD></HIL><PDAT>. When a document is being displayed, the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> obtains the key word which is currently in focus in the document being displayed by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT>, and then obtains the type which is the key word attribute for this obtained key word (S</PDAT><HIL><BOLD><PDAT>1916</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00202" LVL="0"><PTEXT><PDAT>The control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> informs the menu generating unit </PDAT><HIL><BOLD><PDAT>1104</PDAT></BOLD></HIL><PDAT> of the obtained key word attribute and gives an indication for operation menu generation (S</PDAT><HIL><BOLD><PDAT>1918</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00203" LVL="0"><PTEXT><PDAT>The menu generating unit </PDAT><HIL><BOLD><PDAT>1104</PDAT></BOLD></HIL><PDAT> reads the menu information corresponding to the key word attribute from the menu information storage unit </PDAT><HIL><BOLD><PDAT>1102</PDAT></BOLD></HIL><PDAT>, generates an operation menu (S</PDAT><HIL><BOLD><PDAT>1920</PDAT></BOLD></HIL><PDAT>), and informs the display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT> of the generated operation menu (S</PDAT><HIL><BOLD><PDAT>1922</PDAT></BOLD></HIL><PDAT>). The display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT> has the operation menu displayed by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> in addition to the document being displayed (S</PDAT><HIL><BOLD><PDAT>1924</PDAT></BOLD></HIL><PDAT>), and the processing returns to S</PDAT><HIL><BOLD><PDAT>1902</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00204" LVL="0"><PTEXT><PDAT>In S</PDAT><HIL><BOLD><PDAT>1928</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> judges whether the indication from the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> was an operation initiation indication, and if not, the processing advances to S</PDAT><HIL><BOLD><PDAT>1938</PDAT></BOLD></HIL><PDAT>. If the indication was an operation initiation indication, the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> judges whether a document and an operation menu are being displayed and whether an operation item is currently in focus (S</PDAT><HIL><BOLD><PDAT>1930</PDAT></BOLD></HIL><PDAT>). If not, the display control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> has an error message displayed (S</PDAT><HIL><BOLD><PDAT>1936</PDAT></BOLD></HIL><PDAT>), and the processing returns to S</PDAT><HIL><BOLD><PDAT>1902</PDAT></BOLD></HIL><PDAT>. On the other hand, when a document and an operation are being displayed and an operation item is in focus, the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> gives an indication for operation execution to the operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>1932</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00205" LVL="0"><PTEXT><PDAT>The operation execution unit </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> performs operation execution in accordance with the operation item (S</PDAT><HIL><BOLD><PDAT>1934</PDAT></BOLD></HIL><PDAT>) and the processing returns to S</PDAT><HIL><BOLD><PDAT>1902</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00206" LVL="0"><PTEXT><PDAT>In S</PDAT><HIL><BOLD><PDAT>1938</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> judges whether the indication from the input signal reception unit </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> was an indication to move the key word focus, and if not, the processing returns to S</PDAT><HIL><BOLD><PDAT>1902</PDAT></BOLD></HIL><PDAT>. If the indication was an indication to move the key word focus, the control unit </PDAT><HIL><BOLD><PDAT>1103</PDAT></BOLD></HIL><PDAT> judges whether it was an indication to move the focus to a next key word (S</PDAT><HIL><BOLD><PDAT>1940</PDAT></BOLD></HIL><PDAT>). If so, the display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT> moves the key word focus to the next key word (S</PDAT><HIL><BOLD><PDAT>1942</PDAT></BOLD></HIL><PDAT>), or, if the indication was not for the next key word, the display control unit </PDAT><HIL><BOLD><PDAT>1105</PDAT></BOLD></HIL><PDAT> moves the key word focus to the previous key word (S</PDAT><HIL><BOLD><PDAT>1944</PDAT></BOLD></HIL><PDAT>) and the processing returns to S</PDAT><HIL><BOLD><PDAT>1902</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00207" LVL="0"><PTEXT><PDAT>It should be noted here that while the &ldquo;type&rdquo; attribute of each key word is stored in a different table </PDAT><HIL><BOLD><PDAT>1301</PDAT></BOLD></HIL><PDAT>, shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 13</PDAT></FGREF><PDAT>, to the program data </PDAT><HIL><BOLD><PDAT>1201</PDAT></BOLD></HIL><PDAT> in the present embodiment, this &ldquo;type&rdquo; attribute of each key word may instead be added to the program data </PDAT><HIL><BOLD><PDAT>1201</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00208" LVL="0"><PTEXT><PDAT>The present embodiment also states that key words are already indicated in the program data </PDAT><HIL><BOLD><PDAT>1201</PDAT></BOLD></HIL><PDAT> stored in the document storage unit </PDAT><HIL><BOLD><PDAT>1101</PDAT></BOLD></HIL><PDAT>, although it is also possible for key words in the kind of table </PDAT><HIL><BOLD><PDAT>1301</PDAT></BOLD></HIL><PDAT> of key words and type attributes shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 13</PDAT></FGREF><PDAT> to be extracted from the program data </PDAT><HIL><BOLD><PDAT>1201</PDAT></BOLD></HIL><PDAT> using a conventional key word extraction technique. An example of such a technique is disclosed in &ldquo;Processing Japanese Language Information&rdquo; by Tanaka et. al, edited by Takahashi, published by Kindai Kagakusha.</PDAT></PTEXT></PARA>
<PARA ID="P-00209" LVL="0"><PTEXT><PDAT>Finally, the present embodiment describes the case when the added operation menus are changed in accordance with the &ldquo;type&rdquo; attribute of key words, although a different added menu may be used for each different key word.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>Third Embodiment</PDAT></STEXT></H>
<PARA ID="P-00210" LVL="0"><PTEXT><PDAT>The construction of the data processing apparatus of the third embodiment of the present invention is shown in FIG. </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT>. As shown in the drawing, the data processing apparatus is composed of a data storage unit </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT>, an input operation unit </PDAT><HIL><BOLD><PDAT>2002</PDAT></BOLD></HIL><PDAT>, an input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT>, a control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT>, a display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT>, a display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>, and a menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00211" LVL="0"><PTEXT><PDAT>The data storage unit </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT> can be made up of RAM and ROM, and, as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 21</PDAT></FGREF><PDAT>, stores a plurality of documents (sets of document data). Sets of document data are made up of a title and a content and are linked together as shown by the arrows </PDAT><HIL><BOLD><PDAT>2101</PDAT></BOLD></HIL><PDAT> in FIG. </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>. As one example, the title of data </PDAT><HIL><BOLD><PDAT>2102</PDAT></BOLD></HIL><PDAT> for document (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) is &ldquo;Latest Soccer Results&rdquo; and the content is &ldquo;Gampa 3 Herdy 0 . . . &rdquo;. This data </PDAT><HIL><BOLD><PDAT>2102</PDAT></BOLD></HIL><PDAT> is linked to data </PDAT><HIL><BOLD><PDAT>2103</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2104</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2105</PDAT></BOLD></HIL><PDAT>, etc. In the same way, data </PDAT><HIL><BOLD><PDAT>2104</PDAT></BOLD></HIL><PDAT> is linked to data </PDAT><HIL><BOLD><PDAT>2106</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>2107</PDAT></BOLD></HIL><PDAT>, with data </PDAT><HIL><BOLD><PDAT>2103</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2105</PDAT></BOLD></HIL><PDAT> being similarly linked to other sets of data.</PDAT></PTEXT></PARA>
<PARA ID="P-00212" LVL="0"><PTEXT><PDAT>The input operation unit </PDAT><HIL><BOLD><PDAT>2002</PDAT></BOLD></HIL><PDAT> has the same construction as the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> in the first embodiment, except that the operations corresponding to the user pressing the &ldquo;Next&rdquo; button </PDAT><HIL><BOLD><PDAT>509</PDAT></BOLD></HIL><PDAT>, the &ldquo;Right&rdquo; button </PDAT><HIL><BOLD><PDAT>508</PDAT></BOLD></HIL><PDAT>, and the &ldquo;Enter&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT> are different. When the user presses the &ldquo;Next&rdquo; button </PDAT><HIL><BOLD><PDAT>509</PDAT></BOLD></HIL><PDAT>, the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> transmits a signal indicating movement of the menu item focus to the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT>. Here, movement of the menu item focus refers to movement of the focus display to the menu item at a next lower position. When the user presses the &ldquo;Right&rdquo; button </PDAT><HIL><BOLD><PDAT>508</PDAT></BOLD></HIL><PDAT>, the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> transmits a signal indicating hierarchical menu display to the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT>. Here, hierarchical menu display refers to the addition of a menu which has a menu item corresponding to data linked to the data corresponding to the menu item in focus. When the user presses the &ldquo;Enter&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT>, the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> transmits a signal indicating updated display for the data corresponding to the menu item in focus to the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00213" LVL="0"><PTEXT><PDAT>It should be noted here that the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> transmits a signal indicating initial data display to the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT> when the user presses the &ldquo;Document Display&rdquo; button </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT>, and a signal indicating menu display for the displayed data to the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT> when the user presses the &ldquo;Menu Display&rdquo; button </PDAT><HIL><BOLD><PDAT>503</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00214" LVL="0"><PTEXT><PDAT>On receiving the operation signal sent from the input operation unit </PDAT><HIL><BOLD><PDAT>2002</PDAT></BOLD></HIL><PDAT>, the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT> sends an indication to the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> in accordance with the content of the operation signal.</PDAT></PTEXT></PARA>
<PARA ID="P-00215" LVL="0"><PTEXT><PDAT>The control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether the indication from the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT> is a data display indication, a menu display indication, a movement of the menu item focus indication, a hierarchical menu display indication, or an updated data display indication.</PDAT></PTEXT></PARA>
<PARA ID="P-00216" LVL="0"><PTEXT><PDAT>On receiving a data display indication, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> refers to the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> and judges whether data is already being displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>. If no data is being displayed, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> gives the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> an indication for data display.</PDAT></PTEXT></PARA>
<PARA ID="P-00217" LVL="0"><PTEXT><PDAT>On receiving a menu display indication, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> refers to the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> and judges whether data is already being displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>. If data is being displayed, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether data is already being displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>. When it judges that no menu is being displayed, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> refers to the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> to obtain the title of the data being displayed, and informs the menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT> of this title.</PDAT></PTEXT></PARA>
<PARA ID="P-00218" LVL="0"><PTEXT><PDAT>On receiving a movement of the menu item focus indication, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether data and a menu are already being displayed. If so, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> informs the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> of a movement of the focus of a menu item.</PDAT></PTEXT></PARA>
<PARA ID="P-00219" LVL="0"><PTEXT><PDAT>On receiving a hierarchical menu display indication, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether data and a menu are being displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>. If so, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> obtains the menu item which is currently in focus from the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> and refers to the data storage unit </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT> to judge whether there is any data which is linked to the data which corresponds to the focused menu item. When there is such linked data, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> gives the menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT> the menu item in focus and an indication to add the generated menu.</PDAT></PTEXT></PARA>
<PARA ID="P-00220" LVL="0"><PTEXT><PDAT>On receiving an updated data display indication, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether data and a menu are being displayed, and if so, gives the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> an indication to update the data display.</PDAT></PTEXT></PARA>
<PARA ID="P-00221" LVL="0"><PTEXT><PDAT>On receiving an indication for data display from the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> opens a window in the data display region provided on the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>, reads the data stored at the top of the data storage unit </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT>, and has this data displayed in the window.</PDAT></PTEXT></PARA>
<PARA ID="P-00222" LVL="0"><PTEXT><PDAT>On receiving notification of a menu generated by the menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> opens a window provided in the menu display region which slightly overlaps the data display region of the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>, and has the menu displayed in this window.</PDAT></PTEXT></PARA>
<PARA ID="P-00223" LVL="0"><PTEXT><PDAT>On receiving an indication for movement of the menu item focus from the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> moves the focus display from the menu item which is currently being in focus with the oblique shading to the next lowest menu item. When the lowest menu item is currently in focus, the next movement of the menu item focus returns the focus display to the menu item at the top of the menu. This menu item which is currently displayed to show that it is currently in focus is also stored separately so that it can be quickly obtained by the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> and other elements.</PDAT></PTEXT></PARA>
<PARA ID="P-00224" LVL="0"><PTEXT><PDAT>On receiving an indication of a menu generated by the menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT> and an indication to add the menu, the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> opens a window provided in a new menu display region which slightly overlaps the first menu display region on the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> and has the menu displayed in the newly opened window.</PDAT></PTEXT></PARA>
<PARA ID="P-00225" LVL="0"><PTEXT><PDAT>On receiving an indication from the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> for updating data display, the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> reads the data for a title which corresponds to the focused menu item from the data storage unit </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT> and updates the display in the data display region.</PDAT></PTEXT></PARA>
<PARA ID="P-00226" LVL="0"><PTEXT><PDAT>The display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> can be made up of a TV, a CRT computer display screen, or a liquid crystal display. The display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> displays data and menus according to control by the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00227" LVL="0"><PTEXT><PDAT>On receiving an indication of a title of data from the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT>, the menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT> refers to the set of data stored in the data storage unit </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT> which has a title which corresponds to the obtained title, and reads the title of each set of data which is linked to the present data. The menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT> then generates a menu which has these titles as its menu items, and informs the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> of this newly generated menu.</PDAT></PTEXT></PARA>
<PARA ID="P-00228" LVL="0"><PTEXT><PDAT>On receiving an indication from the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> for a menu item and the addition of a generated menu, the menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT> finds the title corresponding to the menu item from the data stored in the data storage unit </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT> and reads the title of every set of data which is linked to the data corresponding to this title. It then generates a menu which has the read titles as its menu items and instructs the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> to add this generated menu.</PDAT></PTEXT></PARA>
<PARA ID="P-00229" LVL="0"><PTEXT><PDAT>The following is a simplified explanation of an example display of hierarchical menus which are displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00230" LVL="0"><PTEXT><PDAT>When a plurality of documents (sets of document data) </PDAT><HIL><BOLD><PDAT>2102</PDAT></BOLD></HIL><PDAT> are stored in the data storage unit </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT> as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 21</PDAT></FGREF><PDAT>, and the user presses the &ldquo;Document Display&rdquo; button </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT> on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>, the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> displays document (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) which is the set of data stored at the top of the data storage unit </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT> in the window </PDAT><HIL><BOLD><PDAT>2201</PDAT></BOLD></HIL><PDAT> in t;he data display region, as shown in FIG. </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>. Next, if the user presses the &ldquo;Menu Display&rdquo; button </PDAT><HIL><BOLD><PDAT>503</PDAT></BOLD></HIL><PDAT> of the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>, the menu generated by the menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT> is displayed in the window </PDAT><HIL><BOLD><PDAT>2301</PDAT></BOLD></HIL><PDAT> of the menu display region, as shown in FIG. </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>. This menu has the titles of sets of data which are linked to the document (</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>) displayed in window </PDAT><HIL><BOLD><PDAT>2201</PDAT></BOLD></HIL><PDAT> as its menu items. In displaying such a menu, the top menu item &ldquo;League table&rdquo; is displayed using oblique shading as the default.</PDAT></PTEXT></PARA>
<PARA ID="P-00231" LVL="0"><PTEXT><PDAT>When the user presses the &ldquo;Next&rdquo; button </PDAT><HIL><BOLD><PDAT>509</PDAT></BOLD></HIL><PDAT> on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> once, the shaded highlight is moved to the menu item &ldquo;Gampa&rdquo;, as shown in FIG. </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>. If the user then presses the &ldquo;Right&rdquo; button </PDAT><HIL><BOLD><PDAT>508</PDAT></BOLD></HIL><PDAT>, a menu is generated which has the titles of data </PDAT><HIL><BOLD><PDAT>2106</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2107</PDAT></BOLD></HIL><PDAT>, which are linked to the data </PDAT><HIL><BOLD><PDAT>2104</PDAT></BOLD></HIL><PDAT> which has &ldquo;Gampa&rdquo; as its title, as its menu items and is displayed as a submenu in a newly provided window </PDAT><HIL><BOLD><PDAT>2501</PDAT></BOLD></HIL><PDAT>. Here, if the user presses the &ldquo;Enter&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT>, the display is updated with data </PDAT><HIL><BOLD><PDAT>2106</PDAT></BOLD></HIL><PDAT>, which corresponds to the focused menu item in the newly displayed menu, being displayed in a newly provided window in the data display region, as shown in FIG. </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00232" LVL="0"><PTEXT><PDAT>In the present embodiment, so long as the user keeps pressing the &ldquo;Right&rdquo; button </PDAT><HIL><BOLD><PDAT>508</PDAT></BOLD></HIL><PDAT> and does not press the &ldquo;Enter&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT>, the menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT> generates menus on lower levels of the hierarchy and the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> has these lower level menus in the hierarchy displayed in new windows on the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>, until there is no more linked data in the data storage unit </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00233" LVL="0"><PTEXT><PDAT>The following is an explanation of the operation of the present embodiment, with reference to the flowchart in FIG. </PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00234" LVL="0"><PTEXT><PDAT>The input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT> waits for the transmission of an operation signal from the input operation unit </PDAT><HIL><BOLD><PDAT>2002</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT>). On receiving an operation signal, the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT> gives the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> a notification showing the nature of the received operation signal (S</PDAT><HIL><BOLD><PDAT>2704</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00235" LVL="0"><PTEXT><PDAT>The control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether the received indication is a document display indication (S</PDAT><HIL><BOLD><PDAT>2706</PDAT></BOLD></HIL><PDAT>), and if not, the processing advances to S</PDAT><HIL><BOLD><PDAT>2712</PDAT></BOLD></HIL><PDAT>. On receiving a document display indication, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether data is already being displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>2708</PDAT></BOLD></HIL><PDAT>), and if so, the processing returns to S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT>. When data is not being displayed, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> gives an indication for data display to the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00236" LVL="0"><PTEXT><PDAT>The display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> reads the data stored at the top of the data storage unit </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT>, has the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> display the document (S</PDAT><HIL><BOLD><PDAT>2710</PDAT></BOLD></HIL><PDAT>), and the processing returns to S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00237" LVL="0"><PTEXT><PDAT>In S</PDAT><HIL><BOLD><PDAT>2712</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether the indication from the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT> is a menu display indication, and if not, the processing advances to S</PDAT><HIL><BOLD><PDAT>2728</PDAT></BOLD></HIL><PDAT>. If the received indication is a menu display indication, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether data is already being displayed by the display unit </PDAT><HIL><BOLD><PDAT>103</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>2714</PDAT></BOLD></HIL><PDAT>). When no data is being displayed, the processing returns to S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT>. When data is being displayed, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether a menu is already being displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>2716</PDAT></BOLD></HIL><PDAT>), and if so, the processing returns to S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT>. When no menu is being displayed, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> gives the menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT> an indication to generate a menu for the data being displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>2718</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00238" LVL="0"><PTEXT><PDAT>The menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT> obtains the title information for sets of data which are linked to the data being displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> from the data storage unit </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>2720</PDAT></BOLD></HIL><PDAT>) and generates a menu with the obtained title information as menu items (S</PDAT><HIL><BOLD><PDAT>2722</PDAT></BOLD></HIL><PDAT>). The menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT> then informs the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> of the generated menu, and gives an indication for the addition of the menu to the display of the data (S</PDAT><HIL><BOLD><PDAT>2724</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00239" LVL="0"><PTEXT><PDAT>The display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> has newly generated menu added to the display of the data on the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>2726</PDAT></BOLD></HIL><PDAT>), and the processing returns to S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00240" LVL="0"><PTEXT><PDAT>In S</PDAT><HIL><BOLD><PDAT>2728</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether the indication from the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT> is a movement of menu item focus indication, and if not, the processing advances to S</PDAT><HIL><BOLD><PDAT>2736</PDAT></BOLD></HIL><PDAT>. If the indication is a movement of menu item focus indication, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> is having a document and an operation menu displayed on the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>2730</PDAT></BOLD></HIL><PDAT>). If not, the processing returns to S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT>. On the other hand, when both data and a menu are being displayed, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> gives an indication to the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> to move the menu item focus to the next menu item (S</PDAT><HIL><BOLD><PDAT>2732</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00241" LVL="0"><PTEXT><PDAT>The display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> moves the menu item focus to the next menu item and has the menu displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>2734</PDAT></BOLD></HIL><PDAT>), before the processing returns to S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00242" LVL="0"><PTEXT><PDAT>In S</PDAT><HIL><BOLD><PDAT>2736</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether the indication from the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT> is a hierarchical menu display indication, and if not, the processing advances to S</PDAT><HIL><BOLD><PDAT>2752</PDAT></BOLD></HIL><PDAT>. If the indication is a hierarchical menu display indication, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> is having data and a menu displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>2738</PDAT></BOLD></HIL><PDAT>). If not, the processing returns to S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT>. On the other hand, when both data and a menu are displayed, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether there is any data which is linked to the data corresponding to the focused menu item (S</PDAT><HIL><BOLD><PDAT>2740</PDAT></BOLD></HIL><PDAT>). If there is no such data, the processing returns to S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT>, while when such data exists, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> gives an indication to the menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT> to generate a menu for the data which is judged to have linked data (S</PDAT><HIL><BOLD><PDAT>2742</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00243" LVL="0"><PTEXT><PDAT>The menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT> retrieves the title information for the data linked to the indicated data from the data storage unit </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>2744</PDAT></BOLD></HIL><PDAT>). The menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT> then generates a menu from the retrieved title information (S</PDAT><HIL><BOLD><PDAT>2746</PDAT></BOLD></HIL><PDAT>). It then informs the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> of the generated menu, and gives the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> an indication to have the generated menu displayed in a hierarchy with the menus currently displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>2748</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00244" LVL="0"><PTEXT><PDAT>The display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> has the data with the added menu hierarchy displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>2750</PDAT></BOLD></HIL><PDAT>), and the processing returns to S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00245" LVL="0"><PTEXT><PDAT>In S</PDAT><HIL><BOLD><PDAT>2752</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether the indication from the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT> is an indication for updating data display. If not, the processing returns to S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT>. If the indication was an indication for updating data display, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> judges whether data and a menu are currently being displayed (S</PDAT><HIL><BOLD><PDAT>2754</PDAT></BOLD></HIL><PDAT>). If data and a menu are not being displayed, the processing returns to S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT>. On the other hand, when both data and a menu are being displayed, the control unit </PDAT><HIL><BOLD><PDAT>2004</PDAT></BOLD></HIL><PDAT> gives an indication to the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> to update the display using the data which has the focused menu item as its title (S</PDAT><HIL><BOLD><PDAT>2756</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00246" LVL="0"><PTEXT><PDAT>The display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> reads the data which has the focused menu item as its title information from the data storage unit </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT>, and has the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> update its display using the new data (S</PDAT><HIL><BOLD><PDAT>2758</PDAT></BOLD></HIL><PDAT>), before the processing returns to S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00247" LVL="0"><PTEXT><PDAT>By means of the construction described above, when data is linked to other data, it is not necessary to switch the display from one set of data to a next linked set of data every time, so that the user may skip intermediate links on the route to their desired data and by doing so obtain their desired information quickly and easily.</PDAT></PTEXT></PARA>
<PARA ID="P-00248" LVL="0"><PTEXT><PDAT>It should be noted here that while the present embodiment describes the case when the first data to be displayed is the data at the top of the data storage unit </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT>, this need not be the case, so that the user may instead select an arbitrary set of data, or alternatively a set of data which was the final set of data displayed during a previous operation may be stored and then used again.</PDAT></PTEXT></PARA>
<PARA ID="P-00249" LVL="0"><PTEXT><PDAT>The present embodiment has also been described as using titles of sets of data as menu items, although candidate data for menu items may be stored beforehand in the menu generating unit </PDAT><HIL><BOLD><PDAT>2007</PDAT></BOLD></HIL><PDAT> with candidates corresponding to parts of the sets of data being used as menu items. Alternatively, the first twenty characters (or any other number of characters) in a set of data may be used as its menu item.</PDAT></PTEXT></PARA>
<PARA ID="P-00250" LVL="0"><PTEXT><PDAT>Finally, in the present embodiment, the original data (&ldquo;Latest Soccer Results&rdquo;) is cleared when the data corresponding to the menu item &ldquo;Osaka&rdquo; is displayed, although the display of this data may be continued.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>Fourth Embodiment</PDAT></STEXT></H>
<PARA ID="P-00251" LVL="0"><PTEXT><PDAT>The construction of the data processing apparatus of the fourth embodiment of the present invention is shown in FIG. </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT>. As shown in the drawing, the data processing apparatus is composed of data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT>, an input operation unit </PDAT><HIL><BOLD><PDAT>2002</PDAT></BOLD></HIL><PDAT>, an input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT>, a control unit </PDAT><HIL><BOLD><PDAT>2802</PDAT></BOLD></HIL><PDAT>, a display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT>, a display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>, and a menu generating unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT>. Here, the construction of this data processing apparatus is largely the same as that in the third embodiment, so that elements which are the same as the third embodiment have been given the same reference numerals and their explanation has been omitted. The following explanation will focus on the elements which are unique to the present embodiment.</PDAT></PTEXT></PARA>
<PARA ID="P-00252" LVL="0"><PTEXT><PDAT>As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 29</PDAT></FGREF><PDAT>, the difference between the present embodiment and the third embodiment is that the plurality of sets of data included in the data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT> are not linked together as such. Instead, text items included as part of the content of a set of data (for example, hot spots) are linked to other sets of data. The text items referred to here form parts of a set of the data and are linked to other sets of data.</PDAT></PTEXT></PARA>
<PARA ID="P-00253" LVL="0"><PTEXT><PDAT>The data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT> can be made up of ROM and RAM, and, as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 29</PDAT></FGREF><PDAT>, already stores a plurality of sets of data.</PDAT></PTEXT></PARA>
<PARA ID="P-00254" LVL="0"><PTEXT><PDAT>Data </PDAT><HIL><BOLD><PDAT>2901</PDAT></BOLD></HIL><PDAT> is made up of a title and a content, with its content including text items </PDAT><HIL><BOLD><PDAT>2905</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2906</PDAT></BOLD></HIL><PDAT> which are linked to other sets of data </PDAT><HIL><BOLD><PDAT>2902</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2903</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2904</PDAT></BOLD></HIL><PDAT>, etc. These links are shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 29</PDAT></FGREF><PDAT> by arrows, such as </PDAT><HIL><BOLD><PDAT>2907</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>2908</PDAT></BOLD></HIL><PDAT>. These text items </PDAT><HIL><BOLD><PDAT>2905</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2906</PDAT></BOLD></HIL><PDAT>, etc are shown underlined in the drawing.</PDAT></PTEXT></PARA>
<PARA ID="P-00255" LVL="0"><PTEXT><PDAT>On receiving an indication for menu display from the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>2802</PDAT></BOLD></HIL><PDAT> refers to the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> to judge whether a set of data is already being displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>. When a set of data is displayed, the control unit then judges whether a menu is being displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>. When a menu is yet to be displayed, the control unit </PDAT><HIL><BOLD><PDAT>2802</PDAT></BOLD></HIL><PDAT> obtains the focused text item from the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> and informs the menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> of this text item.</PDAT></PTEXT></PARA>
<PARA ID="P-00256" LVL="0"><PTEXT><PDAT>On receiving a hierarchical menu display indication from the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>2802</PDAT></BOLD></HIL><PDAT> refers to the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> to judge whether data and a menu are being displayed on the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>. When data and a menu are being displayed, the control unit </PDAT><HIL><BOLD><PDAT>2802</PDAT></BOLD></HIL><PDAT> obtains the focused menu item from the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> and informs the menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> of this menu item.</PDAT></PTEXT></PARA>
<PARA ID="P-00257" LVL="0"><PTEXT><PDAT>On receiving an indication of a text item from the control unit </PDAT><HIL><BOLD><PDAT>2802</PDAT></BOLD></HIL><PDAT>, the menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> refers to the data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT> and judges whether the indicated text item is linked to a plurality of other sets of data, or just to one other set of data. On receiving an indication of a menu item from the control unit </PDAT><HIL><BOLD><PDAT>2802</PDAT></BOLD></HIL><PDAT>, the menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> refers to the data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT> and judges whether the menu item is a title of whether it is a text item. If the focused menu item is a text item, the menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> refers to the data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT> in the same way as above, and judges whether the indicated text item is linked to a plurality of other sets of data, or just to one other set of data.</PDAT></PTEXT></PARA>
<PARA ID="P-00258" LVL="0"><PTEXT><PDAT>When it is judged that the indicated text item is linked to a plurality of other sets of data, the menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> reads the titles of the linked sets of data in the data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT>, and generates a menu with these titles as menu items.</PDAT></PTEXT></PARA>
<PARA ID="P-00259" LVL="0"><PTEXT><PDAT>When it is judged that the indicated text item is linked to only one other set of data, the menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> reads the text items (text items which are linked to other sets of data) included in this set of linked data, and generates a menu with these text items as menu items.</PDAT></PTEXT></PARA>
<PARA ID="P-00260" LVL="0"><PTEXT><PDAT>When it is judged that the indicated menu item is a title, the menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> reads the text items included in this set of linked data, and generates a menu with these text items as menu items.</PDAT></PTEXT></PARA>
<PARA ID="P-00261" LVL="0"><PTEXT><PDAT>The menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> then informs the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> of the menu it has generated.</PDAT></PTEXT></PARA>
<PARA ID="P-00262" LVL="0"><PTEXT><PDAT>On receiving a menu from the menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT>, when no menu is being displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> has the menu displayed in a window in the menu display region at a position which does not cover the focused text item. When a menu is already being displayed, the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> has the new menu displayed in a window provided as a new menu display region at a position close to the focused menu item.</PDAT></PTEXT></PARA>
<PARA ID="P-00263" LVL="0"><PTEXT><PDAT>The following is an explanation of a specific operation of the present data processing device when displaying hierarchical menus with a set of document data stored in the data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00264" LVL="0"><PTEXT><PDAT>Here, as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 29</PDAT></FGREF><PDAT>, a plurality of sets of data </PDAT><HIL><BOLD><PDAT>2901</PDAT></BOLD></HIL><PDAT> which each have their own title are stored in the data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT>, with links </PDAT><HIL><BOLD><PDAT>2907</PDAT></BOLD></HIL><PDAT> being established between sets of data. When the user presses the &ldquo;Document Display&rdquo; (which means the same as data display) button </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT> on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> which is used as the input operation unit </PDAT><HIL><BOLD><PDAT>2002</PDAT></BOLD></HIL><PDAT>, a data display signal is sent to the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT>. A set of data </PDAT><HIL><BOLD><PDAT>2901</PDAT></BOLD></HIL><PDAT> is then displayed by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>. Here, the data which is displayed first is the data </PDAT><HIL><BOLD><PDAT>2901</PDAT></BOLD></HIL><PDAT> which is stored at the top of the data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00265" LVL="0"><PTEXT><PDAT>If the user then presses the &ldquo;Menu Display&rdquo; button </PDAT><HIL><BOLD><PDAT>503</PDAT></BOLD></HIL><PDAT> on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>, the input signal reception unit </PDAT><HIL><BOLD><PDAT>2003</PDAT></BOLD></HIL><PDAT> receives a menu display signal. As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 30</PDAT></FGREF><PDAT>, data </PDAT><HIL><BOLD><PDAT>2901</PDAT></BOLD></HIL><PDAT> and menu </PDAT><HIL><BOLD><PDAT>3001</PDAT></BOLD></HIL><PDAT> are then displayed on the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>. Here, menu </PDAT><HIL><BOLD><PDAT>3001</PDAT></BOLD></HIL><PDAT> is made up of menu items which are the titles of data </PDAT><HIL><BOLD><PDAT>2902</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2903</PDAT></BOLD></HIL><PDAT>, etc., since the text item &ldquo;Gampa&rdquo; is linked to a plurality of sets of data </PDAT><HIL><BOLD><PDAT>2902</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2903</PDAT></BOLD></HIL><PDAT>, etc.</PDAT></PTEXT></PARA>
<PARA ID="P-00266" LVL="0"><PTEXT><PDAT>If the user then presses the &ldquo;Right&rdquo; button </PDAT><HIL><BOLD><PDAT>508</PDAT></BOLD></HIL><PDAT> on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>, a new menu </PDAT><HIL><BOLD><PDAT>3101</PDAT></BOLD></HIL><PDAT> which has text items included in the indicated menu item &ldquo;Introducing Gampa&rdquo; as menu items is displayed as shown in FIG. </PDAT><HIL><BOLD><PDAT>31</PDAT></BOLD></HIL><PDAT>. This is because the menu item &ldquo;Introducing Gampa&rdquo; is a title, not a text item.</PDAT></PTEXT></PARA>
<PARA ID="P-00267" LVL="0"><PTEXT><PDAT>If the user then presses the &ldquo;Down&rdquo; button </PDAT><HIL><BOLD><PDAT>506</PDAT></BOLD></HIL><PDAT> on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>, the menu item focus is moved to &ldquo;Matsuura Electric&rdquo;, as shown in FIG. </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00268" LVL="0"><PTEXT><PDAT>Here, if the user presses the &ldquo;Right&rdquo; button </PDAT><HIL><BOLD><PDAT>508</PDAT></BOLD></HIL><PDAT> on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>, a new menu </PDAT><HIL><BOLD><PDAT>3301</PDAT></BOLD></HIL><PDAT>, which has the titles of the sets of data </PDAT><HIL><BOLD><PDAT>2909</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2910</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>2911</PDAT></BOLD></HIL><PDAT> which are linked to the text item &ldquo;Matsuura Electric&rdquo; as menu items, is displayed as shown in FIG. </PDAT><HIL><BOLD><PDAT>33</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00269" LVL="0"><PTEXT><PDAT>If the user then presses the &ldquo;Enter&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT> on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>, the display is updated to show the data </PDAT><HIL><BOLD><PDAT>2909</PDAT></BOLD></HIL><PDAT> of the focused menu item &ldquo;History of Matsuura Electric&rdquo;, as shown in FIG. </PDAT><HIL><BOLD><PDAT>34</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00270" LVL="0"><PTEXT><PDAT>The following is an explanation of a specific menu display operation when a plurality of sets of data, such as </PDAT><HIL><BOLD><PDAT>3501</PDAT></BOLD></HIL><PDAT>, are stored in the data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT> of the present data processing apparatus.</PDAT></PTEXT></PARA>
<PARA ID="P-00271" LVL="0"><PTEXT><PDAT>While the sets of data in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 29</PDAT></FGREF><PDAT>, such as data </PDAT><HIL><BOLD><PDAT>2901</PDAT></BOLD></HIL><PDAT>, featured a plurality of links between text items and sets of data, the sets of data in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 35</PDAT></FGREF><PDAT> feature only one link between each text and a set of data. As examples, the text item &ldquo;Gampa&rdquo; included in data </PDAT><HIL><BOLD><PDAT>3501</PDAT></BOLD></HIL><PDAT> is linked to data </PDAT><HIL><BOLD><PDAT>3502</PDAT></BOLD></HIL><PDAT> as shown by the arrow </PDAT><HIL><BOLD><PDAT>3503</PDAT></BOLD></HIL><PDAT>, and the text item &ldquo;Osaka&rdquo; included in data </PDAT><HIL><BOLD><PDAT>3502</PDAT></BOLD></HIL><PDAT> is linked as shown by the arrow </PDAT><HIL><BOLD><PDAT>3505</PDAT></BOLD></HIL><PDAT> to data </PDAT><HIL><BOLD><PDAT>3504</PDAT></BOLD></HIL><PDAT>. The following is an explanation, like the previous example, of button operations of the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> and example displays by the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00272" LVL="0"><PTEXT><PDAT>When the user presses the &ldquo;Document Display&rdquo; button </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT> on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>, the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT> displays data </PDAT><HIL><BOLD><PDAT>3501</PDAT></BOLD></HIL><PDAT> as shown in FIG. </PDAT><HIL><BOLD><PDAT>36</PDAT></BOLD></HIL><PDAT>. When the user next presses the &ldquo;Menu Display&rdquo; button </PDAT><HIL><BOLD><PDAT>503</PDAT></BOLD></HIL><PDAT>, the menu </PDAT><HIL><BOLD><PDAT>3701</PDAT></BOLD></HIL><PDAT> is added to the display on the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>, as shown in FIG. </PDAT><HIL><BOLD><PDAT>37</PDAT></BOLD></HIL><PDAT>. If the user next presses the &ldquo;Right&rdquo; button </PDAT><HIL><BOLD><PDAT>508</PDAT></BOLD></HIL><PDAT>, the next menu </PDAT><HIL><BOLD><PDAT>3801</PDAT></BOLD></HIL><PDAT> in the hierarchy is added to the display on the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>, as shown in FIG. </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT>. When the &ldquo;Down&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT> is pressed, the menu item focus moves to indicate &ldquo;Okonomi Yaki&rdquo;, as shown in FIG. </PDAT><HIL><BOLD><PDAT>39</PDAT></BOLD></HIL><PDAT>. If the &ldquo;Enter&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT> is pressed next, the data (not illustrated) corresponding to the title &ldquo;Okonomi Yaki&rdquo; is displayed in a window provided in the data display region of the display unit </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00273" LVL="0"><PTEXT><PDAT>It should be noted here that the operation of the present embodiment is principally the same as the third embodiment which was shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 27</PDAT></FGREF><PDAT>, with the only differences being in S</PDAT><HIL><BOLD><PDAT>2718</PDAT></BOLD></HIL><PDAT>-S</PDAT><HIL><BOLD><PDAT>2722</PDAT></BOLD></HIL><PDAT> and S</PDAT><HIL><BOLD><PDAT>2740</PDAT></BOLD></HIL><PDAT>-S</PDAT><HIL><BOLD><PDAT>2746</PDAT></BOLD></HIL><PDAT>. Accordingly, the following explanation only gives a simple description of these processes.</PDAT></PTEXT></PARA>
<PARA ID="P-00274" LVL="0"><PTEXT><PDAT>In place of S</PDAT><HIL><BOLD><PDAT>2718</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>2722</PDAT></BOLD></HIL><PDAT>, when the control unit </PDAT><HIL><BOLD><PDAT>2802</PDAT></BOLD></HIL><PDAT> judges that a menu is already being displayed, the processing returns to S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT>. When no menu is being displayed, the control unit </PDAT><HIL><BOLD><PDAT>2802</PDAT></BOLD></HIL><PDAT> obtains the focused text item from the display control unit </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> and informs the menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> of this text item.</PDAT></PTEXT></PARA>
<PARA ID="P-00275" LVL="0"><PTEXT><PDAT>The menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> refers to the data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT> and judges whether the text item is linked to only one set of data, or to a plurality of sets of data. When the text item is linked to a plurality of sets of data, the menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> reads the titles of the linked sets of data and generates a menu with these titles as menu items.</PDAT></PTEXT></PARA>
<PARA ID="P-00276" LVL="0"><PTEXT><PDAT>On the other hand, on judging that only one set of data is linked to the text item, the menu generation unit reads all of the text items in the set of data indicated by the present text item, and generates a menu with these text items as menu items.</PDAT></PTEXT></PARA>
<PARA ID="P-00277" LVL="0"><PTEXT><PDAT>In place of S</PDAT><HIL><BOLD><PDAT>2740</PDAT></BOLD></HIL><PDAT>-S</PDAT><HIL><BOLD><PDAT>2746</PDAT></BOLD></HIL><PDAT>, the processing returns to S</PDAT><HIL><BOLD><PDAT>2702</PDAT></BOLD></HIL><PDAT> if data and a menu are not being displayed, but when data and a menu are being displayed, the control unit </PDAT><HIL><BOLD><PDAT>2802</PDAT></BOLD></HIL><PDAT> informs the menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> of the currently focused menu item.</PDAT></PTEXT></PARA>
<PARA ID="P-00278" LVL="0"><PTEXT><PDAT>The menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> refers to the data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT> and judges whether the focused menu item is a text item or the title of a set of data. When it is a text item, the menu generation unit judges whether a plurality of sets of data are linked to the text item, or just one set of data. As before, a menu is generated by reading the data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT> with titles of data as menu items when a plurality of linked sets of data are present, or with text items in the linked set of data as menu items when there is only one linked set of data. When the focused menu item is the title of a set of data, the menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> reads the text items included in the data with the focused title from the data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT>, and generates a menu with these text items as menu items.</PDAT></PTEXT></PARA>
<PARA ID="P-00279" LVL="0"><PTEXT><PDAT>As described above, the present embodiment enables the user to skip through a chain of any number of links to reach their desired data without having to have each set of linked data in the chain displayed. As a result, the user can easily search for their desired data and have it displayed quickly.</PDAT></PTEXT></PARA>
<PARA ID="P-00280" LVL="0"><PTEXT><PDAT>The present embodiment was described as using titles as menu items, though other character strings may also be used. As examples, character strings which are given special tags, character strings whose attributes express certain values, key words extracted from the content of a set of data, or the first ten characters (or any other number of characters) in the data may be used as menu items.</PDAT></PTEXT></PARA>
<PARA ID="P-00281" LVL="0"><PTEXT><PDAT>In the examples shown in FIG. </PDAT><HIL><BOLD><PDAT>33</PDAT></BOLD></HIL><PDAT> and </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 38</PDAT></FGREF><PDAT>, menus on a third lower level and a second lower level are respectively shown, although should there be linked data on lower levels (not illustrated in the drawings) in the data storage unit </PDAT><HIL><BOLD><PDAT>2801</PDAT></BOLD></HIL><PDAT>, a hierarchy of menus which extends as far as the nth sublevel may be displayed.</PDAT></PTEXT></PARA>
<PARA ID="P-00282" LVL="0"><PTEXT><PDAT>In the present document, text items were described as being distributed throughout a set of data, although since movement of the text item focus can be complex, the menu generation unit </PDAT><HIL><BOLD><PDAT>2803</PDAT></BOLD></HIL><PDAT> may display all of the text items collectively in a separate region </PDAT><HIL><BOLD><PDAT>4001</PDAT></BOLD></HIL><PDAT> to the display region of the document data </PDAT><HIL><BOLD><PDAT>3501</PDAT></BOLD></HIL><PDAT>, as shown in FIG. </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT>. In such a case, the menu </PDAT><HIL><BOLD><PDAT>3701</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 37</PDAT></FGREF><PDAT> will be displayed as shown in FIG. </PDAT><HIL><BOLD><PDAT>41</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00283" LVL="0"><PTEXT><PDAT>The display of text items which are menu items may be performed using one vertical column, one horizontal row, or, or a table displayed to the side of the data in which the text items appear, as shown in FIG. </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>Fifth Embodiment</PDAT></STEXT></H>
<PARA ID="P-00284" LVL="0"><PTEXT><PDAT>The construction of the data processing apparatus of the fifth embodiment of the present invention is shown in FIG. </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>. As shown in the drawing, the data processing apparatus is composed of a data storage unit </PDAT><HIL><BOLD><PDAT>4201</PDAT></BOLD></HIL><PDAT>, an input operation unit </PDAT><HIL><BOLD><PDAT>4202</PDAT></BOLD></HIL><PDAT>, an input signal reception unit </PDAT><HIL><BOLD><PDAT>4203</PDAT></BOLD></HIL><PDAT>, a control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT>, a display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT>, a display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT>, and a text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00285" LVL="0"><PTEXT><PDAT>The data storage unit </PDAT><HIL><BOLD><PDAT>4201</PDAT></BOLD></HIL><PDAT> can be made up of RAM and ROM, and stores a plurality of sets of data, such as </PDAT><HIL><BOLD><PDAT>4301</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>4302</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>4303</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>4304</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>4305</PDAT></BOLD></HIL><PDAT> in FIG. </PDAT><HIL><BOLD><PDAT>43</PDAT></BOLD></HIL><PDAT>. As one example, the text item &ldquo;Gampa&rdquo; in the first set of data </PDAT><HIL><BOLD><PDAT>4301</PDAT></BOLD></HIL><PDAT> is linked to another set of data </PDAT><HIL><BOLD><PDAT>4302</PDAT></BOLD></HIL><PDAT> as shown by the arrow </PDAT><HIL><BOLD><PDAT>4303</PDAT></BOLD></HIL><PDAT>. Similarly, the text item &ldquo;Osaka&rdquo; in the set of data </PDAT><HIL><BOLD><PDAT>4302</PDAT></BOLD></HIL><PDAT> is linked to another set of data </PDAT><HIL><BOLD><PDAT>4304</PDAT></BOLD></HIL><PDAT> as shown by the arrow </PDAT><HIL><BOLD><PDAT>4307</PDAT></BOLD></HIL><PDAT>. In the figure, text items which are linked to other sets of data have been underlined.</PDAT></PTEXT></PARA>
<PARA ID="P-00286" LVL="0"><PTEXT><PDAT>As one example, the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> used as the input operation unit </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> in the first embodiment may be used as the input operation unit </PDAT><HIL><BOLD><PDAT>4202</PDAT></BOLD></HIL><PDAT>. When the user presses the &ldquo;Document Display&rdquo; button </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT>, the input operation unit </PDAT><HIL><BOLD><PDAT>4202</PDAT></BOLD></HIL><PDAT> transmits a signal to the input signal reception unit </PDAT><HIL><BOLD><PDAT>4203</PDAT></BOLD></HIL><PDAT> indicating document display. In the same way, when the user presses the &ldquo;Enter&rdquo; key </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT>, the input operation unit </PDAT><HIL><BOLD><PDAT>4202</PDAT></BOLD></HIL><PDAT> transmits a signal to the input signal reception unit </PDAT><HIL><BOLD><PDAT>4203</PDAT></BOLD></HIL><PDAT> indicating an updating of document display. It should be noted here that in the present embodiment, other buttons on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>, such as the &ldquo;Menu Display&rdquo; button </PDAT><HIL><BOLD><PDAT>503</PDAT></BOLD></HIL><PDAT>, are not used for operations related to document display.</PDAT></PTEXT></PARA>
<PARA ID="P-00287" LVL="0"><PTEXT><PDAT>On receiving a signal indicating document display from the input operation unit </PDAT><HIL><BOLD><PDAT>4202</PDAT></BOLD></HIL><PDAT>, the input signal reception unit </PDAT><HIL><BOLD><PDAT>4203</PDAT></BOLD></HIL><PDAT> gives an indication for document display to the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT>. On receiving an update document display signal, the input signal reception unit </PDAT><HIL><BOLD><PDAT>4203</PDAT></BOLD></HIL><PDAT> stores the signal in a buffer which is then read by the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00288" LVL="0"><PTEXT><PDAT>On receiving a document display indication from the input signal reception unit </PDAT><HIL><BOLD><PDAT>4203</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT> gives an indication to the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> for document display for the set of data at the top of the data storage unit </PDAT><HIL><BOLD><PDAT>4201</PDAT></BOLD></HIL><PDAT>. At the same time, the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT> activates the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT>. On receiving an indication from the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> indicating that a predetermined time has expired, the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT> judges whether the input signal reception unit </PDAT><HIL><BOLD><PDAT>4203</PDAT></BOLD></HIL><PDAT> has received a signal indicating an updating of the displayed document, and if so, indicates an updating of document display to the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT>. When no indication for an updating of document display has been received, the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT> gives the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> an indication to increment the text counter N.</PDAT></PTEXT></PARA>
<PARA ID="P-00289" LVL="0"><PTEXT><PDAT>On receiving an indication for document display from the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> reads the data stored at the top of the data storage unit </PDAT><HIL><BOLD><PDAT>4201</PDAT></BOLD></HIL><PDAT> and has this data displayed by the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT>. On receiving notification of the value of the text counter N from the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> has the Nth text item in the data being displayed by the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT> displayed in a way showing that it is currently focused. Here, if a text item is currently in focus and a notification of the value of the text counter indicates a different text item, the focus display is removed from this first text item. On receiving an indication for updating document display from the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> reads the set of data which is linked to the text item which is currently in focus from the data storage unit </PDAT><HIL><BOLD><PDAT>4201</PDAT></BOLD></HIL><PDAT>, and has the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT> update the display to show this new data. At the same time, the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> gives an indication for updated data display to the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00290" LVL="0"><PTEXT><PDAT>The display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT> can be made up of a TV, a CRT computer display screen or a liquid crystal display. The display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT> displays data and menus according to control by the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00291" LVL="0"><PTEXT><PDAT>The text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> includes a text counter N and a timer. The text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> reads the total number NE of text items included in the set of data at the top of the data storage unit </PDAT><HIL><BOLD><PDAT>4201</PDAT></BOLD></HIL><PDAT> from the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT>, sets the text counter N at &ldquo;1&rdquo;, activates the timer, and informs the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> of the value of the text counter N. After the timer has reached a predetermined time, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> gives the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT> an indication showing that the predetermined time has been reached.</PDAT></PTEXT></PARA>
<PARA ID="P-00292" LVL="0"><PTEXT><PDAT>On receiving an indication for updated display of data from the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT>, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> reads the total number NE of text items in the data being displayed, and sets the text counter at &ldquo;0&rdquo;. When the text counter has been set at &ldquo;0&rdquo;, or when the an indication for incrementing the text counter is received from the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT>, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> increments the value of the text counter by &ldquo;1&rdquo;. After incrementing the value of the text counter, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> judges whether the value &ldquo;N&minus;1&rdquo; is equal to the total number NE of text items in the present data, and if so, resets the value of the text counter N to &ldquo;1&rdquo;. When the numbers are not equal, the value of the text counter N is left unchanged, and is sent to the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT>, with the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> restarting the timer at the same time. When the timer reaches the predetermined time, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> once again gives the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT> a message showing that the predetermined time has been reached.</PDAT></PTEXT></PARA>
<PARA ID="P-00293" LVL="0"><PTEXT><PDAT>The following explanation deals with the case when a plurality of sets of data, such as data </PDAT><HIL><BOLD><PDAT>4301</PDAT></BOLD></HIL><PDAT>, are stored in the data storage unit </PDAT><HIL><BOLD><PDAT>4201</PDAT></BOLD></HIL><PDAT>. Here, if the user presses the &ldquo;Document Display&rdquo; button </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT> on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>, the data </PDAT><HIL><BOLD><PDAT>4201</PDAT></BOLD></HIL><PDAT> is displayed on the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT> as shown in FIG. </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT>. At this point, the text item &ldquo;Gampa&rdquo; is displayed with shading to show that it is currently in focus. Once a predetermined time, such as three seconds, has passed, this shading is moved to the next text item &ldquo;Herdy&rdquo; to show that this is now in focus. After another three seconds have passed, the shading is moved once again to the next text item &ldquo;Crampas&rdquo; to show that this is now in focus.</PDAT></PTEXT></PARA>
<PARA ID="P-00294" LVL="0"><PTEXT><PDAT>As described above, a timer is provided in the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> so that the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> can successively move the focus display to a next text item every time the predetermined time, here three seconds, has passed. If the user presses the &ldquo;Enter&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT> on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> with the display of the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT> in the state shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 45</PDAT></FGREF><PDAT>, the data </PDAT><HIL><BOLD><PDAT>4303</PDAT></BOLD></HIL><PDAT> liked to the text item &ldquo;Herdy&rdquo; is displayed by the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00295" LVL="0"><PTEXT><PDAT>The following is an explanation of the operation of the present embodiment, with reference to the flowchart in FIG. </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00296" LVL="0"><PTEXT><PDAT>The input signal reception unit </PDAT><HIL><BOLD><PDAT>4203</PDAT></BOLD></HIL><PDAT> waits for the transmission of a signal corresponding to one of the buttons on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> being pressed (S</PDAT><HIL><BOLD><PDAT>4602</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00297" LVL="0"><PTEXT><PDAT>The control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT> judges whether an indication received from the input signal reception unit </PDAT><HIL><BOLD><PDAT>4203</PDAT></BOLD></HIL><PDAT> is a document display indication (S</PDAT><HIL><BOLD><PDAT>4604</PDAT></BOLD></HIL><PDAT>), and if so, gives the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> a document display indication (S</PDAT><HIL><BOLD><PDAT>4606</PDAT></BOLD></HIL><PDAT>). If not, the processing advances to S</PDAT><HIL><BOLD><PDAT>4616</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00298" LVL="0"><PTEXT><PDAT>The display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> reads the data stored at the top of the data storage unit </PDAT><HIL><BOLD><PDAT>4201</PDAT></BOLD></HIL><PDAT> and has the data (the first document) displayed by the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>4608</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00299" LVL="0"><PTEXT><PDAT>The text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> reads the total number NE of text items included in this set of data stored at the top of the data storage unit </PDAT><HIL><BOLD><PDAT>4201</PDAT></BOLD></HIL><PDAT> and stores the total number NE, sets the text counter N at &ldquo;1&rdquo;, and activates the timer (S</PDAT><HIL><BOLD><PDAT>4610</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00300" LVL="0"><PTEXT><PDAT>On receiving notification of the text counter N from the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> displays the Nth text item in the data displayed on the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT> with a highlight showing that it is in focus (S</PDAT><HIL><BOLD><PDAT>4612</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00301" LVL="0"><PTEXT><PDAT>Once the predetermined time counted by the timer has expired, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> gives the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> an indication that the predetermined time has been reached (S</PDAT><HIL><BOLD><PDAT>4614</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00302" LVL="0"><PTEXT><PDAT>In S</PDAT><HIL><BOLD><PDAT>4616</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> judges whether an update display document signal has been received by the input signal reception unit </PDAT><HIL><BOLD><PDAT>4203</PDAT></BOLD></HIL><PDAT>, and if so, gives the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> and the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> an indication for updating document display (S</PDAT><HIL><BOLD><PDAT>4618</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00303" LVL="0"><PTEXT><PDAT>If not, the processing advances to S</PDAT><HIL><BOLD><PDAT>4624</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00304" LVL="0"><PTEXT><PDAT>The display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> reads the data linked to the Nth text item in the data currently being displayed by the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT>, and has the new data displayed by the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>4620</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00305" LVL="0"><PTEXT><PDAT>The text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> reads the total number NE of text items included in the newly displayed set of data, stores the total number NE, and resets the text counter N at &ldquo;0&rdquo; (S</PDAT><HIL><BOLD><PDAT>4622</PDAT></BOLD></HIL><PDAT>). In S</PDAT><HIL><BOLD><PDAT>4624</PDAT></BOLD></HIL><PDAT>, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> adds one to the value of the text counter &ldquo;N&rdquo;, and judges whether the value (N&minus;1) is equal to the total number NE of text items (S</PDAT><HIL><BOLD><PDAT>4626</PDAT></BOLD></HIL><PDAT>). If so, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> sets the text counter N at &ldquo;1&rdquo; (S</PDAT><HIL><BOLD><PDAT>4628</PDAT></BOLD></HIL><PDAT>), while when the values are different, the processing advances to S</PDAT><HIL><BOLD><PDAT>4630</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00306" LVL="0"><PTEXT><PDAT>The text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> gives an indication to the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> to move the focus to Nth text item in the data displayed by the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT>, and activates the timer (S</PDAT><HIL><BOLD><PDAT>4630</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00307" LVL="0"><PTEXT><PDAT>The display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> has the Nth text item in the data displayed by the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT> displayed in focus (S</PDAT><HIL><BOLD><PDAT>4632</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00308" LVL="0"><PTEXT><PDAT>When the timer indicates that the predetermined time has expired, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> gives an, indication showing that the time has expired to the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>4634</PDAT></BOLD></HIL><PDAT>), and the processing returns to S</PDAT><HIL><BOLD><PDAT>4616</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00309" LVL="0"><PTEXT><PDAT>As described above, the focus is successively moved from text item to text item in the data when the predetermined time expires, so that the user can easily view the desired linked data by merely pressing the &ldquo;Enter&rdquo; button on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00310" LVL="0"><PTEXT><PDAT>It should be noted that while the present embodiment was described as updating the document display after the predetermined time has passed, as shown by S</PDAT><HIL><BOLD><PDAT>4616</PDAT></BOLD></HIL><PDAT> and S</PDAT><HIL><BOLD><PDAT>4634</PDAT></BOLD></HIL><PDAT> in the flowchart of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 46</PDAT></FGREF><PDAT>, interrupt processing may be performed so that the updating of document display is performed when there has been a document display updating indication.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>Sixth Embodiment</PDAT></STEXT></H>
<PARA ID="P-00311" LVL="0"><PTEXT><PDAT>The construction of the data processing apparatus of the sixth embodiment of the present invention is shown in FIG. </PDAT><HIL><BOLD><PDAT>47</PDAT></BOLD></HIL><PDAT>. As shown in the drawing, the data processing apparatus is composed of a data storage unit </PDAT><HIL><BOLD><PDAT>4701</PDAT></BOLD></HIL><PDAT>, an input operation unit </PDAT><HIL><BOLD><PDAT>4202</PDAT></BOLD></HIL><PDAT>, an input signal reception unit </PDAT><HIL><BOLD><PDAT>4203</PDAT></BOLD></HIL><PDAT>, a control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT>, a display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT>, a display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT>, and a text focus movement unit </PDAT><HIL><BOLD><PDAT>4702</PDAT></BOLD></HIL><PDAT>. Here, with the exceptions of the data storage unit </PDAT><HIL><BOLD><PDAT>4701</PDAT></BOLD></HIL><PDAT> and the text focus movement unit </PDAT><HIL><BOLD><PDAT>4702</PDAT></BOLD></HIL><PDAT>, the construction of this data processing apparatus is the same as that in the fifth embodiment, so that elements which are the same as the fifth embodiment have been given the same reference numerals and their explanation has been omitted. The following explanation will focus on the elements which are unique to the present embodiment.</PDAT></PTEXT></PARA>
<PARA ID="P-00312" LVL="0"><PTEXT><PDAT>In addition to the plurality of sets of data shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 43</PDAT></FGREF><PDAT> which stored by the data storage unit </PDAT><HIL><BOLD><PDAT>4201</PDAT></BOLD></HIL><PDAT>, the data storage unit </PDAT><HIL><BOLD><PDAT>4701</PDAT></BOLD></HIL><PDAT> stores a focus time correspondence table </PDAT><HIL><BOLD><PDAT>4803</PDAT></BOLD></HIL><PDAT> which includes a list of text items </PDAT><HIL><BOLD><PDAT>4801</PDAT></BOLD></HIL><PDAT> included in data and a focus time </PDAT><HIL><BOLD><PDAT>4802</PDAT></BOLD></HIL><PDAT> for each text item. As examples, the focus is maintained for five seconds for the text item &ldquo;Gampa&rdquo;, while the focus is maintained for three seconds for the text item &ldquo;Herdy&rdquo;. This is also the case for other text items.</PDAT></PTEXT></PARA>
<PARA ID="P-00313" LVL="0"><PTEXT><PDAT>The difference between the text focus movement unit </PDAT><HIL><BOLD><PDAT>4702</PDAT></BOLD></HIL><PDAT> and the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT> is that the timer in the text focus movement unit </PDAT><HIL><BOLD><PDAT>4702</PDAT></BOLD></HIL><PDAT> measures the focus time for the present text item which is stored in the focus time correspondence table </PDAT><HIL><BOLD><PDAT>4803</PDAT></BOLD></HIL><PDAT> in the data storage unit </PDAT><HIL><BOLD><PDAT>4701</PDAT></BOLD></HIL><PDAT>, before the focus moves to the next text item.</PDAT></PTEXT></PARA>
<PARA ID="P-00314" LVL="0"><PTEXT><PDAT>In more detail, on being activated by the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT>, the input operation unit </PDAT><HIL><BOLD><PDAT>4202</PDAT></BOLD></HIL><PDAT> reads the total number NE of text items in the set of data stored at the top of the data storage unit </PDAT><HIL><BOLD><PDAT>4701</PDAT></BOLD></HIL><PDAT>, as well as reading the focus time of the first text item in this data from the focus time correspondence table </PDAT><HIL><BOLD><PDAT>4803</PDAT></BOLD></HIL><PDAT>. The text focus movement unit </PDAT><HIL><BOLD><PDAT>4702</PDAT></BOLD></HIL><PDAT> then sets the text counter N at &ldquo;1&rdquo;, activates the timer, and informs the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> of the value &ldquo;1&rdquo; of the text counter N.</PDAT></PTEXT></PARA>
<PARA ID="P-00315" LVL="0"><PTEXT><PDAT>When the timer has measured the focus time of the first text item, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4702</PDAT></BOLD></HIL><PDAT> gives the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT> an indication that the focus time has expired. Also when informing the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> of the value of the text counter N, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4702</PDAT></BOLD></HIL><PDAT> reads the focus time for the Nth text item in the data displayed by the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT> from the data storage unit </PDAT><HIL><BOLD><PDAT>4701</PDAT></BOLD></HIL><PDAT>, and resets the timer. Once the timer has measured this focus time, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4702</PDAT></BOLD></HIL><PDAT> gives the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT> an indication that the predetermined time has expired. The other functions of the text focus movement unit </PDAT><HIL><BOLD><PDAT>4702</PDAT></BOLD></HIL><PDAT> are the same as the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00316" LVL="0"><PTEXT><PDAT>The following is an explanation of the operation of the present embodiment. Here, there are only slight differences with the operation of the fifth embodiment, so that only these differences will be explained with reference to the flowchart in FIG. </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00317" LVL="0"><PTEXT><PDAT>In S</PDAT><HIL><BOLD><PDAT>4610</PDAT></BOLD></HIL><PDAT>, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4702</PDAT></BOLD></HIL><PDAT> reads the focus time for the Nth text item, in addition to the processing described above.</PDAT></PTEXT></PARA>
<PARA ID="P-00318" LVL="0"><PTEXT><PDAT>In S</PDAT><HIL><BOLD><PDAT>4614</PDAT></BOLD></HIL><PDAT>, when the timer has measured the focus time for the present text item, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4702</PDAT></BOLD></HIL><PDAT> gives the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT> an indication that the predetermined time has expired.</PDAT></PTEXT></PARA>
<PARA ID="P-00319" LVL="0"><PTEXT><PDAT>In S</PDAT><HIL><BOLD><PDAT>4630</PDAT></BOLD></HIL><PDAT>, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4702</PDAT></BOLD></HIL><PDAT> reads the focus time of the Nth text item, in addition to the processing described above.</PDAT></PTEXT></PARA>
<PARA ID="P-00320" LVL="0"><PTEXT><PDAT>In S</PDAT><HIL><BOLD><PDAT>4634</PDAT></BOLD></HIL><PDAT>, when the timer has measured the focus time for the Nth text item, the text focus movement unit </PDAT><HIL><BOLD><PDAT>4702</PDAT></BOLD></HIL><PDAT> gives the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT> an indication that the predetermined time has expired.</PDAT></PTEXT></PARA>
<PARA ID="P-00321" LVL="0"><PTEXT><PDAT>As described above, for the present embodiment, each text item is displayed with the focus for a period specified as its focus time, so that a following text item is displayed with the focus when such predetermined time expires. By doing so, the user can easily view the desired linked data by merely pressing the &ldquo;Enter&rdquo; button on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> when the appropriate text item is displayed with the focus.</PDAT></PTEXT></PARA>
<PARA ID="P-00322" LVL="0"><PTEXT><PDAT>Here, by giving different text items different focus times, it is possible to give a bias to the ease with which, data linked to text items can be displayed. As an example, when the data linked to a text item is a commercial message, if the focus time of corresponding text item is extended, the likelihood that the user will press the &ldquo;Enter&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT> and have the commercial message displayed can be increased. In such a situation, it would be logical to calculate the cost of such commercial message based on the length of this focus time.</PDAT></PTEXT></PARA>
<PARA ID="P-00323" LVL="0"><PTEXT><PDAT>In the present embodiment, the focus time correspondence table </PDAT><HIL><BOLD><PDAT>4803</PDAT></BOLD></HIL><PDAT>, shown in FIG. </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> and stored in the data storage unit </PDAT><HIL><BOLD><PDAT>4701</PDAT></BOLD></HIL><PDAT>, was described as storing a display time for the focus for each text item, although such a table need not be used, and the focus time may be added as an attribute value of each text item in a set of data.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>Seventh Embodiment</PDAT></STEXT></H>
<PARA ID="P-00324" LVL="0"><PTEXT><PDAT>The construction of the data processing apparatus of the seventh embodiment of the present invention is shown in FIG. </PDAT><HIL><BOLD><PDAT>47</PDAT></BOLD></HIL><PDAT>. As shown in the drawing, the data processing apparatus is composed of a data storage unit </PDAT><HIL><BOLD><PDAT>4701</PDAT></BOLD></HIL><PDAT>, an input operation unit </PDAT><HIL><BOLD><PDAT>4202</PDAT></BOLD></HIL><PDAT>, an input signal reception unit </PDAT><HIL><BOLD><PDAT>4203</PDAT></BOLD></HIL><PDAT>, a control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT>, a display control unit </PDAT><HIL><BOLD><PDAT>4901</PDAT></BOLD></HIL><PDAT>, a display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT>, and a text focus movement unit </PDAT><HIL><BOLD><PDAT>4702</PDAT></BOLD></HIL><PDAT>. Here, with the exception of the display control unit </PDAT><HIL><BOLD><PDAT>4901</PDAT></BOLD></HIL><PDAT>, the construction of this data processing apparatus is the same as that in the sixth embodiment, so that elements which are the same as the sixth embodiment have been given the same reference numerals and their explanation has been omitted. The following explanation will focus on the elements which are unique to the present embodiment.</PDAT></PTEXT></PARA>
<PARA ID="P-00325" LVL="0"><PTEXT><PDAT>The display control unit </PDAT><HIL><BOLD><PDAT>4901</PDAT></BOLD></HIL><PDAT> includes the following functions, in addition to the functions provided in the display control unit </PDAT><HIL><BOLD><PDAT>4205</PDAT></BOLD></HIL><PDAT> in the sixth embodiment.</PDAT></PTEXT></PARA>
<PARA ID="P-00326" LVL="0"><PTEXT><PDAT>On receiving notification of the text counter N from the text focus movement unit </PDAT><HIL><BOLD><PDAT>4207</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>4901</PDAT></BOLD></HIL><PDAT> opens a window which in provided in a new data display region next to the data which is currently being displayed by the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT>. The display control unit </PDAT><HIL><BOLD><PDAT>4901</PDAT></BOLD></HIL><PDAT> reads the data for the link address of the Nth text item in the data being displayed, and has this data displayed in the newly opened window of the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT>. When this window has already been opened to display data, the displayed data is cleared and the newly read data is displayed in the window.</PDAT></PTEXT></PARA>
<PARA ID="P-00327" LVL="0"><PTEXT><PDAT>On receiving an indication for updating document display from the control unit </PDAT><HIL><BOLD><PDAT>4204</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>4901</PDAT></BOLD></HIL><PDAT> replaces the original data being displayed on the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT> with the data being displayed in the window which is newly opened in the data display region. In doing so, the display of data in the newly opened window is cleared.</PDAT></PTEXT></PARA>
<PARA ID="P-00328" LVL="0"><PTEXT><PDAT>The following explanation refers to the case when the a plurality of sets of data, such as data </PDAT><HIL><BOLD><PDAT>4301</PDAT></BOLD></HIL><PDAT>, are stored in the data storage unit </PDAT><HIL><BOLD><PDAT>4701</PDAT></BOLD></HIL><PDAT>. When the user presses the &ldquo;Document Display&rdquo; button </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT> on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>, two sets of data, </PDAT><HIL><BOLD><PDAT>4301</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>4302</PDAT></BOLD></HIL><PDAT>, are displayed on the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT> as shown in FIG. </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>. More specifically, data </PDAT><HIL><BOLD><PDAT>4301</PDAT></BOLD></HIL><PDAT> at the top of the data storage unit </PDAT><HIL><BOLD><PDAT>4701</PDAT></BOLD></HIL><PDAT> is displayed on the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT>, and, in a region adjacent to this data, a window </PDAT><HIL><BOLD><PDAT>5001</PDAT></BOLD></HIL><PDAT> is opened and the data </PDAT><HIL><BOLD><PDAT>4302</PDAT></BOLD></HIL><PDAT> at the link address of the text item &ldquo;Gampa&rdquo; which is in focus in this data </PDAT><HIL><BOLD><PDAT>4301</PDAT></BOLD></HIL><PDAT> is displayed is this window </PDAT><HIL><BOLD><PDAT>5001</PDAT></BOLD></HIL><PDAT>. As shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 48</PDAT></FGREF><PDAT>, text item &ldquo;Gampa&rdquo; has a five-second focus time, so that once this five-second focus time of &ldquo;Gampa&rdquo; has expired, data </PDAT><HIL><BOLD><PDAT>4303</PDAT></BOLD></HIL><PDAT> at the link address for the text item &ldquo;Herdy&rdquo; which is now in focus is displayed on the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00329" LVL="0"><PTEXT><PDAT>It should be noted here that since the operation of the present embodiment is simply the operation of the sixth embodiment with the addition of the display of data on the display unit </PDAT><HIL><BOLD><PDAT>4206</PDAT></BOLD></HIL><PDAT> for the link address of a text item which is currently in focus, no description of the operational flow will be given.</PDAT></PTEXT></PARA>
<PARA ID="P-00330" LVL="0"><PTEXT><PDAT>Here, while the present embodiment has been described as displaying each set of data for a link address of a text item in focus in its entirety, the data may instead be only partially displayed, which could mean that only the title or the first three lines are displayed. By doing so, the time required to read the data can be reduced.</PDAT></PTEXT></PARA>
<PARA ID="P-00331" LVL="0"><PTEXT><PDAT>As described above, by having data at a link address of a text item in focus displayed in addition to the currently displayed data, the present embodiment facilitates user operations of the &ldquo;Enter&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT> which update the display data.</PDAT></PTEXT></PARA>
<PARA ID="P-00332" LVL="0"><PTEXT><PDAT>Finally, the present embodiment has been described as an addition to the construction of the sixth embodiment, although it should be obvious that it may alternatively be constructed as an addition to the fifth embodiment.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>Eighth Embodiment</PDAT></STEXT></H>
<PARA ID="P-00333" LVL="0"><PTEXT><PDAT>The construction of the data processing apparatus of the eighth embodiment of the present invention is shown in FIG. </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT>. As shown in the drawing, the data processing apparatus is composed of a data storage unit </PDAT><HIL><BOLD><PDAT>5201</PDAT></BOLD></HIL><PDAT>, an input operation unit </PDAT><HIL><BOLD><PDAT>5202</PDAT></BOLD></HIL><PDAT>, an input signal reception unit </PDAT><HIL><BOLD><PDAT>5203</PDAT></BOLD></HIL><PDAT>, a control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT>, a display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT>, a display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT>, and a virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00334" LVL="0"><PTEXT><PDAT>The data storage unit </PDAT><HIL><BOLD><PDAT>5201</PDAT></BOLD></HIL><PDAT> can be made up of RAM, and stores a plurality of sets of data such as </PDAT><HIL><BOLD><PDAT>5301</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>5302</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>5303</PDAT></BOLD></HIL><PDAT> in FIG. </PDAT><HIL><BOLD><PDAT>53</PDAT></BOLD></HIL><PDAT>. Data </PDAT><HIL><BOLD><PDAT>5301</PDAT></BOLD></HIL><PDAT> includes a title and a content, with the content including text items which are linked to other sets of data. As one example, the text item &ldquo;Gampa&rdquo; is linked to data </PDAT><HIL><BOLD><PDAT>5302</PDAT></BOLD></HIL><PDAT>, as shown by the arrow </PDAT><HIL><BOLD><PDAT>5304</PDAT></BOLD></HIL><PDAT>. Here, linked text items in the sets of data shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 53</PDAT></FGREF><PDAT> have been underlined.</PDAT></PTEXT></PARA>
<PARA ID="P-00335" LVL="0"><PTEXT><PDAT>As one example, the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> used as the input operation unit </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> in the first embodiment may be used as the input operation unit </PDAT><HIL><BOLD><PDAT>5202</PDAT></BOLD></HIL><PDAT>. When the user presses the &ldquo;Document Display&rdquo; button </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT>, the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> transmits a signal to the input signal reception unit </PDAT><HIL><BOLD><PDAT>5203</PDAT></BOLD></HIL><PDAT> indicating document (data) display. When the user presses the &ldquo;Up&rdquo; button </PDAT><HIL><BOLD><PDAT>505</PDAT></BOLD></HIL><PDAT> or the &ldquo;Down&rdquo; button </PDAT><HIL><BOLD><PDAT>506</PDAT></BOLD></HIL><PDAT>, the remote controller transmits a signal indicating backward or forward movement of the virtual window which is currently in focus (hereinafter called the &ldquo;current virtual window&rdquo;). When the user presses the &ldquo;Left&rdquo; button </PDAT><HIL><BOLD><PDAT>507</PDAT></BOLD></HIL><PDAT> or the &ldquo;Right&rdquo; button </PDAT><HIL><BOLD><PDAT>508</PDAT></BOLD></HIL><PDAT>, the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> transmits a signal indicating movement of the focus to a previous or next text item. In the same way, when the user presses the &ldquo;Enter&rdquo; key </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT>, the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT> transmits a signal indicating an updating of document display.</PDAT></PTEXT></PARA>
<PARA ID="P-00336" LVL="0"><PTEXT><PDAT>On receiving an indication for document display from the input operation unit </PDAT><HIL><BOLD><PDAT>5202</PDAT></BOLD></HIL><PDAT>, the input signal reception unit </PDAT><HIL><BOLD><PDAT>5203</PDAT></BOLD></HIL><PDAT> gives an indication for data display to the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT>. In the same way, on receiving an indication for backward or forward movement of the current virtual window, the input signal reception unit </PDAT><HIL><BOLD><PDAT>5203</PDAT></BOLD></HIL><PDAT> gives the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT> a corresponding indication. On receiving an indication for movement of the focus to a previous or next text item, the input signal reception unit </PDAT><HIL><BOLD><PDAT>5203</PDAT></BOLD></HIL><PDAT> gives the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT> an indication for movement of the focus. Finally, on receiving an indication for updating data display, the input signal reception unit </PDAT><HIL><BOLD><PDAT>5203</PDAT></BOLD></HIL><PDAT> gives the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT> a corresponding indication for updating data display.</PDAT></PTEXT></PARA>
<PARA ID="P-00337" LVL="0"><PTEXT><PDAT>On receiving an indication for data display from the input signal reception unit </PDAT><HIL><BOLD><PDAT>5203</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT> gives the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> an indication for delta display and gives the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> an indication for the generation of a virtual window. On receiving an indication for backward or forward movement of the current virtual window from the input signal reception unit </PDAT><HIL><BOLD><PDAT>5203</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT> gives an appropriate indication to the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT>. In the same way, on receiving an indication for backward or forward movement of the focus from the input signal reception unit </PDAT><HIL><BOLD><PDAT>5203</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT> gives an appropriate indication to the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT>. Similarly, on receiving an indication for an updating of data display from the input signal reception unit </PDAT><HIL><BOLD><PDAT>5203</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT> gives an appropriate indication to the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00338" LVL="0"><PTEXT><PDAT>On receiving an indication for data display, the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> reads the data stored at the top of the data storage unit </PDAT><HIL><BOLD><PDAT>5201</PDAT></BOLD></HIL><PDAT> and has it displayed by the display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT>. On receiving positions for a boundary line from the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> has a virtual window surrounded by the boundary line and the external wall of part of the window above the boundary line displayed by the display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT>. On receiving the position of the next boundary line, the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> has a virtual window which is bordered the previous boundary line at the top, the present boundary line at the bottom, and the left and right walls of the window displayed by the display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT>. On being informed of the position of a bottom line of a window, the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> has a virtual window which is surrounded by the previous boundary line and the external wall of the part of the window below this boundary line displayed by the display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00339" LVL="0"><PTEXT><PDAT>Once it has ended the display of virtual windows, the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> has the highest virtual window on the display displayed with a thick border line as the default current virtual window.</PDAT></PTEXT></PARA>
<PARA ID="P-00340" LVL="0"><PTEXT><PDAT>On receiving an indication from the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT> to move the current virtual window to the next virtual window, the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> has the current virtual window currently displayed with a thick border line displayed as a normal virtual window, and has the next virtual window below it displayed with a thick border line. In the same way, on receiving an indication from the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT> to the current virtual window to a previous virtual window, the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> has the current virtual window currently displayed with a thick border line displayed as a normal virtual window, and has the next virtual window above it displayed with a thick border line.</PDAT></PTEXT></PARA>
<PARA ID="P-00341" LVL="0"><PTEXT><PDAT>On receiving an indication from the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT> to move the focus to a next text item, the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> removes the shading from the Nth text item currently displayed with the shading for the focus, and has the (N&plus;1)th text item displayed with the shading. In the same way, on receiving an indication from the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT> to move the focus to a previous text item, the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> removes the shading from the Nth text item currently displayed with the shading for the focus, and has the (N&minus;1)th text item displayed with the shading.</PDAT></PTEXT></PARA>
<PARA ID="P-00342" LVL="0"><PTEXT><PDAT>On receiving an indication for updating data display from the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> reads the data which is the link address of the text item which is currently in focus from the data storage unit </PDAT><HIL><BOLD><PDAT>5201</PDAT></BOLD></HIL><PDAT>, and has the data displayed in the window of the display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT> updated to this newly read data. The display of a virtual window is then performed in the same way as with the first set of data.</PDAT></PTEXT></PARA>
<PARA ID="P-00343" LVL="0"><PTEXT><PDAT>The display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT> can be made up of a TV, a CRT computer display screen or a liquid crystal display. The display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT> displays data in windows according to control by the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00344" LVL="0"><PTEXT><PDAT>On receiving an indication from the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT> to generate a virtual window, the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> finds out what data the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> is having displayed on the display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT>. It then finds the data in the data storage unit </PDAT><HIL><BOLD><PDAT>5201</PDAT></BOLD></HIL><PDAT> and counts the total number NE of text items included in the data. The virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> then judges whether this total number NE of text items exceeds a predetermined maximum number NS of text items (the maximum number of text items which can be accommodated in a virtual window). When the total number NE is equal to or below the maximum number NS, the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> judges that there is no need to generate a virtual window and gives the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT> an indication showing that it has finished its processing.</PDAT></PTEXT></PARA>
<PARA ID="P-00345" LVL="0"><PTEXT><PDAT>On judging that the total number NE exceeds the maximum number NS, the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> positions a pointer at the start of the data being displayed by the data storage unit </PDAT><HIL><BOLD><PDAT>5201</PDAT></BOLD></HIL><PDAT>, and reset the text counter N to &ldquo;0&rdquo;. Next, the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> obtains the character string at the pointer position and judges whether the character string is a text item (a character string which is linked to another set of data). If the character string is a text item, &ldquo;1&rdquo; is added to the text counter N. The virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> then advances the pointer, and obtains the character string at the pointer position. Once again, if the character string at the pointer position is a text item, &ldquo;1&rdquo; is added to the text counter N. The virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> then advances the pointer, and judges whether the text counter N is equal to the maximum number NS of text items. When N is not equal to NS, the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> obtains the character string at the pointer position, adds &ldquo;1&rdquo; to the text counter N if the character string is a text item, and repeats the processing described above.</PDAT></PTEXT></PARA>
<PARA ID="P-00346" LVL="0"><PTEXT><PDAT>On finding that the text counter N is equal to the maximum number NS, the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> finds the position of a boundary line which separates the part of the data which includes the NS text items before the present pointer position from the part of the data which follows after the present pointer position. It then informs the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> of the position of this boundary line.</PDAT></PTEXT></PARA>
<PARA ID="P-00347" LVL="0"><PTEXT><PDAT>The virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> also judges whether the pointer is positioned at the end of the data.</PDAT></PTEXT></PARA>
<PARA ID="P-00348" LVL="0"><PTEXT><PDAT>If the pointer is not positioned at the end of the data, the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> resets the text counter N at zero immediately after finding the position of the boundary line for virtual window generation, obtains the character string at the pointer position, judges whether the obtained character string is a text item, and repeats the processing as described above.</PDAT></PTEXT></PARA>
<PARA ID="P-00349" LVL="0"><PTEXT><PDAT>When the pointer is positioned at the end of the data, but the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> has not just found the position of a boundary line, the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> informs the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> of the position of the bottom line of the window. If the pointer position is at the end of the data, and the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> has just found the position of a boundary line, the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> informs the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT> of the end of its processing.</PDAT></PTEXT></PARA>
<PARA ID="P-00350" LVL="0"><PTEXT><PDAT>The following explanation assumes the sets of data shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 53</PDAT></FGREF><PDAT> are stored in the data storage unit </PDAT><HIL><BOLD><PDAT>5201</PDAT></BOLD></HIL><PDAT>. Here, </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 54</PDAT></FGREF><PDAT> shows the display on the display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT> just after the user has pressed the &ldquo;Document Display&rdquo; button </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT> on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>. This shows the display before the virtual window generating process is performed. The window </PDAT><HIL><BOLD><PDAT>5401</PDAT></BOLD></HIL><PDAT> is opened on the left side of the display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT> and is used to display data </PDAT><HIL><BOLD><PDAT>5301</PDAT></BOLD></HIL><PDAT>. Next, a first virtual window </PDAT><HIL><BOLD><PDAT>5501</PDAT></BOLD></HIL><PDAT> is generated by the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> and is displayed on the display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT> by the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00351" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 56</PDAT></FGREF><PDAT> shows the state when a second virtual window </PDAT><HIL><BOLD><PDAT>5601</PDAT></BOLD></HIL><PDAT> and a third virtual window </PDAT><HIL><BOLD><PDAT>5602</PDAT></BOLD></HIL><PDAT> generated by the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> are displayed by the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT>, with display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> having the first virtual window displayed with a thick border line as the current virtual window. If, in this state, the user presses the &ldquo;Down&rdquo; button </PDAT><HIL><BOLD><PDAT>506</PDAT></BOLD></HIL><PDAT> on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>, the second virtual window </PDAT><HIL><BOLD><PDAT>5601</PDAT></BOLD></HIL><PDAT> is made the current virtual window, as shown in FIG. </PDAT><HIL><BOLD><PDAT>57</PDAT></BOLD></HIL><PDAT>. It should be noted here that in the present embodiment, the maximum number NS of text items which can be accommodated in on virtual window is set at &ldquo;12&rdquo;, although this may be set at any arbitrary figure which is &ldquo;2&rdquo; or greater.</PDAT></PTEXT></PARA>
<PARA ID="P-00352" LVL="0"><PTEXT><PDAT>In the present embodiment, virtual windows </PDAT><HIL><BOLD><PDAT>5501</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>5601</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>5602</PDAT></BOLD></HIL><PDAT> are rectangular, although virtual windows, such as </PDAT><HIL><BOLD><PDAT>5801</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>5802</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>5803</PDAT></BOLD></HIL><PDAT> in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 58</PDAT></FGREF><PDAT>, may be of any form, depending on the positions of the text items and the maximum number NS of text items.</PDAT></PTEXT></PARA>
<PARA ID="P-00353" LVL="0"><PTEXT><PDAT>The following is an explanation of the display of virtual windows in the present embodiment, with reference to FIG. </PDAT><HIL><BOLD><PDAT>59</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00354" LVL="0"><PTEXT><PDAT>When data is displayed on the display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT>, the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> counts the total number NE of text items in the displayed data (S</PDAT><HIL><BOLD><PDAT>5902</PDAT></BOLD></HIL><PDAT>). The virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> then judges whether the total number NE exceeds the maximum number NS of text items which can be accommodated in one virtual window (S</PDAT><HIL><BOLD><PDAT>5904</PDAT></BOLD></HIL><PDAT>), and terminates its processing if NE does not exceed NS. When NE exceeds NS, it positions a pointer at the start of the displayed data in the data storage unit </PDAT><HIL><BOLD><PDAT>5201</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>5906</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00355" LVL="0"><PTEXT><PDAT>The virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> resets the text counter N to zero (S</PDAT><HIL><BOLD><PDAT>5908</PDAT></BOLD></HIL><PDAT>), and obtains the character string at the pointer position from the data storage unit </PDAT><HIL><BOLD><PDAT>5201</PDAT></BOLD></HIL><PDAT> (S</PDAT><HIL><BOLD><PDAT>5910</PDAT></BOLD></HIL><PDAT>). The virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> then judges whether the pointer is positioned at the end of the data (S</PDAT><HIL><BOLD><PDAT>5912</PDAT></BOLD></HIL><PDAT>), and if so, the processing advances to S</PDAT><HIL><BOLD><PDAT>5922</PDAT></BOLD></HIL><PDAT>. If the pointer is not positioned at the end of the data, the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> judges whether the character string at the pointer position is a text item (S</PDAT><HIL><BOLD><PDAT>5914</PDAT></BOLD></HIL><PDAT>), and advances the pointer (S</PDAT><HIL><BOLD><PDAT>5918</PDAT></BOLD></HIL><PDAT>), adding &ldquo;1&rdquo; to the text counter N if the character string is judged to be a text item (S</PDAT><HIL><BOLD><PDAT>5916</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00356" LVL="0"><PTEXT><PDAT>The virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> judges whether the text counter N is equal to the maximum number NS of text items (S</PDAT><HIL><BOLD><PDAT>5920</PDAT></BOLD></HIL><PDAT>), and if so, the processing advances to S</PDAT><HIL><BOLD><PDAT>5922</PDAT></BOLD></HIL><PDAT>. If not, the processing returns to S</PDAT><HIL><BOLD><PDAT>5910</PDAT></BOLD></HIL><PDAT>. In S</PDAT><HIL><BOLD><PDAT>5922</PDAT></BOLD></HIL><PDAT>, the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> finds the position of a boundary line for separating windows from the pointer position (S</PDAT><HIL><BOLD><PDAT>5922</PDAT></BOLD></HIL><PDAT>) and informs the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> of the position of the boundary line.</PDAT></PTEXT></PARA>
<PARA ID="P-00357" LVL="0"><PTEXT><PDAT>The display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> has a virtual window displayed by the display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT> starting from the position of this boundary line (S</PDAT><HIL><BOLD><PDAT>5924</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00358" LVL="0"><PTEXT><PDAT>The virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> judges whether the pointer is positioned at the end of the data (S</PDAT><HIL><BOLD><PDAT>5926</PDAT></BOLD></HIL><PDAT>), and if so, terminates its processing. If not, the processing returns to S</PDAT><HIL><BOLD><PDAT>5908</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00359" LVL="0"><PTEXT><PDAT>In the present embodiment, virtual windows are used, with only a certain number of text items being allowed in each virtual window. As a result, when there are a large number of text items, the user has less trouble in moving between text items than before, and so can make their selection more easily.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>Ninth Embodiment</PDAT></STEXT></H>
<PARA ID="P-00360" LVL="0"><PTEXT><PDAT>The construction of the data processing apparatus of the ninth embodiment of the present invention is shown in FIG. </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT>. As shown in the drawing, the data processing apparatus is composed of a data storage unit </PDAT><HIL><BOLD><PDAT>6001</PDAT></BOLD></HIL><PDAT>, an input operation unit </PDAT><HIL><BOLD><PDAT>6002</PDAT></BOLD></HIL><PDAT>, an input signal reception unit .</PDAT><HIL><BOLD><PDAT>6003</PDAT></BOLD></HIL><PDAT>, a control unit </PDAT><HIL><BOLD><PDAT>6004</PDAT></BOLD></HIL><PDAT>, a display control unit </PDAT><HIL><BOLD><PDAT>6005</PDAT></BOLD></HIL><PDAT>, a display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT>, and a virtual window generating unit </PDAT><HIL><BOLD><PDAT>6007</PDAT></BOLD></HIL><PDAT>. The data processing apparatus of the present embodiment is similar to the data processing apparatus of the eighth embodiment, so that the following explanation will only deal with the construction elements which are unique to the present embodiment.</PDAT></PTEXT></PARA>
<PARA ID="P-00361" LVL="0"><PTEXT><PDAT>The data storage unit </PDAT><HIL><BOLD><PDAT>6001</PDAT></BOLD></HIL><PDAT> can be made up of RAM and stores sets of data, such as data </PDAT><HIL><BOLD><PDAT>5301</PDAT></BOLD></HIL><PDAT> shown in FIG. </PDAT><HIL><BOLD><PDAT>53</PDAT></BOLD></HIL><PDAT>. The text item number table </PDAT><HIL><BOLD><PDAT>6101</PDAT></BOLD></HIL><PDAT> is also written into this data storage unit </PDAT><HIL><BOLD><PDAT>6001</PDAT></BOLD></HIL><PDAT> by the virtual window generating unit </PDAT><HIL><BOLD><PDAT>6007</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00362" LVL="0"><PTEXT><PDAT>The input operation unit </PDAT><HIL><BOLD><PDAT>6002</PDAT></BOLD></HIL><PDAT> is equipped with the function described below, in addition to the functions of the input operation unit </PDAT><HIL><BOLD><PDAT>5202</PDAT></BOLD></HIL><PDAT> of the eighth embodiment.</PDAT></PTEXT></PARA>
<PARA ID="P-00363" LVL="0"><PTEXT><PDAT>When the user presses one of the channel buttons from &ldquo;1&rdquo; to &ldquo;12&rdquo; on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>, the remote controller transmits a signal showing the chosen number to the input signal reception unit </PDAT><HIL><BOLD><PDAT>6003</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00364" LVL="0"><PTEXT><PDAT>In addition of the functions of the input signal reception unit </PDAT><HIL><BOLD><PDAT>5203</PDAT></BOLD></HIL><PDAT> in the eighth embodiment, the input signal reception unit </PDAT><HIL><BOLD><PDAT>6003</PDAT></BOLD></HIL><PDAT> receives a number signal from the input operation unit </PDAT><HIL><BOLD><PDAT>6002</PDAT></BOLD></HIL><PDAT> and informs the control unit </PDAT><HIL><BOLD><PDAT>6004</PDAT></BOLD></HIL><PDAT> of this number.</PDAT></PTEXT></PARA>
<PARA ID="P-00365" LVL="0"><PTEXT><PDAT>In addition to the functions of the control unit </PDAT><HIL><BOLD><PDAT>5204</PDAT></BOLD></HIL><PDAT>, the control unit </PDAT><HIL><BOLD><PDAT>6004</PDAT></BOLD></HIL><PDAT> receives a notification of a number from the input signal reception unit </PDAT><HIL><BOLD><PDAT>6003</PDAT></BOLD></HIL><PDAT> and then informs the display control unit </PDAT><HIL><BOLD><PDAT>6005</PDAT></BOLD></HIL><PDAT> of this number.</PDAT></PTEXT></PARA>
<PARA ID="P-00366" LVL="0"><PTEXT><PDAT>The virtual window generating unit </PDAT><HIL><BOLD><PDAT>6007</PDAT></BOLD></HIL><PDAT> is equipped with the functions described below, in addition to the functions of the virtual window generating unit </PDAT><HIL><BOLD><PDAT>5207</PDAT></BOLD></HIL><PDAT> in the eighth embodiment.</PDAT></PTEXT></PARA>
<PARA ID="P-00367" LVL="0"><PTEXT><PDAT>When the virtual window generating unit </PDAT><HIL><BOLD><PDAT>6007</PDAT></BOLD></HIL><PDAT> obtains the character string at the pointer position, judges that the character string is a text item, and adds &ldquo;1&rdquo; to the text counter N, the virtual window generating unit </PDAT><HIL><BOLD><PDAT>6007</PDAT></BOLD></HIL><PDAT> also adds the text item in question and the value of the text counter N into the data storage unit </PDAT><HIL><BOLD><PDAT>6001</PDAT></BOLD></HIL><PDAT>. Here, </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 61</PDAT></FGREF><PDAT> shows the text item number table </PDAT><HIL><BOLD><PDAT>6101</PDAT></BOLD></HIL><PDAT> for data </PDAT><HIL><BOLD><PDAT>5301</PDAT></BOLD></HIL><PDAT> which is generated as described above. As shown in the figure, the text item number table </PDAT><HIL><BOLD><PDAT>6101</PDAT></BOLD></HIL><PDAT> stores text items </PDAT><HIL><BOLD><PDAT>6102</PDAT></BOLD></HIL><PDAT> and a number </PDAT><HIL><BOLD><PDAT>6103</PDAT></BOLD></HIL><PDAT> given to each corresponding text item in the table.</PDAT></PTEXT></PARA>
<PARA ID="P-00368" LVL="0"><PTEXT><PDAT>The display control unit </PDAT><HIL><BOLD><PDAT>6005</PDAT></BOLD></HIL><PDAT> is equipped with the functions described below, in addition to the functions of the display control unit </PDAT><HIL><BOLD><PDAT>5205</PDAT></BOLD></HIL><PDAT> of the eighth embodiment. When a virtual window is displayed as a current virtual window with a thick border line, the display control unit </PDAT><HIL><BOLD><PDAT>6005</PDAT></BOLD></HIL><PDAT> reads the text numbers of the text items included in this current virtual window and displays each text number in a small circle above and to the left of the corresponding text item.</PDAT></PTEXT></PARA>
<PARA ID="P-00369" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 62</PDAT></FGREF><PDAT> shows the partial data </PDAT><HIL><BOLD><PDAT>6201</PDAT></BOLD></HIL><PDAT> of the virtual window </PDAT><HIL><BOLD><PDAT>5501</PDAT></BOLD></HIL><PDAT> with the text item numbers attached, when the first virtual window </PDAT><HIL><BOLD><PDAT>5501</PDAT></BOLD></HIL><PDAT> is set as the current virtual window.</PDAT></PTEXT></PARA>
<PARA ID="P-00370" LVL="0"><PTEXT><PDAT>On being informed of a number by the control unit </PDAT><HIL><BOLD><PDAT>6004</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>6005</PDAT></BOLD></HIL><PDAT> reads the data which is linked to the text item which corresponds to the received number in the text item number table </PDAT><HIL><BOLD><PDAT>6101</PDAT></BOLD></HIL><PDAT> in the data storage unit </PDAT><HIL><BOLD><PDAT>6001</PDAT></BOLD></HIL><PDAT>, and has the display of the display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT> replaced with this newly read data.</PDAT></PTEXT></PARA>
<PARA ID="P-00371" LVL="0"><PTEXT><PDAT>The display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT> is the same as in the eighth embodiment.</PDAT></PTEXT></PARA>
<PARA ID="P-00372" LVL="0"><PTEXT><PDAT>As one example, when, as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 62</PDAT></FGREF><PDAT>, the first virtual window </PDAT><HIL><BOLD><PDAT>5301</PDAT></BOLD></HIL><PDAT> is set as the current virtual window, and the user presses the channel button &ldquo;2&rdquo; on the remote controller </PDAT><HIL><BOLD><PDAT>501</PDAT></BOLD></HIL><PDAT>, data </PDAT><HIL><BOLD><PDAT>5301</PDAT></BOLD></HIL><PDAT> (see </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 53</PDAT></FGREF><PDAT>) in window </PDAT><HIL><BOLD><PDAT>5401</PDAT></BOLD></HIL><PDAT> of the display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT> is replaced with data </PDAT><HIL><BOLD><PDAT>5303</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00373" LVL="0"><PTEXT><PDAT>While the eighth embodiment requires two button operations consisting of movement using the &ldquo;Left&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT> and the &ldquo;Right&rdquo; button </PDAT><HIL><BOLD><PDAT>508</PDAT></BOLD></HIL><PDAT> and confirmation using the &ldquo;Enter&rdquo; button </PDAT><HIL><BOLD><PDAT>504</PDAT></BOLD></HIL><PDAT>, the present embodiment can update the display of data on the display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT> by means of only one operation of the channel buttons &ldquo;1&rdquo; to &ldquo;12&rdquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00374" LVL="0"><PTEXT><PDAT>The operation of the present embodiment is largely the same as in the eighth embodiment, with the addition of the processes described below with reference to FIG. </PDAT><HIL><BOLD><PDAT>59</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00375" LVL="0"><PTEXT><PDAT>In S</PDAT><HIL><BOLD><PDAT>5916</PDAT></BOLD></HIL><PDAT>, after adding &ldquo;1&rdquo; to the text counter N, the virtual window generating unit </PDAT><HIL><BOLD><PDAT>6007</PDAT></BOLD></HIL><PDAT> writes the text item in question and the value of the text counter N into the text item number table </PDAT><HIL><BOLD><PDAT>6101</PDAT></BOLD></HIL><PDAT> in the data storage unit </PDAT><HIL><BOLD><PDAT>6001</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00376" LVL="0"><PTEXT><PDAT>After terminating the display of a virtual window and having a new current virtual window displayed by the display unit </PDAT><HIL><BOLD><PDAT>5206</PDAT></BOLD></HIL><PDAT>, the display control unit </PDAT><HIL><BOLD><PDAT>6005</PDAT></BOLD></HIL><PDAT> reads the text numbers of text items included in the current virtual window from the text item number table </PDAT><HIL><BOLD><PDAT>6101</PDAT></BOLD></HIL><PDAT> in the data storage unit </PDAT><HIL><BOLD><PDAT>6001</PDAT></BOLD></HIL><PDAT> and has the numbers displayed in small circles next to the corresponding text items.</PDAT></PTEXT></PARA>
<PARA ID="P-00377" LVL="0"><PTEXT><PDAT>In the present embodiment, virtual windows are used, with only a certain number of text items being allowed in each virtual window. Text items are also displayed with numbers to allow their selection by a single push of a channel button on a remote controller. As a result, when there are a large number of text items, the user has less trouble in moving between text items than before, and so can easily have their desired data displayed.</PDAT></PTEXT></PARA>
<PARA ID="P-00378" LVL="0"><PTEXT><PDAT>It should be noted that while the third through ninth embodiments described a case where the data stored in the data storage units, such as </PDAT><HIL><BOLD><PDAT>2001</PDAT></BOLD></HIL><PDAT>, was given in its display form on the display units, such as </PDAT><HIL><BOLD><PDAT>2006</PDAT></BOLD></HIL><PDAT>, this data can be made up in reality of data which is written in a language such as HTML (Hypertext Markup Language).</PDAT></PTEXT></PARA>
<PARA ID="P-00379" LVL="0"><PTEXT><PDAT>The first to ninth embodiments of the present invention also describe data processing apparatuses of constructions such as that in shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, although the present invention can be composed of a computer program which is stored on a storage medium, such as a floppy disk, to allow easy installation into other computer systems. Here, </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 63</PDAT></FGREF><PDAT> shows the case when a floppy disk is used for this purpose.</PDAT></PTEXT></PARA>
<PARA ID="P-00380" LVL="0"><PTEXT><PDAT>The physical format of the floppy disk </PDAT><HIL><BOLD><PDAT>6301</PDAT></BOLD></HIL><PDAT> which is the recording medium itself is made up of tracks </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, . . . , </PDAT><HIL><BOLD><PDAT>80</PDAT></BOLD></HIL><PDAT> which are concentrically arranged from the outer to the inner periphery of the disk, with each track being divided into sixteen sectors in an angular direction. A program is recorded in accordance with these divided regions.</PDAT></PTEXT></PARA>
<PARA ID="P-00381" LVL="0"><PTEXT><PDAT>The floppy disk </PDAT><HIL><BOLD><PDAT>6301</PDAT></BOLD></HIL><PDAT> described above is installed into a case </PDAT><HIL><BOLD><PDAT>6401</PDAT></BOLD></HIL><PDAT> to protect the disk from dust and physical damage, and to allow safe transportation of the disk.</PDAT></PTEXT></PARA>
<PARA ID="P-00382" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 65</PDAT></FGREF><PDAT> is a drawing showing how a program is recorded on or read from the floppy disk </PDAT><HIL><BOLD><PDAT>6301</PDAT></BOLD></HIL><PDAT>. As shown in the drawing, a computer system </PDAT><HIL><BOLD><PDAT>6501</PDAT></BOLD></HIL><PDAT> is connected to a floppy disk drive </PDAT><HIL><BOLD><PDAT>6502</PDAT></BOLD></HIL><PDAT>, so that a program can be written on or read from the floppy disk </PDAT><HIL><BOLD><PDAT>6301</PDAT></BOLD></HIL><PDAT>. The floppy disk </PDAT><HIL><BOLD><PDAT>6301</PDAT></BOLD></HIL><PDAT> is inserted into and removed from the floppy disk drive </PDAT><HIL><BOLD><PDAT>6502</PDAT></BOLD></HIL><PDAT> via the insertion slot </PDAT><HIL><BOLD><PDAT>6503</PDAT></BOLD></HIL><PDAT>. When recording, the program from the computer system </PDAT><HIL><BOLD><PDAT>6501</PDAT></BOLD></HIL><PDAT> is recorded on the floppy disk </PDAT><HIL><BOLD><PDAT>6301</PDAT></BOLD></HIL><PDAT> by the floppy disk drive </PDAT><HIL><BOLD><PDAT>6502</PDAT></BOLD></HIL><PDAT>. When reading, the floppy disk drive </PDAT><HIL><BOLD><PDAT>6502</PDAT></BOLD></HIL><PDAT> reads the program on the floppy disk </PDAT><HIL><BOLD><PDAT>6301</PDAT></BOLD></HIL><PDAT> and the transfers the program to the computer system </PDAT><HIL><BOLD><PDAT>6501</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00383" LVL="0"><PTEXT><PDAT>It should be noted here that the above explanation describes the case when a floppy disk is used as the recording medium, although the same operations can be performed when an optical disk is used as the recording medium. The recording medium, however, is not limited to these two examples, so that any medium for recording a program, such as an IC card or a ROM cassette may alternatively be used.</PDAT></PTEXT></PARA>
<PARA ID="P-00384" LVL="0"><PTEXT><PDAT>Although the present invention has been fully described by way of examples with reference to the accompanying drawings, it is to be noted that various changes and. modifications will be apparent to those skilled in the art. Therefore, unless such changes and modifications depart from the scope of the present invention, they should be construed as being included therein.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00385" LVL="0"><PTEXT><PDAT>1. A data processing apparatus which displays a set of document data on a display means together with an operation menu which has operation items for operation executions related to said set of document data, said data processing apparatus comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>document data storage means for storing a plurality of sets of document data which are to be displayed by the display means, wherein each set of document data has a different data content and is stored together with a set of content information which identifies said data content; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>operation menu information storage means for storing a plurality of sets of operation menu information which are each made up of a set of operation items which correspond to one of a plurality of types of document data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>first indication operation means for indicating a display of a set of document data, in accordance with a user operation; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>second indication operation means for indicating an addition of a display of an operation menu to the displayed set of document data, in accordance with a user operation; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>operation menu generation means for receiving an indication from said second indication operation means, for obtaining the content information of the displayed set of document data from said document data storage means, for extracting the set of operation menu information which corresponds to the obtained content information from said operation menu information storage means, and for generating an operation menu which has the operation items in the extracted set of operation menu information as menu items after the set of document data has been displayed and a user operation has indicated to add the display of an operation menu to the displayed set of document data; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>display control means for reading a set of document data from said document data storage means and having the set of document data displayed on the display means in accordance with an indication from said first indication operation means, and for having the operation menu generated by said operation menu generation means displayed on the display means. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00386" LVL="0"><PTEXT><PDAT>2. The data processing apparatus of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>menu item focusing/deciding operation means for focusing on a menu item in the operation menu displayed on the display means in accordance with a user operation and for deciding on the focused menu item in accordance with a user operation; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>operation execution means for executing an operation program of the operation item which is the menu item decided on by said menu item focusing/deciding operation means. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00387" LVL="0"><PTEXT><PDAT>3. The data processing apparatus of claim </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>obtaining a set of document data that is broadcast means for text-multiplexed broadcast transmitted by a television station and obtaining a set of document data by separating text data from the received text-multiplexed broadcast; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>document data writing means for writing the set of document data received by said document data obtaining means into said document data storage means. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00388" LVL="0"><PTEXT><PDAT>4. The data processing apparatus of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, further comprising data section display control means for having data sections included in the set of data being displayed on the display means displayed in a new window.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00389" LVL="0"><PTEXT><PDAT>5. A data processing apparatus which displays a plurality of sets of document data including key words on a display means together with an operation menu which has operation items for operation executions related to at least one of said plurality of sets of document data, said data processing apparatus comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>document data storage means for storing a plurality of sets of document data, including key words contained in each set of document data and a list of types of key words which are used to classify the content of key words, which are to be displayed by the display means, wherein each set of document data includes key words specifically associated with that set of document data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>operation menu information storage means for storing a plurality of sets of operation menu information which are each made up of a set of operation items which correspond to a type of keyword; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>first indication operation means for indicating a display of a set of document data in accordance with a user operation; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>first display control means for receiving an indication from said first indication operation means, for reading a set of document data from said document data storage means, and for having said read set of document data displayed by the display means; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>key word selection means for selecting a key word in said set of document data displayed by the display means, in accordance with a user operation; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>second display control means for having a key word, which is indicated as one of a default and a selection by said key word selecting operation means, in said set of document data displayed on the display means displayed in focus; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>second indication operation means for indicating a display of an operation menu for the key word in focus, in accordance with a user operation; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>operation menu generation means for receiving an indication from said second indication operation means, for determining the type of the key word in focus, for reading the set of operation menu information which corresponds to the type of the key word in focus on the display means from said operation menu information storage means, and for generating an operation menu which has the operation items in the read set of operation menu information as menu items; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>third display control means for having the operation menu generated by said operation menu generation means displayed on the display means. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00390" LVL="0"><PTEXT><PDAT>6. The data processing apparatus of claim </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>menu item focusing/deciding operation means for focusing on a menu item in the operation menu displayed on the display means in accordance with a user operation and for deciding on the focused menu item in accordance with a user operation; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>operation execution means for executing an operation program of the operation item which is the menu item decided on by said menu item focusing/deciding operation means. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00391" LVL="0"><PTEXT><PDAT>7. The data processing apparatus of claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>, further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>obtaining a set of document data that is broadcast means for text-multiplexed broadcast transmitted by a television station and obtaining a set of document data and a table of types of key words by separating said received text-multiplexed broadcast; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>writing means for writing the set of document data and the table of types of key words obtained by said document data obtaining means into said document data storage means; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein the operation menu generation means reads a type of the key word in focus from the table in said document data storage means, and reads the set of operation menu information corresponding to the read type from said operation menu information storage means. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00392" LVL="0"><PTEXT><PDAT>8. In a television receiving system for receiving television signals and displaying image signals on a display unit, the improvement of a data processing apparatus comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a separating unit for determining if the television signal is a text multiplexed broadcast signal and if so, separating character data signals from image signals and converting the character data to a set of document data while sending the image signals to the display unit for display; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>document data storage unit for storing each set of document data converted by the separating unit to provide a plurality of sets of document data which are displayable by the display unit, wherein each set of document data has a different data content and is stored together with a set of content information which corresponds to said data content; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>operation menu information storage unit for storing a plurality of sets of operation menu information which are each made up of a set of operation items which correspond to one of a plurality of types of document data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>an input operation unit, including a wireless remote controller having input members for requesting a document display and a menu display and providing corresponding signals, in accordance with a user operation; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>an input signal reception unit for receiving user signals from the input operation unit; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>operation menu generation means for receiving an indication from said input signal reception unit for displaying a set of document data, for obtaining the content information of the displayed set of document data from said document data storage unit, for extracting the set of operation menu information which corresponds to the obtained content information from said operation menu information storage unit, and for generating an operation menu which has the operation items in the extracted set of operation menu information as menu items after the set of document data has been displayed and a user operation has indicated to add the display of an operation menu to the displayed set of document data; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>display control means for reading a set of document data from said document data storage unit and having the set of document data displayed on the display unit in accordance with a signal from said input operation unit, and for having a corresponding operation menu, generated by said operation menu generation means, displayed on th e display unit. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00393" LVL="0"><PTEXT><PDAT>9. The data processing apparatus of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>, wherein the operation menu generation means determines from the document data storage unit whether a text item in the displayed set of document data is linked to a plurality of sets of document data and if so linked, generates a menu with a title of each linked set of document data as a menu item.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00394" LVL="0"><PTEXT><PDAT>10. The data processing apparatus of claim </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>, further including means for providing a focus indicator on a displayed menu item and upon a lapse of a predetermined time period automatically moving the focus indicator to another menu item.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00395" LVL="0"><PTEXT><PDAT>11. The data processing apparatus of claim </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>, further including means for generating and displaying a channel number adjacent a menu item that corresponds to an input member on the wireless remote controller whereby the user can display a set of document data corresponding to the menu item by activating the input member.</PDAT></PTEXT></PARA>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314570-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314570-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314570-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314570-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314570-20011106-D00004.TIF">
<EMI ID="EMI-D00005" FILE="US06314570-20011106-D00005.TIF">
<EMI ID="EMI-D00006" FILE="US06314570-20011106-D00006.TIF">
<EMI ID="EMI-D00007" FILE="US06314570-20011106-D00007.TIF">
<EMI ID="EMI-D00008" FILE="US06314570-20011106-D00008.TIF">
<EMI ID="EMI-D00009" FILE="US06314570-20011106-D00009.TIF">
<EMI ID="EMI-D00010" FILE="US06314570-20011106-D00010.TIF">
<EMI ID="EMI-D00011" FILE="US06314570-20011106-D00011.TIF">
<EMI ID="EMI-D00012" FILE="US06314570-20011106-D00012.TIF">
<EMI ID="EMI-D00013" FILE="US06314570-20011106-D00013.TIF">
<EMI ID="EMI-D00014" FILE="US06314570-20011106-D00014.TIF">
<EMI ID="EMI-D00015" FILE="US06314570-20011106-D00015.TIF">
<EMI ID="EMI-D00016" FILE="US06314570-20011106-D00016.TIF">
<EMI ID="EMI-D00017" FILE="US06314570-20011106-D00017.TIF">
<EMI ID="EMI-D00018" FILE="US06314570-20011106-D00018.TIF">
<EMI ID="EMI-D00019" FILE="US06314570-20011106-D00019.TIF">
<EMI ID="EMI-D00020" FILE="US06314570-20011106-D00020.TIF">
<EMI ID="EMI-D00021" FILE="US06314570-20011106-D00021.TIF">
<EMI ID="EMI-D00022" FILE="US06314570-20011106-D00022.TIF">
<EMI ID="EMI-D00023" FILE="US06314570-20011106-D00023.TIF">
<EMI ID="EMI-D00024" FILE="US06314570-20011106-D00024.TIF">
<EMI ID="EMI-D00025" FILE="US06314570-20011106-D00025.TIF">
<EMI ID="EMI-D00026" FILE="US06314570-20011106-D00026.TIF">
<EMI ID="EMI-D00027" FILE="US06314570-20011106-D00027.TIF">
<EMI ID="EMI-D00028" FILE="US06314570-20011106-D00028.TIF">
<EMI ID="EMI-D00029" FILE="US06314570-20011106-D00029.TIF">
<EMI ID="EMI-D00030" FILE="US06314570-20011106-D00030.TIF">
<EMI ID="EMI-D00031" FILE="US06314570-20011106-D00031.TIF">
<EMI ID="EMI-D00032" FILE="US06314570-20011106-D00032.TIF">
<EMI ID="EMI-D00033" FILE="US06314570-20011106-D00033.TIF">
<EMI ID="EMI-D00034" FILE="US06314570-20011106-D00034.TIF">
<EMI ID="EMI-D00035" FILE="US06314570-20011106-D00035.TIF">
<EMI ID="EMI-D00036" FILE="US06314570-20011106-D00036.TIF">
<EMI ID="EMI-D00037" FILE="US06314570-20011106-D00037.TIF">
<EMI ID="EMI-D00038" FILE="US06314570-20011106-D00038.TIF">
<EMI ID="EMI-D00039" FILE="US06314570-20011106-D00039.TIF">
<EMI ID="EMI-D00040" FILE="US06314570-20011106-D00040.TIF">
<EMI ID="EMI-D00041" FILE="US06314570-20011106-D00041.TIF">
<EMI ID="EMI-D00042" FILE="US06314570-20011106-D00042.TIF">
<EMI ID="EMI-D00043" FILE="US06314570-20011106-D00043.TIF">
<EMI ID="EMI-D00044" FILE="US06314570-20011106-D00044.TIF">
<EMI ID="EMI-D00045" FILE="US06314570-20011106-D00045.TIF">
<EMI ID="EMI-D00046" FILE="US06314570-20011106-D00046.TIF">
<EMI ID="EMI-D00047" FILE="US06314570-20011106-D00047.TIF">
<EMI ID="EMI-D00048" FILE="US06314570-20011106-D00048.TIF">
<EMI ID="EMI-D00049" FILE="US06314570-20011106-D00049.TIF">
<EMI ID="EMI-D00050" FILE="US06314570-20011106-D00050.TIF">
<EMI ID="EMI-D00051" FILE="US06314570-20011106-D00051.TIF">
<EMI ID="EMI-D00052" FILE="US06314570-20011106-D00052.TIF">
<EMI ID="EMI-D00053" FILE="US06314570-20011106-D00053.TIF">
<EMI ID="EMI-D00054" FILE="US06314570-20011106-D00054.TIF">
<EMI ID="EMI-D00055" FILE="US06314570-20011106-D00055.TIF">
<EMI ID="EMI-D00056" FILE="US06314570-20011106-D00056.TIF">
<EMI ID="EMI-D00057" FILE="US06314570-20011106-D00057.TIF">
<EMI ID="EMI-D00058" FILE="US06314570-20011106-D00058.TIF">
<EMI ID="EMI-D00059" FILE="US06314570-20011106-D00059.TIF">
<EMI ID="EMI-D00060" FILE="US06314570-20011106-D00060.TIF">
<EMI ID="EMI-D00061" FILE="US06314570-20011106-D00061.TIF">
<EMI ID="EMI-D00062" FILE="US06314570-20011106-D00062.TIF">
<EMI ID="EMI-D00063" FILE="US06314570-20011106-D00063.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314571-20011106-D00000.TIF SYSTEM "US06314571-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314571-20011106-D00001.TIF SYSTEM "US06314571-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314571-20011106-D00002.TIF SYSTEM "US06314571-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314571-20011106-D00003.TIF SYSTEM "US06314571-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314571-20011106-D00004.TIF SYSTEM "US06314571-20011106-D00004.TIF" NDATA TIF>
<!ENTITY US06314571-20011106-D00005.TIF SYSTEM "US06314571-20011106-D00005.TIF" NDATA TIF>
<!ENTITY US06314571-20011106-D00006.TIF SYSTEM "US06314571-20011106-D00006.TIF" NDATA TIF>
<!ENTITY US06314571-20011106-D00007.TIF SYSTEM "US06314571-20011106-D00007.TIF" NDATA TIF>
<!ENTITY US06314571-20011106-D00008.TIF SYSTEM "US06314571-20011106-D00008.TIF" NDATA TIF>
<!ENTITY US06314571-20011106-D00009.TIF SYSTEM "US06314571-20011106-D00009.TIF" NDATA TIF>
<!ENTITY US06314571-20011106-D00010.TIF SYSTEM "US06314571-20011106-D00010.TIF" NDATA TIF>
<!ENTITY US06314571-20011106-D00011.TIF SYSTEM "US06314571-20011106-D00011.TIF" NDATA TIF>
<!ENTITY US06314571-20011106-D00012.TIF SYSTEM "US06314571-20011106-D00012.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314571</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>09351456</PDAT></DNUM></B210>
<B211US><PDAT>09</PDAT></B211US>
<B220><DATE><PDAT>19990712</PDAT></DATE></B220>
</B200>
<B300>
<B310><DNUM><PDAT>10-266001</PDAT></DNUM></B310>
<B320><DATE><PDAT>19980921</PDAT></DATE></B320>
<B330><CTRY><PDAT>JP</PDAT></CTRY></B330>
</B300>
<B500>
<B510>
<B511><PDAT>H04N  5445</PDAT></B511>
<B512><PDAT>H04N  710</PDAT></B512>
<B512><PDAT>H04N  7173</PDAT></B512>
<B512><PDAT>H04N  716</PDAT></B512>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>725 48</PDAT></B521>
<B522><PDAT>725 32</PDAT></B522>
<B522><PDAT>725 92</PDAT></B522>
<B522><PDAT>725114</PDAT></B522>
<B522><PDAT>725138</PDAT></B522>
</B520>
<B540><STEXT><PDAT>EPG data collection and delivery system and EPG data collection and delivery device therein</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5576755</PDAT></DNUM>
<DATE><PDAT>19961100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Davis et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348 13</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5579055</PDAT></DNUM>
<DATE><PDAT>19961100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hamilton et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348476</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5666645</PDAT></DNUM>
<DATE><PDAT>19970900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Thomas et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>455  61</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6005562</PDAT></DNUM>
<DATE><PDAT>19991200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Shiga et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345327</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>8289267</PDAT></DNUM>
<DATE><PDAT>19961100</PDAT></DATE>
<CTRY><PDAT>JP</PDAT></CTRY>
</DOC>
</PCIT>
<CITED-BY-OTHER>
</B561>
</B560>
<B570>
<B577><PDAT>19</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>348  6</PDAT></B582>
<B582><PDAT>348  7</PDAT></B582>
<B582><PDAT>348722</PDAT></B582>
<B582><PDAT>348906</PDAT></B582>
<B582><PDAT>345327</PDAT></B582>
<B582><PDAT>709217</PDAT></B582>
<B582><PDAT>709219</PDAT></B582>
<B582><PDAT>455  61</PDAT></B582>
<B582><PDAT>455  51</PDAT></B582>
<B582><PDAT>455  42</PDAT></B582>
<B582><PDAT>725 48</PDAT></B582>
<B582><PDAT>725 32</PDAT></B582>
<B582><PDAT>725 92</PDAT></B582>
<B582><PDAT>725114</PDAT></B582>
<B582><PDAT>725138</PDAT></B582>
</B580>
<B590><B595><PDAT>12</PDAT></B595><B596><PDAT>15</PDAT></B596><B597US>
</B590>
</B500>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Michiyo</PDAT></FNM><SNM><STEXT><PDAT>Ogawa</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Tokyo</PDAT></CITY>
<CTRY><PDAT>JP</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Yoshiaki</PDAT></FNM><SNM><STEXT><PDAT>Kato</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Tokyo</PDAT></CITY>
<CTRY><PDAT>JP</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Mitsubishi Denki Kabushiki Kaisha</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Tokyo</PDAT></CITY><CTRY><PDAT>JP</PDAT></CTRY></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>03</PDAT>
</B732US>
</B730>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Andrew</PDAT></FNM><SNM><STEXT><PDAT>Faile</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Hai V.</PDAT></FNM><SNM><STEXT><PDAT>Tran</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2611</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery device for collecting and delivering program guide data of a plurality of broadcasting stations respectively broadcasting their own programs collects own-station EPG data from a plurality of program guide data transmitting devices respectively corresponding to each of the broadcasting stations, and delivers all-station EPG data to a plurality of program guide data providing devices. By this configuration, the rate of inter-access among the stations is not made high regardless of a frequent modification of EPG data of the broadcasting stations, and the program guide viewers of one station can be provided with the latest EPG data of other stations without changing the individual system configuration, even when there is an increase in the number of broadcasting stations within the whole system.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>1. Field of the Invention</PDAT></PTEXT></PARA>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>The present invention relates to a program guide data collection and delivery system for providing electronic program guide data (hereinafter referred to just as &ldquo;EPG data&rdquo;) which is the data concerning the programs being broadcast from a plurality of broadcasting stations to the program guide viewers of their respective stations, and also relates to a program guide data collection and delivery device that performs transmission and reception of the EPG data to and from these broadcasting stations.</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>2. Description of the Related Art</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 13</PDAT></FGREF><PDAT> is a schematic diagram showing a conventional program guide data transmitting device as disclosed in Japanese Patent Application Laid-Open No. 8-289267. In the figure, reference numeral </PDAT><HIL><BOLD><PDAT>701</PDAT></BOLD></HIL><PDAT> denotes a switcher that selects signals of predetermined plural numbers of broadcasting channels among image signals and audio signals provided in the digital form received from a plurality of broadcasting stations, numeral </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT> denotes a promotion channel generating device, which transforms the signals of a predetermined limited number of channels among those of a plurality of channels input to this switcher </PDAT><HIL><BOLD><PDAT>701</PDAT></BOLD></HIL><PDAT> into a sole signal to be displayed on one single monitor screen. Reference numerals </PDAT><HIL><BOLD><PDAT>703</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>703</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>703</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>c </PDAT></ITALIC></HIL><PDAT>each denotes an encoder for coding the image signals and audio signals fed from the switcher </PDAT><HIL><BOLD><PDAT>701</PDAT></BOLD></HIL><PDAT> by use of MPEG method (Moving Picture Expert Group method), numeral </PDAT><HIL><BOLD><PDAT>709</PDAT></BOLD></HIL><PDAT> denotes an EPG data generating device for generating EPG data, numeral </PDAT><HIL><BOLD><PDAT>708</PDAT></BOLD></HIL><PDAT> denotes a program transmission control device for outputting control signals for controlling the switcher </PDAT><HIL><BOLD><PDAT>701</PDAT></BOLD></HIL><PDAT> and the EPG data generating device </PDAT><HIL><BOLD><PDAT>709</PDAT></BOLD></HIL><PDAT> and so on, numerals </PDAT><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>c </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>d </PDAT></ITALIC></HIL><PDAT>each denotes a multiplexing device (abbreviated to &ldquo;MUX&rdquo; in the figure&rdquo;) for respectively multiplexing the signals input from the promotion channel generating device </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT>, encoders </PDAT><HIL><BOLD><PDAT>703</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>to </PDAT><HIL><BOLD><PDAT>703</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>c </PDAT></ITALIC></HIL><PDAT>and from the EPG data generating device </PDAT><HIL><BOLD><PDAT>709</PDAT></BOLD></HIL><PDAT>, and outputting thereafter these multiplexed signals. Further, reference numerals </PDAT><HIL><BOLD><PDAT>705</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>705</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>705</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>c </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>705</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>d </PDAT></ITALIC></HIL><PDAT>each denotes a digital converter circuit that converts the multiplexed signals fed from each of the multiplexing devices </PDAT><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>through </PDAT><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>d </PDAT></ITALIC></HIL><PDAT>into digital signals, numeral </PDAT><HIL><BOLD><PDAT>706</PDAT></BOLD></HIL><PDAT> denotes a combiner circuit that combines the signals fed from the digital converter circuits </PDAT><HIL><BOLD><PDAT>705</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>through </PDAT><HIL><BOLD><PDAT>705</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>d, </PDAT></ITALIC></HIL><PDAT>and numeral </PDAT><HIL><BOLD><PDAT>707</PDAT></BOLD></HIL><PDAT> denotes a satellite-transmission antenna for transmitting the signals fed from the combiner circuit </PDAT><HIL><BOLD><PDAT>706</PDAT></BOLD></HIL><PDAT> to a corresponding satellite.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>The operation of the above conventional program guide data transmitting device is as follows.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 13</PDAT></FGREF><PDAT>, the EPG data generating device </PDAT><HIL><BOLD><PDAT>709</PDAT></BOLD></HIL><PDAT> generates EPG data consisting of bit map data such as icons, promotion logos, categories and so on which are to be transmitted under control of the program transmission control device </PDAT><HIL><BOLD><PDAT>708</PDAT></BOLD></HIL><PDAT>, and outputs the thus generated EPG data to the promotion channel generating device </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT> and also to the multiplexing devices </PDAT><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>through </PDAT><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>d. </PDAT></ITALIC></HIL><PDAT>The promotion channel generating device </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT> superimposes the bit map data fed from the EPG data generating device </PDAT><HIL><BOLD><PDAT>709</PDAT></BOLD></HIL><PDAT> on the image signals for a small screen each input through the switcher </PDAT><HIL><BOLD><PDAT>701</PDAT></BOLD></HIL><PDAT>. The multiplexing devices </PDAT><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>through </PDAT><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>d </PDAT></ITALIC></HIL><PDAT>multiplex the image signals and audio signals fed thereto from the promotion channel generating circuit </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT> and the encoders </PDAT><HIL><BOLD><PDAT>703</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>through </PDAT><HIL><BOLD><PDAT>703</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>d. </PDAT></ITALIC></HIL><PDAT>The digital converter circuits </PDAT><HIL><BOLD><PDAT>705</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>through </PDAT><HIL><BOLD><PDAT>705</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>d </PDAT></ITALIC></HIL><PDAT>convert the input signals to digital signals by a predetermined converting method, and output the converted signals to the combiner circuit </PDAT><HIL><BOLD><PDAT>706</PDAT></BOLD></HIL><PDAT>. The combiner circuit </PDAT><HIL><BOLD><PDAT>706</PDAT></BOLD></HIL><PDAT> combines the signals output from the digital converter circuits </PDAT><HIL><BOLD><PDAT>705</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>through </PDAT><HIL><BOLD><PDAT>705</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>d, </PDAT></ITALIC></HIL><PDAT>and transmits the thus composite signal to the satellite by way of an antenna </PDAT><HIL><BOLD><PDAT>707</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>However, as explained above, since the conventional program guide data transmitting device is provided as an individual equipment in each of the broadcasting stations within a program guide data collection and delivery system, and is not considered in relation to other broadcasting stations, in a case that there are already many broadcasting stations within the system, each of the stations is not capable of providing the latest EPG data of other stations for the program guide viewers of its own station.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>Further, in a case that there is a modification of EPG data in each broadcasting station, the modified EPG data can be directly broadcast to all other stations in order that each broadcasting station can provide other stations with the latest EPG data of itself. However, in this case, if the modification of EGP data frequently occurs in each broadcasting station, the frequency of inter-access among the plurality of broadcasting stations is thereby made higher, and in addition to this, each time a broadcasting station is newly founded, the already existing plurality of stations have to change their respective system configurations.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>The present invention has been proposed to solve the problems aforementioned, and it is an object of the present invention to provide an EPG data collection and delivery system and a program guide data collection and delivery device therein, wherein the modification in the EPG data of each of the broadcasting stations within the system occurs frequently, the rate of inter-access among the stations is not made high, and that each station is capable of providing the program guide viewers of its own station with the latest EPG data of other stations without changing the individual system configuration, even when there is an increase in the number of broadcasting stations within the whole system.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>In order to achieve the above object, the program guide data collection and delivery system according to the first aspect of the present invention is constructed such that it comprises: a program guide data collection and delivery device for collecting and delivering program guide data of a plurality of broadcasting stations respectively broadcasting their own programs, a plurality of program guide data transmitting devices respectively corresponding to each of the plurality of broadcasting stations for transmitting the program guide data of their respectively own broadcasting stations to the program guide data collection and delivery device; and a plurality of program guide data providing devices for providing the program guide data of all of the plurality of broadcasting stations delivered from the program guide data collection and delivery device to the program guide viewers of their own broadcasting stations.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to the second aspect of the present invention having the above configuration comprises; a data collecting division for collecting program guide data of each of the broadcasting stations transmitted from the plurality of program guide data transmitting devices, a program guide data storing section for storing the program guide data of each of the broadcasting stations collected by the data collecting division, and a data delivering division for delivering the program guide data of each of the broadcasting stations stored in the program guide data storing section to a plurality of program guide data providing devices, and wherein each of the plurality of program guide data transmitting devices comprises; an own-station program guide data storing section for storing the program guide data broadcast from its own broadcasting station, and a data transmitting section for transmitting the own-station program guide data of its own broadcasting station to the program guide data collecting division of the program guide data collection and delivery device, and further wherein each of the plurality of program guide data providing devices comprises; a data receiving section for receiving the program guide data delivered from the program guide data delivering division of the program guide data collecting device, an all-station program guide data storing section for storing the program guide data received by the data receiving section, a data converting section for converting the program guide data stored in the all-station program guide data storing section to a predetermined format, and a transmission control section for controlling the transmission of the program guide data converted to the predetermined format.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to the third aspect of the present invention having the above configuration is constructed such that the data transmitting section in the program guide data transmitting device of its own broadcasting station directly rewrites the data stored in the all-station program guide data storing section in the corresponding program guide data providing device in a case that there has been a modification in the own-station program guide data storing section and also informs the corresponding data converting section of the fact that there has been a modification in the all-station program guide data storing section.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to the fourth aspect of the present invention having the configuration of the first aspect comprises; a data collecting division for collecting program guide data of each of the broadcasting stations transmitted from the plurality of program guide data transmitting devices, a program guide data storing section for storing the program guide data of each of the broadcasting stations collected by the data collecting division, a data converting section for converting the program guide data stored in the program guide data storing section to a predetermined format, and a data delivering division for delivering the format-converted program guide data of each of the broadcasting stations to each of the program guide data providing devices, and wherein each of the plurality of program guide data transmitting device comprises; an own-station program guide data storing section for storing the program guide data broadcast from its own broadcasting station, and a data transmitting section for transmitting the own-station program guide data of its own broadcasting station to the program guide data collecting division of the program guide data collection and delivery device, and further wherein each of the plurality of program guide data providing devices comprises; a data receiving section for receiving the program guide data delivered from the program guide data delivering division of the program guide data collection and delivery device, and a transmission control section for controlling the transmission of the program guide data fed from the data receiving section.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to a further aspect of the present invention, having the configuration of the fourth aspect is constructed such that the program guide data transmitting device further comprises a data converting section for converting the program guide data stored in said own-station program guide data storing section to a predetermined format, and wherein in a case that there has been a modification in the data in the own-station program guide data, the data converting section reads out the data stored in said data storing means, and directly updates the data stored in the transmission control section.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to a further aspect of the present invention, having the configuration of the fourth aspect is constructed such that the program guide data transmitting device further comprises a data converting section for converting the program guide data stored in the own-station program guide data storing section to a predetermined format, and wherein in a case that there has been a modification in the data in the own-station program guide data, the data transmitting section transmits the converted data from the data converting section to the program guide data collection and delivery device.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to a further aspect of the present invention, having the configuration of the second aspect is constructed such that the data collecting division in the program guide data collection and delivery device comprises; a plurality of collecting sections corresponding to each of the program guide data transmitting devices, and a collection control section for controlling said plurality of collecting sections, and wherein the data delivering division of the program guide data collection and delivery device comprises; a delivering section corresponding to each of the program guide data providing devices, and a delivery control section for controlling the plurality of delivering sections.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to a further aspect of the present invention, having the configuration of the first aspect is constructed such that the program guide data transmitting devices requires a transmission of the program guide data to the program guide data collection and delivery device.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to a further aspect of the present invention, having the configuration of the first aspect is constructed such that the program guide data collection and delivery device requires a transmission of program guide data to each of the program guide data transmitting devices.</PDAT></PTEXT></PARA>
<PARA ID="P-00020" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to a further aspect of the present invention, having the configuration of the first aspect is constructed such that the program guide data collection and delivery device requires a transmission of program guide data to each of the program guide data providing devices.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to the tenth aspect of the present invention, having the configuration of the first aspect is constructed such that when each of the program guide data providing devices requires a transmission of program guide data to the program guide data collection and delivery device.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to a further aspect of the present invention, having the configuration of the first aspect is constructed such that when each of the program guide data transmitting devices transmits the program guide data of its own broadcasting station, it indicates the delivery starting time for starting the delivery of the program guide data to each of the program guide data providing devices.</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to another aspect of the present invention, having the configuration of the first aspect is constructed such that the program guide data collection and delivery device additionally indicates the delivery service starting time for starting the delivery of said program guide data to the program guide viewers, when it transmits the program guide data of all the broadcasting stations.</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to a further aspect of the present invention, having the configuration of the first aspect is constructed such that when a data modification has occurred in the program guide data of its own broadcasting station, each of the program guide data transmitting devices transmits the program guide data to the program guide data collection and delivery device as a difference value between the program guide data already transmitted and the program guide data after modification.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to a further aspect of the present invention, having the configuration of the first aspect is constructed such that when the program guide data collection and delivery devices modifies the program guide data stored in the program guide data storing section therein, it transmits the program guide data to each of the program guide data providing devices as a difference value between the program guide data already transmitted and the program guide data after modification.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to a further aspect of the present invention, having the configuration of the first aspect is constructed such that the program guide data collection and delivery device is provided with a data checking section for checking the data amount and the content of the program guide data transmitted from each of the program guide data transmitting sections.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery system according to a further aspect of the present invention, having the configuration of the first aspect is constructed such that the program guide data collection and delivery device transmits service control information regarding the method of providing program guide data to each of the program guide data providing devices.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><PDAT>The program guide data collection and delivery device according to a further aspect of the present invention is constructed such that it comprises; a data collecting division for collecting program guide data of each of a plurality of broadcasting stations transmitted from a plurality of program guide data transmitting devices, a program guide data storing section for storing the program guide data of each of the broadcasting stations collected by the data collecting division, and a data delivering section for delivering the program guide data of each of the broadcasting stations stored in the program guide data storing section to a plurality of program guide data providing devices.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00029" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a schematic diagram of an EPG data collection and delivery system according to the first embodiment of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a schematic view showing the inner configuration of the EPG data transmission control section in the EPG data providing device shown in FIG. l.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> is a schematic diagram of an EPG data collection and delivery system according to the third and fourth embodiments of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> is a schematic diagram of an EPG data collection and delivery system according to the fifth embodiment of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> is a schematic view showing the inner configuration of the EPG data delivering division in the EPG data collection and delivery center shown in FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is a schematic diagram of an EPG data collection and delivery system according to the sixth embodiment of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is a schematic diagram of an EPG data collection and delivery system according to the seventh embodiment of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> is a schematic diagram of an EPG data collection and delivery system according to the eight embodiment of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT> is a schematic diagram of a portion related to the interface portion between the EPG data collection and delivery center and a plurality of broadcasting stations in the first embodiment, which is the characteristic portion of the ninth embodiment of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 10</PDAT></FGREF><PDAT> is a flowchart showing the procedure carried out in the data transmission section in the EPG data transmitting device of each of the broadcasting stations.</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 11A</PDAT></FGREF><PDAT> to </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>C are exemplary views each showing an example of a modification in the EPG data.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT> is a schematic diagram of an EPG data collection and delivery system according to the fourteenth embodiment of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 13</PDAT></FGREF><PDAT> is a schematic view showing a conventional EPG transmitting device.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</PDAT></STEXT></H>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>Several embodiments of the present invention are explained in the following.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="7"><PTEXT><PDAT>&lsqb;First Embodiment&rsqb;</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a schematic diagram of an EPG data collection and delivery system according to a first embodiment of the present invention. In the figure, reference numeral </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> denotes an EPG data collection and delivery center (hereinafter may be referred to just as a &ldquo;center&rdquo;) as a program guide data collection and delivery device for collecting and delivering EPG data, numeral </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> denotes a data collecting division for collecting the EPG data transmitted to the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, numeral </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> denotes an all-station EPG data base for storing the EPG data collected in the data collecting division </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>, and numeral </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> denotes a data delivering division for delivering the data stored in the all-station EPG data base </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>Further, reference numeral </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> denotes a TV broadcasting station, numeral </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> denotes a data broadcasting station, and numeral </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> denotes an Internet service station, wherein numerals </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>denote EPG data transmitting devices for transmitting the EPG data of respective broadcasting stations </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> (own-station EPG data), numerals </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>denote EPG data providing devices for providing the EPG data of all the stations within the system (all-station EPG data) to the program guide viewers of the respective stations </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>. Further, reference numerals </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>31</PDAT></BOLD></HIL><PDAT> denote data transmitting sections each for transmitting the EPG data of the respective stations </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, numerals </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT> denote own-station EPG data bases each for storing the own-station EPG data of the respective stations </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>, numerals </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>43</PDAT></BOLD></HIL><PDAT> denote data receiving sections each for receiving the all-station EPG data delivered from the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, numerals </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> denote all-station EPG data bases each for storing the thus received all-station EPG data, numerals </PDAT><HIL><BOLD><PDAT>25</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>45</PDAT></BOLD></HIL><PDAT> denote data converting sections each for converting the data stored in the all-station EPG data base to a predetermined transmission format, numerals </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> denote EPG data transmission control sections each for transmitting the all-station data converted to the predetermined transmission format, numeral </PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT> denotes an encoder for coding video signals and audio signals, and numeral </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> denotes a multiplexing section for multiplexing the all-station EPG data input from the encoder </PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT> and also from the EPG data transmission control section </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> shows an inner configuration of the EPG data transmission control section </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> in FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, reference numeral </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> denotes a transmitted-data storing section for storing the input data, and numeral </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT> denotes a transmission control section for reading and outputting the data from the transmitted-data storing section </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT>. The EPG data transmission control section </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> of the Internet service station </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> also has the same configuration.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>The operation of the EPG data collection and delivery system according to the first embodiment is now explained below.</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>The data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> in the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> reads out, when a modification occurs in the EPG data base </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> thereof, the data to be transmitted from the own-station EPG data base </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, and transmits the read data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, together with additional information such as the broadcasting station identification code thereof, date information and so forth. The data collecting division </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> within the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> writes or adds the received EPG data on the all-station EPG data base </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, and also notifies the data delivering division </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> of the fact that there has been a modification in the all-station EPG data. The data delivering division </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> reads out the all-station EPG data of all the stations within the whole system. including the modified or added EPG data from the above station from the all-station EPG data base </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> of the collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, and delivers the read-out data to all the EPG data providing devices; namely </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>in this embodiment, together with the additional information attached to each of the EPG data.</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>It is to be noted that the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the data broadcasting station </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> performs the same function as that performed by the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> as explained above.</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>In the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>in the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, the data receiving section </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> receives the all-station EPG data with additional information from the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, and overwrites or adds the received all-station EPG data on the all-station EPG data base </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>, informing simultaneously the data converting section </PDAT><HIL><BOLD><PDAT>25</PDAT></BOLD></HIL><PDAT> of the fact that there has been a modification in the all-station data base </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>The data converting section </PDAT><HIL><BOLD><PDAT>25</PDAT></BOLD></HIL><PDAT> converts the data of the all-station EPG data base </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> to a predetermined transmission format, such as the one regulated by the ARIB Standard STDB10 &ldquo;Program Arrangement Information for use in digital broadcasts&rdquo;, or by the ATSC Standard A/65 &ldquo;Program and System Information Protocol for Terrestrial Broadcast and Cable&rdquo;, and outputs thereafter the data in the thus converted format, together with additional information such as the delivery starting time, delivering frequency and so on to the EPG data transmission control section </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>The EPG data transmission control section </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> stores, as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, the data input to the transmitted-data storing section </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT>, and the transmission control section </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT> reads out necessary data from the transmitted-data storing section </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> at the frequency specified by the additional information, and outputs thereafter to the multiplexing section </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>The multiplexing section </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> multiplexes the video or audio signal fed from the encoders </PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT> and the data fed from the EPG data transmission control section </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>, and outputs thereafter to the program guide viewers.</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>Further, the EPG data providing device </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>in the Internet service station </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> performs the same function as the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. However, in the data converting section </PDAT><HIL><BOLD><PDAT>45</PDAT></BOLD></HIL><PDAT> therein, the data is converted to a predetermined transmission format such as HTML or the like, which is especially for the Internet service. Still further, the EPG data transmission control section </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> outputs all-station EPG data on condition that there is an access from a user.</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>As explained above, according to the first embodiment of the present invention, there is provided an EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> within the whole EPG data collection and delivery system, wherein the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> collects EPG data from all the EPG data transmitting devices such as </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>in the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>in the data broadcasting station </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>, and broadcasts all-station EPG data to all the EPG data providing devices such as </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>in the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>in the Internet service station </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, so that each of the EPG data providing devices </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>can obtain EPG data of all the broadcasting stations within the whole EPG data collection and delivery system, and thus they can provide the data to the program guide viewers or the users thereof.</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>Further, each of the EPG data transmitting devices </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><PDAT>and each of the EPG data providing devices </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>only have to access the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, in other words, they can ignore the relation with other stations, so that even when some new stations are added to the system, the EPG data collection and delivery system can be expanded without causing any affect to the already existing stations.</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="0"><PTEXT><PDAT>As a result, even when there is a frequent modification in the EPG data in each of the stations, an accessing frequency among the stations is not made high, and further, even when a new station is added to the system, each of the broadcasting stations can provide the latest EPG data of other stations to the program guide viewers of its own-stations, even without changing its own systems.</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="7"><PTEXT><PDAT>(Second Embodiment)</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="0"><PTEXT><PDAT>In the first embodiment above, the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, the data broadcasting station </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> and the Internet service station </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> are shown only one for each as shown in FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>. However, in this second embodiment, the broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, the data broadcasting station </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> and the Internet service station </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> can be employed two or more for each, or only some of these three kinds can be employed in the system. Further, the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> may be without the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b, </PDAT></ITALIC></HIL><PDAT>the data broadcasting station </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> may be provided with an EPG data providing device, and the Internet service station </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> may be provided, as a matter of fact, with an EPG data transmitting device and so on. In other words, the EPG data transmitting device and the EPG data providing device can both be provided within one broadcasting station, or separately in different stations.</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="7"><PTEXT><PDAT>(Third Embodiment)</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>In the first embodiment above, the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> broadcasts the all-station EPG data to which there is a modification or addition, to all the EPG data providing devices within the EPG data collection and delivery system. However, in this third embodiment, it is arranged such that the all-station EPG data is not delivered to the EPG data providing device of the station from which modified or added own-station EPG data has been transmitted to the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> is a schematic diagram of the EPG data collection and delivery system according to the third embodiment of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="0"><PTEXT><PDAT>In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>, for example in a case that the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> transmits its own EPG data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the data delivering division </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> does not have to transmit the all-station EPG data to the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="0"><PTEXT><PDAT>In this case, the data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> of the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>reads out, when a modification occurs in the EPG data base </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, the data to be transmitted from the EPG data base </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, and transmits the thus read-out data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, rewriting the all-station EPG data base </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> in the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of itself simultaneously. The data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> informs the data converting section </PDAT><HIL><BOLD><PDAT>25</PDAT></BOLD></HIL><PDAT> in the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of the fact that there has been a modification in the all-station EPG data base </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="0"><PTEXT><PDAT>By these transactions, according to the third embodiment of the present invention, unnecessary transmission of all-station EPG data between the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and the broadcasting station from which the modified or added EPG data has been transmitted to the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> can be omitted.</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="0"><PTEXT><PDAT>Further, in the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> where there has been a modification in its own EPG data, the data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> directly modifies the all-station EPG data base </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> without passing through the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, before transmitting the EPG data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, so that if the EPG data of its own-station is required to be modified in real time, it can be multiplexed and broadcast to the program guide viewers faster, as it does not pass through the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="7"><PTEXT><PDAT>(Fourth Embodiment)</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="0"><PTEXT><PDAT>In the third embodiment above, it is arranged such that in the broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> in which the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>and the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>are both provided, when there is a modification in its own-station EPG data, the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>directly accesses the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b, </PDAT></ITALIC></HIL><PDAT>and the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> does not transmit all-station EPG to the EPG transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. However, in this fourth embodiment, it is arranged such that the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> delivers all-station EPG data to all the EPG data providing devices, and if the all-station EPG data delivered from the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> is the data of its own broadcasting station, the data receiving section </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> in the EPG data providing section </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> does not overwrite the all-station EPG data base </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00069" LVL="0"><PTEXT><PDAT>By these transactions, according to the fourth embodiment of the present invention, since all-station EPG data is delivered to all the EPG data providing devices in the system, which is different from the third embodiment, the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> does not have to consider the relation between the EPG data transmitting device from which the modified EPG data is transmitted thereto and the EPG data providing device to which all-station EPG data is transmitted, so that the process can be greatly simplified.</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="0"><PTEXT><PDAT>Further, similarly to the third embodiment, in the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> where there has been a modification in its own EPG data, the data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> directly modifies the all-station EPG data base </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> without passing through the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, before transmitting the EPG data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, so that if the EPG data of its own-station is required to be modified in real time, it can be multiplexed and broadcast without passing through the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, so that it can be provided to the program guide viewers faster.</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="7"><PTEXT><PDAT>(Fifth Embodiment)</PDAT></PTEXT></PARA>
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>The fifth embodiment of the present invention is explained as follows.</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> is a schematic diagram of the EPG data collection and delivery system according to the fifth embodiment. In the figure, reference numerals </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> through </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> through </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> through </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> through </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>31</PDAT></BOLD></HIL><PDAT> through </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT> are same as the configuring elements of the first embodiment.</PDAT></PTEXT></PARA>
<PARA ID="P-00074" LVL="0"><PTEXT><PDAT>Further, reference numeral </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT> denotes a TV broadcasting station, numeral </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>denotes an EPG data transmitting device for providing the EPG data of its own-station having the same configuration as that of the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, numeral </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>denotes an EPG data providing device having the same configuration as that of the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> for providing all-station EPG data to the program guide viewers of its own-station, numeral </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> denotes a data converting section for converting the data stored in the all-station EPG data base </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> within the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> to a predetermined transmission format. It is to be noted that the inner configuration of the EPG data transmission control section </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> is the same as that in FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00075" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> is a schematic diagram of the inner configuration of the data delivering division </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> in the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> according to the. fifth embodiment of the present invention. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>, reference numeral </PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT> denotes a transmitted-data storing section for storing the input data, and numeral </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT> denotes a data delivering section for reading and outputting the data stored in the transmitted-data storing section </PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>The operation of the EPG data collection and delivery system according to the present embodiment is now explained below.</PDAT></PTEXT></PARA>
<PARA ID="P-00077" LVL="0"><PTEXT><PDAT>The data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> in the EPG Data Transmitting Section Device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> reads out, when a modification occurs in the EPG data base </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, the data to be transmitted from the own-station EPG data base </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, and transmits the thus read data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, together with additional information such as the broadcasting station identification code thereof, date information and so forth.</PDAT></PTEXT></PARA>
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>In the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the data collecting division </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> overwrites or adds the thus received EPG data on the all-station EPG data base </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> in accordance with the additional information, and also notifies the fact that there has been a modification in the all-station EPG data base </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> to the data converting section </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>. The data converting section </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> converts the EPG data specified by the data collecting division </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> to a predetermined format such as the one regulated by the ARIB Standard STD-B10 &ldquo;Program Arrangement Information for use in digital broadcasts&rdquo;, or by the ATSC Standard A/65 &ldquo;Program and System Information Protocol for Terrestrial Broadcast and Cable&rdquo;, and overwrites or adds thereafter the data in the converted format to the transmitted-data storing section </PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT> within the data delivering division </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, and also informs the additional information such as the transmission starting time, transmission frequency and so on added to the already converted all-station EPG data to the data delivering device </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT>. The data delivering device </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT> reads out the all-station EPG data to be transmitted from the transmitted-data storing section </PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT>, and delivers the EPG data to all the EPG data providing devices together with the additional information.</PDAT></PTEXT></PARA>
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>It is to be noted that the EPG data transmitting section </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the data broadcasting station </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>, and the EPG data transmitting section </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT> perform the same operation as that of the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>On the other hand, in the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, the data receiving section </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> receives the all-station EPG data from the data delivering division </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> of the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, together with the additional information, and overwrites or adds the thus received all-station EPG data on to the data stored in the transmitted-data storing section </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> in the EPG data transmission control section </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) in accordance with the additional information, and also informs simultaneously the additional information to the data transmission control section </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>The data transmission control section </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT> reads out the necessary data from the transmitted-data storing section </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> at the frequency specified by the additional information, and outputs to the multiplexing section </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> shown in FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>. The multiplexing section </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> multiplexes the data input from the EPG data transmission control section </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> on the video and audio signals fed from the encoders </PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT>, and outputs these multiplexed signals.</PDAT></PTEXT></PARA>
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>It is to be noted that the EPG data providing device </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT> performs the same operation as that of the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>As explained above, according to the fifth embodiment of the present invention, similarly to the first embodiment, there is provided an EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> within the EPG data collection and delivery system, wherein the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> collects own-station EPG data from all the EPG data transmitting devices such as </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting stations </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, respectively and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the data broadcasting station </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>, and delivers all-station EPG data to all the EPG data providing devices such as </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b, </PDAT></ITALIC></HIL><PDAT>respectively of the TV broadcasting stations </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, so that each of the EPG data providing devices </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>can obtain EPG data of all the TV broadcasting stations including its own-station within the whole EPG data collection and delivery system, and thus they can provide the data to the program guide viewers or users thereof.</PDAT></PTEXT></PARA>
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>Further, similarly to the first embodiment, each of the EPG data transmitting devices, and each of the EPG data providing devices have only to access to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, so that even when the number of these devices is increased within the system, the EPG data collection and delivery system can be expanded without causing any affect to the already existing devices.</PDAT></PTEXT></PARA>
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>Particularly, according to the fifth embodiment, since there is provided a data converting section </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> within the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, and the data can be converted to a predetermined transmission format therein, there is no need to perform a data conversion in each of the EPG data providing devices, so that the throughput of the system as a whole can be greatly improved.</PDAT></PTEXT></PARA>
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>Further, since the conversion of data format is performed within the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the size and format of the EPG data delivered from all the broadcasting stations each provided with an EPG data providing device can be made uniform, and thus the EPG data transmitted from each of the stations can be readily adjusted with each other.</PDAT></PTEXT></PARA>
<PARA ID="P-00087" LVL="0"><PTEXT><PDAT>Still further, when the receivers, which belong to the program guide viewers and receive programs broadcast from their individual broadcasting stations, perform an EPG data re-obtaining process on the basis of updated information of the EPG data transmitted thereto such as the version numbers or the like regulated by the &ldquo;Program Arrangement Information for use in digital broadcasts&rdquo; regulated by the ARIB Standard STD-B10, or by the ATSC Standard A/65 &ldquo;Program and System Information Protocol for Terrestrial Broadcast and Cable&rdquo;, since all the programs channels are provided with exactly the same EPG data, even when the currently receiving channel is changed to another one, unnecessary data obtaining operation can be avoided. This is because in the case that different version numbers are used in the respective broadcasting stations, if the currently receiving channel is changed to another, it cannot be checked whether the EPG data has been modified by the version number, so that all-station EPG data including the EPG data not updated has to be obtained again.</PDAT></PTEXT></PARA>
<PARA ID="P-00088" LVL="7"><PTEXT><PDAT>(Sixth Embodiment)</PDAT></PTEXT></PARA>
<PARA ID="P-00089" LVL="0"><PTEXT><PDAT>The sixth embodiment of the present invention is explained as follows.</PDAT></PTEXT></PARA>
<PARA ID="P-00090" LVL="0"><PTEXT><PDAT>In the fifth embodiment above, the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> broadcasts the all-station EPG data, to which there is a modification or addition, to all the EPG data providing devices within the EPG data collection and delivery system. However, in this sixth embodiment, it is arranged such that the all-station EPG data is not delivered to the EPG data providing device of the station from which modified or added own-station EPG data has been transmitted to the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00091" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is a schematic diagram of the EPG data collection and delivery system according to the sixth embodiment of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00092" LVL="0"><PTEXT><PDAT>In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT>, for example in a case that the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> transmits its own EPG data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the data delivering division </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> in the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> does not have to transmit the all-station EPG data to the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00093" LVL="0"><PTEXT><PDAT>Due to this, in this sixth embodiment, there is provided a data converting section </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> for converting the EPG data of its own-station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> to a predetermined format within the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><PDAT>and this is the same for all other stations.</PDAT></PTEXT></PARA>
<PARA ID="P-00094" LVL="0"><PTEXT><PDAT>The data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> reads outs, when a modification occurs in the own-station EPG data base </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, the data to be transmitted from the own-station EPG data base </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, and transmits the read-out data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, giving simultaneously an instruction of data conversion to the data converting section </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> in the same broadcasting station.</PDAT></PTEXT></PARA>
<PARA ID="P-00095" LVL="0"><PTEXT><PDAT>The data converting section </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> reads out the specified own-station EPG data from the own-station EPG data base </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, converts the read data to a predetermined format and outputs to the EPG data transmission control section </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>, together with the additional information. Thereafter, the data converting section </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> rewrites the all-station EPG data stored in the transmitted-data storing section </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> to a new data, wherein only the own-station EPG data only has been converted to a predetermined format within the all-station EPG data, rewriting also the after-converted additional information simultaneously (see FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00096" LVL="0"><PTEXT><PDAT>After these transactions, similarly to the other embodiments, the data transmission control section </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT> reads out necessary data from the transmitted-data storing section </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> at a frequency specified by the additional information and outputs it to the multiplexing section </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT>, so that all-station EPG data and so on can be delivered therefrom to the program guide viewers.</PDAT></PTEXT></PARA>
<PARA ID="P-00097" LVL="0"><PTEXT><PDAT>As explained heretofore, according to the present embodiment, unnecessary data transmission between the broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> in which there has been a modification in its own-station EPG data and the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> is no longer required, so that it can be omitted.</PDAT></PTEXT></PARA>
<PARA ID="P-00098" LVL="0"><PTEXT><PDAT>Further, in the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> where there has been a modification in its own-station EPG data, before the data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> transmits the thus modified EPG data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the data converting section </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> converts the own-station EPG data to a predetermined format, and directly rewrites the own-station EPG data within the all-station EPG data stored in the transmitted-data storing section </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> of the EPG data transmission control section </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>, so that if the own-station EPG data is required to be modified in real time, it can be multiplexed and delivered to the program guide viewers faster, as it does not pass through the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00099" LVL="7"><PTEXT><PDAT>(Seventh Embodiment)</PDAT></PTEXT></PARA>
<PARA ID="P-00100" LVL="0"><PTEXT><PDAT>The EPG data collection and delivery system according to the seventh embodiment of the present invention is now explained as follows.</PDAT></PTEXT></PARA>
<PARA ID="P-00101" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is a schematic diagram of the EPG data collection and delivery system of the seventh embodiment. In the figure, reference numerals </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> through </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b , </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a , </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> through </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> through </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>31</PDAT></BOLD></HIL><PDAT> through </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT> are same as the configuring elements of the first embodiment shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, wherein reference numeral </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> denotes a data converting section for converting its own-station EPG data to a predetermined format. It is to be noted that the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>and the EPG data providing device </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT> have the same configuration as that of the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>and the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, respectively.</PDAT></PTEXT></PARA>
<PARA ID="P-00102" LVL="0"><PTEXT><PDAT>The operation of the EPG data collection and delivery system according to this seventh embodiment is now explained below.</PDAT></PTEXT></PARA>
<PARA ID="P-00103" LVL="0"><PTEXT><PDAT>In the data broadcasting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, when a modification has occurred in the own-station EPG data base </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, the data converting section </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> reads out the own-station EPG data to be transmitted from the own-station data base </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, and converts the thus read-out data to a predetermined transmission format. Thereafter, the data converting section </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> outputs the converted data to the data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>, together with the additional information. The data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> then transmits the input data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00104" LVL="0"><PTEXT><PDAT>It is to be noted that the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the data transmitting station </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> and the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT> have the same configuration as that of the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00105" LVL="0"><PTEXT><PDAT>On the other hand, in the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the data collecting division </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> writes or adds the thus received EPG data on the all-station EPG transmitted-data storing section </PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT> in accordance with the additional information received simultaneously, and also notifies the additional information to the data delivering section </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT>. The data delivering section </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT> reads out necessary data from the all-station EPG transmitted-data storing section </PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT> in accordance with the additional information, and delivers to all the EPG data providing devices together with the additional information.</PDAT></PTEXT></PARA>
<PARA ID="P-00106" LVL="0"><PTEXT><PDAT>After these transactions, in the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, the data receiving section </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT> in the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>overwrites or adds the thus received data on the transmitted-data storing section </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> in the EPG data transmission control section </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>, and also transmits the additional information to the data transmission control section </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT>, simultaneously. The data transmission control section </PDAT><HIL><BOLD><PDAT>262</PDAT></BOLD></HIL><PDAT> reads out necessary data from the transmitted-data storing section </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> at a specified frequency, and outputs thereafter to the multiplexing device </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> shown in FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>. The multiplexing device </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> multiplexes and outputs the data input from the EPG data transmission control section </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> together with video and audio signals fed from each of the encoders </PDAT><HIL><BOLD><PDAT>27</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00107" LVL="0"><PTEXT><PDAT>It is to be noted that the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT> performs the same operation as that of the EPG data transmitting section </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00108" LVL="0"><PTEXT><PDAT>As explained above, according to this seventh embodiment of the present invention, similarly to the first embodiment, there is provided an EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> within the EPG data collection and delivery system, wherein the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> collects own-station EPG data from all the EPG data transmitting devices such as </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><PDAT>respectively of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, the data broadcasting station </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> and the TV broadcasting station </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, and delivers all-station EPG data to all the EPG data delivering devices such as </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b, </PDAT></ITALIC></HIL><PDAT>respectively of the TV broadcasting stations </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, so that each of the EPG data providing devices </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>can obtain EPG data of all the broadcasting stations such as </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT> provided respectively with the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>within the whole EPG data collection and delivery system, and can thus provide the EPG data to the program guide viewers or users.</PDAT></PTEXT></PARA>
<PARA ID="P-00109" LVL="0"><PTEXT><PDAT>Further, similarly to the first embodiment, each of the EPG data transmitting devices, namely </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><PDAT>and each of the EPG data providing devices, namely </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>have only to access to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, so that even when there is an increase in the number of devices within the system, the EPG data collection and delivery system can be expanded without affecting the already existing devices.</PDAT></PTEXT></PARA>
<PARA ID="P-00110" LVL="0"><PTEXT><PDAT>Further, before the EPG data are transmitted from the TV broadcasting stations </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT> to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the data converting section within the EPG data transmitting devices </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><PDAT>respectively, converts the EPG data to a predetermined format, and thereafter transmits the thus converted data to the data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, so that there is no need to perform a data conversion in the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, and each of the data transmitting devices has only to convert the EPG data regarding the station where it belongs, and thus the load of the data converting operation can be divided.</PDAT></PTEXT></PARA>
<PARA ID="P-00111" LVL="0"><PTEXT><PDAT>Still further, since the data conversion to a predetermined format is carried out within each of the EPG data transmitting devices </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><PDAT>data size and format of the EPG data transmitted from all the broadcasting stations each provided with an EPG data providing device can be made to a uniform one, and thus the EPG data transmitted from each of the stations can be readily adjusted with each other.</PDAT></PTEXT></PARA>
<PARA ID="P-00112" LVL="0"><PTEXT><PDAT>Still further, when the receivers, which belong to the program guide viewers and receive programs broadcast from their individual broadcasting stations, perform an EPG data re-obtaining process on the basis of updated information of the EPG data transmitted thereto such as the version numbers or the like regulated by the &ldquo;Program Arrangement Information for use in digital broadcasts&rdquo; regulated by the ARIB Standard STD-B10, or by the ATSC Standard A/65 &ldquo;Program and System Information Protocol for Terrestrial Broadcast and Cable&rdquo;, since all the program channels are provided with exactly the same EPG data, even when the currently receiving channel is changed to another one, unnecessary data obtaining operation can be avoided. This is because in the case that different version numbers used in the respective broadcasting stations, if the currently receiving channel is changed to another, it cannot be checked whether the EPG data has been modified by the version number, so that all-station EPG data including the EPG data not updated has to be obtained again.</PDAT></PTEXT></PARA>
<PARA ID="P-00113" LVL="7"><PTEXT><PDAT>(Eighth Embodiment)</PDAT></PTEXT></PARA>
<PARA ID="P-00114" LVL="0"><PTEXT><PDAT>In the seventh embodiment above, the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> broadcasts the EPG data, to which there is a modification addition, to all the broadcasting stations. However, in this eighth embodiment, it is arranged such that the all-station EPG data is not delivered to the broadcasting station from which the all-station EPG data has been provided.</PDAT></PTEXT></PARA>
<PARA ID="P-00115" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> is a schematic diagram of the EPG data collection and delivery system according to the eighth embodiment of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00116" LVL="0"><PTEXT><PDAT>In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT>, for example in a case that there has been a modification in the data base </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> of the station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> to which it belongs, and the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>therein transmits the EPG data of its own-station to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the data delivering section </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> in the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> does not transmit the all-station EPG data to the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> from which the EPG data has been transmitted, and transmits the all-station EPG data only to the EPG data providing device </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>of another TV broadcasting station </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00117" LVL="0"><PTEXT><PDAT>In this case, within the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, the data converting section </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> reads out only the modified EPG data of its own-station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> out of the own-station EPG data base </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>, and converts the read data to a predetermined format, and transmits the thus converted data to the data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>. Thereafter, the data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> transmits the own-station EPG data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and also transmits it to the EPG data transmission control section </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> within its own-station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, simultaneously. Alternatively, it may be arranged such that the data converting section </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> transmits the own-station EPG data to both the data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> and to the EPG data transmission control section </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00118" LVL="0"><PTEXT><PDAT>By these transactions, according to this eighth embodiment, it is no longer necessary to perform an unnecessary data transmission between the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> from which the data is first transmitted to the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00119" LVL="0"><PTEXT><PDAT>Further, in the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> where there has been a modification in the EPG data thereof, before the data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> transmits the EPG data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> directly changes the data in the all-station EPG data stored in the transmitted-data storing section </PDAT><HIL><BOLD><PDAT>261</PDAT></BOLD></HIL><PDAT> of the EPG data transmission control section </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>, so that if the own-station EPG data is required to be modified in real time, it can be multiplexed and broadcast without passing through the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, and thus it can be delivered to the program guide viewers faster.</PDAT></PTEXT></PARA>
<PARA ID="P-00120" LVL="7"><PTEXT><PDAT>(Ninth Embodiment)</PDAT></PTEXT></PARA>
<PARA ID="P-00121" LVL="0"><PTEXT><PDAT>The EPG data collection and delivery system according to the ninth embodiment of the present invention is now explained as follows.</PDAT></PTEXT></PARA>
<PARA ID="P-00122" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT> is a schematic diagram of the EPG data collection and delivery system of the ninth embodiment, showing into details the interface portion between the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and each of the broadcasting stations </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> of the first embodiment. In the same figure, reference numeral </PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT> denotes a data collection control section that is provided within the data collecting division </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> for controlling each of the data collecting devices provided for each of the EPG data transmitting devices, numeral </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> denotes a data collecting device for collecting the EPG data of the EPG data transmitting section </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><PDAT>numeral </PDAT><HIL><BOLD><PDAT>113</PDAT></BOLD></HIL><PDAT> denotes a data collecting device for collecting the EPG data of the EPG data transmitting section </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><PDAT>numeral </PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT> denotes a data delivery control section that is provided within the data delivering division </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> for controlling the data delivering devices provided for each of the EPG data providing devices, numeral </PDAT><HIL><BOLD><PDAT>133</PDAT></BOLD></HIL><PDAT> denotes an EPG data delivering device for delivering the EPG data to the EPG data providing device </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b. </PDAT></ITALIC></HIL><PDAT>Other configuring members are the same as those in the first embodiment, so that the detailed explanation thereof is omitted here.</PDAT></PTEXT></PARA>
<PARA ID="P-00123" LVL="0"><PTEXT><PDAT>The operation of the EPG data collection and delivery system according to the present embodiment is now explained below.</PDAT></PTEXT></PARA>
<PARA ID="P-00124" LVL="0"><PTEXT><PDAT>When the modified own-station EPG data of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> is transmitted from the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>thereof to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the data collecting device </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> in the data collecting division </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> writes the thus transmitted data into the all-station EPG data base </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, and also informs it to the data collection control section </PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT>, simultaneously. The data collection control section </PDAT><HIL><BOLD><PDAT>111</PDAT></BOLD></HIL><PDAT> informs thereafter to the delivery control section </PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT> of the fact that the all-station EPG data base </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> has been modified.</PDAT></PTEXT></PARA>
<PARA ID="P-00125" LVL="0"><PTEXT><PDAT>The data delivery control section </PDAT><HIL><BOLD><PDAT>131</PDAT></BOLD></HIL><PDAT> gives a command to carry out a data transmission to all the EPG data delivering devices </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>133</PDAT></BOLD></HIL><PDAT> . . . , or to all the data delivering devices except the data delivering device </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT> that interfaces with the EPG data providing device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> from which the modified own-station EPG data has been transmitted. All the data delivering devices that have received the data-transmission command read out the specified EPG data from the all-station EPG data base </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, and thereafter distribute the thus read-out data to the corresponding data providing devices.</PDAT></PTEXT></PARA>
<PARA ID="P-00126" LVL="0"><PTEXT><PDAT>As explained above, according to the ninth embodiment, it is arranged such that a plurality of data collecting devices each corresponding to the EPG data transmitting devices </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>respectively of the broadcasting stations </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> are provided within the data collecting division </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> of the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, these data can be collected in parallel from each of the EPG data transmitting devices </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><PDAT>so that the time to be consumed for collection of the data can be shortened.</PDAT></PTEXT></PARA>
<PARA ID="P-00127" LVL="0"><PTEXT><PDAT>Further, since it is arranged such that there are provided data delivering devices </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>133</PDAT></BOLD></HIL><PDAT> corresponding to the data providing devices </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b, </PDAT></ITALIC></HIL><PDAT>respectively of the broadcasting stations </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> within the data delivering division </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> of the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, these data can be delivered in parallel to each of the EPG data providing devices </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b, </PDAT></ITALIC></HIL><PDAT>so that the data distribution can be performed impartially and the time to be consumed for delivery of the data can thereby be shortened.</PDAT></PTEXT></PARA>
<PARA ID="P-00128" LVL="7"><PTEXT><PDAT>(Tenth Embodiment)</PDAT></PTEXT></PARA>
<PARA ID="P-00129" LVL="0"><PTEXT><PDAT>In the first to ninth embodiments above, transmission of the respective own-station EPG data from each of the EPG data transmitting devices is carried out actively by the EPG data transmitting devices. However, in this tenth embodiment, the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> first requires a transmission of data to each of the EPG data transmitting devices of the respective broadcasting stations, and on receiving this requirement, each of the EPG data transmitting devices of the respective broadcasting stations transmits the respective own-station EPG data.</PDAT></PTEXT></PARA>
<PARA ID="P-00130" LVL="0"><PTEXT><PDAT>By this procedure, according to this tenth embodiment, the data which is not required to be transmitted in real time can be collected in accordance with the load state of the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00131" LVL="0"><PTEXT><PDAT>Further, although transmission of all-station EPG data from the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> to each of the EPG data providing devices of the respective broadcasting stations is performed actively from the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> side, it can be performed by a requirement from each of the EPG data providing devices to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>. By doing so, the EPG data providing devices can obtain the EPG data in accordance with the load state of the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00132" LVL="7"><PTEXT><PDAT>(Eleventh Embodiment)</PDAT></PTEXT></PARA>
<PARA ID="P-00133" LVL="0"><PTEXT><PDAT>In the first to ninth embodiments above, the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> stored temporarily the EPG data transmitted from the EPG data transmitting device of each of the broadcasting stations, and immediately after the modification or addition of the data, delivers all-station EPG data to all the broadcasting stations. However, in the case of addition of data, there is no need for the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> to distribute the data to each of the EPG data providing devices.</PDAT></PTEXT></PARA>
<PARA ID="P-00134" LVL="0"><PTEXT><PDAT>For this reason, in this eleventh embodiment, it is arranged such that in the case of addition of EPG data, the data transmitting section of the EPG data transmitting device of each of the broadcasting stations transmits data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, together with the specified time at which the data is to be delivered to each of the EPG data providing devices from the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, and the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> does not deliver the data until the specified time.</PDAT></PTEXT></PARA>
<PARA ID="P-00135" LVL="0"><PTEXT><PDAT>Next, the data transmission within the data transmitting section in the data transmitting device of each of the broadcasting stations according to the eleventh embodiment is shown in flowchart with reference to FIG. </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00136" LVL="0"><PTEXT><PDAT>For example, in a case when there is a modification in or an addition to the own-station database </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> in the data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, the data transmitting section </PDAT><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT> in the same data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>checks in step S</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> as to whether the data to be transmitted is related to the EPG data which has already been transmitted to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00137" LVL="0"><PTEXT><PDAT>Here, if the data to be transmitted is related to the one that has been already transmitted to the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> (&ldquo;Yes&rdquo; in step S</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>), it means that it is the case of modification of the EPG data, so that the time at which the data is to be delivered to each of the EPG data providing sections is set to &ldquo;Immediate&rdquo; in the next step S</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, and if the answer is &ldquo;N</PDAT><HIL><BOLD><PDAT>0</PDAT></BOLD></HIL><PDAT>&rdquo; in step S</PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, in other words, if it is the case that the data to be transmitted is not related to the one that has been already transmitted to the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, it means that it is the case of addition of the EPG data, or that the time at which the data is to be delivered is set to a specified definite time, for example, as &ldquo;X month, Y date, a hour, b minutes, c seconds&rdquo;, and thereafter in both cases in the next step S</PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, the time at which the data is to be delivered set in steps S</PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and S</PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> and the EPG data itself are transmitted to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00138" LVL="0"><PTEXT><PDAT>As explained above, according to this eleventh embodiment, in the case that the EPG data transmitting device transmits to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> also the time at which the data is to be delivered to each of the EPG data providing sections, together with the EPG data itself, if it is the case of addition of EPG data in which the data will not necessarily be transmitted immediately, each of the broadcasting stations can transmit the data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, for example, at such a moment as the end of a day or when there are not many occurrences of the data modification cases.</PDAT></PTEXT></PARA>
<PARA ID="P-00139" LVL="0"><PTEXT><PDAT>Further, in a case that there are all-station EPG data which are to be delivered to each of the EPG data providing devices, but still accumulated in the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, and that there is a modification in the EPG data of one broadcasting station, the EPG data transmitting device of that broadcasting station sets the data delivering time to &ldquo;immediate&rdquo;, and sends it together with the EPG data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, so that it affects only the inner processing within the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, but not to the EPG data providing device of each of the broadcasting stations, and due to this, unnecessary data transmission between the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and the EPG data providing devices can be omitted.</PDAT></PTEXT></PARA>
<PARA ID="P-00140" LVL="7"><PTEXT><PDAT>(Twelfth Embodiment)</PDAT></PTEXT></PARA>
<PARA ID="P-00141" LVL="0"><PTEXT><PDAT>The EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> delivers all-station EPG data to the EPG data providing devices in the first to ninth embodiments above, and in this twelfth embodiment, it is further arranged such that the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> also transmits the time at which the data is to be delivered.</PDAT></PTEXT></PARA>
<PARA ID="P-00142" LVL="0"><PTEXT><PDAT>By specifying the data delivery starting time, according to this twelfth embodiment, the EPG data providing device of each of the broadcasting stations can know the delivery starting time of the all-station EPG data, but even without analyzing the contents of the all-station EPG data delivered from the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, so that it can be readily checked whether or not the all-station EPG data is required to be delivered in real time.</PDAT></PTEXT></PARA>
<PARA ID="P-00143" LVL="0"><PTEXT><PDAT>Further, within the EPG data providing device of each of the broadcasting stations that has received all-station EPG data transmitted from the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, when the delivered data is to be converted or the like, the all-station EPG data which is not necessary to be delivered in real time can be processed later in accordance with the load state of the EPG data providing device itself, through checking the delivery starting time set to the all-station EPG data.</PDAT></PTEXT></PARA>
<PARA ID="P-00144" LVL="7"><PTEXT><PDAT>(Thirteenth Embodiment)</PDAT></PTEXT></PARA>
<PARA ID="P-00145" LVL="0"><PTEXT><PDAT>When the EPG data stored in the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> is to be modified in the first to ninth embodiments above, it is further arranged in this thirteenth embodiment such that in both the transmission of EPG data from the EPG data transmitting device to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, and delivery of all-station EPG data from the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> to each of the EPG data providing devices, only the difference between the own-station EPG data or all-station EPG data stored in the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, and the modified EPG data or all-station EPG data is transmitted.</PDAT></PTEXT></PARA>
<PARA ID="P-00146" LVL="0"><PTEXT><PDAT>For example, when a sport program is delayed for 30 minutes in one broadcasting station, the EPG data before modification as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11A</PDAT></FGREF><PDAT> becomes the modified EPG data as shown in FIG. </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>B. More specifically, as shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 11A and 11B</PDAT></FGREF><PDAT>, the broadcasting duration time of the sport program &ldquo;Sport 1&rdquo; is delayed for 30 minutes, namely prolonged from the originally set duration time 120 minutes to 150 minutes, and as a result, the broadcast starting time of the &ldquo;drama 3&rdquo; is modified from the &ldquo;1998.7.7.21;00:00&rdquo; shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 11A</PDAT></FGREF><PDAT> to &ldquo;1998.7.7.21;30:00&rdquo; as shown in FIG. </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>B.</PDAT></PTEXT></PARA>
<PARA ID="P-00147" LVL="0"><PTEXT><PDAT>For this reason, in order to identify the modification EPG data, the EPG data transmitting device of a broadcasting station in which there has been a modification in the data informs to the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> of such information as channel identification information &ldquo;Source id</PDAT><HIL><SB><PDAT>&mdash;</PDAT></SB></HIL><PDAT>&rdquo;0x1234&rdquo; corresponding to the channel of each of the broadcasting stations, the program identification data such as &ldquo;event id</PDAT><HIL><SB><PDAT>&mdash;</PDAT></SB></HIL><PDAT>&ldquo;0x3333&rdquo; and &ldquo;0x3334&rdquo; corresponding to the program whose EPG data is to be modified, and difference data such as &ldquo;(broadcasting) duration&plus;30 min.&rdquo; which is the modified content with respect to the program of the &ldquo;event id</PDAT><HIL><SB><PDAT>&mdash;</PDAT></SB></HIL><PDAT>&ldquo;0x3333&rdquo; and &ldquo;(broadcasting) start time&plus;30 min.&rdquo; which is the modified content with respect to the program of the &ldquo;event id</PDAT><HIL><SB><PDAT>&mdash;</PDAT></SB></HIL><PDAT>&ldquo;0x3334&rdquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00148" LVL="0"><PTEXT><PDAT>Further, also the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> modifies the all-station EPG data in each of the broadcasting stations, by transmitting only the above different data to the EPG data providing device of each of the broadcasting stations, together with the additional information.</PDAT></PTEXT></PARA>
<PARA ID="P-00149" LVL="0"><PTEXT><PDAT>As explained above, according to the thirteenth embodiment of the present invention, in the case of modifying the data stored in the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the data transmission between the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and the EPG data transmitting device of each of the broadcasting stations, and between the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and the EPG data providing device of each of the broadcasting stations can be greatly reduced, by sending only the different data therebetween.</PDAT></PTEXT></PARA>
<PARA ID="P-00150" LVL="7"><PTEXT><PDAT>(Fourteenth Embodiment)</PDAT></PTEXT></PARA>
<PARA ID="P-00151" LVL="0"><PTEXT><PDAT>The EPG data collection and delivery system according to the fourteenth embodiment of the present invention is now explained as follows.</PDAT></PTEXT></PARA>
<PARA ID="P-00152" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 12</PDAT></FGREF><PDAT> is a schematic diagram of the EPG data collection and delivery system of this fifth embodiment. In the figure, reference numerals </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> through </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> through </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>21</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>23</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a, </PDAT></ITALIC></HIL><HIL><BOLD><PDAT>31</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>b </PDAT></ITALIC></HIL><PDAT>and </PDAT><HIL><BOLD><PDAT>43</PDAT></BOLD></HIL><PDAT> are same as the configuring elements of the first embodiment shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, wherein reference numeral </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT> denotes a data checking section provided in the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> for checking the collected EPG data.</PDAT></PTEXT></PARA>
<PARA ID="P-00153" LVL="0"><PTEXT><PDAT>The operation of the EPG data collection and delivery system according to the present embodiment is now explained below.</PDAT></PTEXT></PARA>
<PARA ID="P-00154" LVL="0"><PTEXT><PDAT>When the EPG data is transmitted from the TV broadcasting satin </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the data collecting division </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> of the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> writes the EPG data to all-station EPG data base </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, and also informs the data checking section </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT> of the fact that the all-station EPG data has been updated.</PDAT></PTEXT></PARA>
<PARA ID="P-00155" LVL="0"><PTEXT><PDAT>The data checking section </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT> checks the content of the updated EPG data. Further, when there is a limit to the capacity for transmitted data, it can convert the data to its transmission format if required, and checks the capacity. The result of the check is informed to the data collecting division </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT>, and if there is any error in the content of the EPG data, or the transmission capacity is overflown, the data collecting division </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> informs the data error to the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> from which the EPG data has been transmitted.</PDAT></PTEXT></PARA>
<PARA ID="P-00156" LVL="0"><PTEXT><PDAT>When the EPG data transmitting device </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><HIL><ITALIC><PDAT>a </PDAT></ITALIC></HIL><PDAT>of the TV broadcasting station </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> receives data error information from the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, it, for example, gives an alarm to the EPG data generator, and after the data correction is performed, it sends back the own-station EPG data to the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00157" LVL="0"><PTEXT><PDAT>As explained above, according to the fourteenth embodiment, by checking the EPG data collected from each of the broadcasting stations in the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the EPG data having error therein can be rapidly corrected, so that an error-free correct EPG data can be delivered to the EPG data providing device.</PDAT></PTEXT></PARA>
<PARA ID="P-00158" LVL="7"><PTEXT><PDAT>(Fifteenth Embodiment)</PDAT></PTEXT></PARA>
<PARA ID="P-00159" LVL="0"><PTEXT><PDAT>When the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> delivers all-station EPG data to the EPG data providing devices in the first embodiment, in this twelfth embodiment, it is arranged such that the center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> also transmits the delivery control information of all-station EPG data in each of the broadcasting stations.</PDAT></PTEXT></PARA>
<PARA ID="P-00160" LVL="0"><PTEXT><PDAT>For example, when the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> delivers the EPG data to each of the EPG data providing devices on the basis of the ARIB Standard STD-B10 &ldquo;Program Arrangement Information for use in digital broadcasts&rdquo;, all-station EPG data is transmitted in accordance with an EPG table consisting of a plurality of tables, and the transmission frequency of the respective tables are regulated. For example, the transmission frequency of the EIT (Event Information Table) that informs the current and next program guide data of the own station will be once or more than once per every two seconds. If there is a limit in the transmission rate of all-station EPG data which is delivered from the EPG data providing device of each broadcasting stations to the program guide viewers, the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> specifies the transmission rate per each EPG table in accordance with the capacity of the collected all-station EPG data to the data providing device of each of the broadcasting stations, in order that it does not exceed the limit of the transmission-rate.</PDAT></PTEXT></PARA>
<PARA ID="P-00161" LVL="0"><PTEXT><PDAT>For this reason, according to this fifteenth embodiment, the data transmission control section of the EPG data providing device of each of the broadcasting stations transmits all-station EPG data to the multiplexing section thereof at a frequency specified by the EPG data to the multiplexing section hereof, and the multiplexing section multiplexes the all-station EPG data and delivers it to the program guide viewers.</PDAT></PTEXT></PARA>
<PARA ID="P-00162" LVL="0"><PTEXT><PDAT>As explained above, according to this fifteenth embodiment, since it is arranged such that the EPG data collection and delivery center </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> informs the EPG data delivery control information to the EPG data providing device of each of the broadcasting stations, so that all the EPG data providing devices can deliver the correct EPG data, and each EPG data providing device does not have to consider the limit of transmission rate of the EPG data.</PDAT></PTEXT></PARA>
<PARA ID="P-00163" LVL="0"><PTEXT><PDAT>Further, in case there is a modification in the limit of the transmission rate, this change can be disposed only within the EPG data collection and delivery center.</PDAT></PTEXT></PARA>
<PARA ID="P-00164" LVL="0"><PTEXT><PDAT>AS explained heretofore, according to the present invention, there is provided an EPG data collection and delivery center within an EPG data collection and delivery system, the center collects own-station EPG data from all the EPG data transmitting devices, and also delivers all-station EPG data to all the EPG data providing devices, so that each of the EPG data providing devices can obtain EPG data of all the stations within the EPG data collection and delivery system, and provide thereafter to the program guide viewers.</PDAT></PTEXT></PARA>
<PARA ID="P-00165" LVL="0"><PTEXT><PDAT>Further, each of the EPG data transmitting devices and the EPG data providing devices only have access to the EPG data collection and delivery center, even if there is an increase in the number of broadcasting stations or EPG data providing devices within the system, the EPG data collection and delivery system can be expanded without causing any affect to the already existing devices.</PDAT></PTEXT></PARA>
<PARA ID="P-00166" LVL="0"><PTEXT><PDAT>As a result, even when a frequent occurrence of modification in the EPG data can be observed, the accessing frequency between broadcasting stations is not raised, and also even when a new broadcasting station is added to the system, each of the broadcasting stations can provide the latest EPG data of other stations to the program guide viewers of their own-stations, but without changing the system in each broadcasting station.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00167" LVL="0"><PTEXT><PDAT>1. A program guide data collection and delivery system comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a plurality of program guide data transmitting devices respectively included in a corresponding one of a plurality of broadcasting stations, a plurality of program guide data providing devices and a program guide data collection and delivery device that is provided independently of said plurality of broadcasting stations and said program guide data transmitting devices and of said program guide data providing devices, wherein </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>each of said program guide data transmitting devices transmits program guide data of the corresponding one of broadcasting stations to said program guide data collection and delivery devices; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>said program guide data collection and delivery device collects program guide data of the plurality of broadcasting stations respectively broadcasting their own programs, and transmits all the thus collected plurality of program guide data to all the plurality of program guide data providing devices, irrespective of whether or not program corresponding to said program guide data are broadcast by each of said broadcasting stations; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>each of said plurality of program guide data providing devices provides the program guide data of all of the plurality of broadcasting stations including program guide data of other stations, which have been delivered from said program guide data collection and delivery device, to the program guide viewers of each of their own broadcasting stations, irrespective of whether or not the programs corresponding to said program guide data are broadcast. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00168" LVL="0"><PTEXT><PDAT>2. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein each of said plurality of program guide data transmitting devices comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>an own-station program guide data storing section for storing the program guide data broadcast from its own broadcasting station; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a data transmitting section for transmitting said own-station program guide data of its own broadcasting station to said program guide data collecting division of said program guide data collection and delivery device; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein said program guide data collection and delivery device comprises; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a data collecting division for collecting program guide data of each of the plurality of broadcasting stations transmitted from said plurality of program guide data transmitting devices; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a program guide data storing section for storing the program guide data of each of the plurality of broadcasting stations collected by said data collecting division; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a data delivering division for delivering the stored plurality of program guide data to all the plurality of program guide data providing devices all at once, irrespective of whether or not programs corresponding to said program guide data are broadcast by each of said broadcasting stations; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>wherein each of said plurality of program guide data providing devices comprises: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a data receiving section for receiving the program guide data of all the plurality of broadcasting stations including program guide data of the stations which have been delivered from said program guide data collection and delivery device, to the program guide viewers of each of their own broadcasting stations, irrespectively of whether o not the programs corresponding to said program guide data are broadcast; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>an all-station program guide data storing section for storing the received program guide data of all the plurality of broadcasting stations; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a data converting section for converting the program guide data stored in said all-station program guide data storing section to a predetermined format; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a transmission control section for controlling the transmission of the program guide data converted to said predetermined format in said data converting section. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00169" LVL="0"><PTEXT><PDAT>3. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, wherein said data transmitting section in said program guide data transmitting device of its own broadcasting station directly rewrites the data stored in said all-station program guide data storing section in the corresponding program guide data providing device in a case that there has been a modification in the data in said own-station program guide data storing section and also informs the corresponding data converting section of the fact that there has been a modification in said all-station program guide data storing section.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00170" LVL="0"><PTEXT><PDAT>4. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein each of said plurality of program guide data transmitting devices comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>an own-station program guide data storing section for storing the program guide data broadcast from its own broadcasting station, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a data transmitting section for transmitting said own-station program guide data of its own broadcasting station to said program guide data collecting division of said program guide data collection and delivery device, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein said program guide data collection and delivery device further comprises: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a data collecting division for collecting said program guide data of all of the broadcasting stations; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a program guide data storing division for storing the received program guide data of all of the plurality of broadcasting stations; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a data converting section for converting the program guide data stored in said all-station program guide data storing section to a predetermined format; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a data delivering division for delivering the format-converted program guide data of each of said broadcasting stations, including program guide data of other stations, which have been delivered from said program guide data collection and delivery device, to the program guide viewers of each of their own broadcasting stations, irrespective of whether or not the programs corresponding to said program guide data are broadcast, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a transmission control section for controlling the transmission of the program guide data converted to said predetermined format, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>and wherein each of said plurality of program guide data providing devices comprises: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a data receiving section for receiving the program guide data of all of the plurality of broadcasting stations including program guide data of other stations, which have been delivered from said program guide data collection and delivery device, to the program guide viewers of each of their own broadcasting stations, irrespective of whether or not the programs corresponding to said program guide data are broadcast, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a data storing division for storing all the program guide data received from each of the plurality of broadcasting stations; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a transmission control section for controlling the stored all the program guide data of each of the plurality of broadcasting stations. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00171" LVL="0"><PTEXT><PDAT>5. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, wherein said program guide data transmitting device further comprises a data converting section for converting the program guide data stored in said own-station program guide data storing section to a predetermined format, and wherein in a case that there has been a modification in the data in said own-station program guide data, said data converting section reads out the data stored in said own-station program guide data storing means, and directly updates the data stored in said transmission control section.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00172" LVL="0"><PTEXT><PDAT>6. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein said program guide data transmitting device further comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>an own-station program guide data storing section for storing program guide data of its own-station; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a data converting section for converting the program guide data stored in said own-station program guide data storing section to a predetermined format; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a data transmitting section for transmitting said own-station program guide data of its own broadcasting station to said program guide data collecting division of said program guide data collection and delivery device; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein said program guide data collection and delivery device comprises: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a data collecting division for collecting said program guide data of all of the plurality of broadcasting stations; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a data delivering division for delivering the format-converted program guide data of each of said broadcasting stations including program guide data of other stations, which have been delivered from said program guide data collection and delivery device, to the program guide viewers of each of their own broadcasting stations, irrespective of whether or not the programs corresponding to said program guide data are broadcast; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>and wherein each of said plurality of program guide data providing devices comprises: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a data receiving division for receiving said program guide data of all of the plurality of broadcasting stations including program guide data of other stations, which have been delivered from said program guide data collection and delivery device, to the program guide viewers of each of their own broadcasting stations, irrespective of whether or not the programs corresponding to said program guide data are broadcast; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="4"><PTEXT><PDAT>a transmission control section for controlling the transmission of the thus received all the program guide data of each of the plurality of broadcasting stations. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00173" LVL="0"><PTEXT><PDAT>7. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, wherein</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>said data collecting division in said program guide data collection and delivery device comprises; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a plurality of collecting sections corresponding to each of said program guide data transmitting devices, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a collection control section for controlling said plurality of collecting sections, and wherein </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>said data delivering division of said program guide data collection and delivery device comprises; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a delivering section corresponding to each of said program guide data providing devices, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>a delivery control section for controlling said plurality of delivering sections. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00174" LVL="0"><PTEXT><PDAT>8. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein each of said program guide data transmitting devices requires a transmission of the program guide data to said program guide data collection and delivery device.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00175" LVL="0"><PTEXT><PDAT>9. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein said program guide data collection and delivery device requires a transmission of program guide data to each of said program guide data transmitting devices.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00176" LVL="0"><PTEXT><PDAT>10. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein said program guide data collection and delivery device requires a transmission of program guide data to each of said program guide data providing devices.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00177" LVL="0"><PTEXT><PDAT>11. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein each of said program guide data providing devices requires a transmission of program guide data to said program guide data collection and delivery device.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00178" LVL="0"><PTEXT><PDAT>12. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein when each of said program guide data transmitting devices transmits the program guide data of its own broadcasting station, it indicates the delivery starting time for starting the delivery of said program guide data to each of said program guide data providing devices.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00179" LVL="0"><PTEXT><PDAT>13. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein said program guide data collection and delivery device additionally indicates the delivery service starting time for starting the delivery of said program guide data to the program guide viewers, when it transmits the program guide data of all the broadcasting stations.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00180" LVL="0"><PTEXT><PDAT>14. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, wherein when a data modification has occurred in the program guide data of its own broadcasting station, each of said program guide data transmitting devices makes the program guide data to be transmitted to said program guide data collection and delivery device as a difference between the program guide data already transmitted and the program guide data after modification.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00181" LVL="0"><PTEXT><PDAT>15. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, wherein when said program guide data collection and delivery devices modifies the program guide data stored in said program guide data storing section therein, it makes the program guide data to be transmitted to each of said program guide data providing devices as a difference between the program guide data already transmitted and the program guide data after modification.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00182" LVL="0"><PTEXT><PDAT>16. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein said program guide data collection and delivery device is provided with a data checking section for checking the data amount and the content of the program guide data transmitted from each of said program guide data transmitting sections.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00017">
<PARA ID="P-00183" LVL="0"><PTEXT><PDAT>17. A program guide data collection and delivery system according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein said program guide data collection and delivery device transmits service control information regarding the method of providing program guide data to each of said program guide data providing devices.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00018">
<PARA ID="P-00184" LVL="0"><PTEXT><PDAT>18. A program guide data collection and delivery device independently provided from a plurality of program guide data transmitting devices respectively included in a corresponding one of a plurality of broadcasting stations, and a plurality of program guide data providing devices wherein said program guide data collection and delivery device is configured to;</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>collect program guide data of the plurality of broadcasting stations respectively broadcasting their own programs, </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>transmit all the collected plurality of program guide data to all the plurality of program guide data providing devices, irrespective of whether or not programs corresponding to said program guide data are broadcast by each of said broadcasting stations, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>make each of said plurality of program data providing devices provide the program guide data of all of the plurality of broadcasting stations including program guide data of other stations, which have been delivered from said program guide data collection and delivery device, to the program guide viewers of each of their own broadcasting stations, irrespective of whether or not the programs corresponding to said program guide data are broadcast. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00019">
<PARA ID="P-00185" LVL="0"><PTEXT><PDAT>19. A plurality of program guide data providing device for providing program viewers of a plurality of broadcasting stations with program guide data corresponding to each of said broadcasting stations delivered from a program data collection and delivery device provided independently of a plurality of said broadcasting stations;</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein the program guide data to be delivered from said program data collection and delivery device are the program guide data that said program guide data collection and delivery device has received and collected from the plurality of broadcasting stations respectively broadcasting their own programs and transmitted to all the plurality of program guide data providing devices all at once, irrespective of whether or not programs corresponding to said program guide data are broadcast by each of said broadcasting stations; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>and wherein each of said plurality of program guide data providing devices provides the program guide data of all of the plurality of broadcasting stations including program guide data of other stations which have been delivered from said program guide data collection and delivery device to the program guide viewers of each of their own broadcasting stations irrespective of whether or not the programs corresponding to said program guide data are broadcast.</PDAT></PTEXT></CLMSTEP>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314571-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314571-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314571-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314571-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314571-20011106-D00004.TIF">
<EMI ID="EMI-D00005" FILE="US06314571-20011106-D00005.TIF">
<EMI ID="EMI-D00006" FILE="US06314571-20011106-D00006.TIF">
<EMI ID="EMI-D00007" FILE="US06314571-20011106-D00007.TIF">
<EMI ID="EMI-D00008" FILE="US06314571-20011106-D00008.TIF">
<EMI ID="EMI-D00009" FILE="US06314571-20011106-D00009.TIF">
<EMI ID="EMI-D00010" FILE="US06314571-20011106-D00010.TIF">
<EMI ID="EMI-D00011" FILE="US06314571-20011106-D00011.TIF">
<EMI ID="EMI-D00012" FILE="US06314571-20011106-D00012.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314572-20011106-D00000.TIF SYSTEM "US06314572-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314572-20011106-D00001.TIF SYSTEM "US06314572-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314572-20011106-D00002.TIF SYSTEM "US06314572-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314572-20011106-D00003.TIF SYSTEM "US06314572-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314572-20011106-D00004.TIF SYSTEM "US06314572-20011106-D00004.TIF" NDATA TIF>
<!ENTITY US06314572-20011106-D00005.TIF SYSTEM "US06314572-20011106-D00005.TIF" NDATA TIF>
<!ENTITY US06314572-20011106-D00006.TIF SYSTEM "US06314572-20011106-D00006.TIF" NDATA TIF>
<!ENTITY US06314572-20011106-D00007.TIF SYSTEM "US06314572-20011106-D00007.TIF" NDATA TIF>
<!ENTITY US06314572-20011106-D00008.TIF SYSTEM "US06314572-20011106-D00008.TIF" NDATA TIF>
<!ENTITY US06314572-20011106-D00009.TIF SYSTEM "US06314572-20011106-D00009.TIF" NDATA TIF>
<!ENTITY US06314572-20011106-D00010.TIF SYSTEM "US06314572-20011106-D00010.TIF" NDATA TIF>
<!ENTITY US06314572-20011106-D00011.TIF SYSTEM "US06314572-20011106-D00011.TIF" NDATA TIF>
<!ENTITY US06314572-20011106-D00012.TIF SYSTEM "US06314572-20011106-D00012.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314572</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>09322605</PDAT></DNUM></B210>
<B211US><PDAT>09</PDAT></B211US>
<B220><DATE><PDAT>19990528</PDAT></DATE></B220>
</B200>
<B500>
<B510>
<B511><PDAT>H04N  5445</PDAT></B511>
<B512><PDAT>H04N  7173</PDAT></B512>
<B512><PDAT>G06F  300</PDAT></B512>
<B512><PDAT>G06F 1300</PDAT></B512>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>725 60</PDAT></B521>
<B522><PDAT>725 40</PDAT></B522>
<B522><PDAT>725 61</PDAT></B522>
<B522><PDAT>725 87</PDAT></B522>
<B522><PDAT>725104</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Method and apparatus for providing subscription-on-demand services, dependent services and contingent services for an interactive information distribution system</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5600364</PDAT></DNUM>
<DATE><PDAT>19970200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hendricks et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  1</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5619249</PDAT></DNUM>
<DATE><PDAT>19970400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Billock et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5629732</PDAT></DNUM>
<DATE><PDAT>19970500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Moskowitz et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5629733</PDAT></DNUM>
<DATE><PDAT>19970500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Youman et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5659350</PDAT></DNUM>
<DATE><PDAT>19970800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hendricks et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  6</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5663757</PDAT></DNUM>
<DATE><PDAT>19970900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Morales</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348 13</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5671276</PDAT></DNUM>
<DATE><PDAT>19970900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Eyer et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>380231</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5805154</PDAT></DNUM>
<DATE><PDAT>19980900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Brown</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345327</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5897623</PDAT></DNUM>
<DATE><PDAT>19990400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Fein et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705 27</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5903816</PDAT></DNUM>
<DATE><PDAT>19990500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Broadwin et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>455  31</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5908469</PDAT></DNUM>
<DATE><PDAT>19990600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Botz et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>713201</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5915243</PDAT></DNUM>
<DATE><PDAT>19990600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Smolen</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705 14</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5929850</PDAT></DNUM>
<DATE><PDAT>19990700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Broadwin et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345327</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5977962</PDAT></DNUM>
<DATE><PDAT>19991100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Chapman et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345327</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5990927</PDAT></DNUM>
<DATE><PDAT>19991100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hendricks et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  6</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6006257</PDAT></DNUM>
<DATE><PDAT>19991200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Slezak</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>709219</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6016141</PDAT></DNUM>
<DATE><PDAT>20000100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Knudson et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>725  8</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6138105</PDAT></DNUM>
<DATE><PDAT>20001000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Walker et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705 10</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B562><NCIT><STEXT><PDAT>DirecTV, Inc., Offers MSNBC in Programming Lineup; Los Angeles, Jul. 15, 1996.</PDAT></STEXT></NCIT><CITED-BY-EXAMINER></B562>
</B560>
<B570>
<B577><PDAT>14</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>345327</PDAT></B582>
<B582><PDAT>345721</PDAT></B582>
<B582><PDAT>348  3</PDAT></B582>
<B582><PDAT>348  6</PDAT></B582>
<B582><PDAT>348  7</PDAT></B582>
<B582><PDAT>348 10</PDAT></B582>
<B582><PDAT>348 12</PDAT></B582>
<B582><PDAT>348 13</PDAT></B582>
<B583US><PDAT>709217-219</PDAT></B583US>
<B582><PDAT>705 14</PDAT></B582>
<B582><PDAT>705 15</PDAT></B582>
<B582><PDAT>705 20</PDAT></B582>
<B582><PDAT>705 26</PDAT></B582>
<B582><PDAT>705 27</PDAT></B582>
<B582><PDAT>705 10</PDAT></B582>
<B582><PDAT>725  8</PDAT></B582>
<B582><PDAT>725 60</PDAT></B582>
<B582><PDAT>725 61</PDAT></B582>
<B582><PDAT>725 40</PDAT></B582>
<B582><PDAT>725 87</PDAT></B582>
<B582><PDAT>725104</PDAT></B582>
<B582><PDAT>380231</PDAT></B582>
</B580>
<B590><B595><PDAT>12</PDAT></B595><B596><PDAT>12</PDAT></B596><B597US>
</B590>
</B500>
<B600>
<B630><B632><PARENT-US><CDOC><DOC><DNUM><PDAT>09/322605</PDAT></DNUM></DOC></CDOC><PDOC><DOC><DNUM><PDAT>09/086799</PDAT></DNUM><DATE><PDAT>19980529</PDAT></DATE><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>00</PDAT></KIND></DOC></PDOC><PSTA><PDAT>00</PDAT></PSTA></PARENT-US></B632></B630>
<B680US><DOC><DNUM><PDAT>60/127747</PDAT></DNUM><DATE><PDAT>19990405</PDAT></DATE><KIND><PDAT>00</PDAT></KIND></DOC></B680US>
</B600>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Tobie</PDAT></FNM><SNM><STEXT><PDAT>LaRocca</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>San Jose</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Michael D.</PDAT></FNM><SNM><STEXT><PDAT>Johnson</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Danville</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>DIVA Systems Corporation</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Redwood City</PDAT></CITY><STATE><PDAT>CA</PDAT></STATE></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>02</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Moser, Patterson &amp; Sheridan LLP</PDAT></STEXT></ONM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Andrew</PDAT></FNM><SNM><STEXT><PDAT>Faile</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Hai V.</PDAT></FNM><SNM><STEXT><PDAT>Tran</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2611</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A method and apparatus for providing subscription-on-demand (SOD) services, dependent subscription services and contingent services for a interactive information distribution system, where a consumer may subscribe to packages of on-demand programs for a single price and view the programs in the subscribed package at any time for no additional cost. The apparatus and method are embodied in a combination of software, which provides a so-called navigator, and hardware, including a subscriber terminal that provides certain functionality for the navigator and service provider equipment that supports the functionality of the terminal. As such, graphical user interface functionality is distributed between the service provider equipment and subscriber equipment (subscriber terminal). Such distribution provides an enjoyable, real time interactive process for accessing SOD services that allows the subscriber to rapidly identify and access a subscription service. In addition, a non-subscriber of a particular service is quickly identified and provided the opportunity to, through the use of a graphical user interface, subscribe to the programming provided by the system.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<RELAPP>
<BTEXT>
<H LVL="1"><STEXT><PDAT>CROSS REFERENCE TO RELATED APPLICATIONS</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>This application claims benefit to U.S. Provisional patent application serial No. 60/127,747, filed Apr. 5, 1999, incorporated herein by reference, and is a continuation in part of copending U.S. patent application Ser. No. 09/086,799, filed May 29, 1998, incorporated herein by reference.</PDAT></PTEXT></PARA>
</BTEXT>
</RELAPP>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>1. Field of the Invention</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>The present invention relates to an interactive information distribution system such as a video-on-demand (VOD) system. More particularly, the present invention relates to a method and apparatus for providing subscription-on-demand (SOD) services dependent subscription services and contingent services for such an interactive information distribution system.</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>2. Description of the Background Art</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>Recent advances in digital signal processing techniques and, in particular, improvements in digital compression techniques, have led to a plethora of proposals for providing new digital services to a customer&apos;s home via existing telephone and coaxial cable networks. For example, it has been proposed to provide hundreds of cable television channels to subscribers by compressing digital data and digital video, transmitting the compressed digital signals over conventional coaxial cable television channels, and then decompressing the signals in the subscriber&apos;s receiver. Another proposed application for this technology is a video-on-demand (VOD) system in which a subscriber communicates directly with a video service provider via telephone lines to request a video program from a video library and the requested video program is routed to the subscriber&apos;s home via telephone lines or via coaxial cable television cables for immediate viewing. Other proposed VOD systems use a frequency multiplexing technique to enable control information for a subscriber&apos;s receiver to be transmitted through a cable network back to an information server. Such a system permits a bi-directional communications over a single network.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>In most of these information distribution systems, graphical menus are displayed upon the subscribers television and using a remote control device, a subscriber selects a desired program for viewing. One such graphical user interface based VOD system is disclosed in U.S. Pat. No. 5,619,249, issued Apr. 8, 1997, and hereby incorporated herein by reference, wherein a viewing station including a television monitor and a high-power graphics computer are used to generate a graphical user interface. The viewing stations are in communication with a telecasting facility (i.e., service provider head end equipment) that transmits selected video information as requested by the viewing station. The graphics computer within the viewing station locally stores all the executable programs that generate the graphical interface, control the graphical interface, and interact with the subscriber. The graphics computer not only enables a subscriber to select programming to view, but also enables a non-subscriber to become a subscriber by interacting with certain interface screens.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>Although having such a high-power computer within the viewing station is beneficial in providing nearly instantaneous responsiveness to the subscriber&apos;s and non-subscriber&apos;s inputs, such a high-power computer system is economically unfeasible to utilize as subscriber equipment for a large number of subscriber homes. As such, set top terminals or television receivers containing built-in high-power computers are generally not feasible as a commercial product.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>Additionally, prior art VOD systems have only contemplated selling services on a program-by-program basis. For example, in the prior art systems, a viewer navigates through various menus to arrive at a menu containing a program title that the subscriber desires to view. The subscriber then requests the program and the program is supplied to the subscriber&apos;s display. The subscriber&apos;s account is then billed for the order of that particular program. As such, the concept of subscriptions extends only to the general access to content and an a la carte purchase of a unit of content. In this respect, the consumer&apos;s experience is nothing more than the transformation of the video store experience to the customer&apos;s home; the consumer is purchasing the ability to access a program for a prescribed period of time. Such systems use the term &ldquo;subscriber&rdquo; to represent someone who has received an installation of the subscriber equipment to enable a technically different class of service to be accessed, namely, digital or analog/digital services instead of the purely analog telecasts of conventional cable television. Consequently, the &ldquo;subscription&rdquo; as used in the prior art refers to the capability of selecting from a list a single unit of content such as a movie or video. Heretofore, VOD systems have not had a capability of packaging programming at a single price such that a system subscriber can also be a program package subscriber to enable the package subscriber to view any program in the subscribed package without further cost. Current systems do not have the capability of causing particular package access to be dependent upon subscriptions to other packages or contingent upon a particular type or level of service.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>Therefore, there is a need in the art for a method and apparatus for providing subscription-on-demand services, dependent subscription services and contingent services for an interactive information distribution system. There is also a need to provide these services using equipment having a significant portion of the computing power contained within a service provider head end system such that a terminal for the subscriber&apos;s home can be manufactured relatively inexpensively.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>The disadvantages heretofore associated with the prior art are overcome by the present invention of a method and apparatus for providing subscription-on-demand (SOD) services for a interactive information distribution system, where the system provides distributed computing resources using a relatively inexpensive subscriber terminal. The invention is embodied in a combination of software, which provides a so-called &ldquo;navigator&rdquo;, and hardware, including subscriber equipment and service provider equipment that is interconnected by a communications network. The graphical user interface functionality is distributed between the service provider equipment and subscriber equipment. Such distribution provides an enjoyable, real time interactive session that allows the consumer to rapidly navigate through a plethora of menus to find particular information which the consumer desires to view. In addition, a non-subscriber of a particular SOD service is quickly identified and provided the opportunity to, through the use of a graphical user interface, subscribe to the programming provided by the system.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>Using the inventive equipment, a consumer is capable of further subscribing to packages of on-demand programming, i.e., SOD services, through manipulation of the graphical user interface. The system provides certain packages of on-demand programming, i.e., children&apos;s programming, that a consumer may elect to subscribe to for a single price. As such, through manipulation of the menus, the consumer selects a programming package, becomes a subscriber to that package and is billed accordingly. Thereafter, the subscriber may view any program in the package without additional cost. Although predefined programming packages are generally available for selection, a consumer may optionally create a personal SOD service by selecting programs for a personal package that can then be subscribed to as any other programming package.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>Consequently, the invention differs from the prior art from both an architectural standpoint and data management standpoint. Together these innovations provide a complex price and data capacity management infrastructure necessary to offer a consumer friendly, interactive approach to subscribing to a class of data or service content. This service content might be grouped by any logical association such as a series of movies or other program content. The SOD service concept of having a single price for a package of programming removes the payment commitment challenge ordinarily posed by the prior art as a barrier to viewing each item of content.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>Furthermore, the subscription-on-demand technique can be expanded to provide dependent subscription services and contingent services. Using dependent subscriptions, the system only permits a user to subscribe to particular additional subscription services (extended services) if the user already subscribes to certain other services (base services), i.e., a user may subscribe to a premium cable channel&apos;s video-on-demand service (an extended service) only if that user is a subscriber to the premium cable channel service (a base service), or the subscriber may only subscribe to a particular SOD subscription (extended service) if that user is a subscriber to some other SOD subscription service. If the user is not eligible for the extended service, the user may be provided an opportunity to subscribe to both the base service and the extended service. Alternatively, the user may be directed to contact their cable operator to subscribe to the appropriate base service.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>Additionally, the subscription items can be bundled such that, if a user subscribes to particular subscriptions, they receive a third subscription free, i.e., if a user subscribes to two premium children&apos;s cable channels, they receive a free (or discounted) children&apos;s video-on-demand subscription.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>Using contingent services, the system interfaces directly with a cable operator&apos;s customer management system (CMS). As such, the interactive system maintains a database of the cable operator&apos;s customer services such that a user may order certain interactive products and content contingent upon the type and level of service that the user has subscribed to with the cable operator. The interaction of the interactive information distribution system with the CMS allows the interactive system to update the CMS if a subscriber subscribes to additional cable services.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>The teachings of the present invention can be readily understood by considering the following detailed description at in conjunction with the accompanying drawings, in which:</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> depicts a high level block diagram of an interactive information distribution system containing the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> depicts a block diagram of an illustrative subscriber&apos;s terminal within the system of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>;</PDAT></PTEXT></PARA>
<PARA ID="P-00020" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3A</PDAT></FGREF><PDAT>, </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>B, </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>C and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>D together depict a flow diagram of a routine representing the software that is executed within the system of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> to provide the subscription-on-demand services of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> depicts an illustrative menu structure for selecting a subscription-on-demand service;</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> depicts a menu structure used to select a subscription item that is a subset of the subscription-on-demand service;</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is a menu depicting titles of programming within a specific category within said subscription on demand service;</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is a title information screen;</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> is a menu that allows a consumer to subscribe to a selected subscription-on-demand service;</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT> is a menu that provides an input structure for a master PIN number. A</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>To facilitate understanding, identical reference numerals have been used, where possible, to designate identical elements that are common to the figures.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION</PDAT></STEXT></H>
<PARA ID="P-00028" LVL="0"><PTEXT><PDAT>The invention is a method and apparatus that provides a subscription-on-demand (SOD) service for an interactive information distribution system. Throughout the following description the term &ldquo;SOD service&rdquo; is defined as the capability of a consumer to subscribe to packages of programming at a pre-defined price and those programs within a subscribed package can be viewed, on-demand, without further cost to the subscriber. As such, a consumer (i.e., a viewer having a system account number) can request, through manipulation of a graphical user interface, to subscribe to a package of programming, i.e., children&apos;s programming, at a fixed price. Thereafter, any program within the package can be viewed at anytime, i.e., on-demand, without further charge. Optional viewing time restrictions and the like can be implemented to limit package content viewing only during predefined time periods or, if viewing outside the time period is desired, an additional fee is charged to the subscriber&apos;s account. Additionally, dependent subscription services are subscriptions that are accessible (dependent) upon a subscriber having previously subscribed to other SOD services or cable services and contingent services are services that are only available to subscribers that have only subscribed to particular other services.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><PDAT>Although the SOD service of the present invention can be implemented and executed using a number of different types of information distribution systems, the preferred embodiment is used in combination with the interactive information distribution system hardware described in commonly assigned U.S. patent application Ser. No. 08/984,710, filed Dec. 3, 1997, and hereby incorporated herein by reference. However, the specific hardware arrangement is considered illustrative of the type of system with which the invention is used. Use of the invention within other information distribution system hardware arrangements that facilitate distributed computing resources between the service provider head end and the subscriber&apos;s terminal is considered within the scope of the invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> depicts a high level block diagram of the illustrative information distribution system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> that incorporates the present invention. The system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> contains service provider equipment </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT>, a communications network in the form of a cable transport subsystem </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> and subscriber equipment </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><HIL><SB><PDAT>n</PDAT></SB></HIL><PDAT>, where n is an integer greater than 0. The service provider equipment </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> contains an information server </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> which is typically a parallel processing computer containing at least one central processing unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> and associated memory </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>. U.S. Pat. No. 5,671,377, issued Sep. 23, 1993 and U.S. Pat. No. 5,579,527, issued Nov. 26, 1996, which are hereby incorporated herein by reference, describe a server that is capable of operating in the capacity of information server </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT>. The server </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> interacts with the data storage device </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT> (e.g., a disk drive array) that generally stores the subscriber content (e.g., video data) that will be recalled and transmitted to the subscriber equipment </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>. Additionally, within the service provider equipment </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> is a video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> that provides session control of the information flowing to and from the server </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT>. The video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> contains its own central processing unit (CPU) </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> and associated memory </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT> that provides functionality for the graphical user interfaces through which the consumer interacts with the system. The CPU </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> is part of a session control manager </PDAT><HIL><BOLD><PDAT>125</PDAT></BOLD></HIL><PDAT> that controls a plurality of modems </PDAT><HIL><BOLD><PDAT>127</PDAT></BOLD></HIL><PDAT> that facilitate communication with the subscriber equipment. Other subsystems of the service provider equipment include a network manager </PDAT><HIL><BOLD><PDAT>142</PDAT></BOLD></HIL><PDAT> and a back office subsystem </PDAT><HIL><BOLD><PDAT>144</PDAT></BOLD></HIL><PDAT>. These subsystems maintain certain databases of information that enable the system to accurately control system access, subscription package definitions, and subscriber/consumer profile and billing. The network manager </PDAT><HIL><BOLD><PDAT>142</PDAT></BOLD></HIL><PDAT> is coupled to a customer management system (CMS) </PDAT><HIL><BOLD><PDAT>150</PDAT></BOLD></HIL><PDAT> within the cable operator equipment </PDAT><HIL><BOLD><PDAT>152</PDAT></BOLD></HIL><PDAT>. As such, the network manager maintains a database </PDAT><HIL><BOLD><PDAT>154</PDAT></BOLD></HIL><PDAT> containing specific customer subscription information pertaining to a customer&apos;s type of service (e.g., basic cable, extended basic cable, and the like), level of service and premium channel subscription information. This database is used to facilitate dependent subscriptions and contingent services.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><PDAT>The information server </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> is coupled to the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> via data path </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT>, synchronization clock path </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT>, and control path </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT>. The server </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> provides data streams that are destined for consumers on path </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> and a synchronization clock on path </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT>. The specific data streams are provided in response to requests for information (e.g., menu applets, video programs, and other content material) from the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> on path </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT>. These data streams are packetized and modulated onto a carrier that is compatible with the transmission requirements of the network </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>The video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> accomplishes all of the transmission interface requirements of the system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> as well as provides graphical user interface support. Specifically, the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> is coupled through the modems </PDAT><HIL><BOLD><PDAT>127</PDAT></BOLD></HIL><PDAT> to subscriber equipment via a forward information channel </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT>, a forward command channel </PDAT><HIL><BOLD><PDAT>133</PDAT></BOLD></HIL><PDAT> and a back channel </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT>. All three of these channels are supported by the cable transport subsystem </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>. The video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> contains a modulator for modulating the server data streams onto one or more carrier frequencies for transmission on the forward information channel </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT>. Additionally, modems </PDAT><HIL><BOLD><PDAT>127</PDAT></BOLD></HIL><PDAT> within the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> send control information via the forward command channel and receive control information via the back channel. Moreover, a conventional cable television signal source </PDAT><HIL><BOLD><PDAT>128</PDAT></BOLD></HIL><PDAT> is optionally coupled to the forward information channel via a signal coupler </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT>. In operation, the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> responds to requests from the subscriber equipment </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> for interactive menus and data streams by requesting the server </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> to provide such information, then communicating that information to the requesting subscriber equipment </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>. The video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>, as discussed below, also ensures that the subscriber equipment </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> is authorized to receive the requested information.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>The cable transport subsystem </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> can be any one of a number of conventional broad band communications networks that are available such as a fiber optic network, a telephone network, existing cable television network and the like. For example, if the network is a hybrid fiber-coax network, the transport technique used in both forward channels may be modeled after the moving pictures expert group (MPEG) transport protocol for the transmission of video data streams. In general, the transport mechanism for both the forward channels and transport information to the subscriber equipment must be able to carry unidirectional, asynchronous packetized data such as that defined in the MPEG video and audio signal transmission protocol, and the like. There are a number of such transport protocols available.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><PDAT>The subscriber equipment </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> receives the requested data streams from the forward information channel, demodulates the streams and processes them for display on the display device </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> (e.g., a conventional television). In addition, the terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> accepts commands from a remote control input device </PDAT><HIL><BOLD><PDAT>138</PDAT></BOLD></HIL><PDAT> or other input device to facilitate consumer interaction with the system. These commands are formatted, compressed, modulated, and transmitted through the network </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> to the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>. Typically, this transmission is accomplished through the back channel </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT>. These commands are preferably transmitted through the same network used to transmit information to the subscriber equipment. However, the back channel coupling the subscriber equipment to the server may be a separate network, e.g., a forward information channel through a television cable network and a back channel through a telephone network. The telephone network could also support the forward control channel. The video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> interprets each command set from the terminal through the back channel and instructs the information server to perform certain functions to implement the consumer/subscriber request.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> depicts a block diagram of the terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> which contains a transceiver </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, a central processing unit (CPU) </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> and a display driver </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT>. Of course, the functionality of the terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> can be embedded within a single consumer electronics product such as a receiver circuit within a television. As such, the description of a separate terminal should be considered illustrative of the type of subscriber equipment that may be used to implement the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><PDAT>Within the set top terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT>, the CPU </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> is supported by random access memory (RAM) </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT>, read only memory (ROM) </PDAT><HIL><BOLD><PDAT>218</PDAT></BOLD></HIL><PDAT> and various support circuits </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT> such as clocks, power supply, and infrared receiver and the like. The transceiver </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> contains a diplexer </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT>, a back channel transmitter </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT>, an information channel receiver </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT>, a command channel receiver </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>, an information decoder </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT>, a conventional television signal receiver </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT>, and a multiplexer </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT>. The diplexer </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> couples the three channels carried by a single cable within the network to the transmitter and receivers of the terminal. Each receiver </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> contains a tuner, amplifiers, filters, a demodulator and a depacketizer. As such, the receivers tune, downconvert, and depacketize the signals from the cable network in a conventional manner. The information channel receiver </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> contains a conventional QAM demodulator such as a model BCM3115 manufactured by the Broadcom Corporation. Other such demodulators are well known in the communications art and could be used in this application. However, this particular QAM demodulator also contains a built in &ldquo;out-of-band&rdquo; QPSK demodulator for handling command and control data carried by the forward command channel. As such, a single integrated circuit demodulator processes consumer/subscriber requested information (audio and video) as well as command data.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><PDAT>The decoder </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> processes the data packets carrying consumer/subscriber requested information produced by the QAM demodulator into useable signals for the end user display, e.g., television, home studio, video recorder and the like. The decoder </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> is coupled to a dynamic random access memory (DRAM) to facilitate decoding of the data packets and processing of command programs, as shall be discussed below. The signals for display are conventionally processed by a display driver </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> to produce composite video as well as conventional television signals, e.g., modulated onto channel 3 or 4 using the NTSC standard modulation.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>The conventional cable signal receiver </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT> contains a tuner and an analog (NTSC) demodulator. A multiplexer </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT> couples the demodulated analog or decoded video signal to the display driver </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT>. Of course, the NTSC demodulator can be replaced with a PAL or SECAM standard demodulator, as needed.</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>The demodulated QPSK signal provides command and control information to the CPU </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> for generating certain graphics and control information regions upon a television screen. The CPU is, for example, a model </PDAT><HIL><BOLD><PDAT>68302</PDAT></BOLD></HIL><PDAT> processor manufactured by Motorola. This processor, operating in combination with the decoder </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> as well as a continuously available video signal from the information channel, produces screen-displayed buttons, icons and graphical regions with which a consumer interacts using the remote control. Without the video signal, the terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> does not produce any display, i.e., the displays are actively generated in real-time as needed to facilitate certain navigational and interface functions.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>Specifically, a joy stick on the remote control </PDAT><HIL><BOLD><PDAT>138</PDAT></BOLD></HIL><PDAT> selectively highlights certain predefined regions on the television screen. To perform such highlighting, a reference region is always highlighted when a menu is first displayed. From that reference region, direction vectors produced by the joy stick are interpreted by the CPU </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> to highlight a region lying in the direction in which the joy stick was moved. When a desired selectable icon is highlighted, the consumer depresses a &ldquo;select&rdquo; key on the remote that sends an infrared signal to an infrared receiver (a support circuit </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT>). This receiver sends the select command to the CPU </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> for interpretation. The selected region is generally associated with a function. If the function is a request for specific information or requires a change in the menu, the CPU </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> formats the command and sends it through the back channel transmitter </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> for transmission to the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>. If the command is a function that is handled locally such as volume control, the CPU </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> implements the function within the terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>Since the session control commands are implemented by the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> and not the terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> alone, the number of available session control commands is infinite. Utilization of such distributed computing resources enables the most powerful processing to be centrally located in the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> and the CPU in the terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> can be of relatively limited power. Consequently, all the subscriber terminals </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> that are connected to a service provider head end </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> can rely on the computing power of the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>. For example, the CPU in the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> is a model 68040 processor that is available from Motorola Inc. A particular hardware implementation of the video session manager is described in detail in commonly assigned U.S. patent application Ser. No. 08/984,710, filed Dec. 3, 1997 and hereby incorporated herein by reference.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>Each command menu is implemented by executing an &ldquo;applet&rdquo;, as described below. The applets control both information sessions, e.g., the presentation of video to the television screen, and navigator functions, e.g., the menus that facilitate selection of a video program as well as subscriber on demand services. As such, particular commands include, but are not limited to, information or menu navigation commands, movies start at beginning, movies start at the middle, play, stop, rewind, forward, pause and the like. These presentation and navigation control commands are sent via a back channel transmitter </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> using binary phase shift key (BPSK) modulation. Additionally, the CPU in the subscriber terminal implements certain local commands such as increment or decrement the volume, channel change and on/off.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>The invention is implemented as one or more interrelated &ldquo;applets&rdquo; which, when taken together form the interactive graphical user interface that facilitates the SOD service of the present invention. The applets are transmitted for the most part, to the terminal via the forward information channel. Certain information used by particular applets is transmitted to the terminal via a data stream propagated through the forward command channel. As such, the data stream carrying the applet is demodulated, the applet extracted and the applet&apos;s information decoded prior to execution that displays a menu on the display device. The detailed process by which an applet is downloaded and used to produce a menu is disclosed in commonly assigned U.S. patent application Ser. No. 08/984,427, filed Dec. 3, 1997 and hereby incorporated herein by reference.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3A</PDAT></FGREF><PDAT>, </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>B and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>C together depict an overall flow diagram of an illustrative implementation of the SOD service </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> as executed on both the video session manager CPU and the subscriber terminal CPU. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3A and 3B</PDAT></FGREF><PDAT> are divided into three columns, namely: a subscriber action column </PDAT><HIL><BOLD><PDAT>302</PDAT></BOLD></HIL><PDAT>, a subscriber equipment process </PDAT><HIL><BOLD><PDAT>304</PDAT></BOLD></HIL><PDAT>, and a service provider equipment process </PDAT><HIL><BOLD><PDAT>306</PDAT></BOLD></HIL><PDAT>. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 4-9</PDAT></FGREF><PDAT> depict various menu screens that a SOD service subscriber or a non-SOD service subscriber (i.e., a general consumer of cable services) would be presented with while either accessing SOD services or becoming a new subscriber for SOD services. For the following description, it is assumed that the consumer is already a subscriber of general cable system services (i.e., the consumer has an account number) and now desires to subscribe to additional SOD services or utilize previously subscribed SOD services. To provide a comprehensive understanding of the SOD services, the various menu screens of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 4-9</PDAT></FGREF><PDAT> are referred to as the flow diagram spanning </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3A</PDAT></FGREF><PDAT>, </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>B and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>C is described below.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>The process </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> begins at step </PDAT><HIL><BOLD><PDAT>308</PDAT></BOLD></HIL><PDAT> and continues to step </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT>. At step </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT>, the terminal recalls a terminal identification number and a PIN from memory and sends the number to the service provider equipment. As described in commonly assigned U.S. patent application Ser. No. 08/738,343, filed Oct. 29, 1996, to provide security and limit programming access, each terminal of the interactive information distribution system is generally assigned a terminal identification (TID) number or code, each subscriber household account has a defined master personal identification number (master PIN), and each subscriber in a household may have a personal identification number (subaccount PIN). The TID provides security to identify whether a subscriber terminal is permitted access to the system at all, while the master PIN and subaccount PIN define the level of service that a given subscriber is permitted to access. In addition to the TID, a master PIN may be associated with a subset of subaccounts each having an associated PIN. The assignment and utilization of master PIN and subaccount PINs is described in commonly assigned U.S. patent application Ser. No. 08/738,343, filed Oct. 29, 1996 and hereby incorporated herein by reference. In general, the terminal identification number and both the master and the subaccount PINs are used in providing the SOD service of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT>, the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> validates the PIN and TID authorization by comparing the transmitted TID and PIN to a PIN and TID stored in the video session manager memory. If the transmitted TID and PIN are not in the memory, the video session manager sends, at step </PDAT><HIL><BOLD><PDAT>314</PDAT></BOLD></HIL><PDAT>, a menu applet that creates a display to inform the subscriber that the PIN or TID is invalid. If the TID and PIN are found to be valid, at step </PDAT><HIL><BOLD><PDAT>316</PDAT></BOLD></HIL><PDAT>, the video session manager sends a menu applet to the terminal that will permit access to additional system programming.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>To facilitate selection of an SOD service, a menu is presented at step </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT> to the subscriber on their television screen. As illustratively shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, the menu structure may be defined by a grid or list or, in the example shown, a pie-shaped menu </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>. Various services may be selected by highlighting and selecting any one of the &ldquo;pie&rdquo; sections </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT>, or </PDAT><HIL><BOLD><PDAT>408</PDAT></BOLD></HIL><PDAT>. Whenever a menu selection is made, the system downloads an applet corresponding to that section and either launches a new menu that provides further options for the subscriber or displays a selected program (e.g., starts playing a movie).</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>To select SOD services, the user highlights section </PDAT><HIL><BOLD><PDAT>408</PDAT></BOLD></HIL><PDAT> that may be, for example, a children&apos;s program SOD service known as &ldquo;OnSet Kids&rdquo; (OnSet is a trademark of DIVA Systems Corporation of Menlo Park, Calif.). In such a service, a user can subscribe to unlimited access to any of the children&apos;s programs offered under the subscription package &ldquo;OnSet Kids&rdquo;. More generally, the subscription packages may consist of a collection of programs (or a collection of subscription packages) having a common point of interest, e.g., sports, cooking, travel, automotive, educational, children&apos;s programming, home improvement, soap operas, network prime time television broadcasts, music videos, and the like. Subscription packages are alternatively customized by a subscriber at the time of subscription.</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>For the illustrative menu example of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, the subscriber is assumed to have selected, at step </PDAT><HIL><BOLD><PDAT>322</PDAT></BOLD></HIL><PDAT>, the SOD service of section </PDAT><HIL><BOLD><PDAT>408</PDAT></BOLD></HIL><PDAT> that is associated with the children&apos;s programming subscription. Once a section is selected, the terminal sends, at step </PDAT><HIL><BOLD><PDAT>324</PDAT></BOLD></HIL><PDAT>, an option request corresponding to the selected menu option to the session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>326</PDAT></BOLD></HIL><PDAT>, the system determines whether the consumer/subscriber has a subscription for the selected service and/or has the base subscription or service for a dependent/contingent service.</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3D</PDAT></FGREF><PDAT> depicts the process used to determine subscription authorization. At step </PDAT><HIL><BOLD><PDAT>384</PDAT></BOLD></HIL><PDAT>, the process queries whether the subscriber is a subscriber of the selected SOD service. To determine such subscription service authorization, the account number of the subscriber is compared to a subscription account number database in the network manager. If the subscriber is authorized to access the selected service (the SOD service of option </PDAT><HIL><BOLD><PDAT>408</PDAT></BOLD></HIL><PDAT> in FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>), the process proceeds to point B of FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>B. Alternatively, if authorization for the selected service is not found, the process proceeds to step </PDAT><HIL><BOLD><PDAT>386</PDAT></BOLD></HIL><PDAT>. At step </PDAT><HIL><BOLD><PDAT>386</PDAT></BOLD></HIL><PDAT>, the process queries whether the selected SOD service is a dependent or contingent service. If the query of step </PDAT><HIL><BOLD><PDAT>386</PDAT></BOLD></HIL><PDAT> is negatively answered, the process proceeds to point A in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3C</PDAT></FGREF><PDAT> wherein the subscriber is allowed to subscribe to the Selected SOD service. However, if the selected service is a contingent or dependent service, the process proceeds to step </PDAT><HIL><BOLD><PDAT>388</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>388</PDAT></BOLD></HIL><PDAT>, the account number of the subscriber is compared to information in the network manager database regarding the subscriber&apos;s cable and other services (e.g., type of cable service, level of cable service, number of premium cable channels, the type of premium cable channels, type of other SOD services and the like). If the subscriber is found to be a current subscriber of the base service or subscription, the process proceeds to point A of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3C</PDAT></FGREF><PDAT> to enable the subscriber to subscribe to the selected SOD service. However, if the subscriber is not a subscriber of the base service or subscription, then the process proceeds to point A of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3C</PDAT></FGREF><PDAT> to enable the subscriber to subscribe to the base service or subscription. At step </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT>, the video session manager sends an applet to the terminal to enable the terminal to produce a category menu at step </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT>. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> depicts an exemplary category display </PDAT><HIL><BOLD><PDAT>500</PDAT></BOLD></HIL><PDAT> for a children&apos;s program subscription, e.g., OnSet Kids. The depicted menu </PDAT><HIL><BOLD><PDAT>500</PDAT></BOLD></HIL><PDAT> shows a list </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT> of selectable categories. Each category in the list </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT> represents a particular class of programming, i.e., programming that is related in some way.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>332</PDAT></BOLD></HIL><PDAT>, the subscriber selects a category within the category menu and, at step </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT>, the terminal sends a category request to the video session manager. After receiving a category selection in step </PDAT><HIL><BOLD><PDAT>336</PDAT></BOLD></HIL><PDAT>, the video session manager sends an applet for a title menu to the terminal. At step </PDAT><HIL><BOLD><PDAT>338</PDAT></BOLD></HIL><PDAT>, the terminal decodes and executes the applet to display a title menu. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> depicts an exemplary menu list </PDAT><HIL><BOLD><PDAT>600</PDAT></BOLD></HIL><PDAT> having a list of titles that are associated with the selected category, in this case, Sesame Street.</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>For some SOD services, category menus may not be used and the process would move directly from point B to step </PDAT><HIL><BOLD><PDAT>336</PDAT></BOLD></HIL><PDAT>. For example, if the requested SOD service is a video-on-demand service that is related to a particular premium cable channel, once the system identifies the subscriber as a subscriber to the underlying service, e.g., a premium cable channel, then the subscriber is provided with the titles of the movies that are available on-demand from that premium channel. Thus, the title menu is sent in step </PDAT><HIL><BOLD><PDAT>336</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>When the subscriber selects a title in step </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT>, the title selection, e.g., a program identification (PID), is sent to the video session manager. After receiving a title selection, the video session manager determines, at step </PDAT><HIL><BOLD><PDAT>344</PDAT></BOLD></HIL><PDAT>, the title price. The price of the programming selected from the title menu is determined by the video session manager sending a price request to the network manager. The network manager performs a search of its pricing database and returns a price of either zero or non-zero. A non-zero price is returned, for example, if the subscription is limited to a restricted time window or the subscription is a dependent subscription that is not available to customers that do not meet a particular service level or type criteria. For example, the OnSet Kids children&apos;s programming subscription service may be limited to viewing from 6 A.M. to 6 P.M. and, the request is being made outside of that time window. As such, any request by a subscriber outside of the window is charged a nominal fee, i.e., the subscriber is provided an &ldquo;a la carte&rdquo; menu as described below with respect to step </PDAT><HIL><BOLD><PDAT>354</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>If the price that is returned to the video session manager is zero dollars (the query of step </PDAT><HIL><BOLD><PDAT>346</PDAT></BOLD></HIL><PDAT> is affirmatively answered), then the video session manager sends, at step </PDAT><HIL><BOLD><PDAT>348</PDAT></BOLD></HIL><PDAT>, an applet for a display of a title information screen. At step </PDAT><HIL><BOLD><PDAT>350</PDAT></BOLD></HIL><PDAT>, the terminal displays a title information screen indicating the viewing price is zero dollars and also provides the subscriber with a start option so that the subscriber may commence viewing of the program. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is an exemplary title information screen </PDAT><HIL><BOLD><PDAT>700</PDAT></BOLD></HIL><PDAT> showing information about the program that was selected as well as providing a start option as shown as button </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT>. Additionally, a preview clip may be executed and depicted for the user by selecting the icon </PDAT><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="0"><PTEXT><PDAT>If, however, the network manager returns a non-zero price to the video session manager, then the video session manager sends, at step </PDAT><HIL><BOLD><PDAT>352</PDAT></BOLD></HIL><PDAT>, an applet for a second type of title information screen. At step </PDAT><HIL><BOLD><PDAT>354</PDAT></BOLD></HIL><PDAT>, the terminal creates a screen informing the subscriber of the reason for the non-zero price and also presents the user with an &ldquo;a la carte&rdquo; purchase option. The subscriber will then be able to purchase and view the a la carte selection or return to a previous menu.</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="0"><PTEXT><PDAT>If, at step </PDAT><HIL><BOLD><PDAT>326</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3A</PDAT></FGREF><PDAT>, the service provider equipment determines that the consumer does not have an active subscription, e.g., does not have a subscription to the selected subscription package or to an underlying service to enable a dependent or contingent service, the process proceeds along path A to step </PDAT><HIL><BOLD><PDAT>358</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>C. At step </PDAT><HIL><BOLD><PDAT>358</PDAT></BOLD></HIL><PDAT>, the video session manager sends an applet for a subscription information screen. The subscription information screen applet is decoded and executed by the terminal at step </PDAT><HIL><BOLD><PDAT>356</PDAT></BOLD></HIL><PDAT> to create a subscription information screen. The subscription information screen describes the subscription offering to the non-subscriber and then presents a sign-up screen through which the user can interactively subscribe for the service. Alternatively, the subscription information screen may only inform the subscriber that the SOD service that was requested is a dependent or contingent service and that the cable system operator must be contacted to subscribe to the base service.</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> depicts an exemplary screen </PDAT><HIL><BOLD><PDAT>800</PDAT></BOLD></HIL><PDAT> for interactively requesting a subscription-on-demand service, i.e., offers the subscriber an option to purchase a subscription. If the customer is required to purchase a premium cable channel to facilitate a dependent service, then the screen would offer the customer an opportunity to subscribe to the premium channel. If the subscriber declines (step </PDAT><HIL><BOLD><PDAT>360</PDAT></BOLD></HIL><PDAT>) the subscription offer, the terminal then sends, at step </PDAT><HIL><BOLD><PDAT>362</PDAT></BOLD></HIL><PDAT>, a refusal signal to the session manager. In response to the refusal, the process returns (step </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT>) to point C prior to step </PDAT><HIL><BOLD><PDAT>316</PDAT></BOLD></HIL><PDAT> in FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>A. If, however, a system subscriber elects to purchase a subscription, the terminal sends, at step </PDAT><HIL><BOLD><PDAT>366</PDAT></BOLD></HIL><PDAT>, an acceptance signal. In response to the acceptance signal, at step </PDAT><HIL><BOLD><PDAT>368</PDAT></BOLD></HIL><PDAT>, the session manager requests a master PIN as a confirmation of the subscriber&apos;s capability to make a subscription purchase. As such, a person having only a subaccount PIN is not capable of subscribing to a subscription-on-demand service or a service that permits dependent services. To facilitate the subscription confirmation, the session manager sends an applet for a master PIN request screen. At step </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT>, the terminal decodes the applet and displays the master PIN request screen.</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT> depicts an exemplary master PIN confirmation entry screen </PDAT><HIL><BOLD><PDAT>900</PDAT></BOLD></HIL><PDAT>. The screen </PDAT><HIL><BOLD><PDAT>900</PDAT></BOLD></HIL><PDAT> contains a field </PDAT><HIL><BOLD><PDAT>902</PDAT></BOLD></HIL><PDAT> where the subscriber can enter a master PIN. The master PIN is entered at step </PDAT><HIL><BOLD><PDAT>372</PDAT></BOLD></HIL><PDAT> and, at step </PDAT><HIL><BOLD><PDAT>374</PDAT></BOLD></HIL><PDAT>, the master PIN is sent to the session manager. After the master PIN is received, at step </PDAT><HIL><BOLD><PDAT>376</PDAT></BOLD></HIL><PDAT>, the video session manager verifies the master PIN as valid. To verify the validity of the PIN, the video session manager compares the entered PIN to the PIN in its memory. If the master PIN is invalid, the subscriber is given one or more further opportunities to correctly enter the master PIN, then the process proceeds to step </PDAT><HIL><BOLD><PDAT>378</PDAT></BOLD></HIL><PDAT> where the process continues at point C prior to step </PDAT><HIL><BOLD><PDAT>316</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>A. If the PIN is valid, the routine proceeds to step </PDAT><HIL><BOLD><PDAT>380</PDAT></BOLD></HIL><PDAT> where the video session manager updates the subscription database stored in the network manager with the account information of the new subscriber to the selected subscription service. If the subscriber has selected a new service or subscription, e.g., an additional premium cable channel, the subscriber&apos;s information may also be sent to the cable operator&apos;s customer management system. After updating the subscription database, the routine updates, at step </PDAT><HIL><BOLD><PDAT>382</PDAT></BOLD></HIL><PDAT>, the administrative system such that the interactive information distribution system&apos;s billing system is updated with the new subscriber&apos;s account information. Once subscribed, the process proceeds from step </PDAT><HIL><BOLD><PDAT>382</PDAT></BOLD></HIL><PDAT> to step </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3B</PDAT></FGREF><PDAT> where the system provides the new subscriber an opportunity to utilize the newly subscribed service.</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>The present invention implements subscription-on-demand services and dependent services by having the computer resources needed for the service to be distributed between the subscriber equipment and the service provider equipment. To implement the service, the terminal need only decode and execute simple applets to produce various interactive displays and send simple information requests. The service provider equipment performs the significant computing for menu generation, security handling, and subscription processing. As such, the terminal can be relatively inexpensive, making the overall system economically feasible.</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="0"><PTEXT><PDAT>The interactive structure of the inventive subscription-on-demand system enables flexible subscription packages to be created. For example, a hierarchical subscription package structure can be produced that has various levels of access. The following is an illustrative example of a hierarchical package structure for sporting events:</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="2"><PTEXT><PDAT>SPORTS</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="3"><PTEXT><PDAT>FOOTBALL</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="4"><PTEXT><PDAT>COLLEGE</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="4"><PTEXT><PDAT>PRO</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="3"><PTEXT><PDAT>BASKETBALL</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="4"><PTEXT><PDAT>COLLEGE</PDAT></PTEXT></PARA>
<PARA ID="P-00069" LVL="5"><PTEXT><PDAT>MENS</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="5"><PTEXT><PDAT>WOMENS</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="4"><PTEXT><PDAT>PRO</PDAT></PTEXT></PARA>
<PARA ID="P-00072" LVL="5"><PTEXT><PDAT>MENS</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="5"><PTEXT><PDAT>WOMENS</PDAT></PTEXT></PARA>
<PARA ID="P-00074" LVL="3"><PTEXT><PDAT>GOLF</PDAT></PTEXT></PARA>
<PARA ID="P-00075" LVL="3"><PTEXT><PDAT>HOCKEY</PDAT></PTEXT></PARA>
<PARA ID="P-00076" LVL="2"><PTEXT><PDAT>and so on</PDAT></PTEXT></PARA>
<PARA ID="P-00077" LVL="7"><PTEXT><PDAT>Under this hierarchy, a consumer may subscribe to SPORTS and receive access to all sports programming available for a predefined price. However, those that desire only to have access to, for example, men&apos;s professional basketball would subscribe only to that particular programming selection at a predefined price. Such a hierarchical arrangement can be divided into any number of levels, e.g., specific teams, or grouped into various packages, e.g., all professional sports. Additionally, the invention can be expanded to enable consumers to create their own personal SOD service by selecting their favorite programs or program classes for grouping into an SOD package such that a single price can be paid to access all the selected programming over a predefined period of time, e.g., a predefined price for accessing the selected programming for a month. As such, dynamically defined subsets of content can be created as the personal SOD packages. The programming is selected through manipulation of interactive menus (generated using menu applets as described above) and the program identification codes (PIDs) for the selected programming are stored in the subscription database with the consumer&apos;s account number (and/or PIN or TID, if needed). As such, the subscriber can access their personal SOD service at any time and without further payment. At the end of the period, the service would be renewable such that the subscriber would not have to reenter the selection at the end of each period.</PDAT></PTEXT></PARA>
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>Additionally, the use of dependent subscriptions also permits the subscriptions to be bundled into fixed packages containing a plurality of services, e.g., N services. As such, when a subscriber subscribes to a specified number of subscription services, e.g., M subscriptions, out of a total N services, the subscriber is provided the remaining services for free (or at a discounted rate). The invention tracks the subscriptions of each subscriber and when a certain number is obtained in, for example, a particular category (e.g., children&apos;s programming) the remaining children&apos;s programming services are made available to the subscriber for no extra cost or for a discounted fee. As such, the system performs as if the subscriber specifically subscribed to the additional services even though they have not specifically done so. To facilitate the bundled service, the system updates the subscriber database in the network manager as well as the customer management system in the cable operator equipment to maintain a record of all the services and subscriptions that any given subscriber presently uses.</PDAT></PTEXT></PARA>
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>Although various embodiments which incorporate the teachings of the present invention have been shown and described in detail herein those skilled in the arts can readily devise many other varied embodiments that still incorporate these teachings.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>1. In an interactive information distribution system containing service provider equipment and subscriber equipment that is interconnected by a communications network, a method of providing a subscription-on-demand service for video-on-demand programs in an interactive information distribution system comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>packaging a plurality of video-on-demand programs into a first programming package; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>packaging a plurality of video-on-demand programs into a second programming package; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>relating said first programming package to said second programming package to cause said first programming package to be dependent upon said second programming package; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>enabling a subscriber to subscribe to said first programming package immediately or as desired via the interactive information distribution system by communicating through the communications network to the service provider equipment, so long as the subscriber has subscribed to the second programming package. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>2. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> further comprising the step of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>enabling a consumer to select a programming package and subscribe to the selected programming package for a predefined price and thereby become said subscriber. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>3. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said enabling step further comprises the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>enabling said subscriber to subscribe to said first or second programming packages so long as the subscriber has subscribed to certain cable or subscription services. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>4. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein a consumer selects a programming package and subscribes thereto by manipulating a graphical user interface.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>5. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said first and second programming packages form a programming bundle and said enabling step automatically subscribes the subscriber to said first programming package so long as the subscriber has subscribed to the second programming package.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>6. In an interactive information distribution system containing service provider equipment and subscriber equipment that is interconnected by a communications network, a method of providing a subscription-on-demand service for video-on-demand programs in an interactive information distribution system comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>sending from said service provider equipment to said subscriber equipment a first menu applet; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>decoding and executing said first menu applet within said subscriber equipment to display a first interactive graphical user interface; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>selecting, through manipulation of the first interactive graphical user interface, a video-on-demand subscription option; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>sending a selection signal indicative of said selected video-on-demand subscription option from said subscriber equipment to said service provider equipment by communicating through the communications network; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining, within said service provider equipment, if the subscriber is a current subscriber to said video-on-demand subscription option identified by said selection signal or if the subscriber is a current subscriber to another service upon which said video-on-demand subscription option identified by said selection signal is dependent or contingent; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>if the subscriber is said current subscriber, sending a second menu applet from said subscriber equipment to said service provider equipment; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>decoding and executing said second menu applet within said subscriber equipment to display a second interactive user interface through which the subscriber can select a video-on-demand program for viewing; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>if said subscriber is not said current subscriber, sending a third menu applet from said service provider equipment to said subscriber equipment; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>decoding and executing said third menu applet within said subscriber equipment to display a third interactive user interface through which the subscriber can become a current subscriber to a video-on-demand subscription option that enables the subscriber to subscribe the selected video-on-demand subscription option, wherein said menu applets are sent from said service provider equipment in response to a selection by said subscriber. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>7. The method of claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> wherein second menu applet is connected to other menu applets that provide interactive displays of categories of services, titles of programs available in each category, and program pricing for each tile.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00087" LVL="0"><PTEXT><PDAT>8. The method of claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> further comprising the step of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>if a new subscription is created, updating a subscription database within said service provider equipment to identify the subscriber as a subscriber to the selected service. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00088" LVL="0"><PTEXT><PDAT>9. The method of claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> further comprising the step of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>if a new service is subscribed, updating a customer management system database within a cable operator equipment to identify the subscriber as a subscriber to the new service. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00089" LVL="0"><PTEXT><PDAT>10. The method of claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> wherein the third menu applet produces a display screen that informs the subscriber to contact a cable operator to subscribe to a service that enables the subscriber to subscribe the selected service.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00090" LVL="0"><PTEXT><PDAT>11. Apparatus for providing subscription-on-demand services for video-on-demand programs within an interactive information distribution system comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>service provider equipment containing an information server and a video session manager; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>subscriber equipment containing a subscriber terminal and a display unit, where the service provider equipment is connected to the subscriber equipment by a communications network; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>said video session manager sends a plurality of executable menu applets to said subscriber terminal, said terminal executes each of said menu applets to generate interactive graphical user interface displays through which a subscriber selects a video-on-demand service; the subscriber terminal sends a service request to said session manager for processing via said communications network; if the subscriber is a subscriber to video-on-demand services from which the selected video-on-demand service depends, the subscriber can subscribe to said selected video-on-demand service; if said subscriber is not said current subscriber from which the selected video-on-demand service depends, the subscriber can become a subscriber to a video-on-demand service that enables the subscriber to subscribe to the selected video-on-demand service. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00091" LVL="0"><PTEXT><PDAT>12. The apparatus of claim </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> wherein the subscriber terminal decodes and executes the applets that are sent by the session manager to produce said interactive graphical user interface displays and sends to the video session manager selection signals indicative of a selected option within said interactive graphical user interface displays.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00092" LVL="0"><PTEXT><PDAT>13. The apparatus of claim </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> wherein said video session manager, to provide security and system administration, accesses a personal identification database, a terminal identification database, and a subscriber database that are contained in a network manager.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00093" LVL="0"><PTEXT><PDAT>14. The apparatus of claim </PDAT><HIL><BOLD><PDAT>11</PDAT></BOLD></HIL><PDAT> wherein the subscriber database communicates with a customer management system within cable operator equipment.</PDAT></PTEXT></PARA>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314572-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314572-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314572-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314572-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314572-20011106-D00004.TIF">
<EMI ID="EMI-D00005" FILE="US06314572-20011106-D00005.TIF">
<EMI ID="EMI-D00006" FILE="US06314572-20011106-D00006.TIF">
<EMI ID="EMI-D00007" FILE="US06314572-20011106-D00007.TIF">
<EMI ID="EMI-D00008" FILE="US06314572-20011106-D00008.TIF">
<EMI ID="EMI-D00009" FILE="US06314572-20011106-D00009.TIF">
<EMI ID="EMI-D00010" FILE="US06314572-20011106-D00010.TIF">
<EMI ID="EMI-D00011" FILE="US06314572-20011106-D00011.TIF">
<EMI ID="EMI-D00012" FILE="US06314572-20011106-D00012.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314573-20011106-D00000.TIF SYSTEM "US06314573-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314573-20011106-D00001.TIF SYSTEM "US06314573-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314573-20011106-D00002.TIF SYSTEM "US06314573-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314573-20011106-D00003.TIF SYSTEM "US06314573-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314573-20011106-D00004.TIF SYSTEM "US06314573-20011106-D00004.TIF" NDATA TIF>
<!ENTITY US06314573-20011106-D00005.TIF SYSTEM "US06314573-20011106-D00005.TIF" NDATA TIF>
<!ENTITY US06314573-20011106-D00006.TIF SYSTEM "US06314573-20011106-D00006.TIF" NDATA TIF>
<!ENTITY US06314573-20011106-D00007.TIF SYSTEM "US06314573-20011106-D00007.TIF" NDATA TIF>
<!ENTITY US06314573-20011106-D00008.TIF SYSTEM "US06314573-20011106-D00008.TIF" NDATA TIF>
<!ENTITY US06314573-20011106-D00009.TIF SYSTEM "US06314573-20011106-D00009.TIF" NDATA TIF>
<!ENTITY US06314573-20011106-D00010.TIF SYSTEM "US06314573-20011106-D00010.TIF" NDATA TIF>
<!ENTITY US06314573-20011106-D00011.TIF SYSTEM "US06314573-20011106-D00011.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314573</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>09086799</PDAT></DNUM></B210>
<B211US><PDAT>09</PDAT></B211US>
<B220><DATE><PDAT>19980529</PDAT></DATE></B220>
</B200>
<B500>
<B510>
<B511><PDAT>H04N  5445</PDAT></B511>
<B512><PDAT>H04N  716</PDAT></B512>
<B512><PDAT>H04N  7173</PDAT></B512>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>725 61</PDAT></B521>
<B522><PDAT>725  5</PDAT></B522>
<B522><PDAT>725 40</PDAT></B522>
<B522><PDAT>725 87</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Method and apparatus for providing subscription-on-demand services for an interactive information distribution system</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5524195</PDAT></DNUM>
<DATE><PDAT>19960600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Clanton, III et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348 13</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5585866</PDAT></DNUM>
<DATE><PDAT>19961200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Miller et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348731</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5600364</PDAT></DNUM>
<DATE><PDAT>19970200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hendricks et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  1</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5600573</PDAT></DNUM>
<DATE><PDAT>19970200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hendricks et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  6</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5629732</PDAT></DNUM>
<DATE><PDAT>19970500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Moskowitz et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5629733</PDAT></DNUM>
<DATE><PDAT>19970500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Youman et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5659350</PDAT></DNUM>
<DATE><PDAT>19970800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hendricks et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  6</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5663757</PDAT></DNUM>
<DATE><PDAT>19970900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Morales</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348 13</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5897623</PDAT></DNUM>
<DATE><PDAT>19990400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Fein et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705 27</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5903816</PDAT></DNUM>
<DATE><PDAT>19990500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Broadwin et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>455  31</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5915243</PDAT></DNUM>
<DATE><PDAT>19990600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Smolen</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>705 14</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5929850</PDAT></DNUM>
<DATE><PDAT>19990700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Broadwin et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345327</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5990927</PDAT></DNUM>
<DATE><PDAT>19991100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hendricks et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  6</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>0 833 511 A2</PDAT></DNUM>
<DATE><PDAT>19980400</PDAT></DATE>
<CTRY><PDAT>EP</PDAT></CTRY>
</DOC>
</PCIT>
<CITED-BY-OTHER>
</B561>
</B560>
<B570>
<B577><PDAT>15</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>345327</PDAT></B582>
<B582><PDAT>348  3</PDAT></B582>
<B582><PDAT>348  6</PDAT></B582>
<B582><PDAT>348  7</PDAT></B582>
<B582><PDAT>348 10</PDAT></B582>
<B582><PDAT>348 12</PDAT></B582>
<B582><PDAT>348 13</PDAT></B582>
<B583US><PDAT>709217-219</PDAT></B583US>
<B582><PDAT>705 14</PDAT></B582>
<B582><PDAT>705 15</PDAT></B582>
<B582><PDAT>705 20</PDAT></B582>
<B582><PDAT>705 26</PDAT></B582>
<B582><PDAT>705 27</PDAT></B582>
<B582><PDAT>713201</PDAT></B582>
<B582><PDAT>725 60</PDAT></B582>
<B582><PDAT>725 61</PDAT></B582>
<B582><PDAT>725 87</PDAT></B582>
<B582><PDAT>725101</PDAT></B582>
<B582><PDAT>725  5</PDAT></B582>
<B582><PDAT>725 40</PDAT></B582>
</B580>
<B590><B595><PDAT>11</PDAT></B595><B596><PDAT>11</PDAT></B596><B597US>
</B590>
</B500>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Donald F.</PDAT></FNM><SNM><STEXT><PDAT>Gordon</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Los Altos</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Tobie</PDAT></FNM><SNM><STEXT><PDAT>La Rocca</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>San Jose</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>DIVA Systems Corporation</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Redwood City</PDAT></CITY><STATE><PDAT>CA</PDAT></STATE></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>02</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Thomason, Moser &amp; Patterson LLP</PDAT></STEXT></ONM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Andrew</PDAT></FNM><SNM><STEXT><PDAT>Faile</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Hai V.</PDAT></FNM><SNM><STEXT><PDAT>Tran</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2611</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A method and apparatus for providing subscription-on-demand (SOD) services for a interactive information distribution system, where a consumer may subscribe to packages of on-demand programs for a single price and view the programs in the subscribed package at any time for no additional cost. The apparatus and method are embodied in a combination of software, which provides a so called navigator, and hardware, including a subscriber terminal that provides certain functionality for the navigator and service provider equipment that supports the functionality of the terminal. As such, graphical user interface functionality is distributed between the service provider equipment and subscriber equipment (subscriber terminal). Such distribution provides an enjoyable, real time interactive process for accessing SOD services that allows the subscriber to rapidly identify and access a subscription service. In addition, a non-subscriber of a particular service is quickly identified and provided the opportunity to, through the use of a graphical user interface, subscribe to the programming provided by the system.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>1. Field of the Invention</PDAT></PTEXT></PARA>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>The present invention relates to an interactive information distribution system such as a video-on-demand (VOD) system. More particularly, the present invention relates to a method and apparatus for providing subscription-on-demand (SOD) services for such an interactive information distribution system.</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>2. Description of the Background Art</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>Recent advances in digital signal processing techniques and, in particular, improvements in digital compression techniques, have led to a plethora of proposals for providing new digital services to a customer&apos;s home via existing telephone and coaxial cable networks. For example, it has been proposed to provide hundreds of cable television channels to subscribers by compressing digital data and digital video, transmitting the compressed digital signals over conventional coaxial cable television channels, and then decompressing the signals in the subscriber&apos;s receiver. Another proposed application for this technology is a video-on-demand (VOD) system in which a subscriber communicates directly with a video service provider via telephone lines to request a video program from a video library and the requested video program is routed to the subscriber&apos;s home via telephone lines or via coaxial cable television cables for immediate viewing. Other proposed VOD systems use a frequency multiplexing technique to enable control information for a subscriber&apos;s receiver to be transmitted through a cable network back to an information server. Such a system permits a bi-directional communications over a single network.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>In most of these information distribution systems, graphical menus are displayed upon the subscribers television and using a remote control device, a subscriber selects a desired program for viewing. One such graphical user interface based VOD system is disclosed in U.S. Pat. No. 5,619,249, issued Apr. 8, 1997, and hereby incorporated herein by reference, wherein a viewing station including a television monitor and a high-power graphics computer are used to generate a graphical user interface. The viewing stations are in communication with a telecasting facility (i.e., service provider head end equipment) that transmits selected video information as requested by the viewing station. The graphics computer within the viewing station locally stores all the executable programs that generate the graphical interface, control the graphical interface, and interact with the subscriber. The graphics computer not only enables a subscriber to select programming to view, but also enables a non-subscriber to become a subscriber by interacting with certain interface screens.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>Although having such a high-power computer within the viewing station is beneficial in providing nearly instantaneous responsiveness to the subscriber&apos;s and non-subscriber&apos;s inputs, such a high-power computer system is economically unfeasible to utilize as subscriber equipment for a large number of subscriber homes. As such, set top terminals or television receivers containing built-in high-power computers are generally not feasible as a commercial product.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>Additionally, prior art VOD systems have only contemplated selling services on a program-by-program basis. For example, in the prior art systems, a viewer navigates through various menus to arrive at a menu containing a program title that the subscriber desires to view. The subscriber then requests the program and the program is supplied to the subscriber&apos;s display. The subscriber&apos;s account is then billed for the order of that particular program. As such, the concept of subscriptions extends only to the general access to content and an a la carte purchase of a unit of content. In this respect, the consumer&apos;s experience is nothing more than the transformation of the video store experience to the customer&apos;s home; the consumer is purchasing the ability to access a program for a prescribed period of time. Such systems use the term &ldquo;subscriber&rdquo; to represent someone who has received an installation of the subscriber equipment to enable a technically different class of service to be accessed, namely, digital or analog/digital services instead of the purely analog telecasts of conventional cable television. Consequently, the &ldquo;subscription&rdquo; as used in the prior art refers to the capability of selecting from a list a single unit of content such as a movie or video. Heretofore, VOD systems have not had a capability of packaging programming at a single price such that a system subscriber can also be a program package subscriber to enable the package subscriber to view any program in the subscribed package without further cost.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>Therefore, there is a need in the art for a method and apparatus for providing subscription-on-demand services for an interactive information distribution system. There is also a need to provide these services using equipment having a significant portion of the computing power is contained within a service provider head end system such that a terminal for the subscriber&apos;s home can be manufactured relatively inexpensively.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>The disadvantages heretofore associated with the prior art are overcome by the present invention of a method and apparatus for providing subscription-on-demand (SOD) services for a interactive information distribution system, here the system provides distributed computing resources using a relatively inexpensive subscriber terminal. The invention is embodied in a combination of software, which provides a so-called &ldquo;navigator&rdquo;, and hardware, including subscriber equipment and service provider equipment that is interconnected by a communications network. The graphical user interface functionality is distributed between the service provider equipment and subscriber equipment. Such distribution provides an enjoyable, real time interactive session that allows the consumer to rapidly navigate through a plethora of menus to find particular information which the consumer desires to view. In addition, a non-subscriber of a particular SOD service is quickly identified and provided the opportunity to, through the use of a graphical user interface, subscribe to the programming provided by the system.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>Using the inventive equipment, a consumer is capable of further subscribing to packages of on-demand programming, i.e., SOD services, through manipulation of the graphical user interface. The system provides certain packages of on-demand programming, i.e., childrens programming, that a consumer may elect to subscribe to for a single price. As such, through manipulation of the menus, the consumer selects a programming package, becomes a subscriber to that package and is billed accordingly. Thereafter, the subscriber may view any program in the package without additional cost. Although predefined programming packages are generally available for selection, a consumer may optionally create a personal SOD service by selecting programs for a personal package that can then be subscribed to as any other programming package.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>Consequently, the invention differs from the prior art from both an architectural standpoint and data management standpoint. Together these innovations provide a complex price and data capacity management infrastructure necessary to offer a consumer friendly approach to subscribing to a class of data or service content. This service content might be grouped by any logical association such as a series of movies or other program content. The SOD service concept of having a single price for a package of programming removes the payment commitment challenge ordinarily posed by the prior art as a barrier to viewing each item of content.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>The teachings of the present invention can be readily understood by considering the following detailed description in conjunction with the accompanying drawings, in which:</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> depicts a high level block diagram of an interactive information distribution system containing the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> depicts a block diagram of an illustrative subscriber&apos;s terminal within the system of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>;</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3A</PDAT></FGREF><PDAT>, </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>B, and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>C together depict a flow diagram of a routine representing the software that is executed within the system of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> to provide the subscription-on-demand services of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> depicts an illustrative menu structure for selecting a subscription-on-demand service;</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> depicts a menu structure used to select a subscription item that is a subset of the subscription-on-demand service;</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is a menu depicting titles of programming within a specific category within said subscription on demand service;</PDAT></PTEXT></PARA>
<PARA ID="P-00020" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is a title information screen;</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> is a menu that allows a consumer to subscribe to a selected subscription-on-demand service;</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT> is a menu that provides an input structure for a master PIN number.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<PARA ID="P-00023" LVL="0"><PTEXT><PDAT>To facilitate understanding, identical reference numerals have been used, where possible, to designate identical elements that are common to the figures.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION</PDAT></STEXT></H>
<PARA ID="P-00024" LVL="0"><PTEXT><PDAT>The invention is a method and apparatus that provides a subscription-on-demand (SOD) service for an interactive information distribution system. Throughout the following description the term &ldquo;SOD service&rdquo; is defined as the capability of a consumer to subscribe to packages of programming at a pre-defined price and those programs within a subscribed package can be viewed, on-demand, without further cost to the subscriber. As such, a consumer (i.e., a viewer having a system account number) can request, through manipulation of a graphical user interface, to subscribe to a package of programming, i.e., children&apos;s programming, at a fixed price. Thereafter, any program within the package can be viewed at anytime, i.e., on-demand, without further charge. Optional viewing time restrictions and the like can be implemented to limit package content viewing only during predefined time periods or, if viewing outside the time period is desired, an additional fee is charged to the subscriber&apos;s account.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><PDAT>Although the SOD service of the present invention can be implemented and executed using a number of different types of information distribution systems, the preferred embodiment is used in combination with the interactive information distribution system hardware described in commonly assigned U.S. patent application Ser. No. 08/984,710, filed Dec. 3, 1997, and hereby incorporated herein by reference. However, the specific hardware arrangement is considered illustrative of the type of system with which the invention is used. Use of the invention within other information distribution system hardware arrangements that facilitate distributed computing resources between the service provider head end and the subscriber&apos;s terminal is considered within the scope of the invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> depicts a high level block diagram of the illustrative information distribution system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> that incorporates the present invention. The system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> contains service provider equipment </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT>, a communications network in the form of a cable transport subsystem </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> and subscriber equipment 106</PDAT><HIL><SB><PDAT>n</PDAT></SB></HIL><PDAT>, where n is an integer greater than 0. The service provider equipment </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> contains an information server </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> which is typically a parallel processing computer containing at least one central processing unit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> and associated memory </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>. U.S. Pat. No. 5,671,377, issued Sep. 23, 1993 and U.S. Pat. No. 5,579,527, issued Nov. 26, 1996, which are hereby incorporated herein by reference, describe a server that is capable of operating in the capacity of information server </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT>. The server </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> interacts with the data storage device </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT> (e.g., a disk drive array) that generally stores the subscriber information (e.g., video data) that will be recalled and downloaded to the subscriber equipment </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>. Additionally, within the service provider equipment </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> is a video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> that provides session control of the information flowing to and from the server </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT>. The video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> contains its own central processing unit (CPU) </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> and associated memory </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT> that provides functionality for the graphical user interfaces through which the consumer interacts with the system. The CPU </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> is part of a session control manager </PDAT><HIL><BOLD><PDAT>125</PDAT></BOLD></HIL><PDAT> that controls a plurality of modems </PDAT><HIL><BOLD><PDAT>127</PDAT></BOLD></HIL><PDAT> that facilitate communication with the subscriber equipment. Other subsystems of the service provider equipment include a network manager </PDAT><HIL><BOLD><PDAT>142</PDAT></BOLD></HIL><PDAT> and a back office subsystem </PDAT><HIL><BOLD><PDAT>144</PDAT></BOLD></HIL><PDAT>. These subsystems maintain certain databases of information that enable the system to accurately control system access, subscription package definitions, and subscriber/consumer profile and billing.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>The information server </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> is coupled to the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> via data path </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT>, synchronization clock path </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT>, and control path </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT>. The server </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> provides data streams that are destined for consumers on path </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> and a synchronization clock on path </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT>. The specific data streams are provided in response to requests for information (e.g., menu applets, video programs, and other content material) from the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> on path </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT>. These data streams are packetized and modulated onto a carrier that is compatible with the transmission requirements of the network </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><PDAT>The video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> accomplishes all of the transmission interface requirements of the system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> as well as provides graphical user interface support. Specifically, the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> is coupled through the modems </PDAT><HIL><BOLD><PDAT>127</PDAT></BOLD></HIL><PDAT> to subscriber equipment via a forward information channel </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT>, a forward command channel </PDAT><HIL><BOLD><PDAT>133</PDAT></BOLD></HIL><PDAT> and a back channel </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT>. All three of these channels are supported by the cable transport subsystem </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>. The video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> contains a modulator for modulating the server data streams onto one or more carrier frequencies for transmission on the forward information channel </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT>. Additionally, modems </PDAT><HIL><BOLD><PDAT>127</PDAT></BOLD></HIL><PDAT> within the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> send control information via the forward command channel </PDAT><HIL><BOLD><PDAT>133</PDAT></BOLD></HIL><PDAT> and receive control information via the back channel </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT>. Moreover, a conventional cable television signal source </PDAT><HIL><BOLD><PDAT>128</PDAT></BOLD></HIL><PDAT> is optionally coupled to the forward information channel </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT> via a signal coupler </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT>. In operation, the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> responds to requests from the subscriber equipment </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> for interactive menus and data streams by requesting the server </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> to provide such information, then communicating that information to the requesting subscriber equipment </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>. The video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>, as discussed below, also ensures that the subscriber equipment </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> is authorized to receive the requested information.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><PDAT>The cable transport subsystem </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> can be any one of a number of conventional broad band communications networks that are available such as a fiber optic network, a telephone network, existing cable television network and the like. For example, if the network is a hybrid fiber-coax network, the transport technique used in both forward channels may be modeled after the moving pictures expert group (MPEG) transport protocol for the transmission of video data streams. In general, the transport mechanism for both the forward channels and transport information to the subscriber equipment must be able to carry unidirectional, asynchronous packetized data such as that defined in the MPEG video and audio signal transmission protocol, and the like. There are a number of such transport protocols available.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><PDAT>The subscriber equipment </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> receives the requested data streams from the forward information channel, demodulates the streams and processes them for display on the display device </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> (e.g., a conventional television). In addition, the terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> accepts commands from a remote control input device </PDAT><HIL><BOLD><PDAT>138</PDAT></BOLD></HIL><PDAT> or other input device to facilitate consumer interaction with the system. These commands are formatted, compressed, modulated, and transmitted through the network </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> to the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>. Typically, this transmission is accomplished through the back channel </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT>. These commands are preferably transmitted through the same network used to transmit information to the subscriber equipment. However, the back channel coupling the subscriber equipment to the server may be a separate network, e.g., a forward information channel through a television cable network and a back channel through a telephone network. The telephone network could also support the forward control channel. The video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> interprets each command set from the terminal through the back channel </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT> and instructs the information server </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> to perform certain functions to implement the consumer/subscriber request.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> depicts a block diagram of the terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> which contains a transceiver </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, a central processing unit (CPU) </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> and a display driver </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT>. Of course, the functionality of the terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> can be embedded within a single consumer electronics product such as a receiver circuit within a television. As such, the description of a separate terminal should be considered illustrative of the type of subscriber equipment that may be used to implement the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>Within the set top terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT>, the CPU </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> is supported by random access memory (RAM) </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT>, read only memory (ROM) </PDAT><HIL><BOLD><PDAT>218</PDAT></BOLD></HIL><PDAT> and various support circuits </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT> such as clocks, power supply, and infrared receiver and the like. The transceiver </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> contains a diplexer </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT>, a back channel transmitter </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT>, an information channel receiver </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT>, a command channel receiver </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>, an information decoder </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT>, a conventional television signal receiver </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT>, and a multiplexer </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT>. The diplexer </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> couples the three channels carried by a single cable within the network to the transmitter and receivers of the terminal. Each receiver </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> contains a tuner, amplifiers, filters, a demodulator and a depacketizer. As such, the receivers tune, downconvert, and depacketize the signals from the cable network in a conventional manner. The information channel receiver </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> contains a conventional QAM demodulator such as a model BCM3115 manufactured by the Broadcom Corporation. Other such demodulators are well known in the communications art and could be used in this application. However, this particular QAM demodulator also contains a built in &ldquo;out-of-band&rdquo; QPSK demodulator for handling command and control data carried by the forward command channel. As such, a single integrated circuit demodulator processes consumer/subscriber requested information (audio and video) as well as command data.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>The decoder </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> processes the data packets carrying consumer/subscriber requested information produced by the QAM demodulator into useable signals for the end user display, e.g., television, home studio, video recorder and the like. The decoder </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> is coupled to a dynamic random access memory (DRAM) to facilitate decoding of the data packets and processing of command programs, as shall be discussed below. The signals for display are conventionally processed by a display driver </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> to produce composite video as well as conventional television signals, e.g., modulated onto channel </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> or </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> using the NTSC standard modulation.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><PDAT>The conventional cable signal receiver </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT> contains a tuner and an analog (NTSC) demodulator. A multiplexer </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT> couples the demodulated analog or decoded video signal to the display driver </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT>. Of course, the NTSC demodulator can be replaced with a PAL or SECAM standard demodulator, as needed.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><PDAT>The demodulated QPSK signal provides command and control information to the CPU </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> for generating certain graphics and control information regions upon a television screen. The CPU is, for example, a model 68302 processor manufactured by Motorola. This processor, operating in combination with the decoder </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> as well as a continuously available video signal from the information channel, produces screen-displayed buttons, icons and graphical regions with which a consumer interacts using the remote control. Without the video signal, the terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> does not produce any display, i.e., the displays are actively generated in real-time as needed to facilitate certain navigational and interface functions.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><PDAT>Specifically, a joy stick on the remote control </PDAT><HIL><BOLD><PDAT>138</PDAT></BOLD></HIL><PDAT> selectively highlights certain predefined regions on the television screen. To perform such highlighting, a reference region is always highlighted when a menu is first displayed. From that reference region, direction vectors produced by the joy stick are interpreted by the CPU </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> to highlight a region lying in the direction in which the joy stick was moved. When a desired selectable icon is highlighted, the consumer depresses a &ldquo;select&rdquo; key on the remote that sends an infrared signal to an infrared receiver (a support circuit </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT>). This receiver sends the select command to the CPU </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> for interpretation. The selected region is generally associated with a function. If the function is a request for specific information or requires a change in the menu, the CPU </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> formats the command and sends it through the back channel transmitter </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> for transmission to the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>. If the command is a function that is handled locally such as volume control, the CPU </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> implements the function within the terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><PDAT>Since the session control commands are implemented by the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> and not the terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> alone, the number of available session control commands is infinite. Utilization of such distributed computing resources enables the most powerful processing to be centrally located in the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> and the CPU in the terminal </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> can be of relatively limited power. Consequently, all the subscriber terminals </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> that are connected to a service provider head end </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> can rely on the computing power of the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>. For example, the CPU in the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> is a model 68040 processor that is available from Motorola Inc. A particular hardware implementation of the video session manager is described in detail in commonly assigned U.S. patent application Ser. No. 08/984,710, filed Dec. 3, 1997 and hereby incorporated herein by reference.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>Each command menu is implemented by executing an &ldquo;applet&rdquo;, as described below. The applets control both information sessions, e.g., the presentation of video to the television screen, and navigator functions, e.g., the menus that facilitate selection of a video program as well as subscriber on demand services. As such, particular commands include, but are not limited to, information or menu navigation commands, movies start at beginning, movies start at the middle, play, stop, rewind, forward, pause and the like. These presentation and navigation control commands are sent via a back channel transmitter </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> using binary phase shift key (BPSK) modulation. Additionally, the CPU in the subscriber terminal implements certain local commands such as increment or decrement the volume, channel change and on/off.</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>The invention is implemented as one or more interrelated &ldquo;applets&rdquo; which, when taken together form the interactive graphical user interface that facilitates the SOD service of the present invention. The applets are transmitted for the most part, to the terminal via the forward information channel. Certain information used by particular applets is transmitted to the terminal via a data stream propagated through the forward command channel. As such, the data stream carrying the applet is demodulated, the applet extracted and the applet&apos;s information decoded prior to execution that displays a menu on the display device. The detailed process by which an applet is downloaded and used to produce a menu is disclosed in commonly assigned U.S. patent application Ser. No. 08/984,427, filed Dec. 3, 1997 and hereby incorporated herein by reference.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3A</PDAT></FGREF><PDAT>, </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>B and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>C together depict an overall flow diagram of an illustrative implementation of the SOD service </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> as executed on both the video session manager CPU and the subscriber terminal CPU. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3A and 3B</PDAT></FGREF><PDAT> are divided into three columns, namely: a subscriber action column </PDAT><HIL><BOLD><PDAT>302</PDAT></BOLD></HIL><PDAT>, a subscriber equipment process </PDAT><HIL><BOLD><PDAT>304</PDAT></BOLD></HIL><PDAT>, and a service provider equipment process </PDAT><HIL><BOLD><PDAT>306</PDAT></BOLD></HIL><PDAT>. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 4-9</PDAT></FGREF><PDAT> depict various menu screens that a SOD service subscriber or a non-SOD service subscriber (i.e., a consumer) would be presented with while either accessing SOD services or becoming a new subscriber for SOD services. For the following description, it is assumed that the consumer is already a subscriber of general system services (i.e., the consumer has an account number) and now desires to subscribe to additional SOD services or utilize previously subscribed SOD services. To provide a comprehensive understanding of the SOD services, the various menu screens of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 4-9</PDAT></FGREF><PDAT> are referred to as the flow diagram spanning </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3A</PDAT></FGREF><PDAT>, </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>B and </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>C is described below.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>The process begins at step </PDAT><HIL><BOLD><PDAT>308</PDAT></BOLD></HIL><PDAT> and continues to step </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT>. At step </PDAT><HIL><BOLD><PDAT>310</PDAT></BOLD></HIL><PDAT>, the terminal recalls a terminal identification number and a PIN from memory and sends the number to the service provider equipment. As described in commonly assigned U.S. patent application Ser. No. 08/738,343, filed Oct. 29, 1996, to provide security and limit programming access, each terminal of the interactive information distribution system is generally assigned a terminal identification (TID) number or code, each subscriber household account has a defined master personal identification number (master PIN), and each subscriber in a household may have a personal identification number (subaccount PIN). The TID provides security to identify whether a subscriber terminal is permitted access to the system at all, while the master PIN and subaccount PIN define the level of service that a given subscriber is permitted to access. In addition to the TID, a master PIN may be associated with a subset of subaccounts each having an associated PIN. The assignment and utilization of master PIN and subaccount PINs is described in commonly assigned U.S. patent application Ser. No. 08/738,343, filed Oct. 29, 1996 and hereby incorporated herein by reference. In general, the terminal identification number and both the master and the subaccount PINs are used in providing the SOD service of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT>, the video session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> validates the PIN and TID authorization by comparing the transmitted TID and PIN to a PIN and TID stored in the video session manager memory. If the transmitted TID and PIN are not in the memory, the video session manager sends, at step </PDAT><HIL><BOLD><PDAT>314</PDAT></BOLD></HIL><PDAT>, a menu applet that creates a display to inform the subscriber that the PIN or TID is invalid. If the TID and PIN are found to be valid, at step </PDAT><HIL><BOLD><PDAT>316</PDAT></BOLD></HIL><PDAT>, the video session manager sends a menu applet to the terminal that will permit access to additional system programming.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>To facilitate selection of an SOD service, a menu is presented at step </PDAT><HIL><BOLD><PDAT>320</PDAT></BOLD></HIL><PDAT> to the subscriber on their television screen. As illustratively shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, the menu structure may be defined by a grid or list or, in the example shown, a pie-shaped menu </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>. Various services may be selected by highlighting and selecting any one of the &ldquo;pie&rdquo; sections </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT>, or </PDAT><HIL><BOLD><PDAT>408</PDAT></BOLD></HIL><PDAT>. Whenever a menu selection is made, the system downloads an applet corresponding to that section and either launches a new menu that provides further options for the subscriber or displays a selected program (e.g., starts playing a movie).</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>To select SOD services, the user highlights section </PDAT><HIL><BOLD><PDAT>408</PDAT></BOLD></HIL><PDAT> that may be, for example, a children&apos;s program SOD service known as &ldquo;OnSet Kids&rdquo; (OnSet is a trademark of DIVA Corporation of Menlo Park, Calif.). In such a service, a user can subscribe to unlimited access to any of the children&apos;s programs offered under the subscription package &ldquo;OnSet Kids&rdquo;. More generally, the subscription packages may consist of a collection of programs having a common point of interest, e.g., sports, cooking, travel, automotive, educational, children&apos;s programming, home improvement, soap operas, network prime time television broadcasts, music videos, and the like. Subscription packages are alternatively customized by a subscriber at the time of subscription.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>For the illustrative menu example of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, the subscriber is assumed to have selected, at step </PDAT><HIL><BOLD><PDAT>322</PDAT></BOLD></HIL><PDAT>, the SOD service of section </PDAT><HIL><BOLD><PDAT>408</PDAT></BOLD></HIL><PDAT> that is associated with the children&apos;s programming subscription. Once a section is selected, the terminal sends, at step </PDAT><HIL><BOLD><PDAT>324</PDAT></BOLD></HIL><PDAT>, an option request corresponding to the selected menu option to the session manager </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>326</PDAT></BOLD></HIL><PDAT>, the system determines whether the consumer/subscriber has a subscription for the selected service. To determine such subscription service authorization, the account number of the subscriber is compared to a subscription account number database in the network manager. If the subscriber is authorized to access the selected service (the SOD service of option </PDAT><HIL><BOLD><PDAT>408</PDAT></BOLD></HIL><PDAT> in FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>), the process proceeds to point B of FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>B. Alternatively, if authorization for the selected service is not found, the process proceeds to point A of FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>C.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT>, the video session manager sends an applet to the terminal to enable the terminal to produce a category menu at step </PDAT><HIL><BOLD><PDAT>330</PDAT></BOLD></HIL><PDAT>. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> depicts an exemplary category display </PDAT><HIL><BOLD><PDAT>500</PDAT></BOLD></HIL><PDAT> for a children&apos;s program subscription, e.g., OnSet Kids. The depicted menu </PDAT><HIL><BOLD><PDAT>500</PDAT></BOLD></HIL><PDAT> shows a list </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT> of selectable categories. Each category in the list </PDAT><HIL><BOLD><PDAT>502</PDAT></BOLD></HIL><PDAT> represents a particular class of programming, i.e., programming that is related in some way.</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>332</PDAT></BOLD></HIL><PDAT>, the subscriber selects a category within the category menu and, at step </PDAT><HIL><BOLD><PDAT>334</PDAT></BOLD></HIL><PDAT>, the terminal sends a category request to the video session manager. After receiving a category selection in step </PDAT><HIL><BOLD><PDAT>336</PDAT></BOLD></HIL><PDAT>, the video session manager sends an applet for a title menu to the terminal. At step </PDAT><HIL><BOLD><PDAT>338</PDAT></BOLD></HIL><PDAT>, the terminal decodes and executes the applet to display a title menu. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> depicts an exemplary menu list </PDAT><HIL><BOLD><PDAT>600</PDAT></BOLD></HIL><PDAT> having a list of titles that are associated with the selected category, in this case, Sesame Street.</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>When the subscriber selects a title in step </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT>, the title selection, e.g., a program identification (PID), is sent to the video session manager. After receiving a title selection, the video session manager determines, at step </PDAT><HIL><BOLD><PDAT>344</PDAT></BOLD></HIL><PDAT>, the title price. The price of the programming selected from the title menu is determined by the video session manager sending a price request to the network manager. The network manager performs a search of its pricing database and returns a price of either zero or non-zero. A non-zero price is returned, for example, if the subscription is limited to a restricted time window. For example, the OnSet Kids children&apos;s programming subscription service may be limited to viewing from 6 A.M. to 6 P.M. and, the request is being made outside of that time window. As such, any request by a subscriber outside of the window is charged a nominal fee, i.e., the subscriber is provided an &ldquo;a la carte&rdquo; menu as described below with respect to step </PDAT><HIL><BOLD><PDAT>354</PDAT></BOLD></HIL><PDAT>. If the price that is returned to the video session manager is zero dollars (the query of step </PDAT><HIL><BOLD><PDAT>346</PDAT></BOLD></HIL><PDAT> is affirmatively answered), then the video session manager sends, at step </PDAT><HIL><BOLD><PDAT>348</PDAT></BOLD></HIL><PDAT>, an applet for a display of a title information screen. At step </PDAT><HIL><BOLD><PDAT>350</PDAT></BOLD></HIL><PDAT>, the terminal displays a title information screen indicating the viewing price is zero dollars and also provides the subscriber with a start option so that the subscriber may commence viewing of the program. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is an exemplary title information screen </PDAT><HIL><BOLD><PDAT>700</PDAT></BOLD></HIL><PDAT> showing information about the program that was selected as well as providing a start option as shown as button </PDAT><HIL><BOLD><PDAT>702</PDAT></BOLD></HIL><PDAT>. Additionally, a preview clip may be executed and depicted for the user by selecting the icon </PDAT><HIL><BOLD><PDAT>704</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>If, however, the network manager returns a non-zero price to the video session manager, then the video session manager sends, at step </PDAT><HIL><BOLD><PDAT>352</PDAT></BOLD></HIL><PDAT>, an applet for a second type of title information screen. At step </PDAT><HIL><BOLD><PDAT>354</PDAT></BOLD></HIL><PDAT>, the terminal creates a screen informing the subscriber of the reason for the non-zero price and also presents the user with an &ldquo;a la carte&rdquo; purchase option. The subscriber will then be able to purchase and view the a la carte selection or return to a previous menu.</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>If, at step </PDAT><HIL><BOLD><PDAT>326</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3A</PDAT></FGREF><PDAT>, the service provider equipment determines that the consumer does not have an active subscription, e.g., does not have a subscription to the selected subscription package, the process proceeds along path A to step </PDAT><HIL><BOLD><PDAT>358</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>C. At step </PDAT><HIL><BOLD><PDAT>358</PDAT></BOLD></HIL><PDAT>, the video session manager sends an applet for a subscription information screen. The subscription information screen applet is decoded and executed by the terminal at step </PDAT><HIL><BOLD><PDAT>356</PDAT></BOLD></HIL><PDAT> to create a subscription information screen. The subscription information screen describes the subscription offering to the non-subscriber and then presents a sign-up screen through which the user can interactively subscribe for the service period.</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT> depicts an exemplary screen </PDAT><HIL><BOLD><PDAT>800</PDAT></BOLD></HIL><PDAT> for interactively requesting a subscription-on-demand service, i.e., offers the subscriber an option to purchase a subscription. If the subscriber declines (step </PDAT><HIL><BOLD><PDAT>360</PDAT></BOLD></HIL><PDAT>) the subscription offer, the terminal then sends, at step </PDAT><HIL><BOLD><PDAT>362</PDAT></BOLD></HIL><PDAT>, a refusal signal to the session manager. In response to the refusal, the process returns (step </PDAT><HIL><BOLD><PDAT>364</PDAT></BOLD></HIL><PDAT>) to point C prior to step </PDAT><HIL><BOLD><PDAT>316</PDAT></BOLD></HIL><PDAT> in FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>A. If, however, a system subscriber elects to purchase a category subscription, the terminal sends, at step </PDAT><HIL><BOLD><PDAT>366</PDAT></BOLD></HIL><PDAT>, an acceptance signal. In response to the acceptance signal, at step </PDAT><HIL><BOLD><PDAT>368</PDAT></BOLD></HIL><PDAT>, the session manager requests a master PIN as a confirmation of the subscriber&apos;s capability to make a subscription purchase. As such, a person having only a subaccount PIN is not capable of subscribing to a subscription-on-demand service. To facilitate the subscription confirmation, the session manager sends an applet for a master PIN request screen. At step </PDAT><HIL><BOLD><PDAT>370</PDAT></BOLD></HIL><PDAT>, the terminal decodes the applet and displays the master PIN request screen.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 9</PDAT></FGREF><PDAT> depicts an exemplary master PIN confirmation entry screen </PDAT><HIL><BOLD><PDAT>900</PDAT></BOLD></HIL><PDAT>. The screen </PDAT><HIL><BOLD><PDAT>900</PDAT></BOLD></HIL><PDAT> contains a field </PDAT><HIL><BOLD><PDAT>902</PDAT></BOLD></HIL><PDAT> where the subscriber can enter a master PIN. The master PIN is entered at step </PDAT><HIL><BOLD><PDAT>372</PDAT></BOLD></HIL><PDAT> and, at step </PDAT><HIL><BOLD><PDAT>374</PDAT></BOLD></HIL><PDAT>, the master PIN is sent to the session manager. After the master PIN is received, at step </PDAT><HIL><BOLD><PDAT>376</PDAT></BOLD></HIL><PDAT>, the video session manager verifies the master PIN as valid. To verify the validity of the PIN, the video session manager compares the entered PIN to the PIN in its memory. If the master PIN is invalid, the subscriber is given one or more further opportunities to correctly enter the master PIN, then the process proceeds to step </PDAT><HIL><BOLD><PDAT>378</PDAT></BOLD></HIL><PDAT> where the process continues at point C prior to step </PDAT><HIL><BOLD><PDAT>316</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>A. If the PIN is valid, the routine proceeds to step </PDAT><HIL><BOLD><PDAT>380</PDAT></BOLD></HIL><PDAT> where the video session manager updates the subscription database stored in the network manager with the account number of the new subscriber to the selected subscription service. After updating the subscription data base, the routine updates, at step </PDAT><HIL><BOLD><PDAT>382</PDAT></BOLD></HIL><PDAT>, the administrative system such that the interactive information distribution system&apos;s billing system is updated with the new subscriber&apos;s account number. Once subscribed, the process proceeds from step </PDAT><HIL><BOLD><PDAT>382</PDAT></BOLD></HIL><PDAT> to step </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3B</PDAT></FGREF><PDAT> where the system provides the new subscriber an opportunity to utilize the newly subscribed service.</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>The present invention implements subscription-on-demand services by having the computer resources needed for the service to be distributed between the subscriber equipment and the service provider equipment. To implement the service, the terminal need only decode and execute simple applets to produce various interactive displays and send simple information requests. The service provider equipment performs the significant computing for menu generation, security handling, and subscription processing. As such, the terminal can be relatively inexpensive, making the overall system economically feasible.</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>The interactive structure of the inventive subscription-on-demand system enables flexible subscription packages to be created. For example, a hierarchical subscription package structure can be produced that has various levels of access. The following is an illustrative example of a hierarchical package structure for sporting events:</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="2"><PTEXT><PDAT>SPORTS</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="3"><PTEXT><PDAT>FOOTBALL</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="4"><PTEXT><PDAT>COLLEGE</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="4"><PTEXT><PDAT>PRO</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="3"><PTEXT><PDAT>BASKETBALL</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="4"><PTEXT><PDAT>COLLEGE</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="5"><PTEXT><PDAT>MENS</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="5"><PTEXT><PDAT>WOMENS</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="4"><PTEXT><PDAT>PRO</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="5"><PTEXT><PDAT>MENS</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="5"><PTEXT><PDAT>WOMENS</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="3"><PTEXT><PDAT>GOLF</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="3"><PTEXT><PDAT>HOCKEY</PDAT></PTEXT></PARA>
<PARA ID="P-00069" LVL="2"><PTEXT><PDAT>and so on</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="7"><PTEXT><PDAT>Under this hierarchy, a consumer may subscribe to SPORTS and receive access to all sports programming available for a predefined price. However, those that desire only to have access to, for example, men&apos;s professional basketball would subscribe only to that particular programming selection at a predefined price. Such a hierarchical arrangement can be divided into any number of levels, e.g., specific teams, or grouped into various packages, e.g., all professional sports. Additionally, the invention can be expanded to enable consumers to create their own personal SOD service by selecting their favorite programs or program classes for grouping into an SOD package such that a single price can be paid to access all the selected programming over a pre-defined period of time, e.g., a predefined price for accessing the selected programming for a month. As such, dynamically defined subsets of content can be created as the personal SOD packages. The programming is selected through manipulation of interactive menus (generated using menu applets as described above) and the program identification codes (PIDs) for the selected programming are stored in the subscription database with the consumer&apos;s account number (and/or PIN or TID, if needed). As such, the subscriber can access their personal SOD service at any time and without further payment. At the end of the period, the service would be renewable such that the subscriber would not have to reenter the selection at the end of each period.</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="0"><PTEXT><PDAT>Although various embodiments which incorporate the teachings of the present invention have been shown and described in detail herein those skilled in the arts can readily devise many other varied embodiments that still incorporate these teachings.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>1. In an interactive information distribution system containing service provider equipment and subscriber equipment that is interconnected by a communications network, a method of providing a subscription-on-demand service for an interactive information distribution system comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>packaging a number of video-on-demand programs that are accessible for immediate viewing by a subscriber into programming packages; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>enabling said subscriber to define video-on-demand program content in said program packages via the interactive information distribution system by communicating through the communications network to the service provider equipment; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>enabling a subscriber to access and view any video-on-demand program within a subscribed programming package anytime, on an on-demand basis. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00073" LVL="0"><PTEXT><PDAT>2. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> further comprising the step of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>enabling a consumer to select a programming package and subscribe to the selected programming package for a predefined price and thereby become said subscriber. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00074" LVL="0"><PTEXT><PDAT>3. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein a subscriber is limited to on-demand access to on-demand programs within the subscribed programming package only during predefined time periods without incurring an additional fee.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00075" LVL="0"><PTEXT><PDAT>4. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein the programming packages are arranged in an hierarchical format having subsets of programming packages within a programming package to enable a viewer to subscribe to a programming package subset, without subscribing to an entire programming package.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>5. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein a consumer selects a programming package and subscribes thereto by manipulating a graphical user interface.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00077" LVL="0"><PTEXT><PDAT>6. In an interactive information distribution system containing service provider equipment and subscriber equipment that is interconnected by a communications network, a method of providing a subscription-on-demand service for video-on-demand programs in an interactive information distribution system comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>sending from said service provider equipment to said subscriber equipment a first menu applet; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>decoding and executing said first menu applet within said subscriber equipment to display a first interactive graphical user interface; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>selecting, through manipulation of the first interactive graphical user interface, a video-on-demand subscription option; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>sending a selection signal indicative of said selected video-on-demand subscription option from said subscriber equipment to said service provider equipment; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining, within said service provider equipment, if the subscriber is a current subscriber to said video-on-demand subscription option identified by said selection signal; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>if the subscriber is said current subscriber, sending a second menu applet from said service provider equipment to said subscriber equipment; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>decoding and executing said second menu applet within said subscriber equipment to display a second interactive user interface through which the subscriber can select a video-on-demand program for viewing; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>if said subscriber is not said current subscriber, sending a third menu applet from said subscriber equipment to said service provider equipment; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>decoding and executing said third menu applet within said subscriber equipment to display a third interactive user interface through which the subscriber can become a current subscriber to the selected video-on-demand subscription option, wherein said menu applets are sent from said service provider equipment in response to a selection by said subscriber. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>7. The method of claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> wherein second menu applet is connected to other menu applets that provide interactive displays of categories of services, titles of programs available in each category, and program pricing for each tile.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>8. The method of claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> further comprising the step of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>if a new subscription is created, updating a subscription database within said service provider equipment to identify the subscriber as a subscriber to the selected service. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>9. The method of claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> further comprising the step of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>if a subscriber requests a new subscription, sending a fourth menu applet from said service provider equipment and decoding and executing said fourth menu applet within said subscriber equipment to display a menu that requests a personal identification number for said subscriber. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>10. The method of claim </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT> wherein said personal identification number is a master personal identification number.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>11. The method of claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> wherein the subscriber selects programming for a personal subscription-on-demand service and a personal subscription-on-demand option is included in said display produced from said first menu applet.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>12. The method of claim </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> wherein said subscription-on-demand services for video-on-demand programs are arranged in a hierarchical structure.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>13. Apparatus for providing subscription-on-demand services for video-on-demand within an interactive information distribution system comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>service provider equipment containing an information server and a video session manager; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>subscriber equipment containing a subscriber terminal and a display unit, where the service provider equipment is connected to the subscriber equipment by a communications network; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>said video session manager sends a plurality of executable menu applets to said subscriber terminal, said terminal executes each of said menu applets to generate interactive graphical user interface displays through which a subscriber selects a video-on-demand service; the subscriber terminal sends a service request to said session manager for processing; if the subscriber is said current subscriber of the selected service, the subscriber can select a video-on-demand subscription program for viewing; if said subscriber is not said current subscriber, the subscriber can become a subscriber to the selected video-on-demand service. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>14. The apparatus of claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> wherein the subscriber terminal decodes and executes the applets that are sent by the session manager to produce said interactive graphical user interface displays and sends to the video session manager selection signals indicative of a selected option within said interactive graphical user interface displays.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>15. The apparatus of claim </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> wherein said video session manager, to provide security and system administration, accesses a personal identification database, a terminal identification database, and a subscriber database that are contained in a network manager.</PDAT></PTEXT></PARA>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314573-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314573-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314573-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314573-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314573-20011106-D00004.TIF">
<EMI ID="EMI-D00005" FILE="US06314573-20011106-D00005.TIF">
<EMI ID="EMI-D00006" FILE="US06314573-20011106-D00006.TIF">
<EMI ID="EMI-D00007" FILE="US06314573-20011106-D00007.TIF">
<EMI ID="EMI-D00008" FILE="US06314573-20011106-D00008.TIF">
<EMI ID="EMI-D00009" FILE="US06314573-20011106-D00009.TIF">
<EMI ID="EMI-D00010" FILE="US06314573-20011106-D00010.TIF">
<EMI ID="EMI-D00011" FILE="US06314573-20011106-D00011.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314574-20011106-P00900.TIF SYSTEM "US06314574-20011106-P00900.TIF" NDATA TIF>
<!ENTITY US06314574-20011106-P00901.TIF SYSTEM "US06314574-20011106-P00901.TIF" NDATA TIF>
<!ENTITY US06314574-20011106-D00000.TIF SYSTEM "US06314574-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314574-20011106-D00001.TIF SYSTEM "US06314574-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314574-20011106-D00002.TIF SYSTEM "US06314574-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314574-20011106-D00003.TIF SYSTEM "US06314574-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314574-20011106-D00004.TIF SYSTEM "US06314574-20011106-D00004.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314574</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>09188157</PDAT></DNUM></B210>
<B211US><PDAT>09</PDAT></B211US>
<B220><DATE><PDAT>19981108</PDAT></DATE></B220>
</B200>
<B400>
<B472>
<B473US>
</B472>
</B400>
<B500>
<B510>
<B511><PDAT>H04H  100</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>725 66</PDAT></B521>
<B522><PDAT>725110</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Information distribution system</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>3824597</PDAT></DNUM>
<DATE><PDAT>19740700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Berg</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>3967202</PDAT></DNUM>
<DATE><PDAT>19760600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Batz</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4081832</PDAT></DNUM>
<DATE><PDAT>19780300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Sherman</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4191860</PDAT></DNUM>
<DATE><PDAT>19800300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Weber</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4307416</PDAT></DNUM>
<DATE><PDAT>19811200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Spano</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4563702</PDAT></DNUM>
<DATE><PDAT>19860100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Heller</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4635113</PDAT></DNUM>
<DATE><PDAT>19870100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Okada et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4734858</PDAT></DNUM>
<DATE><PDAT>19880300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Sclafy</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>364408</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4742544</PDAT></DNUM>
<DATE><PDAT>19880500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Kupnicki et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>380 14</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4827508</PDAT></DNUM>
<DATE><PDAT>19890500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Shear</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4965825</PDAT></DNUM>
<DATE><PDAT>19901000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Harvey et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5010571</PDAT></DNUM>
<DATE><PDAT>19910400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Katznelson</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5128981</PDAT></DNUM>
<DATE><PDAT>19920700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Tsukamoto et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>379 58</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5132680</PDAT></DNUM>
<DATE><PDAT>19920700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Tezuka et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>34082508</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5185794</PDAT></DNUM>
<DATE><PDAT>19930200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Thompson et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>380 17</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5208671</PDAT></DNUM>
<DATE><PDAT>19930500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Tarrant</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>358147</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5208857</PDAT></DNUM>
<DATE><PDAT>19930500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Lebrat</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>380 14</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5237411</PDAT></DNUM>
<DATE><PDAT>19930800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Fink et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>358146</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5239540</PDAT></DNUM>
<DATE><PDAT>19930800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Rovira et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>370 77</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5247347</PDAT></DNUM>
<DATE><PDAT>19930900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Litteral et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5247575</PDAT></DNUM>
<DATE><PDAT>19930900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Sprague et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5319707</PDAT></DNUM>
<DATE><PDAT>19940600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Wasilewski et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>380 14</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5321748</PDAT></DNUM>
<DATE><PDAT>19940600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Zeidler et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>380 14</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5321750</PDAT></DNUM>
<DATE><PDAT>19940600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Nadan</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>380 20</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5323148</PDAT></DNUM>
<DATE><PDAT>19940600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Olazabal et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>34082544</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5327174</PDAT></DNUM>
<DATE><PDAT>19940700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Kim</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348468</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5335275</PDAT></DNUM>
<DATE><PDAT>19940800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Millar et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>380  4</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5335278</PDAT></DNUM>
<DATE><PDAT>19940800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Matchett et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>380 23</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5343494</PDAT></DNUM>
<DATE><PDAT>19940800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Averst et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>375  1</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5361399</PDAT></DNUM>
<DATE><PDAT>19941100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Linquist et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>455561</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5377266</PDAT></DNUM>
<DATE><PDAT>19941200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Katta et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>380 20</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5388101</PDAT></DNUM>
<DATE><PDAT>19950200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Dinkins</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>370 951</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5392023</PDAT></DNUM>
<DATE><PDAT>19950200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>D&apos;Avello et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>379100</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5392353</PDAT></DNUM>
<DATE><PDAT>19950200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Morales</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>380 20</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5432798</PDAT></DNUM>
<DATE><PDAT>19950700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Blair</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>371 32</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5444769</PDAT></DNUM>
<DATE><PDAT>19950800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Koen et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>379 94</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5452356</PDAT></DNUM>
<DATE><PDAT>19950900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Albert</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>380  9</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5539449</PDAT></DNUM>
<DATE><PDAT>19960700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Blahut et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  7</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5629867</PDAT></DNUM>
<DATE><PDAT>19970500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Goldman</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>364514</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5887243</PDAT></DNUM>
<DATE><PDAT>19990300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Harvey et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>455  31</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5995725</PDAT></DNUM>
<DATE><PDAT>19991100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Dillon</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>39520033</PDAT></PNC></PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6021307</PDAT></DNUM>
<DATE><PDAT>20000200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Chan</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>455  31</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>6188869</PDAT></DNUM>
<DATE><PDAT>20010200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Chan</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>455  31</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B562><NCIT><STEXT><PDAT>David Raggett, HTML&plus;(Hypertext Markup Language), pp. 1-31, Jul. 12, 1993, WWW Discussion Group Request for Comments. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>John P. Hayes, &ldquo;Computer Architecture and Organization&rdquo;, pp. 398-421, Jan. 1988. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Yoshiko Hara, &ldquo;Consortium Eyes Satellite-Based-E-Book System&rdquo;, Electronic Engineering Times, Oct., 1998. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>S. Deering, &ldquo;Host Extensions for IP Multicasting&rdquo;, pp. 1-17, Aug. 1989, Network Working Group, Request for Comments: 1112. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Cricket Liu, et al., &ldquo;Managing Internet Information Services&rdquo;, pp. 279-298, Dec., 1994, O&apos;Reilly &amp; Associates, Inc.</PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
</B560>
<B570>
<B577><PDAT>51</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>455  31</PDAT></B582>
<B582><PDAT>725 66</PDAT></B582>
<B582><PDAT>725110</PDAT></B582>
</B580>
<B590><B595><PDAT>4</PDAT></B595><B596><PDAT>5</PDAT></B596><B597US>
</B590>
</B500>
<B600>
<B630><B632><PARENT-US><CDOC><DOC><DNUM><PDAT>09/188157</PDAT></DNUM></DOC></CDOC><PDOC><DOC><DNUM><PDAT>08/939368</PDAT></DNUM><DATE><PDAT>19970929</PDAT></DATE><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>00</PDAT></KIND></DOC></PDOC><PSTA><PDAT>01</PDAT></PSTA><PPUB><DOC><DNUM><PDAT>6021307</PDAT></DNUM><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>A </PDAT></KIND></DOC></PPUB></PARENT-US></B632></B630>
<B630><B631><PARENT-US><CDOC><DOC><DNUM><PDAT>08/939368</PDAT></DNUM></DOC></CDOC><PDOC><DOC><DNUM><PDAT>08/644838</PDAT></DNUM><DATE><PDAT>19960510</PDAT></DATE><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>00</PDAT></KIND></DOC></PDOC><PSTA><PDAT>03</PDAT></PSTA></PARENT-US></B631></B630>
<B630><B631><PARENT-US><CDOC><DOC><DNUM><PDAT>08/644838</PDAT></DNUM></DOC></CDOC><PDOC><DOC><DNUM><PDAT>08/279424</PDAT></DNUM><DATE><PDAT>19940725</PDAT></DATE><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>00</PDAT></KIND></DOC></PDOC><PSTA><PDAT>03</PDAT></PSTA></PARENT-US></B631></B630>
<B630><B632><PARENT-US><CDOC><DOC><DNUM><PDAT>08/279424</PDAT></DNUM></DOC></CDOC><PDOC><DOC><DNUM><PDAT>08/255649</PDAT></DNUM><DATE><PDAT>19940608</PDAT></DATE><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>00</PDAT></KIND></DOC></PDOC><PSTA><PDAT>03</PDAT></PSTA></PARENT-US></B632></B630>
</B600>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Hark</PDAT></FNM><SNM><STEXT><PDAT>Chan</PDAT></STEXT></SNM></NAM>
<ADR>
<STR><PDAT>861 Brent Dr.</PDAT></STR>
<CITY><PDAT>Cupertino</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
<PCODE><PDAT>95014</PDAT></PCODE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>William</PDAT></FNM><SNM><STEXT><PDAT>Cumming</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B748US><PDAT>2684</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>An information distribution system encodes a first set of digital data on a plurality of portable read-only storage devices. Additional information is stored in a database that is accessible by using a bi-directional channel. The first set of digital data contains a plurality of special displayable terms, a first non-displayable symbol, a plurality of linkage references, and a second non-displayable symbol. A user can select at least one special displayable term. The linking reference associated with the selected special displayable term is sent to the database via the bi-directional channel. The database uses the linking reference to search for information, and returns the resulting information to the user.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<RELAPP>
<BTEXT>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>This application is a continuation in part of application Ser. No. 08/939,368 filed Sep. 29, 1997, now U.S. Pat. No. 6,021,307, which is a continuation in part of application Ser. No. 08/644,838 filed May 10, 1996, now abandoned, which is a continuation in part of application Ser. No. 08/279,424 filed Jul. 25, 1994, now abandoned, and application Ser. No. 08/255,649 filed Jun. 8, 1994, now abandoned. These four patent applications are incorporated herein by reference.</PDAT></PTEXT></PARA>
</BTEXT>
</RELAPP>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>FIELD OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>This invention relates generally to information distribution, and more particularly to distributing information using a broadcast channel and a bi-directional communication channel.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>Recent advancements in modem and computer technology allow large amount of digital data to be transmitted electronically. A number of information providers (such as newspaper and magazine publishers) and on-line information distributors have formed partnerships to deliver newspaper and other information on-line. In this system, a subscriber uses a computer and a modem to connect, through a regular phone line, to the computer of an on-line information provider. The subscriber can retrieve information, including newspaper articles, stored in the computer of the information provider.</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>On-line delivery of newspaper has many advantages. For example, the information can be updated throughout the day while the printed version is printed only once or twice a day. Further, it is possible to do text-based searches on the information. However, it is found that on-line deliver of newspaper and other information is slow. For example, a subscriber has to wait many seconds for a newspaper article to be delivered. The quality of the electronic newspaper is low. For example, in order to reduce storage and communication requirements, graphic images appeared in the printed version are not universally supplied in the on-line version of newspaper. One of the reasons for such poor performance is the limited bandwidth of communication channels used by on-line information distributors. Another reason is that information is centrally processed by the computer at the site of the information distributor, with the result that each subscriber only gets a small slice of the time of the computer.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>The present invention uses two channels to deliver digital information: a broadcast channel and a bidirectional channel. The broadcast channel is used to deliver the bulb of the digital information to subscribers. The amount of information delivered is preferably sufficient to satisfy the needs of a large number of subscribers so that they do not have to obtain additional information using the bi-directional channel. The broadcasted information is stored on fast storage media located at subscriber sites. As a result, search and retrieval of the broadcasted information is quick. Further, the broadcasted information is processed locally using a dedicated on-site processor instead of relying on the computers of the information distributors. As a result, the load on the computers of the information distributors is reduced. If the subscribers desire to receive additional information relating to the broadcasted information, the bi-directional communication channel is used to transmit the request and the requested information.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>The distribution costs of broadcast channels are typically much lower than that of a bi-directional communication channel. Consequently, the major portion of information is delivered using low cost distribution channels. For a large number of subscribers, the broadcasted information will provide all the information they normally need. Thus, expensive bi-directional communication channels are used only occasionally.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>These and other features and advantages of the present invention will be fully understood by referring to the following detailed description in conjunction with the accompanying drawings.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00009" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a schematic drawing showing an information distribution system of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2A</PDAT></FGREF><PDAT> shows a newspaper article as displayed on a monitor of the information distribution system shown in FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2B</PDAT></FGREF><PDAT> shows the contents of the broadcast information that corresponds to the newspaper article of FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>A.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> shows another embodiment of the information distribution system of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> is a schematic drawing showing another information distribution system of the present invention.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00014" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a block diagram of an information distribution system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> in accordance with the present invention. In this embodiment, system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> is designed to electronically distribute newspaper. It should be pointed out that system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> can also be used advantageously to distribute other types of information. System </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> contains a plurality of subscriber units (such as units </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>) each connected to a bi-directional communication channel (e.g., telephone connections </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> coupled to units </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>, respectively) and a satellite transponder </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> for broadcasting digital data to these subscriber units. Telephone connections </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> (which could be line-based or wireless) are coupled to a central database </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>. In system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, satellite transponder </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> is used to broadcast the content of a newspaper to the subscriber units while telephone connections </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> are used to provide additional information (stored in central database </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>) to subscriber units </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>, respectively, on a demand basis.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>The structures of these subscriber units are substantially identical; consequently, only one of these units, such as unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT>, is described in detail. Unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> contains an antenna </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> for receiving broadcast signals from satellite transponder </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, a signal/data processor </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT> for performing signal and data processing functions, a monitor </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> for displaying the electronic newspaper, and an input device </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> (such as a keyboard and/or a mouse).</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>Signal/data processor </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT> contains a transponder interface </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT> for processing transponder signal received from antenna </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT>. Transponder interface </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT> typically contains a low noise receiver for receiving high frequency (e.g., C or Ku band) transponder signal and a &ldquo;universal data interface&rdquo; for converting the transponder signal to digital data. The retrieved data is stored in nonvolatile storage </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT>, such as a hard disk or solid state flash memory. Preferably, satellite transponder </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> broadcasts the newspaper data at predetermined times. Thus, a real-time clock </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT> is preferably used to turn on interface </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT> at the predetermined times. Processor </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT> contains a microcomputer </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> that coordinates the operation of clock </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT>, nonvolatile storage </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT>, and interface </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT>. Processor </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT> also contains a communication interface </PDAT><HIL><BOLD><PDAT>142</PDAT></BOLD></HIL><PDAT> for sending and receiving digital data from central database </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> through telephone connection </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>The time for broadcast is preferably chosen when communication load of transponder </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> is at a low level (e.g., around mid-night). As a result, the cost of information delivery is low. Alternatively, the time of broadcasting is chosen by transponder </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> because it knows when communication load is light. In this case, transponder </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> first sends a signal to signal/data processor </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT> for alerting processor </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT> to receive and process the newspaper information.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>A user can use the input device </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> and monitor </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> to read the content of the electronic newspaper stored in nonvolatile storage </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT>. In this embodiment, the complete content of the newspaper is stored in nonvolatile storage </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT>. The term &ldquo;complete content&rdquo; means that the user is able to read the newspaper without relying on information stored in central database </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> (although other embodiments may deliver less than the complete content). In this aspect, system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> functions in a similar way as the distribution of a conventional printed newspaper. However, the digital data of the electronic newspaper delivered by satellite transponder </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> preferably contains linkage reference that allows fast retrieval of additional information from central database </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><PDAT>If the newspaper information received from satellite transponder </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> is sufficient to satisfy the needs of a user, signal/data processor </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT> will not activate telephone connection </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>. However, if the user wishes to receive additional information relating to an item mentioned in the electronic newspaper (e.g., by selecting at the item using the input device), process </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT> will retrieve the information stored in central database </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> using the embedded linkage reference.</PDAT></PTEXT></PARA>
<PARA ID="P-00020" LVL="0"><PTEXT><PDAT>In system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> of the present invention, the complete content of the electronic newspaper (including graphics and other multimedia contents, if delivered) is stored in nonvolatile storage </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT>, which has fast access time. Further, a dedicated processor (i.e., microcomputer </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT>) is used to process newspaper information. On the other hand, prior art on-line newspaper distribution systems rely on modem to deliver the content of the newspaper stored in a central site. Further, the processor in the central site has to serve many users in delivering the newspaper. As a result, system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> has superior performance compared to the prior art on-line newspaper delivery systems.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><PDAT>If it is desirable to limit circulation of the newspaper to a certain class of subscribers only (e.g., paid subscribers), the data transmitted by transponder </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> could be encrypted. As a result, only subscribers who have a decryption key are able to read the newspaper. In the case, microcomputer </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> also performs decryption functions.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2A</PDAT></FGREF><PDAT> shows an example of a portion of a newspaper article as seen on monitor </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT>. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2A</PDAT></FGREF><PDAT>, the terms that a user may obtain additional information are underlined (or highlighted in other ways, such as setting in different colors, depending on the choice of the publisher). If desired, the user may select these terms using a pointing device, such as a mouse, and signal/data processor </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT> will obtain the additional information from central database </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2B</PDAT></FGREF><PDAT> shows the same portion in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2A</PDAT></FGREF><PDAT> as transmitted by transponder </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> (for simplicity, the embedded formatting codes, such as center, bold, etc., are not shown). Each of the terms underlined in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2A</PDAT></FGREF><PDAT> are enclosed by a special symbol (e.g., the &ldquo;<CUSTOM-CHARACTER FILE="US06314574-20011106-P00900.TIF" ID="CUSTOM-CHARACTER-00001">&rdquo; symbol) and followed by a linkage reference enclosed by another special symbol (e.g., the &ldquo;<CUSTOM-CHARACTER FILE="US06314574-20011106-P00901.TIF" ID="CUSTOM-CHARACTER-00002">&rdquo; symbol). These symbols are invisible to the users and are recognizable only by microcomputer </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><PDAT>When an underlined term in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2A</PDAT></FGREF><PDAT> is selected by a user, microcomputer </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> extracts the linkage reference and transmits it to central database </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>. The linkage reference allows central database </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> to retrieve the necessary information quickly without doing extensive searches. As a result, the response time of system </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> is fast. The retrieved information can itself contains linkage references and can be searched.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><PDAT>If the speed of searching and retrieving data by central database </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> is fast, it may not be necessary to include linkage reference in the information broadcasted by transponder </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>. In this case, the user selects (e.g., using the mouse) words and terms he/she is interested in. Signal/data processor </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT> transmits the selected items to central database </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT>, which searches for matches in its database. Matched information is sent to subscriber unit </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> for processing.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><PDAT>The bi-directional channel also allows updating of the broadcasted information. There is typically a time difference between the broadcast and display of information. New information gathered during this time difference can be stored in central database </PDAT><HIL><BOLD><PDAT>109</PDAT></BOLD></HIL><PDAT> and later transmitted to signal/data processor </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>In this embodiment of the present invention, satellite transponder </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> is used as the vehicle to electronically broadcast newspaper. However, other broadcast distribution methods can be used. In the present invention, broadcast is defined as one-to-many distribution of information. The broadcast distribution channels do not have to be electrical. For example, the present invention allows the distribution of compact disc read-only memories (CDROMs) encoded with digital information to the subscriber sites. In the case of electrical broadcast communication channels, both wired and wireless can be used. Preferably, unidirectional channels are used for broadcast because of their low cost; however, the present invention does not preclude the use of bidirectional communication channels (such as telephone lines) as means for distributing broadcast (i.e., one to many) information.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> is a schematic diagram of another information distribution system of the present invention. Similar elements in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 1 and 4</PDAT></FGREF><PDAT> have the same reference numerals. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, a plurality of CDs (such as CDs </PDAT><HIL><BOLD><PDAT>152</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>154</PDAT></BOLD></HIL><PDAT>) encoded with the above described information are distributed to subscriber units </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>. Instead of antennas and transponder interfaces, subscriber units </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> contains CD readers (such as CD reader </PDAT><HIL><BOLD><PDAT>156</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><PDAT>Current technology allows the size of antenna </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> to be as small as 2 feet. The costs of antenna </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> and transponder interface </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT> are already low enough to be within the reach of small business or a typical household. The newspaper publisher has to pay for the use of the transponder. However, the costs are comparable to the printing and distribution costs of printed newspaper. It is anticipated that the costs of the newspaper distribution system in accordance with the present invention will be lowered as the number of subscribers increases.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> shows another embodiment of a newspaper distribution system </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> of the present invention. System </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> contains a satellite transponder </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>, an earth station </PDAT><HIL><BOLD><PDAT>214</PDAT></BOLD></HIL><PDAT>, and a plurality of subscriber units, such as units </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT>. Transponder </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> functions in a similar way as transponder </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> and subscriber units </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT> function in a similar way as subscriber units </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>. Earth station </PDAT><HIL><BOLD><PDAT>214</PDAT></BOLD></HIL><PDAT> receives digital data transmitted by transponder </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> using an antenna </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT>. The data is distributed to subscriber units </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT> via wired communication channel </PDAT><HIL><BOLD><PDAT>228</PDAT></BOLD></HIL><PDAT>, such as cable and optic fiber. Other earth stations could be placed in strategic locations throughout the country to serve their respective subscribers in a similar manner as earth station </PDAT><HIL><BOLD><PDAT>214</PDAT></BOLD></HIL><PDAT> and subscriber units </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT>. As a result, a large geographic area can be served simultaneously by satellite transponder </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT>. The advantage of this embodiment is that the equipment costs incurred by the subscriber units are low.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><PDAT>In some locations, it may not be desirable to use wired communication channel to link an earth station to subscribers. In such case, wireless communication channel could be used. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> shows an earth station </PDAT><HIL><BOLD><PDAT>234</PDAT></BOLD></HIL><PDAT> that receives transponder signal from transponder </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> using an antenna </PDAT><HIL><BOLD><PDAT>236</PDAT></BOLD></HIL><PDAT>. Earth station </PDAT><HIL><BOLD><PDAT>234</PDAT></BOLD></HIL><PDAT> in turn broadcasts the digital data to its subscribers, such as subscriber units </PDAT><HIL><BOLD><PDAT>242</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>244</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>In one embodiment of system </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, teletext technology is used to link earth station </PDAT><HIL><BOLD><PDAT>234</PDAT></BOLD></HIL><PDAT> and subscriber units </PDAT><HIL><BOLD><PDAT>242</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>244</PDAT></BOLD></HIL><PDAT>. Thus, earth station </PDAT><HIL><BOLD><PDAT>234</PDAT></BOLD></HIL><PDAT> could be located adjacent to a television transmission station. The digital data received by earth station </PDAT><HIL><BOLD><PDAT>234</PDAT></BOLD></HIL><PDAT> can be integrated to the vertical blanking interval of a TV signal, which is broadcasted using an antenna </PDAT><HIL><BOLD><PDAT>238</PDAT></BOLD></HIL><PDAT>. Subscriber units </PDAT><HIL><BOLD><PDAT>242</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>244</PDAT></BOLD></HIL><PDAT> receive the signal using antennas </PDAT><HIL><BOLD><PDAT>239</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>240</PDAT></BOLD></HIL><PDAT>, respectively. The digital data is then retrieved. Various improvements and refinements of the teletext technology are well known and can be incorporated into system </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>It should be obvious to a person skilled in the art that systems </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> are not limited to the distribution of newspaper. Further, electronic newspapers of the future may contains contents which are not available in the printed version, such as video and other multimedia compositions. Other information, such as magazines, graphic images, electronic mails, computer games, multimedia work, or interactive movie, could also be advantageously distribution using a system similar to systems </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>. For example, if it is desirable to distribute interactive movie, the non-interactive portion can be broadcasted while the interactive portion is delivered using a bi-directional channel.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><PDAT>There has thus shown and described a novel information distribution system. Many changes, modifications, variations and other uses and applications of the subject invention will become apparent to those skilled in the art after considering this specification and the accompanying drawings. All such changes, modifications, variations, uses, and applications are covered by the scope of this invention which is limited only by the appended claims.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>I claim: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00035" LVL="0"><PTEXT><PDAT>1. A method for distributing digital data to a plurality of remote sites each having a processing device and a display device, comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>generating a first set of digital data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>encoding each of a plurality of portable read-only storage devices with said first set of digital data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>distributing said plurality of storage devices to said plurality of remote sites; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>providing a database containing a second set of digital data and remotely communicating with said sites using communication channels; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>said first set of digital data comprising a first set of displayable data, a plurality of formatting codes, a second set of displayable data, a first non-displayable data, a non-displayable first linkage reference, and a second non-displayable data, said second set of displayable data being highlighted when displayed by said display device, said first non-displayable data being used by said processing device for recognizing said second set of displayable data, said second non-displayable data being used by said processing device for recognizing said first linkage reference, said first linkage reference being used for retrieving a portion of said second set of digital data, and said second set of displayable data being associated with said first linkage reference; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving said first linkage references transmitted by at least one of said sites using said communication channels; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>searching, by said database, for said portion of said second set of digital data referenced by said first linkage reference when said second set of displayable digital data is selected by a user in said at least one of said sites; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>sending, by said database, said portion to said at least one of said remote sites via said communication channels. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00036" LVL="0"><PTEXT><PDAT>2. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said first set of digital data is encrypted.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00037" LVL="0"><PTEXT><PDAT>3. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said storage devices are CDROMs.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>4. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said storage devices are optically encoded storage devices.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>5. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said database contains a third set of digital data, wherein said second set of digital data comprises a second linkage reference associated with said third set of digital data, said method further comprising a step of searching said database in response to said second linkage reference.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>6. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> further comprising the step of periodically updating parts of said second set of digital data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>7. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said second set of displayable data is enclosed between a pair of said first non-displayable data and said first linkage reference is enclosed between a pair of said second non-displayable data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>8. An information distribution system for distributing digital data to be displayed in a plurality of remote sites each having a processing device and a display device, comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a plurality of portable read-only storage devices each encoded with a first set of digital data, said storage devices being distributed to said plurality of remote sites; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a database containing a second set of digital data and remotely communicating with said sites using communication channels; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>said first set of digital data comprising a first set of displayable data, a plurality of formatting codes, a second set of displayable data, a first non-displayable data, a non-displayable first linkage reference, and a second non-displayable data, said second set of displayable data being highlighted when displayed by said display device, said first non-displayable data being used by said processing device for recognizing said second set of displayable data, said second non-displayable data being used by said processing device for recognizing said first linkage reference, said first linkage reference being used for retrieving a portion of said second set of digital data, and said second set of displayable data being associated with said first linkage reference; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>said database receiving said first linkage reference delivered by at least one of said remote sites; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>means in said database for searching said portion of said second set of digital data referenced by said first linkage reference and for sending said portion to said at least one remote sites via at least one of said communication channels. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>9. The system of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> wherein said storage devices are CDROMs.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>10. The system of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> wherein said read-only storage devices are optically encoded storage devices.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>11. The system of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> wherein said database contains a third set of digital data, wherein said second set of digital data comprises a second linkage reference associated with said third set of digital data, and wherein said means for searching further searches said database in response to said second linkage reference.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>12. The system of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> further comprising means for periodically updating parts of said second set of digital data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>13. The system of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> wherein said second set of displayable data is enclosed between a pair of said first non-displayable data and said first linkage reference is enclosed between a pair of said second non-displayable data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>14. The system of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> wherein said first set of digital data is encrypted.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>15. A plurality of portable read-only storage devices distributed to a plurality of remote sites, each of said plurality of remote sites having a processing device and a display device, each of said plurality of remote sites further connected via a bi-directional channel to a database containing a first set of digital data; each of said storage devices comprising a second set of digital data having a plurality of regular displayable items, a plurality of formatting codes, a plurality of special displayable terms, a first non-displayable symbol, a plurality of linkage references, and a second non-displayable symbol, said special displayable terms being highlighted when displayed by said display device, said first non-displayable symbol being used by said processing device for recognizing said displayable terms, said second non-displayable symbol being used by said processing device for recognizing said plurality of linkage references, each of said plurality of linkage references being used for retrieving a portion of said first set of digital data, and each of said plurality of special displayable terms being associated with one of said plurality of linkage references.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>16. The storage devices of claim </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT> wherein each of said plurality of special displayable terms are enclosed between a pair of said first non-displayable symbol and each of said plurality of linkage references are enclosed between a pair of said second non-displayable symbol.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00017">
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>17. A method for distributing digital data via communication channels to a plurality of remote sites each having a processing device, a nonvolatile memory, and a display device, comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>generating a first set of digital data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>encoding each of a plurality of portable read-only storage devices with said first set of digital data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>distributing said plurality of storage devices to said plurality of remote sites; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>providing a database containing a second set of digital data, said database accessible by said plurality of remote sites via said communication channels; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>said first set of digital data comprising a set of displayable data and a first linkage reference associated with said set of displayable data, said set of displayable data transferable to said nonvolatile memory and displayable on said display device, said first linkage reference transferable to said nonvolatile memory but not displayable on said display device, said first linkage reference being transmitted to said database via said communication channels when said set of displayable data is selected by a user in at least one of said plurality of sites; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>accepting by said database said first linkage reference originated from said at least one of said plurality of sites; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>searching, by said database, for a portion of said second set of digital data referenced by said first linkage reference; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>sending, by said database, said portion to said at least one of said plurality of sites via said communication channels. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00018">
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>18. The method of claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT> wherein said first set of digital data is encrypted.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00019">
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>19. The method of claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT> wherein said storage devices are CDROMs.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00020">
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>20. The method of claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT> wherein said storage devices are optically encoded storage devices.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00021">
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>21. The method of claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT> wherein said database contains a third set of digital data, wherein said second set of digital data comprises a second linkage reference associated with said third set of digital data, said method further comprising a step of searching said database in response to said second linkage reference.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00022">
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>22. The method of claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT> further comprising the step of periodically updating parts of said second set of digital data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00023">
<PARA ID="P-00057" LVL="0"><PTEXT><PDAT>23. The method of claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT> wherein said first linkage reference is enclosed between a pair of non-displayable data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00024">
<PARA ID="P-00058" LVL="0"><PTEXT><PDAT>24. An information distribution system for distributing digital data via communication channels to a plurality of remote sites each having a processing device, a nonvolatile memory, and a display device, comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a plurality of portable read-only storage devices each encoded with a first set of digital data, said storage devices being distributed to said plurality of remote sites; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a database containing a second set of digital data and remotely communicating with said sites using said communication channels; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>said first set of digital data comprising a set of displayable data and a first linkage reference associated with said set of displayable data, said set of displayable data transferable to said nonvolatile memory and displayable on said display device, said first linkage reference transferable to said nonvolatile memory but not displayable on said display device, said first linkage reference being transmitted to said database via said communication channels when said set of displayable data is selected by a user; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>said database receiving said first linkage reference delivered by at least one of said plurality of sites; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>means in said database for searching for a portion of said second set of digital data referenced by said first linkage reference and for sending said portion to said at least one site via said communication channels. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00025">
<PARA ID="P-00059" LVL="0"><PTEXT><PDAT>25. The system of claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> wherein said storage devices are CDROMs.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00026">
<PARA ID="P-00060" LVL="0"><PTEXT><PDAT>26. The system of claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> wherein said read-only storage devices are optically encoded storage devices.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00027">
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>27. The method of claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> wherein said database contains a third set of digital data, wherein said second set of digital data comprises a second linkage reference associated with said third set of digital data, said wherein said means for searching further searches said database in response to said second linkage reference.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00028">
<PARA ID="P-00062" LVL="0"><PTEXT><PDAT>28. The system of claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> further comprising means for periodically updating parts of said second set of digital data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00029">
<PARA ID="P-00063" LVL="0"><PTEXT><PDAT>29. The method of claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> wherein said first linkage reference is enclosed between a pair of non-displayable data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00030">
<PARA ID="P-00064" LVL="0"><PTEXT><PDAT>30. The system of claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> wherein said first set of digital data is encrypted.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00031">
<PARA ID="P-00065" LVL="0"><PTEXT><PDAT>31. A method for distributing a first set of digital data stored in a database to a remote site having a display device, comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>providing said remote site with a portable read-only storage device encoded with a second set of digital data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>providing said remote site with a processing device comprising a nonvolatile memory unit for storing at least a portion of said second set of digital data, said portion comprising a first set of displayable data, a second set of displayable data, and a non-displayable linkage reference associated with said second set of displayable data and said first set of digital data; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving, at said remote site and subsequent to both of said providing steps, said first set of digital data, said receiving step comprising: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>allowing a user to select said second set of displayable data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>subsequent to said selection, extracting said linkage reference; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>transmitting said extracted linkage reference to said database through a bi-directional channel; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>receiving said first set of digital data from said database through said bi-directional channel. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00032">
<PARA ID="P-00066" LVL="0"><PTEXT><PDAT>32. The method of claim </PDAT><HIL><BOLD><PDAT>31</PDAT></BOLD></HIL><PDAT> wherein said storage devices are CDROMs.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00033">
<PARA ID="P-00067" LVL="0"><PTEXT><PDAT>33. The method of claim </PDAT><HIL><BOLD><PDAT>31</PDAT></BOLD></HIL><PDAT> wherein said storage devices are optically encoded storage devices.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00034">
<PARA ID="P-00068" LVL="0"><PTEXT><PDAT>34. The method of claim </PDAT><HIL><BOLD><PDAT>31</PDAT></BOLD></HIL><PDAT> wherein said second set of digital data further comprises video data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00035">
<PARA ID="P-00069" LVL="0"><PTEXT><PDAT>35. The method of claim </PDAT><HIL><BOLD><PDAT>31</PDAT></BOLD></HIL><PDAT> wherein said second set of digital data further comprises a computer game.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00036">
<PARA ID="P-00070" LVL="0"><PTEXT><PDAT>36. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said first set of digital data further comprises video data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00037">
<PARA ID="P-00071" LVL="0"><PTEXT><PDAT>37. The method of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said first set of digital data further comprises a computer game.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00038">
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>38. The method of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> wherein said first set of digital data further comprises video data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00039">
<PARA ID="P-00073" LVL="0"><PTEXT><PDAT>39. The method of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> wherein said first set of digital data further comprises a computer game.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00040">
<PARA ID="P-00074" LVL="0"><PTEXT><PDAT>40. The method of claim </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT> wherein said first set of digital data further comprises video data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00041">
<PARA ID="P-00075" LVL="0"><PTEXT><PDAT>41. The method of claim </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT> wherein said first set of digital data further comprises a computer game.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00042">
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>42. The method of claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT> wherein said first set of digital data further comprises video data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00043">
<PARA ID="P-00077" LVL="0"><PTEXT><PDAT>43. The method of claim </PDAT><HIL><BOLD><PDAT>17</PDAT></BOLD></HIL><PDAT> wherein said first set of digital data further comprises a computer game.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00044">
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>44. The method of claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> wherein said first set of digital data further comprises video data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00045">
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>45. The method of claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> wherein said first set of digital data further comprises a computer game.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00046">
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>46. A method for distributing a first set of digital data stored in a database to a plurality of remote sites each having a display device and a communication channel, comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>providing each of said plurality of remote sites with a portable read-only storage device encoded with a second set of digital data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>providing each of said plurality of remote sites with a processing device comprising a nonvolatile memory unit for storing at least a portion of said second set of digital data, said portion comprising a first set of displayable data, a second set of displayable data, a first non-displayable data indicating a presence of said second set of displayable data, a non-displayable first linkage reference associated with said second set of displayable data and said first set of digital data; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving, by at least one of said remote sites and subsequent to both said providing steps, said first set of digital data, comprising the steps of: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>allowing a user in said at least one of said remote sites to select said second set of displayable data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>extracting said first linkage reference after said user selected said second set of displayable data; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>transmitting said extracted first linkage reference to said database through said communication channel; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>receiving said first set of digital data from said database through said communication channel. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00047">
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>47. The method of claim </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> wherein said storage devices are optically encoded storage devices.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00048">
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>48. The method of claim </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> wherein said second set of digital data further comprises video data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00049">
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>49. The method of claim </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> wherein said second set of digital data further comprises a computer game.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00050">
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>50. The method of claim </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> wherein said database contains a third set of digital data, wherein said first set of digital data comprises a second linkage reference associated with said third set of digital data.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00051">
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>51. The method of claim </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> wherein said portion further comprises a second non-displayable data indicating a presence of said first linkage reference.</PDAT></PTEXT></PARA>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314574-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314574-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314574-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314574-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314574-20011106-D00004.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314575-20011106-D00000.TIF SYSTEM "US06314575-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00001.TIF SYSTEM "US06314575-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00002.TIF SYSTEM "US06314575-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00003.TIF SYSTEM "US06314575-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00004.TIF SYSTEM "US06314575-20011106-D00004.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00005.TIF SYSTEM "US06314575-20011106-D00005.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00006.TIF SYSTEM "US06314575-20011106-D00006.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00007.TIF SYSTEM "US06314575-20011106-D00007.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00008.TIF SYSTEM "US06314575-20011106-D00008.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00009.TIF SYSTEM "US06314575-20011106-D00009.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00010.TIF SYSTEM "US06314575-20011106-D00010.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00011.TIF SYSTEM "US06314575-20011106-D00011.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00012.TIF SYSTEM "US06314575-20011106-D00012.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00013.TIF SYSTEM "US06314575-20011106-D00013.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00014.TIF SYSTEM "US06314575-20011106-D00014.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00015.TIF SYSTEM "US06314575-20011106-D00015.TIF" NDATA TIF>
<!ENTITY US06314575-20011106-D00016.TIF SYSTEM "US06314575-20011106-D00016.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314575</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>08811418</PDAT></DNUM></B210>
<B211US><PDAT>08</PDAT></B211US>
<B220><DATE><PDAT>19970304</PDAT></DATE></B220>
</B200>
<B400>
<B472>
<B473US>
</B472>
</B400>
<B500>
<B510>
<B511><PDAT>H04N  7173</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>725 87</PDAT></B521>
<B522><PDAT>725 41</PDAT></B522>
<B522><PDAT>725 42</PDAT></B522>
<B522><PDAT>725 61</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Telecasting service for providing video programs on demand with an interactive interface for facilitating viewer selection of video programs</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>3886302</PDAT></DNUM>
<DATE><PDAT>19750500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Kosco</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4381522</PDAT></DNUM>
<DATE><PDAT>19830400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Lambert</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4430669</PDAT></DNUM>
<DATE><PDAT>19840200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Cheung</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4506387</PDAT></DNUM>
<DATE><PDAT>19850300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Walter</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4685131</PDAT></DNUM>
<DATE><PDAT>19870800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Horne</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4739510</PDAT></DNUM>
<DATE><PDAT>19880400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Jeffers et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>380234</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4896347</PDAT></DNUM>
<DATE><PDAT>19900100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Auber</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4920432</PDAT></DNUM>
<DATE><PDAT>19900400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Eggers et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5003384</PDAT></DNUM>
<DATE><PDAT>19910300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Durden et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5027400</PDAT></DNUM>
<DATE><PDAT>19910600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Baji et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5109482</PDAT></DNUM>
<DATE><PDAT>19920400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Bohrman</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5241671</PDAT></DNUM>
<DATE><PDAT>19930800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Reed et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5245420</PDAT></DNUM>
<DATE><PDAT>19930900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Harney et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5251294</PDAT></DNUM>
<DATE><PDAT>19931000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Abelow</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5353121</PDAT></DNUM>
<DATE><PDAT>19941000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Young et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5357276</PDAT></DNUM>
<DATE><PDAT>19941000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Banker et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5410343</PDAT></DNUM>
<DATE><PDAT>19950400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Coddington et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5412720</PDAT></DNUM>
<DATE><PDAT>19950500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hoarty</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5544354</PDAT></DNUM>
<DATE><PDAT>19960800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>May et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</PCIT><CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5604528</PDAT></DNUM>
<DATE><PDAT>19970200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Edwards et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>725 25</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5619249</PDAT></DNUM>
<DATE><PDAT>19970400</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Billock et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>0 624 039 A2</PDAT></DNUM>
<DATE><PDAT>19941100</PDAT></DATE>
<CTRY><PDAT>EP</PDAT></CTRY>
</DOC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>A-2 231 244</PDAT></DNUM>
<DATE><PDAT>19901100</PDAT></DATE>
<CTRY><PDAT>GB</PDAT></CTRY>
</DOC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>WO-A-95/01058</PDAT></DNUM>
<DATE><PDAT>19950100</PDAT></DATE>
<CTRY><PDAT>WO</PDAT></CTRY>
</DOC>
</PCIT>
<CITED-BY-OTHER>
</B561>
<B562><NCIT><STEXT><PDAT>James Sorce et al., &ldquo;Designing a Broadband Residential Entertainment Service: A Case Study,&rdquo; GTE Laboratories Incorporated, 13th International Symposium Human Factors in Telecommunications, Torino, Italy, Sep. 10-14, 1990. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>A. D. Gelman et al., &ldquo;A Store-and-Forward Architecture for Video-On-Demand Service,&rdquo; International Conference on Communications, Denver, Colorado, USA, Jun. 23-26, 1991, Communications: Rising to the Heights, vol. 2 of 3, pp. 842-46, Jun. 23, 1991. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>W. Leo Hoarty, &ldquo;Multimedia on Cable Television Systems,&rdquo; 18th International Television Symposium and Technical Exhibition, Montreux, Switzerland, Jun. 10-15, 1993, Cable TV Sessions, No. 18, pp. 556-67, Jun. 11, 1993. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Mike Langberg, &ldquo;CD-ROM Attracts Heavy Hitters,&rdquo; San Jose Mercury News, Mar. 2, 1994, at 1. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Matthew D. Miller, &ldquo;A Scenario for the Deployment of Interactive Multimedia Cable Television Systems in the United States in the 1990&apos;s,&rdquo; Proceedings of the IEEE, vol. 82, No. 4, pp. 585-89, Apr. 1994. </PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
<B562><NCIT><STEXT><PDAT>Yee-Hsiang Chang et al., &ldquo;An Open-Systems Approach to Video on Demand,&rdquo; IEEE Communications Magazine, vol. 32, No. 5, pp. 68-80, May 1994.</PDAT></STEXT></NCIT><CITED-BY-OTHER></B562>
</B560>
<B570>
<B577><PDAT>56</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>348  3</PDAT></B582>
<B582><PDAT>348  6</PDAT></B582>
<B582><PDAT>348  7</PDAT></B582>
<B582><PDAT>348  8</PDAT></B582>
<B582><PDAT>348  9</PDAT></B582>
<B582><PDAT>348 10</PDAT></B582>
<B582><PDAT>348 12</PDAT></B582>
<B582><PDAT>348 13</PDAT></B582>
<B582><PDAT>348906</PDAT></B582>
<B583US><PDAT>348563-568</PDAT></B583US>
<B582><PDAT>345327</PDAT></B582>
<B583US><PDAT>709217-219</PDAT></B583US>
<B582><PDAT>455  31</PDAT></B582>
<B582><PDAT>455  32</PDAT></B582>
<B582><PDAT>455  41</PDAT></B582>
<B582><PDAT>455  42</PDAT></B582>
<B582><PDAT>455  51</PDAT></B582>
<B583US><PDAT>725 57- 61</PDAT></B583US>
<B583US><PDAT>725 86-105</PDAT></B583US>
</B580>
<B590><B595><PDAT>16</PDAT></B595><B596><PDAT>16</PDAT></B596><B597US>
</B590>
</B500>
<B600>
<B630><B631><PARENT-US><CDOC><DOC><DNUM><PDAT>08/811418</PDAT></DNUM></DOC></CDOC><PDOC><DOC><DNUM><PDAT>08/305847</PDAT></DNUM><DATE><PDAT>19940914</PDAT></DATE><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>00</PDAT></KIND></DOC></PDOC><PSTA><PDAT>01</PDAT></PSTA><PPUB><DOC><DNUM><PDAT>5619249</PDAT></DNUM><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>A </PDAT></KIND></DOC></PPUB></PARENT-US></B631></B630>
</B600>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>John K.</PDAT></FNM><SNM><STEXT><PDAT>Billock</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Greenwich</PDAT></CITY>
<STATE><PDAT>CT</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Craig D.</PDAT></FNM><SNM><STEXT><PDAT>Cuttner</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Norwalk</PDAT></CITY>
<STATE><PDAT>CT</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Kevin C.</PDAT></FNM><SNM><STEXT><PDAT>Dowdell</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>New York</PDAT></CITY>
<STATE><PDAT>NY</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Elizabeth B.</PDAT></FNM><SNM><STEXT><PDAT>Flanagan</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Westfield</PDAT></CITY>
<STATE><PDAT>NJ</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>James E.</PDAT></FNM><SNM><STEXT><PDAT>Granger</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Corte Madera</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Henry C.</PDAT></FNM><SNM><STEXT><PDAT>Hsu</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Port Washington</PDAT></CITY>
<STATE><PDAT>NY</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Robert I. M.</PDAT></FNM><SNM><STEXT><PDAT>Martin</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>New York</PDAT></CITY>
<STATE><PDAT>NY</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Robert</PDAT></FNM><SNM><STEXT><PDAT>May</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>San Francisco</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Nicolas</PDAT></FNM><SNM><STEXT><PDAT>Peck</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Millvalley</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Michael S.</PDAT></FNM><SNM><STEXT><PDAT>Pontecorvo</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>San Francisco</PDAT></CITY>
<STATE><PDAT>CA</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Bruce E.</PDAT></FNM><SNM><STEXT><PDAT>Probst</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Croton On Hudson</PDAT></CITY>
<STATE><PDAT>NY</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Marc D.</PDAT></FNM><SNM><STEXT><PDAT>Rosenberg</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>New York</PDAT></CITY>
<STATE><PDAT>NY</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Debra R.</PDAT></FNM><SNM><STEXT><PDAT>Smul</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>New York</PDAT></CITY>
<STATE><PDAT>NY</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Dennis P.</PDAT></FNM><SNM><STEXT><PDAT>Wilkinson</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Old Greenwich</PDAT></CITY>
<STATE><PDAT>CT</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Robert M.</PDAT></FNM><SNM><STEXT><PDAT>Zitter</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Stamford</PDAT></CITY>
<STATE><PDAT>CT</PDAT></STATE>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Time Warner Entertainment Company, L.P.</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>New York</PDAT></CITY><STATE><PDAT>NY</PDAT></STATE></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>02</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Fish &amp; Neave</PDAT></STEXT></ONM></NAM>
</PARTY-US>
</B741>
<B741>
<PARTY-US>
<NAM><FNM><PDAT>Gary J.</PDAT></FNM><SNM><STEXT><PDAT>Tuma</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Andrew</PDAT></FNM><SNM><STEXT><PDAT>Faile</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Reuben</PDAT></FNM><SNM><STEXT><PDAT>Brown</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2611</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A telecasting service is provided that offers video programs upon viewer demand, and which includes an interactive interface for facilitating viewer selection of video programs. The interactive interface allows the viewer to scan through a list of video programs available on the demand telecasting service. The interactive interface also provides the viewer with still images, full-motion previews, and textual descriptions of the available programs. The demand telecasting service distinguishes subscribers from non-subscribers, and provides an interactive facility for allowing non-subscribers to subscribe to the system.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<RELAPP>
<BTEXT>
<H LVL="1"><STEXT><PDAT>CROSS REFERENCE TO RELATED APPLICATION</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>This is a continuation of U.S. patent application Ser. No. 08/305,847, filed Sep. 14, 1994, entitled TELECASTING SERVICE FOR PROVIDING VIDEO PROGRAMS ON DEMAND WITH AN INTERACTIVE INTERFACE FOR FACILITATING VIEWER SELECTION OF VIDEO PROGRAMS, now U.S. Pat. No. 5,619,249.</PDAT></PTEXT></PARA>
</BTEXT>
</RELAPP>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>This invention relates to telecasting systems and particularly to telecasting systems that provide video programs which may be viewed on conventional televisions or other suitable video monitors. More particularly, this invention is directed toward a telecasting service that provides video programs upon viewer demand, and which includes an interactive interface for facilitating viewer selection of video programs.</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>Television viewing has become an increasingly popular pastime over the past several decades. Commercial and public broadcasting stations and cable networks provide viewers with entertainment programming, educational programming, as well as programming dedicated to news, weather, and commercial advertising. But programming variety is not the only reason for the popularity of television&mdash;the convenience of television also contributes substantially to its popularity. Indeed, nearly every household in the United States is equipped with at least one (and commonly several) television sets. It is not surprising that many people take advantage of the convenience of television instead of wasting valuable time seeking out other forms of entertainment.</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>Early telecasting systems relied almost exclusively on aerial transmissions to deliver video programs to the viewers&apos; television sets. Many difficulties led to the demise of aerial broadcasting as the dominant video delivery system. For example, the quality of aerial broadcasts varies considerably depending on atmospheric conditions and the viewer&apos;s geographic location. But more importantly, aerial broadcasting systems could not keep up with viewer demands for increased variety, because of the limited bandwidth available for aerial transmissions.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>In response to the difficulties associated with aerial broadcasting systems, cable telecasting systems have been developed, and they have become the telecasting systems of choice in areas where they are available. Cable telecasting systems provide consistent, high quality transmissions of video programming. They also offer greater variety than aerial systems because more bandwidth is available on cable networks. For example, whereas most viewers receive only a few aerial programming channels, typical cable telecasting systems currently provide 30-75 different programming channels, and systems with even greater channel capacity have been launched in certain areas.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>In most cable telecasting systems, a central telecasting facility is coupled to the subscribing viewers&apos; television sets through a communication network. Most current networks use coaxial cable as the communication medium. However, an increasing number of cable telecasting systems are migrating to fiber optic networks. Fiber optic networks offer substantially greater bandwidth than coaxial networks, which has created the opportunity for even more programming variety than is currently available. Indeed, a cable telecasting system based on a fiber optic network can support hundreds of programming channels, as compared to the typical few dozen channels offered by coaxial cable-based systems.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>The increased program variety offered by modern cable telecasting systems is advantageous because it gives the viewer a wider selection of video programs to choose from at any given time. However, no matter how many different programs are available, the viewer&apos;s selection has to date been limited to the programs that are being exhibited at any particular time. The viewer thus has been constrained by a predetermined program schedule, which may be undesirable in some situations. For example, television viewers are frequently forced to choose between watching a program of particular interest or engaging in an activity that temporally conflicts with the program of interest. Of course, the viewer may choose to record the program, but this is often a cumbersome task, especially if a video recorder is not immediately available.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>Many viewers overcome scheduling conflicts by renting video programs. Although video rental establishments typically offer a wide variety of programs to choose from, the process of renting video programs is rather inconvenient. As a result, a large number viewers may forego viewing a particular program of interest until it is scheduled on one of the program channels&mdash;which may not occur until sometime in the distant future, if at all.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>In view of the foregoing, it would be desirable to provide a demand telecasting service which allows a viewer to select a video program from a plurality of available programs, and which telecasts the selected program substantially at the time the viewer makes the program selection.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>It would also be desirable to provide a telecasting service that includes an interactive interface which allows a viewer to review a list of available video programs and which facilitates the viewer&apos;s selection of a desired program.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>It would further be desirable to provide a telecasting service that allows a viewer to preview a segment of a video program before viewing the entire video program.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>It would even further be desirable to provide a telecasting service that distinguishes subscribers from non-subscribers, which allows even non-subscribers to preview a segment of a video program, but allows only subscribers to view the entire video program.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>It is an object of this invention to provide a demand telecasting service which allows a viewer to select a video program from a plurality of available programs, and which telecasts the selected program substantially at the time the viewer makes the program selection.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>It is also an object of this invention to provide a telecasting service that includes an interactive interface which allows a viewer to review a list of available video programs and which facilitates the viewer&apos;s selection of a desired program.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>It is a further object of this invention to provide a telecasting service that allows a viewer to preview a segment of a video program before viewing the entire video program.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>It is even a further object of this invention to provide a telecasting service that distinguishes subscribers from non-subscribers, which allows even non-subscribers to preview a segment of a video program, but allows only subscribers to view the entire video program.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>In accordance with this invention, there is provided a demand telecasting service for telecasting video programs for display on a television or other suitable video display. The demand telecasting service allows a viewer to select from among a plurality of programs that are available substantially at the time of viewer selection. The demand telecasting service provides an interactive interface for facilitating viewer selection of a program. The interactive interface includes a memory for storing a list of available programs and a segment of each program in the list, a display generator for displaying the list on the display, and a viewer control unit that is used by the viewer to select one of the programs on the list, to initiate display of the selected program, and to initiate display of one of the segments corresponding to the selected program. After selecting one of the programs from the list and before initiating display of the selected program, the viewer can preview the selected program by initiating display of the segment corresponding to the selected program.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><PDAT>In order to distinguish subscribers from non-subscribers, the memory of the interactive interface can further store a list of identifiers corresponding to subscribing viewers. The viewer control unit transmits an identifier corresponding to a viewer using the viewer control unit. The interactive interface further comprises a validator for comparing the transmitted identifier to the list of identifiers corresponding to subscribing viewers. When the transmitted identifier does not match any identifier on the list of identifiers, the validator prevents display of the selected program, but allows the viewer to preview the segment corresponding to the selected program.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00020" LVL="0"><PTEXT><PDAT>The above and other objects and advantages of the present invention will be apparent upon consideration of the following detailed description, taken in conjunction with the accompanying drawings, in which like reference characters refer to like parts throughout, and in which:</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a block diagram of a cable telecasting network within which the demand telecasting service of the present invention may be implemented;</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a more detailed block diagram of the telecasting facility shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>;</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3 and 4</PDAT></FGREF><PDAT> are tables containing lists of data items stored in the mass storage system shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>;</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> is a more detailed block diagram of one of the viewing stations shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>;</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT> are sample screen displays which illustrate the operation of the interactive interface of the present invention; and</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 9A-9H</PDAT></FGREF><PDAT> are logic flow diagrams representing a control program used to implement the interactive interface of the present invention.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>Referring first to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, a cable telecasting network </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> is described, within which the demand telecasting service of the present invention may be implemented. The network </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> includes a telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>, and a plurality of viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>. A communication medium </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT> couples the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> to the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>. The communication medium </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT> may be any medium that is suitable for delivering signals over long distances between the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> and the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>. Preferably, the communication medium </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT> is fiber optic cable, although other media (such as coaxial cable) may be used instead.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><PDAT>In many respects, the network </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> operates in a conventional manner to make video programs available for viewing on the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>. The telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> preferably includes a central transmitting station that transmits video programs to the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> via the communication medium </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>. The viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> are typically located in the viewers&apos; homes or other locations that are convenient for viewing video programs. Each of the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> preferably includes a conventional television monitor or other suitable video display.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><PDAT>The telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> preferably telecasts a plurality of video programs simultaneously over a plurality of programming channels on the communication medium </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>. All of the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> on the network </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> have access to the plurality of programs that are telecast by the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>. A viewer can view a particular video program by tuning one of the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> to the programming channel that is carrying the program of interest.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><PDAT>However, unlike conventional telecasting networks, the network </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> permits bi-directional communication between the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> and each of the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> over the communication medium </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>. Preferably, at least one of the plurality of programming channels is used for interactive applications, like the demand telecasting service of the present invention. However, it should be understood that a plurality of programming channels may be used for the demand telecasting service without departing from the spirit of the invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><PDAT>When the viewer tunes one of the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> to the interactive channel, commands may be sent from that viewing station </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> to the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT>. As described in detail below, such commands may include a program selection command that causes the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> to telecast a program of interest on the interactive channel substantially at the time that the command is transmitted. Although all of the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> receive all of the signals telecast on the interactive channel, only the viewing station </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> that is used to select a particular program displays the selected program. The use of the interactive channel by one of the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> does not interfere with the use of the interactive channel by another one of the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>. Thus, many different viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> on the network </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> may be used to view different interactively selected programs at the same time.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>Referring now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, a preferred embodiment of a telecasting facility is described that is suitable for use as the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> shown in FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>. As mentioned above, the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> includes a transmitting station </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT> that transmits video programs to the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>) over a plurality of programming channels on the communication medium </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT> in a conventional manner. However, in order to implement the demand telecasting service of the present invention, the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> also includes a processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> coupled to the transmitting station </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT>, a mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>, a tape drive system </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>, and conventional I/O devices </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> (such as a keyboard, display monitor, and mouse). The mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>, the tape drive system </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>, and the I/O devices </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> are considered peripheral components of the processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>The processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> is preferably a multiple processor computer system that is capable of handling many programing requests that may be received from the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>) over the communication medium </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT> on the interactive channel. Such requests are initially received by the transmitting station </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT> and are subsequently passed on to the processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT>. In a preferred embodiment, the processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> is a network of at least eight Challenge computer systems available from Silicon Graphics, Inc., located in Mountain View, Calif. Each Challenge computer is preferably equipped with at least eight processors operating in parallel, thus providing the processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> with at least 64 processors for handling programming requests.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><PDAT>The mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> is preferably an array of high performance disk drives. Alternatively, other types of data storage systems can be used, such as CD-ROM systems.</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><PDAT>The tape drive system </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> is preferably a multi-component system that includes a tape storage unit (not shown), a plurality of tape players (not shown), and an automatic tape retrieval unit (not shown). When a request for a video program is received, the processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> instructs the automatic tape retrieval unit to retrieve the tape containing the selected video program from the appropriate location in the tape storage unit. The automatic tape retrieval unit then inserts the tape into an available tape drive, which in turn plays the tape to be telecast. As the tape is played, the video program data (video and audio) is transferred to the mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> for temporary storage, after which the program is telecast to the viewing station </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>) from which the viewer made the selection. When the tape has finished playing, the automatic tape retrieval unit returns the tape to the appropriate location.</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><PDAT>The tape drive system </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> preferably accommodates professional recording tapes, such digital linear tapes (DLTs), although systems which accommodate other types of media (such as conventional video tapes, digital audio tapes (DATs), video disks, etc.) may be used instead. A suitable automated tape drive system that uses DLTs is available from Digital Equipment Corporation, located in Maynard, Mass. It should be noted, however, that a manual tape storage and retrieval system may be used without departing from the spirit of the invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><PDAT>Preferably, the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> receives tapes containing the video and audio portions of new video programs on a periodic basis (e.g., monthly). The video portion of each video program is preferably stored in a compressed format in accordance with the MPEG-1 video compression standard established by the Motion Picture Experts Group. The tapes are loaded into the storage unit of the tape drive system </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>, into locations that may be predetermined by the supplier of the tapes. If a particular redetermined location is occupied, another location may be used, as long as the processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> has information reflecting the actual tape location.</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>The mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> stores many data files used in connection with the demand telecasting service of the present invention. These data files include data files for storing the video and audio portions of frequently selected video programs, data files for storing the video and audio portions of full-motion previews from the available video programs, and data files for storing still images from the available video programs. The mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> also stores additional data (described below in connection with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3 and 4</PDAT></FGREF><PDAT>) associated with each available video program and each subscribing viewing station </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>). Further, as mentioned above, the mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> temporarily stores data files containing the audio and video portions of programs that have been transferred from tape in response to viewer selections. The still image data, and the video portions of the full-length video programs and full-motion previews are preferably stored in a compressed format in accordance with the MPEG-1 standard.</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>The full-motion preview data and the still image data are preferably received on tape along with the tapes containing the corresponding full-length video programs. The full-motion preview data and the still image data for each available program are preferably transferred to the mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> at the time the corresponding video program tapes are loaded into the tape storage unit of the tape drive system </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>When a video program needs to be retrieved from the tape storage unit, the viewer may experience a noticeable delay between the time of selection and the time the program is exhibited. By storing the data for frequently selected programs in the mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> on a long-term basis, the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> is able to service requests for such programs more rapidly than would otherwise be the case. Indeed, if there is sufficient storage space, it may be preferable to store the entire program library in the mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT>, to eliminate the delays associated with the use of the tape drive system </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>The processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> receives requests for available video programs from the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>). In a large telecasting network, it should be expected that the processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> will be called upon to service a large number of requests within relatively short periods of time. In order to promptly service a large number of requests, the processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> preferably uses the asynchronous transfer mode (ATM) protocol to manage data flow on the communication medium </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>. In accordance with the ATM protocol, the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> and each of the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>) are assigned time slots during which they are permitted to transmit data on the communication medium </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>. Data to be transmitted by a particular device are buffered by that device in a conventional manner until its time slot is reached. When its time slot is reached, the transmitting device transmits the data, along with an address that identifies the device that is to receive the data.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>When large amounts of data need to be transmitted, such as when the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> needs to transmit an entire video program to one of the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>), the data are divided into smaller packets which are transmitted during different time slots. Each packet is transmitted with a destination address. The destination device receives and reassembles the packets as required. The telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> transmits packets at a rate that allows the receiving viewing station </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>) to present an uninterrupted video program to the viewer.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3 and 4</PDAT></FGREF><PDAT> are tables that list data items that are representative of data that are stored in the mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) (in addition to the files containing the full-length video data, the full-motion preview data, and the still image data). The data represented by the tables shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 3 and 4</PDAT></FGREF><PDAT> are preferably stored in conventional database tables.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>The data items listed in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> represent data that are stored in connection with each stored video program. This data is preferably transferred to the mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) each time new video program tapes are received by the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>). This may be accomplished through a tape transfer (similar to the full-motion preview data and the still image data), or through a direct transfer from the video program supplier (e.g., through a modem connection).</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>The data item &ldquo;PROGRAM_ID&rdquo; represents a unique identifier that is associated with each available video program. As explained below, viewer requests for video programs are accomplished by the transmission of the PROGRAM_ID associated with the desired program from one of the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>) to the processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>). A numerical identifier is preferred as the PROGRAM_ID to facilitate rapid processing of viewer requests.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>The data item &ldquo;PROGRAM_NAME&rdquo; preferably represents a text field that contains the commonly known name of an available video program.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>The data item &ldquo;CATEGORY&rdquo; preferably represents a text field that contains the name of one of several categories to which a video program may be assigned. Typical categories for video programs may include &ldquo;action,&rdquo; &ldquo;drama,&rdquo; &ldquo;sports,&rdquo; etc. Preferably, the CATEGORY field can support multiple category assignments for each video program. Thus, some video programs may appear in the program listings for two or more categories. For example, a recently released comedy program may be assigned to a &ldquo;comedy&rdquo; category, as well as a special category designated &ldquo;new releases.&rdquo;</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>The data item &ldquo;CLASSIFICATION&rdquo; is used to further categorize each video program. One particularly useful classification scheme distinguishes video programs that are suitable for children from those that are not. As explained below, this data item may be used to limit certain viewers&apos; program choices.</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>The data item &ldquo;DESCRIPTION&rdquo; represents a text field that contains information that may be helpful to a viewer when searching for a particular video program of interest. Some examples of this type of information include the names of the performers, the name of the director, the length of the video program, and a brief description of the content of the video program. Other useful information may be added, as appropriate.</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>The data item &ldquo;STILL_IMAGE&rdquo; represents a text field that contains the name of a data file stored in the mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) that contains image data that is used to provide the viewer with a still image from a video program. The still image is provided to the viewer (in a manner described below) as an aid to selecting a program of interest.</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>The data items &ldquo;PREVIEW VIDEO&rdquo; and &ldquo;PREVIEW_AUDIO&rdquo; are text fields that represent the names of data files stored in the mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) that contain the video and audio portions of a short segment of a video program. The short segment of the video program is provided to the viewer (in a manner described below) as an aid to selecting a program of interest.</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>The data items &ldquo;FULL_VIDEO&rdquo; and &ldquo;FULL_AUDIO&rdquo; are text fields that represent data that are used by the processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) to determine the location of a selected video program. If the video program is one that is stored on a long-term basis in the mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>), the FULL_VIDEO and FULL_AUDIO data items represent the names of the data files containing the full video and audio portions of the video program. Otherwise, the FULL_VIDEO data item represents a location in the tape storage unit of the tape drive system </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) where the tape containing the video program is stored. The FULL_AUDIO data item is not used in this situation.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>The data items listed in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> represent data that pertain to the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>) that are connected to the network </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>). This information may be entered by an operator using the I/O devices </PDAT><HIL><BOLD><PDAT>28</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>The data item &ldquo;STATION_ID&rdquo; preferably represents a numeric field that contains a unique identifier for each of the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>) that have subscribed to the demand telecasting service of the present invention. The station identifiers are used by the processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) as the destination addresses for data packets transmitted on the communication medium </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>The data item &ldquo;VIEWER_ID&rdquo; represents a text field that contains a unique identifier for each person that is permitted to use a particular viewing station </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>The data item &ldquo;CLASSIFICATION&rdquo; is similar to the data item of the same name described in connection with FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>. However, the purpose here is to define the classes of video programs that a particular viewer (as identified by the VIEWER_ID) is permitted to watch.</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="0"><PTEXT><PDAT>Referring now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>, a preferred embodiment of a viewing station is described that is suitable for use as one of the viewing stations </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> shown in FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>. The viewing station </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> includes a graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT>, a video encoder </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT>, a television monitor </PDAT><HIL><BOLD><PDAT>34</PDAT></BOLD></HIL><PDAT>, a signal converter </PDAT><HIL><BOLD><PDAT>36</PDAT></BOLD></HIL><PDAT>, and a remote viewer control unit </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT>. It should be understood that some or all of these components, especially the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT>, the video encoder </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT>, and the signal converter </PDAT><HIL><BOLD><PDAT>36</PDAT></BOLD></HIL><PDAT>, may be combined into a single device without departing from the spirit of the invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="0"><PTEXT><PDAT>The graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> performs the graphics functions required to implement the interactive interface of the present invention. The graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> also performs the communications functions for the viewing station </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT>, including transmitting data packets to, and receiving data packets from, the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>). In a preferred embodiment, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> is an R4000PC Indy computer available from Silicon Graphics, Inc. The Indy computer is preferably equipped with 8 megabytes of memory, a Newport graphics card, and an A/V card which provides an audio and video interface between the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> and the signal converter </PDAT><HIL><BOLD><PDAT>36</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="0"><PTEXT><PDAT>The graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> receives several different types of information in packets from the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) over the interactive channel on the communication medium </PDAT><HIL><BOLD><PDAT>16</PDAT></BOLD></HIL><PDAT>. This information includes-the video and audio portions of video programs selected by the viewer, the video and audio portions of short segments of the video programs, still images from the video programs, textual descriptions of the available video programs, and listings of the available video programs. As explained below, this information is presented to the viewer through the use of a convenient interactive interface.</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="0"><PTEXT><PDAT>Information received by the viewing station </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> is initially processed by the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT>. Such processing steps may include reassembling of data packets, decompression of the compressed video portions of the video programs and short segments of the video programs, and synchronization of the video and audio portions of the video programs and the short segments of the video programs. These processing steps may be performed in a conventional manner.</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>The information processed by the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> that is to be made available to the viewer (e.g., video programs, short segments, still images, program lists, etc.) is sent to the video encoder </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT>. The video encoder </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT> is preferably a 2826 Video Encoder II available from RasterOps, Inc., located in Santa Clara; Calif. The video encoder </PDAT><HIL><BOLD><PDAT>32</PDAT></BOLD></HIL><PDAT> converts the information from the native format of the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> to a television standard format such as NTSC, PAL, or SECAM, as appropriate. Converting the information to the appropriate format renders the information suitable for viewing on the conventional television monitor </PDAT><HIL><BOLD><PDAT>34</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="0"><PTEXT><PDAT>The viewer can communicate with the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> through the use of the combination of the signal converter </PDAT><HIL><BOLD><PDAT>36</PDAT></BOLD></HIL><PDAT> and the remote viewer control unit </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT>. In many respects, the control unit </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> is similar to conventional remote control units that are commonly used with audio-visual equipment. However, the control unit </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> includes buttons that are used in connection with the interactive interface of the present invention, as described below.</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="0"><PTEXT><PDAT>Preferably, the control unit </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> transmits infrared signals to the signal converter </PDAT><HIL><BOLD><PDAT>36</PDAT></BOLD></HIL><PDAT> in response to commands entered by the viewer. The signal converter </PDAT><HIL><BOLD><PDAT>36</PDAT></BOLD></HIL><PDAT> receives the infrared signals and converts them to electrical signals suitable for transmission to the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT>. In a preferred embodiment, the signal converter </PDAT><HIL><BOLD><PDAT>36</PDAT></BOLD></HIL><PDAT> is an 8600 Converter available from Scientific-Atlanta, Inc., located in Atlanta, Ga.</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="0"><PTEXT><PDAT>The graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> is programmed to provide an interactive interface that is intended to facilitate the viewer&apos;s selection of a video program. The interactive interface facilitates the viewer&apos;s program selection by organizing the programs available for selection into a convenient menu, and by providing the viewer with helpful selection aids, including still images, short segment previews, and textual descriptions of the available programs. The interactive interface may be understood by reference to the screen examples shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="0"><PTEXT><PDAT>The interactive interface preferably operates in three modes&mdash;a list mode, a preview mode, and an information mode. </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> depicts a list mode screen </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> that appears on the television monitor </PDAT><HIL><BOLD><PDAT>34</PDAT></BOLD></HIL><PDAT> when the interactive interface is operating in the list mode. The list mode screen </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> is preferably the first screen displayed after the viewer logs into the interactive interface.</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="0"><PTEXT><PDAT>In the center of the list mode screen </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> is a display window </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>. In the list mode, the display window </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> is preferably divided into a menu window </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> (on the left side) and a still image window </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> (on the right side). The menu window </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> displays a list of video programs that are available for viewer selection. The list of video programs is transmitted from the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>) to the viewing station </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>) that the viewer is using.</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="0"><PTEXT><PDAT>At any given time, one of the video programs in the menu window </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> is highlighted by an active program bar </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT>. When the list mode screen </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> first appears after start-up, the active program bar </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> highlights the first program in the list. The video program highlighted by the active program bar </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> is deemed the &ldquo;active program.&rdquo;</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="0"><PTEXT><PDAT>The interactive interface provides several program selection tools that may used by the viewer to learn more about the active program. One such tool requires no viewer interaction&mdash;a still image of the active program automatically appears in the still image window </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>. The still image may aid the viewer in identifying or remembering the subject matter of the active program. Data files used to display the still images corresponding to each available video program are transmitted to the viewing station </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>) being used along with the list of video programs.</PDAT></PTEXT></PARA>
<PARA ID="P-00069" LVL="0"><PTEXT><PDAT>In order to simplify the program selection process, the available video programs are organized into categories, as described above in connection with FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>. Only the programs in an &ldquo;active category&rdquo; appear in the menu window </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> at any given time. The name of the active category appears in the center of a category selection bar </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> which is displayed above the display window </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>. When the list mode screen </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> is first displayed after start-up, the first category in a sequence of available categories is the active category. The list of categories is transmitted to the viewing station </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>) being used along with the list of available video programs.</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="0"><PTEXT><PDAT>The category selection bar </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> also includes two actuators that are used to change the active category&mdash;a previous category actuator </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> and a next category actuator </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT>. In general, the various actuators described below in connection with the screens shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT> preferably correspond to buttons on the control unit </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>). In order to activate a particular actuator, the viewer simply presses the corresponding button on the control unit </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>). Alternatively, the control unit </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) may include a highlighting device for activating some or all of the various actuators. It should be understood that the labels which appear in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT> to denote the various actuators may be modified without departing from the spirit of the invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="0"><PTEXT><PDAT>The previous category actuator </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> is used by the viewer to change the active category to the preceding category in the sequence of categories. The next category actuator </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> is used to advance the active category to the next category in the sequence. When either the previous category actuator </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> or the next category actuator </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> is used, the category name displayed in the center of the category selection bar </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>, and the list of programs displayed in the menu window </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT>, change accordingly. Both the previous category actuator </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> and the next category actuator </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> conveniently display the name of the category that will be the active category if the corresponding actuator is activated. Preferably, the category actuators operate in an endless loop fashion.</PDAT></PTEXT></PARA>
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>Along the left side of the display window </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> is a program selection bar </PDAT><HIL><BOLD><PDAT>56</PDAT></BOLD></HIL><PDAT>. The program selection bar </PDAT><HIL><BOLD><PDAT>56</PDAT></BOLD></HIL><PDAT> includes two actuators for changing the active program&mdash;a previous program actuator </PDAT><HIL><BOLD><PDAT>58</PDAT></BOLD></HIL><PDAT> and a next program actuator </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT>. The previous program actuator </PDAT><HIL><BOLD><PDAT>58</PDAT></BOLD></HIL><PDAT> and the next program actuator </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT> operate in a manner similar to that of the previous category actuator </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> and the next category actuator </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT>. Specifically, the viewer can move backward and forward in the list of programs displayed in the menu window </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> through the use of the previous program actuator </PDAT><HIL><BOLD><PDAT>58</PDAT></BOLD></HIL><PDAT> and the next program actuator </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="0"><PTEXT><PDAT>Typically, only a subset of the programs in the active category can be displayed in the menu window </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> at any given time. To view other program titles, the viewer may use the previous program actuator </PDAT><HIL><BOLD><PDAT>58</PDAT></BOLD></HIL><PDAT> and the next program actuator </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT> to cause the displayed list of programs to scroll backward and forward, respectively, through the complete list of programs within the active category. The previous program actuator </PDAT><HIL><BOLD><PDAT>58</PDAT></BOLD></HIL><PDAT> and the next program actuator </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT> preferably operate in an endless loop fashion.</PDAT></PTEXT></PARA>
<PARA ID="P-00074" LVL="0"><PTEXT><PDAT>Preferably, the interactive interface stores a pointer to the most recently active program in each category. Thus, if the viewer leaves a first category to scan programs in a second category, and then returns to the first category, the active program will be the program that was active when the viewer left the first category. The viewer therefore does not need to re-scan the programs in the first category to locate the most recently considered program in that category.</PDAT></PTEXT></PARA>
<PARA ID="P-00075" LVL="0"><PTEXT><PDAT>A selection actuator </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> (labeled &ldquo;SELECT&rdquo;) may be used by the viewer to select the active program (as indicated by the active program bar </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT>) for viewing. When the selection actuator </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> is activated, the list mode screen </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> disappears and the full-length video program that was selected by the viewer begins. After the program has completed, the list mode screen </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> returns to allow the viewer to make another selection.</PDAT></PTEXT></PARA>
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>In some situations, the still image from the active program that appears in the still image window </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> may not provide enough information for the viewer to make a program selection. The interactive interface thus offers the preview mode and the information mode to provide the viewer with even more information to facilitate program selection.</PDAT></PTEXT></PARA>
<PARA ID="P-00077" LVL="0"><PTEXT><PDAT>The different operational modes of the interactive interface are selected by the viewer through the use of three actuators in a mode selection bar </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>. On the left side of the mode selection bar </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT> is a list mode actuator </PDAT><HIL><BOLD><PDAT>66</PDAT></BOLD></HIL><PDAT> (labeled &ldquo;A LIST&rdquo;). When the list mode screen </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> is displayed, the list mode actuator </PDAT><HIL><BOLD><PDAT>66</PDAT></BOLD></HIL><PDAT> is preferably highlighted to show that the list mode is the current mode of operation. The list mode actuator </PDAT><HIL><BOLD><PDAT>66</PDAT></BOLD></HIL><PDAT> is active only when the interactive interface is operating in either the preview mode or the information mode. Any depressions of the button on the control unit </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) corresponding to the list mode actuator </PDAT><HIL><BOLD><PDAT>66</PDAT></BOLD></HIL><PDAT> have no effect on the operational mode when the list mode actuator </PDAT><HIL><BOLD><PDAT>66</PDAT></BOLD></HIL><PDAT> is highlighted.</PDAT></PTEXT></PARA>
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>A preview mode actuator </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> (labeled &ldquo;B PREVU&rdquo;) is positioned in the center of the mode selection bar </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>. The preview mode actuator </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> may be used by the viewer to cause the interactive interface to switch to the preview mode. As described below in connection with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT>, the preview mode is used to provide the viewer with a full-motion preview of the active program.</PDAT></PTEXT></PARA>
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>An information mode actuator </PDAT><HIL><BOLD><PDAT>70</PDAT></BOLD></HIL><PDAT> (labeled &ldquo;C MORE&rdquo;) appears on the right side of the mode selection bar </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>. The information mode actuator </PDAT><HIL><BOLD><PDAT>70</PDAT></BOLD></HIL><PDAT> may be used by the viewer to cause the interactive interface to switch to the information mode. As described below in connection with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 8</PDAT></FGREF><PDAT>, the information mode is used to provide the viewer with a textual description of the active program. Preferably, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) causes the monitor </PDAT><HIL><BOLD><PDAT>34</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) to play background music while the information mode is active. Background music may also be provided during the list mode.</PDAT></PTEXT></PARA>
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>When the viewer activates the preview mode actuator </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT>, a preview mode screen </PDAT><HIL><BOLD><PDAT>72</PDAT></BOLD></HIL><PDAT> is displayed, as shown in FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>. In the preview mode, the display window </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> serves a single large window for displaying a full-motion preview of the active program (i.e., the program that was highlighted by the active program bar </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> in the list mode shown in FIG. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>). Preferably, the full-motion preview lasts for about 30 seconds, and includes video and audio components. The title of the active program appears in the lower portion of the display window </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>The preview mode screen </PDAT><HIL><BOLD><PDAT>72</PDAT></BOLD></HIL><PDAT> also includes the category selection bar </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>, the program selection bar </PDAT><HIL><BOLD><PDAT>56</PDAT></BOLD></HIL><PDAT>, and the mode selection bar </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>. It should be noted that the preview mode actuator </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> becomes inactive while the interactive interface is operating in the preview mode, and accordingly, the preview mode actuator is highlighted on the preview mode screen </PDAT><HIL><BOLD><PDAT>72</PDAT></BOLD></HIL><PDAT>. However, the other actuators described above in connection with the various selection bars, as well as the selection actuator </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT>, remain active during the full-motion preview.</PDAT></PTEXT></PARA>
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>Through the use of the above-described actuators, the viewer can perform the functions described above in connection with the list mode screen </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>). For example, the viewer can use the previous category actuator </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> and the next category actuator </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> to change the active category. Also, the viewer can use the previous program actuator </PDAT><HIL><BOLD><PDAT>58</PDAT></BOLD></HIL><PDAT> and the next program actuator </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT> to change the active program within the active category. When the viewer makes such changes, the full-motion preview being displayed in the display window </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> changes accordingly. This allows the viewer to rapidly scan through several full-motion previews without having to return to the list mode screen </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>The list mode actuator </PDAT><HIL><BOLD><PDAT>66</PDAT></BOLD></HIL><PDAT> may be used to return to list mode if the viewer desires to review the list of available programs in a menu-based format. If the viewer changed the active program or active category while in the preview mode, the changes are &ldquo;remembered&rdquo; by the interactive interface, and the active program bar </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT>) in the list mode appears on the program title that corresponds to the program most recently made active during the preview mode.</PDAT></PTEXT></PARA>
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>The selection actuator </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> may also be used from the preview mode screen </PDAT><HIL><BOLD><PDAT>72</PDAT></BOLD></HIL><PDAT> to begin a full-length presentation of the active program.</PDAT></PTEXT></PARA>
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>The interactive interface is preferably programmed to take one of four courses of action if the viewer does not use one of the available actuators on the preview mode screen </PDAT><HIL><BOLD><PDAT>72</PDAT></BOLD></HIL><PDAT> before the end of the full-motion preview. In one embodiment, the interactive interface enters a waiting state where it simply waits until the viewer activates one of the various actuators. In another embodiment, the interactive interface returns to the list mode to allow the viewer to consider other programs. In still another embodiment, the interactive interface returns to the mode it was in when the viewer initiated a preview. In yet another embodiment, the interactive interface begins a full-motion preview of the next program in the active category. If the active program is the last in the sequence of programs within the active category, the interactive interface preferably cycles to the first program in the active category. If the fourth embodiment is adopted, the automatic cycling of programs during the preview mode preferably results in a corresponding change in the active program, such that the last program previewed at the time one of the actuators is activated becomes the active program.</PDAT></PTEXT></PARA>
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>From either the list mode screen </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT>) or the preview mode screen </PDAT><HIL><BOLD><PDAT>72</PDAT></BOLD></HIL><PDAT>, the viewer may use the information mode actuator </PDAT><HIL><BOLD><PDAT>70</PDAT></BOLD></HIL><PDAT> (labeled &ldquo;C MORE&rdquo;) to switch to an information mode screen </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT>, which is shown in FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>. While in the information mode, the display window </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> displays textual information pertaining to the actual program. Such information may include, for example, the title of the program, the length of the program, the program&apos;s cast, and the director of the program. Of course, this information can be varied in accordance with the type of program being considered.</PDAT></PTEXT></PARA>
<PARA ID="P-00087" LVL="0"><PTEXT><PDAT>All of the actuators described above are available for use from the information mode screen </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT>, with the exception of the information mode actuator </PDAT><HIL><BOLD><PDAT>70</PDAT></BOLD></HIL><PDAT>, which is highlighted. Thus, the viewer can freely change the active program or the active category from the information mode screen </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT>. Also, the viewer can switch to either the list mode or the preview mode using the appropriate actuator from the mode selection bar </PDAT><HIL><BOLD><PDAT>64</PDAT></BOLD></HIL><PDAT>. The selection actuator </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> may also be used from the information mode screen </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> to begin a full-length presentation of the active program.</PDAT></PTEXT></PARA>
<PARA ID="P-00088" LVL="0"><PTEXT><PDAT>As can be seen from the screen examples of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>, the interactive interface allows the viewer to efficiently acquire information about many available video programs. For example, after designating a particular program as the active program in the list mode screen </PDAT><HIL><BOLD><PDAT>40</PDAT></BOLD></HIL><PDAT>, the viewer can quickly evaluate a still image of the program in the still image window </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT>. If more information is needed, the viewer can rapidly switch to either the preview mode or the information mode using the appropriate actuators. Further, the active program or active category can be changed in any of the three operational modes, thereby allowing the viewer to consider the same type of information for several different programs in succession. And once the viewer has made a program selection, the selection actuator </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> can be activated from within any of the three modes of operation to begin a full-length presentation of the active program.</PDAT></PTEXT></PARA>
<PARA ID="P-00089" LVL="0"><PTEXT><PDAT>Turning now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 9A-9H</PDAT></FGREF><PDAT>, a series of logic flow diagrams are described which represent a control program that is executed by the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>). The control program allows the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) to provide the interactive interface of the present invention. It also manages communication between the viewing station </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) and the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00090" LVL="0"><PTEXT><PDAT>Referring first to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9A</PDAT></FGREF><PDAT>, the control program starts when the viewer selects the demand telecasting service of the present invention from a list of interactive applications available on the interactive channel of the telecasting network </PDAT><HIL><BOLD><PDAT>10</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>). After start-up, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) receives a VIEWER_ID provided by the viewer at step </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>. However, the viewer can choose not to provide a VIEWER_ID at step </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>. As explained below, this prevents the viewer from viewing the full-length video programs, but allows the viewer to use the other features of the interactive interface.</PDAT></PTEXT></PARA>
<PARA ID="P-00091" LVL="0"><PTEXT><PDAT>It should be understood that the present invention can be practiced without the use of VIEWER_IDS. Indeed, if it is determined that a viewing population would find the task of entering a VIEWER_ID to be cumbersome, it may be preferable to eliminate VIEWER_IDS and any features which require them. For the purposes of the following discussion, it is assumed that the system accommodates VIEWER_IDS. Any modifications required to eliminate VIEWER_IDS would be apparent to one of ordinary skill in the art.</PDAT></PTEXT></PARA>
<PARA ID="P-00092" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) transmits the VIEWER_ID and a STATION_ID to the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>). The STATION_ID is a unique identifier stored in the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00093" LVL="0"><PTEXT><PDAT>After the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) receives the VIEWER_ID and the STATION_ID, the processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) determines if the received information matches an entry in the station table described in connection with FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>. If there is a matching entry, the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) transmits a subscriber confirmation signal, which is received by the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) at step </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>. Otherwise, the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) transmits a non-subscriber confirmation signal, which is also received at the step </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00094" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) receives a list of PROGRAM_IDS, PROGRAM_NAMES, and CATEGORIES from the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>). If a VIEWER_ID was received at step </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, the list is limited to information pertaining to the programs that the viewer is authorized to view. The processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) determines which data are to be transmitted by comparing the CLASSIFICATION data item from the station table (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>) corresponding to the viewer&apos;s VIEWER_ID to the CLASSIFICATION data items in the program table (FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>). This step is useful, for example, for limiting the list of available programs to those that are appropriate for children. If a VIEWER_ID was not received at step </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, the complete list of available video programs is preferably received by the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) at step </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00095" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) sets the active category to the first category in the sequence of categories received at step </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT>. Then, at step </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>, the active program is set to the first program in the sequence of programs within the active category.</PDAT></PTEXT></PARA>
<PARA ID="P-00096" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT>, the actuators described in connection with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT> are displayed on the monitor </PDAT><HIL><BOLD><PDAT>34</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>). At step </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) then displays the active category in the center of the category selection bar </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT> (FIGS. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>), the previous category in the sequence (which at this time is actually the last category in the sequence) in the previous category actuator </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> (FIGS. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>), and the next category in the sequence in the next category actuator </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> (FIGS. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00097" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) calls a list mode routine to establish the initial mode of operation for the interactive interface. The list mode routine is described below in connection with FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>C. However, before turning to the list mode routine, the main program loop of the control program, which responds to the viewer&apos;s use of the various actuators, will be described.</PDAT></PTEXT></PARA>
<PARA ID="P-00098" LVL="0"><PTEXT><PDAT>The main program loop is shown in FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>B. It includes a series of six tests that are re-executed until the viewer leaves the interactive interface (typically by changing the channel or turning off the viewing station </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) using the control unit </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>)). The six tests are performed to detect when the viewer activates one of the actuators by pressing one of the corresponding buttons on the control unit </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00099" LVL="0"><PTEXT><PDAT>At test </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) determines if the list mode actuator </PDAT><HIL><BOLD><PDAT>66</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) was activated. If so, the list mode routine (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9C</PDAT></FGREF><PDAT>) is called at step </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00100" LVL="0"><PTEXT><PDAT>At test </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) determines if the preview mode actuator </PDAT><HIL><BOLD><PDAT>68</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) was activated. A preview mode routine (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9D</PDAT></FGREF><PDAT>) is called if appropriate at step </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00101" LVL="0"><PTEXT><PDAT>At test </PDAT><HIL><BOLD><PDAT>128</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) determines if the information mode actuator </PDAT><HIL><BOLD><PDAT>70</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) was activated. An information mode routine (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9E</PDAT></FGREF><PDAT>) is called at step </PDAT><HIL><BOLD><PDAT>130</PDAT></BOLD></HIL><PDAT> when such an activation is detected.</PDAT></PTEXT></PARA>
<PARA ID="P-00102" LVL="0"><PTEXT><PDAT>At test </PDAT><HIL><BOLD><PDAT>132</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) determines if either the previous category actuator </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) or the next category actuator </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) was activated. Category changes are handled by a change category routine (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9F</PDAT></FGREF><PDAT>) which is called at step </PDAT><HIL><BOLD><PDAT>134</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00103" LVL="0"><PTEXT><PDAT>Similarly, at test </PDAT><HIL><BOLD><PDAT>136</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) determines if either the previous program actuator </PDAT><HIL><BOLD><PDAT>58</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) or the next program actuator </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) was activated. Program changes are handled by a change program routine (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9G</PDAT></FGREF><PDAT>) which is called at step </PDAT><HIL><BOLD><PDAT>138</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00104" LVL="0"><PTEXT><PDAT>Finally, test </PDAT><HIL><BOLD><PDAT>140</PDAT></BOLD></HIL><PDAT> is performed by the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) to determine if the selection actuator </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) was activated. Program selections are managed by a selection routine (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9H</PDAT></FGREF><PDAT>) which is called at step </PDAT><HIL><BOLD><PDAT>142</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00105" LVL="0"><PTEXT><PDAT>Turning now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9C</PDAT></FGREF><PDAT>, the list mode routine is described. The list mode routine starts with test </PDAT><HIL><BOLD><PDAT>144</PDAT></BOLD></HIL><PDAT>, where the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) determines if the list mode routine is being executed for the first time during the current session of the interactive interface. If so, step </PDAT><HIL><BOLD><PDAT>146</PDAT></BOLD></HIL><PDAT> is performed to initialize the menu window </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>). Preferably, the PROGRAM_NAMES of at least the first five programs in the sequence of available programs within the active category are displayed. Since the active program is the first program in the sequence, the active menu bar </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT>) appears on the first displayed PROGRAM_NAME.</PDAT></PTEXT></PARA>
<PARA ID="P-00106" LVL="0"><PTEXT><PDAT>If the list mode routine was previously executed during the current session, test </PDAT><HIL><BOLD><PDAT>148</PDAT></BOLD></HIL><PDAT> is performed to determine if the active program is within the list of PROGRAM_NAMES that was previously displayed in the menu window </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>). If not, at step </PDAT><HIL><BOLD><PDAT>148</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) scrolls the list of PROGRAM_NAMES, either upwardly or downwardly, to an extent that allows the active program bar </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT>) to appear on the PROGRAM_NAME corresponding to the active program.</PDAT></PTEXT></PARA>
<PARA ID="P-00107" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>152</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) transmits the PROGRAM_ID corresponding to the active program to the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>). The processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) applies the PROGRAM_ID to the program table (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>) to determine the name of the data file (STILL_IMAGE) stored in the mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) that contains the still image data for the active program. The telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) then transmits the data file to the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>), which receives the data at step </PDAT><HIL><BOLD><PDAT>154</PDAT></BOLD></HIL><PDAT>. The graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) displays the still image in the still image window </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT>) at step </PDAT><HIL><BOLD><PDAT>156</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00108" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>158</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) sets the active mode to the list mode. Control then returns to the main program loop of FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>B.</PDAT></PTEXT></PARA>
<PARA ID="P-00109" LVL="0"><PTEXT><PDAT>The logic flow diagram for the preview mode routine is shown in FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>D. The preview mode routine starts at step </PDAT><HIL><BOLD><PDAT>160</PDAT></BOLD></HIL><PDAT>, where the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) transmits the PROGRAM_ID corresponding to the active program to the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>). The processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) receives the PROGRAM_ID and applies it to the program table (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>) to determine the names of the video file (PREVIEW_VIDEO) and the audio file (PREVIEW_AUDIO) stored in the mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) that contain the data for the full-motion preview for the active program. The processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) then transmits the data files to the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>), which receives the data at step </PDAT><HIL><BOLD><PDAT>162</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00110" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>164</PDAT></BOLD></HIL><PDAT>, the PROGRAM_NAME of the active program is displayed at the bottom of the display window </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>). At step </PDAT><HIL><BOLD><PDAT>166</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) decompresses the video portion of the data. Then at step </PDAT><HIL><BOLD><PDAT>168</PDAT></BOLD></HIL><PDAT>, graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) synchronizes the video and the audio portions of the full-motion preview. The synchronized data is provided to the monitor </PDAT><HIL><BOLD><PDAT>34</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) for viewing at the step </PDAT><HIL><BOLD><PDAT>170</PDAT></BOLD></HIL><PDAT>. At step </PDAT><HIL><BOLD><PDAT>172</PDAT></BOLD></HIL><PDAT>, the active mode is set to the preview mode.</PDAT></PTEXT></PARA>
<PARA ID="P-00111" LVL="0"><PTEXT><PDAT>Preferably, each full-motion preview lasts about 30 seconds. It should be noted that the interactive interface does not linger in the preview mode routine while the preview is running. Rather, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) exits the preview mode routine to return to the main program loop (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9B</PDAT></FGREF><PDAT>) to allow the viewer to use the various actuators while the preview is running. Thus, the viewer can stop a preview by activating either the list mode actuator </PDAT><HIL><BOLD><PDAT>66</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>), the information mode actuator </PDAT><HIL><BOLD><PDAT>70</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT>) or the selection actuator </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00112" LVL="0"><PTEXT><PDAT>It should also be noted that several possible courses of action may be taken by the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) when a full-motion preview ends. In one embodiment, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) enters a waiting state within the main program loop (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9B</PDAT></FGREF><PDAT>) until the viewer activates one of the various actuators. In another embodiment (not shown), the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) resets the interactive interface to the list mode, so that viewer can consider other programs. In still another embodiment (not shown), the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) resets the interactive interface to the mode it was in (either the list mode or the information mode) when the user initiated a preview. In yet another embodiment (not shown), the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) cycles through full-motion previews of the programs within the active category until the viewer activates one of the various actuators. The particular programming steps required for the second, third, and fourth embodiments can be easily implemented by one of ordinary skill in the art.</PDAT></PTEXT></PARA>
<PARA ID="P-00113" LVL="0"><PTEXT><PDAT>Turning now to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9E</PDAT></FGREF><PDAT>, the information mode routine is described. The information mode routine begins at step </PDAT><HIL><BOLD><PDAT>174</PDAT></BOLD></HIL><PDAT>, where the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) transmits the PROGRAM_ID corresponding to the active program to the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>). The processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) receives the PROGRAM_ID and applies it to the program table (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>) to extract the DESCRIPTION data item corresponding to the active program. The processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) then transmits the DESCRIPTION to the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>), which receives the data at step </PDAT><HIL><BOLD><PDAT>176</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00114" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>178</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) displays the PROGRAM_NAME and the DESCRIPTION corresponding to the active program in the display window </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>). The active mode is set to the information mode at step </PDAT><HIL><BOLD><PDAT>180</PDAT></BOLD></HIL><PDAT>, and control then returns to the main program loop (FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>B).</PDAT></PTEXT></PARA>
<PARA ID="P-00115" LVL="0"><PTEXT><PDAT>The change category routine is shown in FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>F. The change category routine is executed whenever the viewer actuates either the previous category actuator </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) or the next category actuator </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> (FIGS. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00116" LVL="0"><PTEXT><PDAT>At test </PDAT><HIL><BOLD><PDAT>182</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) determines which of the two category actuators was activated. If the previous category actuator </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) was activated, the active category is set to the previous category in the sequence at step </PDAT><HIL><BOLD><PDAT>184</PDAT></BOLD></HIL><PDAT>. The active category may be set to the last category in the sequence if the actuator </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) is activated while the first category in the sequence is active. If the next category actuator </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) was activated, the active category is set to the next category in the sequence at step </PDAT><HIL><BOLD><PDAT>186</PDAT></BOLD></HIL><PDAT>. The active category may be set to the first category in the sequence if the actuator </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) is activated while the last category in the sequence is active. At step </PDAT><HIL><BOLD><PDAT>188</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) displays the active, previous, and next categories in the category selection bar </PDAT><HIL><BOLD><PDAT>50</PDAT></BOLD></HIL><PDAT>, as described above in connection with </PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00117" LVL="0"><PTEXT><PDAT>At test </PDAT><HIL><BOLD><PDAT>190</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) determines whether the category made active at either step </PDAT><HIL><BOLD><PDAT>184</PDAT></BOLD></HIL><PDAT> or step </PDAT><HIL><BOLD><PDAT>186</PDAT></BOLD></HIL><PDAT> was ever previously active during the current session. If so, the active program is set to the program that was last active within the active category at step </PDAT><HIL><BOLD><PDAT>192</PDAT></BOLD></HIL><PDAT>. Otherwise, the active program is set to the first program in the sequence of programs within the active category. Test </PDAT><HIL><BOLD><PDAT>190</PDAT></BOLD></HIL><PDAT> advantageously allows the viewer to quickly return to the most recently considered program within a particular category&mdash;without having to re-scan the program list.</PDAT></PTEXT></PARA>
<PARA ID="P-00118" LVL="0"><PTEXT><PDAT>Tests </PDAT><HIL><BOLD><PDAT>196</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> are used by the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) to determine the mode that the interactive interface was operating in at the time one of the category actuators was activated. If it is determined at test </PDAT><HIL><BOLD><PDAT>196</PDAT></BOLD></HIL><PDAT> that the list mode is the active mode, the list mode routine is called at step </PDAT><HIL><BOLD><PDAT>198</PDAT></BOLD></HIL><PDAT>. If it is determined at test </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> that the preview mode is the active mode, the preview mode routine is called at step </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT>. Or if it is determined at test </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> that the information mode is the active mode, the information mode routine is called at step </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT>. This sequence of tests and steps causes the interactive interface to return to the active mode and provide the viewer with information corresponding to the new active program.</PDAT></PTEXT></PARA>
<PARA ID="P-00119" LVL="0"><PTEXT><PDAT>The change program routine is shown in FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>G. The change program routine is executed whenever the viewer actuates either the previous program actuator </PDAT><HIL><BOLD><PDAT>58</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) or the next program actuator </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT> (FIGS. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>).</PDAT></PTEXT></PARA>
<PARA ID="P-00120" LVL="0"><PTEXT><PDAT>At test </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) determines which of the two program actuators was activated. If the previous program actuator </PDAT><HIL><BOLD><PDAT>58</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) was activated, the active program is set to the previous program in the sequence at step </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT>. The active program may be set to the last program in the sequence if the actuator </PDAT><HIL><BOLD><PDAT>58</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) is activated while the first program in the sequence is active. If the next program actuator </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) was activated, the active program is set to the next program in the sequence at step </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT>. The active program may be set to the first program in the sequence if the actuator </PDAT><HIL><BOLD><PDAT>60</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) is activated while the last program in the sequence is active.</PDAT></PTEXT></PARA>
<PARA ID="P-00121" LVL="0"><PTEXT><PDAT>Tests </PDAT><HIL><BOLD><PDAT>218</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT>, and steps </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>228</PDAT></BOLD></HIL><PDAT> are executed by the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) to cause the interactive interface to return to the active mode and provide the viewer with information corresponding to the new active program, as described above in connection with FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>F. Control then returns to the main program loop.</PDAT></PTEXT></PARA>
<PARA ID="P-00122" LVL="0"><PTEXT><PDAT>The selection routine, shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 9H</PDAT></FGREF><PDAT>, is called when the viewer activates the selection actuator </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIGS. 6-8</PDAT></FGREF><PDAT>) to view the active program. At test </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> validates the subscriber confirmation data previously transmitted by the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) to determine if the viewing station </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) is a subscribing viewing station. If it is, test </PDAT><HIL><BOLD><PDAT>232</PDAT></BOLD></HIL><PDAT> is performed to determine if the viewer provided a valid VIEWER_ID during the login procedure. If the VIEWER_ID is invalid, control returns to the main program loop. The viewer is thus prevented from viewing the full-length video program unless a valid VIEWER_ID is provided.</PDAT></PTEXT></PARA>
<PARA ID="P-00123" LVL="0"><PTEXT><PDAT>If a valid VIEWER_ID was provided, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) transmits the PROGRAM_ID corresponding to the active program to the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) at step </PDAT><HIL><BOLD><PDAT>234</PDAT></BOLD></HIL><PDAT>. The processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) receives the PROGRAM_ID and applies it to the program table (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>) to determine the location of the active program. If the FULL_VIDEO data item indicates that the video program needs to be retrieved from the tape storage unit of the tape drive system </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>), the processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) causes the tape drive system </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) to retrieve the appropriate tape and transfer the data to the mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>). Otherwise, the processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) uses the FULL_VIDEO and FULL_AUDIO data items to locate the appropriate data files in the mass storage system </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>). The processing system </PDAT><HIL><BOLD><PDAT>22</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) then begins to transmit the data to the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) (preferably in packets, as described above), which in turn receives the data at step </PDAT><HIL><BOLD><PDAT>236</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00124" LVL="0"><PTEXT><PDAT>At step </PDAT><HIL><BOLD><PDAT>238</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) decompresses the video portion of the data. Then at step </PDAT><HIL><BOLD><PDAT>240</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) synchronizes the audio and video portions of the data. The synchronized data is provided to the monitor </PDAT><HIL><BOLD><PDAT>34</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) for viewing at step </PDAT><HIL><BOLD><PDAT>242</PDAT></BOLD></HIL><PDAT>. It should be noted that the full-length program may last several hours. Accordingly, steps </PDAT><HIL><BOLD><PDAT>236</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>238</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>240</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>242</PDAT></BOLD></HIL><PDAT> are repeated as often as necessary to process the large number of data packets that are transmitted from the telecasting facility </PDAT><HIL><BOLD><PDAT>12</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) in connection with the presentation of the full-length program.</PDAT></PTEXT></PARA>
<PARA ID="P-00125" LVL="0"><PTEXT><PDAT>When the full-length program has completed, the list mode routine is called at step </PDAT><HIL><BOLD><PDAT>244</PDAT></BOLD></HIL><PDAT>. Control then returns to the main program loop (FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>B), so that the viewer can use the interactive interface to consider additional video programs for viewing.</PDAT></PTEXT></PARA>
<PARA ID="P-00126" LVL="0"><PTEXT><PDAT>If it is determined at test </PDAT><HIL><BOLD><PDAT>230</PDAT></BOLD></HIL><PDAT> that the viewing station is not a subscribing viewing station, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) displays a message informing the viewer that only subscribing viewing stations can receive full-length video programs. The graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) may provide the viewer with subscription information (such as a program schedule, listing of features, etc.) at step </PDAT><HIL><BOLD><PDAT>246</PDAT></BOLD></HIL><PDAT>. Then at step </PDAT><HIL><BOLD><PDAT>248</PDAT></BOLD></HIL><PDAT>, the viewer may be provided with an opportunity to interactively subscribe to the demand telecasting service. Preferably, if interactive subscribing is provided, the viewer is prompted to confirm a new subscription by pressing the button on the control unit </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) that corresponds to the selection actuator </PDAT><HIL><BOLD><PDAT>62</PDAT></BOLD></HIL><PDAT> (FIGS. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>-</PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>). If the viewer presses any other button on the control unit </PDAT><HIL><BOLD><PDAT>38</PDAT></BOLD></HIL><PDAT> (FIG. </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>), it is interpreted as a refusal.</PDAT></PTEXT></PARA>
<PARA ID="P-00127" LVL="0"><PTEXT><PDAT>At test </PDAT><HIL><BOLD><PDAT>250</PDAT></BOLD></HIL><PDAT>, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) determines whether the viewer accepted or refused a subscription. If the subscription was refused, control returns to the main program loop (FIG. </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT>B). Otherwise, the graphics computer </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> (</PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>) preferably assigns a temporary VIEWER_ID to the viewer so that the viewer can view full-length programs (as described above in connection with steps </PDAT><HIL><BOLD><PDAT>234</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>236</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>238</PDAT></BOLD></HIL><PDAT>, </PDAT><HIL><BOLD><PDAT>240</PDAT></BOLD></HIL><PDAT>, and </PDAT><HIL><BOLD><PDAT>242</PDAT></BOLD></HIL><PDAT>) until the subscription is confirmed. It is contemplated that new subscriptions will be confirmed by mail, telephone, or other suitable means.</PDAT></PTEXT></PARA>
<PARA ID="P-00128" LVL="0"><PTEXT><PDAT>Thus a telecasting service is provided that offers video programs upon viewer demand, and which includes an interactive interface for facilitating viewer selection of video programs. One skilled in the art will appreciate that the present invention can be practiced by other than the described embodiments, which are presented for purposes of illustration and not of limitation, and the present invention is limited only by the claims which follow.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00129" LVL="0"><PTEXT><PDAT>1. A machine-readable data storage medium encoded with a set of machine-executable instructions for performing a method of facilitating selection by users of programming available through an interactive video-on-demand service for display on a display unit, said programming including a plurality of full-length programs and a plurality of previews corresponding respectively to said plurality of full-length programs, said users including subscribers and non-subscribers of said service, said method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>displaying a list of said plurality of full-length programs available for selection, said list available to subscribers and non-subscribers; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>displaying a preview of a full-length program, said preview available to subscribers and non-subscribers; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>displaying a selected full-length program, said selected full-length program available only to subscribers. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00130" LVL="0"><PTEXT><PDAT>2. The machine-readable data storage medium of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said method, as encoded, further comprises displaying textual information corresponding to a full-length program, said information available to subscribers and non-subscribers.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00131" LVL="0"><PTEXT><PDAT>3. The machine-readable data storage medium of claim </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> wherein said method, as encoded, further comprises initiating said displaying of a selected full-length program for a subscriber while said subscriber is displaying one of said list, said preview, and said information.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00132" LVL="0"><PTEXT><PDAT>4. The machine-readable data storage medium of claim </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> wherein said method, as encoded, further comprises moving to any one of said displaying a list, a preview, and textual information from any other one of said displaying a list, a preview, and textual information, said moving available to subscribers and non-subscribers.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00133" LVL="0"><PTEXT><PDAT>5. The machine-readable data storage medium of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said method, as encoded, further comprises soliciting a non-subscriber to become a subscriber substantially immediately after said non-subscriber attempts to display a full-length program.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00134" LVL="0"><PTEXT><PDAT>6. The machine-readable data storage medium of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said method, as encoded, further comprises informing a non-subscriber whether said non-subscriber&apos;s subscription request has been accepted.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00135" LVL="0"><PTEXT><PDAT>7. The machine-readable data storage medium of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said method, as encoded, further comprises scrolling through programs in said list.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00136" LVL="0"><PTEXT><PDAT>8. A subscription video system that facilitates selection of programming by users for display on a display unit, said programming including full-length programs and previews of said full-length programs, said users including subscribers and non-subscribers of a video-on-demand service, said system comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a user input device that allows users to input selections of programming available in said subscription video system, said input device comprising at least one actuator operable by a user; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a computer processor that receives said selections from said users, said processor determining whether a selection is from a subscriber or a non-subscriber, wherein said processor: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>allows display of previews of programs selected by subscribers and non-subscribers; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>allows display of full-length programs selected by subscribers; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>prevents display of full-length programs selected by non-subscribers. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00137" LVL="0"><PTEXT><PDAT>9. The system of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>, wherein, substantially immediately after preventing display of a full-length program selected by a non-subscriber, said processor solicits said non-subscriber to become a subscriber.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00138" LVL="0"><PTEXT><PDAT>10. The system of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> wherein said processor further allows a non-subscriber to become substantially immediately a subscriber.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00139" LVL="0"><PTEXT><PDAT>11. The system of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> wherein said processor further allows a plurality of selectable lists of said full-length programs to be displayed to subscribers and non-subscribers.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00140" LVL="0"><PTEXT><PDAT>12. The system of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> wherein said processor further allows a still image corresponding to a full-length program to be displayed to subscribers and non-subscribers.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00141" LVL="0"><PTEXT><PDAT>13. The system of claim </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> wherein said processor further allows a textual description corresponding to a full-length program to be displayed to subscribers and non-subscribers.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00142" LVL="0"><PTEXT><PDAT>14. A program selection system for interactive selection of programming by subscribers and non-subscribers of a video-on-demand service for display on a display unit, said programming including full-length programs and previews of said full-length programs, said system comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>means for providing at least one program selection menu for subscribers and non-subscribers; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>means for receiving program selections from subscribers and non-subscribers; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>means for allowing display of previews of full-length programs selected by subscribers and non-subscribers; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>means for allowing display of full-length programs selected by subscribers; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>means for preventing display of full-length programs selected by non-subscribers. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00143" LVL="0"><PTEXT><PDAT>15. The system of claim </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> further comprising means for assigning each subscriber a unique identifier for determining whether to display a selected full-length program.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00144" LVL="0"><PTEXT><PDAT>16. The system of claim </PDAT><HIL><BOLD><PDAT>15</PDAT></BOLD></HIL><PDAT> further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>means for receiving an identifier; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>means for determining whether said identifier corresponds to a subscriber. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00017">
<PARA ID="P-00145" LVL="0"><PTEXT><PDAT>17. The system of claim </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> further comprising means for notifying a non-subscriber substantially immediately after selection of a full-length program by said non-subscriber that display of said full-length programs is for subscribers only.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00018">
<PARA ID="P-00146" LVL="0"><PTEXT><PDAT>18. The system of claim </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> further comprising means for soliciting a non-subscriber to become a subscriber substantially immediately after selection of a full-length program by said non-subscriber.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00019">
<PARA ID="P-00147" LVL="0"><PTEXT><PDAT>19. The system of claim </PDAT><HIL><BOLD><PDAT>18</PDAT></BOLD></HIL><PDAT> further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>means for processing substantially immediately a request by said non-subscriber to become a subscriber; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>means for notifying said non-subscriber substantially immediately after said processing whether said request was accepted. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00020">
<PARA ID="P-00148" LVL="0"><PTEXT><PDAT>20. The system of claim </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> wherein said means for providing at least one program selection menu comprises means for displaying a list of full-length programs available for selection.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00021">
<PARA ID="P-00149" LVL="0"><PTEXT><PDAT>21. The system of claim </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT> wherein said means for providing at least one program selection menu further comprises means for scrolling through said list of full-length programs.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00022">
<PARA ID="P-00150" LVL="0"><PTEXT><PDAT>22. The system of claim </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT> wherein said means for providing at least one program selection menu further comprises means for displaying a still image corresponding to a full-length program on said list.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00023">
<PARA ID="P-00151" LVL="0"><PTEXT><PDAT>23. The system of claim </PDAT><HIL><BOLD><PDAT>20</PDAT></BOLD></HIL><PDAT> wherein said means for providing at least one program selection menu further comprises means for displaying textual information corresponding to a full-length program on said list.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00024">
<PARA ID="P-00152" LVL="0"><PTEXT><PDAT>24. The system of claim </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> wherein each said full-length program is categorized into at least one of a plurality of program categories and means for providing at least one program selection menu comprises means for providing a plurality of program selection menus corresponding respectively to said plurality of program categories, each one of said plurality of program selection menus displaying a list of categorized full-length programs.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00025">
<PARA ID="P-00153" LVL="0"><PTEXT><PDAT>25. The system of claim </PDAT><HIL><BOLD><PDAT>24</PDAT></BOLD></HIL><PDAT> wherein said means for providing a plurality of program selection menus further comprises means for selecting other ones of said plurality of program selection menus.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00026">
<PARA ID="P-00154" LVL="0"><PTEXT><PDAT>26. The system of claim </PDAT><HIL><BOLD><PDAT>14</PDAT></BOLD></HIL><PDAT> wherein said means for providing at least one program selection menu comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>means for providing a list mode; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>means for providing an information mode; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>means for providing a preview mode. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00027">
<PARA ID="P-00155" LVL="0"><PTEXT><PDAT>27. The system of claim </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> wherein said means for providing at least one program selection menu further comprises means for initiating display of a full-length program for a subscriber from any one of said list, said information, and said preview modes.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00028">
<PARA ID="P-00156" LVL="0"><PTEXT><PDAT>28. The system of claim </PDAT><HIL><BOLD><PDAT>26</PDAT></BOLD></HIL><PDAT> wherein said means for providing at least one program selection menu further comprises means for moving to any one of said list, said information, and said preview modes from any other one of said list, said information, and said preview modes, said means for moving available to subscribers and non-subscribers.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00029">
<PARA ID="P-00157" LVL="0"><PTEXT><PDAT>29. A method of facilitating selection by users of programming available through an interactive video-on-demand service for display on a display unit, said programming including a plurality of full-length programs and a plurality of previews corresponding respectively to said plurality of full-length programs, said users including subscribers and non-subscribers of said service, said method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>displaying a list of said plurality of full-length programs available for selection, said list available to subscribers and non-subscribers; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>displaying a preview of a full-length program, said preview available to subscribers and non-subscribers; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>displaying a user-selected full-length program, said user-selected full-length program available only to subscribers. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00030">
<PARA ID="P-00158" LVL="0"><PTEXT><PDAT>30. The method of claim </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> further comprising displaying textual information corresponding to a full-length program, said information available to subscribers and non-subscribers.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00031">
<PARA ID="P-00159" LVL="0"><PTEXT><PDAT>31. The method of claim </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> further comprising initiating said displaying of a user-selected full-length program for a subscriber while said subscriber is displaying any one of said list, said preview, and said information.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00032">
<PARA ID="P-00160" LVL="0"><PTEXT><PDAT>32. The method of claim </PDAT><HIL><BOLD><PDAT>30</PDAT></BOLD></HIL><PDAT> further comprising moving to any one of said displaying a list, a preview, and textual information from any other one of said displaying a list, a preview, and textual information by subscribers and non-subscribers.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00033">
<PARA ID="P-00161" LVL="0"><PTEXT><PDAT>33. The method of claim </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> further comprising soliciting a non-subscriber to become a subscriber substantially immediately after said non-subscriber attempts to display a full-length program.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00034">
<PARA ID="P-00162" LVL="0"><PTEXT><PDAT>34. The method of claim </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> further comprising informing a non-subscriber whether said non-subscriber&apos;s subscription request has been accepted.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00035">
<PARA ID="P-00163" LVL="0"><PTEXT><PDAT>35. The method of claim </PDAT><HIL><BOLD><PDAT>29</PDAT></BOLD></HIL><PDAT> further comprising scrolling through programs in said list.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00036">
<PARA ID="P-00164" LVL="0"><PTEXT><PDAT>36. A method of facilitating selection of programming by users for display on a display unit, said programming including full-length programs and previews of said full-length programs, said users including subscribers and non-subscribers of a video-on-demand service, said method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>allowing users to input selections of said programming; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving said selections from said users; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining whether a selection is from a subscriber or a non-subscriber; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>allowing display of previews of programs selected by subscribers and non-subscribers; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>allowing display of full-length programs selected by subscribers; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>preventing display of full-length programs selected by non-subscribers. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00037">
<PARA ID="P-00165" LVL="0"><PTEXT><PDAT>37. The method of claim </PDAT><HIL><BOLD><PDAT>36</PDAT></BOLD></HIL><PDAT> further comprising soliciting a non-subscriber to become a subscriber substantially immediately after preventing display of a full-length program selected by said non-subscriber.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00038">
<PARA ID="P-00166" LVL="0"><PTEXT><PDAT>38. The method of claim </PDAT><HIL><BOLD><PDAT>36</PDAT></BOLD></HIL><PDAT> further comprising allowing a non-subscriber to become substantially immediately a subscriber.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00039">
<PARA ID="P-00167" LVL="0"><PTEXT><PDAT>39. The method of claim </PDAT><HIL><BOLD><PDAT>36</PDAT></BOLD></HIL><PDAT> further comprising allowing a plurality of selectable lists of said full-length programs to be displayed to subscribers and non-subscribers.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00040">
<PARA ID="P-00168" LVL="0"><PTEXT><PDAT>40. The method of claim </PDAT><HIL><BOLD><PDAT>36</PDAT></BOLD></HIL><PDAT> further comprising allowing a still image corresponding to a full-length program to be displayed to subscribers and non-subscribers.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00041">
<PARA ID="P-00169" LVL="0"><PTEXT><PDAT>41. The method of claim </PDAT><HIL><BOLD><PDAT>36</PDAT></BOLD></HIL><PDAT> further comprising allowing a textual description corresponding to a full-length program to be displayed to subscribers and non-subscribers.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00042">
<PARA ID="P-00170" LVL="0"><PTEXT><PDAT>42. A method of interactively selecting programming by subscribers and non-subscribers of a video-on-demand service for display on a display unit, said programming including full-length programs and previews of said full-length programs, said method comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>providing at least one program selection menu for subscribers and non-subscribers; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving program selections from subscribers and non-subscribers; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>allowing display of previews of full-length programs selected by subscribers and non-subscribers; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>allowing display of full-length programs selected by subscribers; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>preventing display of full-length programs selected by non-subscribers. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00043">
<PARA ID="P-00171" LVL="0"><PTEXT><PDAT>43. The method of claim </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> further comprising assigning each subscriber a unique identifier for determining whether to display a selected full-length program.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00044">
<PARA ID="P-00172" LVL="0"><PTEXT><PDAT>44. The method of claim </PDAT><HIL><BOLD><PDAT>43</PDAT></BOLD></HIL><PDAT> wherein said receiving program selections further comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving an identifier; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>determining whether said identifier corresponds to a subscriber. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00045">
<PARA ID="P-00173" LVL="0"><PTEXT><PDAT>45. The method of claim </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> further comprising notifying a non-subscriber substantially immediately after selection of a full-length program by said non-subscriber that display of said full-length programs is for subscribers only.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00046">
<PARA ID="P-00174" LVL="0"><PTEXT><PDAT>46. The method of claim </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> further comprising soliciting a non-subscriber to become a subscriber substantially immediately after selection of a full-length program by said non-subscriber.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00047">
<PARA ID="P-00175" LVL="0"><PTEXT><PDAT>47. The method of claim </PDAT><HIL><BOLD><PDAT>46</PDAT></BOLD></HIL><PDAT> further comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>processing substantially immediately a request by said non-subscriber to become a subscriber; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>notifying said non-subscriber substantially immediately after said processing whether said request was accepted. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00048">
<PARA ID="P-00176" LVL="0"><PTEXT><PDAT>48. The method of claim </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> wherein said providing at least one program selection menu comprises displaying a list of full-length programs available for selection.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00049">
<PARA ID="P-00177" LVL="0"><PTEXT><PDAT>49. The method of claim </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> wherein said providing at least one program selection menu further comprises providing at least one actuator for scrolling through said list of full-length programs.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00050">
<PARA ID="P-00178" LVL="0"><PTEXT><PDAT>50. The method of claim </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> wherein said providing at least one program selection menu further comprises displaying a still image corresponding to a full-length program on said list.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00051">
<PARA ID="P-00179" LVL="0"><PTEXT><PDAT>51. The method of claim </PDAT><HIL><BOLD><PDAT>48</PDAT></BOLD></HIL><PDAT> wherein said providing at least one program selection menu further comprises displaying textual information corresponding to a full-length program on said list.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00052">
<PARA ID="P-00180" LVL="0"><PTEXT><PDAT>52. The method of claim </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> wherein said providing at least one program selection menu comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>categorizing each said full-length program into at least one of a plurality of program categories; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>providing a plurality of program selection menus corresponding respectively to said plurality of program categories, each one of said plurality of program selection menus displaying a list of categorized full-length programs. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00053">
<PARA ID="P-00181" LVL="0"><PTEXT><PDAT>53. The method of claim </PDAT><HIL><BOLD><PDAT>52</PDAT></BOLD></HIL><PDAT> wherein said providing a plurality of program selection menus further comprises providing at least one category actuator for selecting other ones of said plurality of program selection menus.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00054">
<PARA ID="P-00182" LVL="0"><PTEXT><PDAT>54. The method of claim </PDAT><HIL><BOLD><PDAT>44</PDAT></BOLD></HIL><PDAT> wherein said providing at least one program selection menu comprises:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>providing a list mode; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>providing an information mode; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>providing a preview mode. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00055">
<PARA ID="P-00183" LVL="0"><PTEXT><PDAT>55. The method of claim </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> further comprising initiating display of a full-length program for a subscriber from any one of said list, said information, and said preview modes.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00056">
<PARA ID="P-00184" LVL="0"><PTEXT><PDAT>56. The method of claim </PDAT><HIL><BOLD><PDAT>54</PDAT></BOLD></HIL><PDAT> further comprising moving to any one of said list, said information, and said preview modes from any other one of said list, said information, and said preview modes by subscribers and non-subscribers.</PDAT></PTEXT></PARA>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314575-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314575-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314575-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314575-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314575-20011106-D00004.TIF">
<EMI ID="EMI-D00005" FILE="US06314575-20011106-D00005.TIF">
<EMI ID="EMI-D00006" FILE="US06314575-20011106-D00006.TIF">
<EMI ID="EMI-D00007" FILE="US06314575-20011106-D00007.TIF">
<EMI ID="EMI-D00008" FILE="US06314575-20011106-D00008.TIF">
<EMI ID="EMI-D00009" FILE="US06314575-20011106-D00009.TIF">
<EMI ID="EMI-D00010" FILE="US06314575-20011106-D00010.TIF">
<EMI ID="EMI-D00011" FILE="US06314575-20011106-D00011.TIF">
<EMI ID="EMI-D00012" FILE="US06314575-20011106-D00012.TIF">
<EMI ID="EMI-D00013" FILE="US06314575-20011106-D00013.TIF">
<EMI ID="EMI-D00014" FILE="US06314575-20011106-D00014.TIF">
<EMI ID="EMI-D00015" FILE="US06314575-20011106-D00015.TIF">
<EMI ID="EMI-D00016" FILE="US06314575-20011106-D00016.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314576-20011106-D00000.TIF SYSTEM "US06314576-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314576-20011106-D00001.TIF SYSTEM "US06314576-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314576-20011106-D00002.TIF SYSTEM "US06314576-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314576-20011106-D00003.TIF SYSTEM "US06314576-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314576-20011106-D00004.TIF SYSTEM "US06314576-20011106-D00004.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314576</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>08794905</PDAT></DNUM></B210>
<B211US><PDAT>08</PDAT></B211US>
<B220><DATE><PDAT>19970204</PDAT></DATE></B220>
</B200>
<B300>
<B310><DNUM><PDAT>08-021252</PDAT></DNUM></B310>
<B320><DATE><PDAT>19960207</PDAT></DATE></B320>
<B330><CTRY><PDAT>JP</PDAT></CTRY></B330>
</B300>
<B500>
<B510>
<B511><PDAT>H04N  7173</PDAT></B511>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>725 91</PDAT></B521>
<B522><PDAT>725 92</PDAT></B522>
<B522><PDAT>725101</PDAT></B522>
<B522><PDAT>725114</PDAT></B522>
<B522><PDAT>725115</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Video and audio signal editing and transmitting apparatus and method of same</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5132992</PDAT></DNUM>
<DATE><PDAT>19920700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Yurt et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>375122</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5133079</PDAT></DNUM>
<DATE><PDAT>19920700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Ballantyne et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>455  41</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5371532</PDAT></DNUM>
<DATE><PDAT>19941200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Gelman et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5421031</PDAT></DNUM>
<DATE><PDAT>19950500</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>De Bey</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>455  51</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5442390</PDAT></DNUM>
<DATE><PDAT>19950800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hooper et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5600364</PDAT></DNUM>
<DATE><PDAT>19970200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hendricks et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  1</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5872874</PDAT></DNUM>
<DATE><PDAT>19990200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Natarajan</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>382298</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
</B560>
<B570>
<B577><PDAT>11</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B581><PDAT>H04N  716</PDAT></B581>
<B581><PDAT>H04N  7173</PDAT></B581>
<B582><PDAT>345327</PDAT></B582>
<B582><PDAT>348  7</PDAT></B582>
<B582><PDAT>348 12</PDAT></B582>
<B582><PDAT>348 13</PDAT></B582>
<B582><PDAT>348  9</PDAT></B582>
<B582><PDAT>348 10</PDAT></B582>
<B582><PDAT>455  42</PDAT></B582>
<B582><PDAT>455  51</PDAT></B582>
<B582><PDAT>455  61</PDAT></B582>
<B582><PDAT>455  62</PDAT></B582>
<B582><PDAT>455  63</PDAT></B582>
<B582><PDAT>725 92</PDAT></B582>
<B582><PDAT>725 91</PDAT></B582>
<B582><PDAT>725115</PDAT></B582>
<B582><PDAT>725114</PDAT></B582>
<B582><PDAT>725 87</PDAT></B582>
<B582><PDAT>725 93</PDAT></B582>
<B582><PDAT>725 94</PDAT></B582>
<B582><PDAT>725 98</PDAT></B582>
<B582><PDAT>725101</PDAT></B582>
<B582><PDAT>725116</PDAT></B582>
</B580>
<B590><B595><PDAT>4</PDAT></B595><B596><PDAT>4</PDAT></B596><B597US>
</B590>
</B500>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Noboru</PDAT></FNM><SNM><STEXT><PDAT>Asamizuya</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Kanagawa</PDAT></CITY>
<CTRY><PDAT>JP</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Norio</PDAT></FNM><SNM><STEXT><PDAT>Ebihara</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Kanagawa</PDAT></CITY>
<CTRY><PDAT>JP</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Yasumasa</PDAT></FNM><SNM><STEXT><PDAT>Kodama</PDAT></STEXT></SNM></NAM>
<ADR>
<CITY><PDAT>Kanagawa</PDAT></CITY>
<CTRY><PDAT>JP</PDAT></CTRY>
</ADR>
</PARTY-US>
</B721>
</B720>
<B730>
<B731>
<PARTY-US>
<NAM><ONM><STEXT><PDAT>Sony Corporation</PDAT></STEXT></ONM></NAM>
<ADR><CITY><PDAT>Tokyo</PDAT></CITY><CTRY><PDAT>JP</PDAT></CTRY></ADR>
</PARTY-US>
</B731>
<B732US>
<PDAT>03</PDAT>
</B732US>
</B730>
<B740>
<B741>
<PARTY-US>
<NAM><FNM><PDAT>Jay H.</PDAT></FNM><SNM><STEXT><PDAT>Maioli</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B741>
</B740>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Chris</PDAT></FNM><SNM><STEXT><PDAT>Grant</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B748US><PDAT>2611</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>A hardware configuration suited for a digital video and audio signal broadcast system such as a near-video on-demand apparatus (NVOD apparatus) includes a compilation unit, a play-out unit, a transmission unit, and a subscriber unit. The compilation unit stores several weeks to several months worth of the video and audio signals obtained by reproducing, compressing, encoding, and editing the broadcast stock according to a long term broadcast schedule of several weeks to several months. The play-out unit stores the video and audio signals stored in the compilation unit for several days to several weeks according to a broadcast schedule of several days to several weeks, reproduces the video and audio signals which become necessary for the real time broadcast, and adds a time difference to these video and audio signals distributed to a plurality of channels. The transmission unit transmits the plurality of channels worth of the video and audio signals given the time difference at the play-out unit to a subscriber unit.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>1. Field of the Invention</PDAT></PTEXT></PARA>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>The present invention relates to a video and audio signal editing and transmitting apparatus for editing and transmitting video and audio signals, more particularly relates to a video-on-demand (VOD) system which provides a desired program selected from among stored video programs such as movies or other video and audio signals to a subscriber when it is demanded or a near-video-on-demand (NVOD) apparatus, that is, what may be called a simplified version of a video-on-demand (VOD) system.</PDAT></PTEXT></PARA>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>2. Description of the Related Art</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>Among the video and audio signal editing and transmitting apparatuses now being developed, mention may be particularly made of the video-on-demand (VOD) apparatuses and the near-video-on-demand (NVOD) apparatuses.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>A video-on-demand (VOD) system is a digital two-way dialog type broadcast system which provides a video program such as movie requested by a user (subscriber) to the user at his or her home or other location immediately upon demand. With a video-on-demand (VOD) system, a subscriber would be able to view the video program he or she requested at the time requested via a television receiver at his or her own home etc. The content provided by such a video-on-demand (VOD) system would not be limited to movie programs. It would be possible to provide any picture and audio signals corresponding to that picture as well. In the following description, however, reference will be mainly made to the broadcast of a movie program as typical example of the content.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>A video-on-demand (VOD) system is supposed to allow a large number of subscribers to request the programs they desire at any time, therefore the amount of the data in the video and audio signals transmitted from the broadcasting station to the subscribers would become enormous. As a result, the transmission capacity of the transmission path and the data processing ability at the broadcasting station side would both have to be large. If the number of the subscribers becomes too large and requests are made from too many subscribers at the same time, there is a good chance that disadvantages would occur in terms of the response time. Of course, installation of a large number of apparatuses capable of performing high speed processing would enable all of these requests to be responded to instantaneously, but this would make the overall system extremely expensive.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>To overcome these disadvantages anticipated in video-on-demand (VOD) systems, a near-video-on-demand (NVOD) system has been proposed as a more practical version of a video-on-demand (VOD) system. In a near-video-on-demand (NVOD) system, the same program is sent over a number of channels staggered in time. By selecting from among these channels, it is possible to provide the subscriber with his or her desired program after a short wait or to even allow the subscriber to view the program from a later part he or she particularly desires to see.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>While a near-video-on-demand (NVOD) system does not have the instantaneous response time of a video-on-demand (VOD) system in the strict sense of the term, a user can for example start viewing the program he or she desired after just waiting for 10 to 15 minutes at the most after he or she makes the request when the program is sent at 10 or 15 minute time intervals. Therefore, there is no disadvantage in terms of practical use. Further, there are the advantages that realization of such a near-video-on-demand (NVOD) system requires a much simpler configuration of hardware than realization of a video-on-demand (VOD) system and that the processing speed does not have to be as fast as with a video-on-demand (VOD) system.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>Further, if a subscriber views the content of a certain program up to the middle of the program and then has to stop for some reason or another, as stated above, he or she can resume viewing the program from the middle by just selecting from among the channels over which the program is being broadcast. Therefore, there is the additional advantage that the subscriber need not view a program at a single long sitting and can stop it midway and can resume viewing from a desired portion later, that is, can view it just like viewing a program recorded on a video tape at a home video cassette recorder.</PDAT></PTEXT></PARA>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>One of the easiest ways to realize a video on-demand (VOD) system or a near-video on-demand (NVOD) system would be to connect a plurality of digital compression and encoding apparatuses at the transmission stage of a conventional broadcasting system, input their outputs to a digital multiplexing device, and broadcast the result through a modulating device and transmitting device.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>However, when adopting such a method for a near-video-on-demand (NVOD) apparatus, it suffers from the disadvantage that the same number of transmission portions of the conventional broadcasting system and the same number of digital compression and encoding devices as the number of the multiple channels become necessary, therefore the entire system would become large in size and, at the same time, the price would become high.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>Further, in the conventional hardware configuration, the hardware as a whole is designed for providing near-video-on-demand NVOD service. The functions of the system as a whole are not suitably broken down and the components are not separated. Therefore, this configuration is not suited to partial modification or replacement of the hardware.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>Note that while the related art was described with reference particularly to a video-on-demand (VOD) system or a near-video-on-demand (NVOD) system, there are similar disadvantages in also other video and audio signal editing and transmitting apparatuses performing similar processing to these systems.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>An object of the present invention is to provide a near-video on-demand (NVOD) apparatus which is simple in configuration and enables modification and partial replacement of the hardware configuration.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>Another object of the present invention is to provide a near-video-on-demand (NVOD) compilation apparatus which can be preferably applied to a near-video-on-demand (NVOD) apparatus.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>Still another object of the present invention is to provide a near-video-on-demand (NVOD) play-out apparatus which can be preferably applied to a near-video-on-demand (NVOD) apparatus.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>Still another object of the present invention is to provide a transmission apparatus which can be preferably applied to a near-video-on-demand (NVOD) apparatus.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><PDAT>Still another object of the present invention is to provide a near-video-on-demand (NVOD) subscriber apparatus which can be preferably applied to a near-video-on-demand (NVOD) apparatus.</PDAT></PTEXT></PARA>
<PARA ID="P-00020" LVL="0"><PTEXT><PDAT>Still another object of the present invention is to provide a hardware configuration which can be applied to a simple configuration video-on-demand (VOD) apparatus.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><PDAT>Still another object of the present invention is to provide a hardware configuration which can be applied to a simple configuration video and audio signal editing and transmitting apparatus.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><PDAT>According to the present invention, there is provided a video and audio signal editing and transmitting apparatus provided with a compilation unit which has a first storage means, receives original video signals serving as video stock and original audio signals corresponding to the original video signals, compresses and encodes the received signals, performs predetermined editing on the compressed and encoded digital video and audio signals, stores the results in the first storage means, and transmits the digital compressed and encoded video and audio signals stored in the first storage means in accordance with a first transmission request; a play-out unit which has a second storage means having a smaller capacity than the storage capacity of the first storage means, receives the digital compressed and encoded video and audio signals transmitted from the compilation unit, stores them in the second storage means, reads and reproduces the digital compressed and encoded video and audio signals from the second storage means in accordance with a second transmission request, and transmits the reproduced digital video and audio signals; and a transmission unit which transmits the reproduced digital video and audio signals transmitted from the play-out unit to subscribers according to the broadcast schedule.</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><PDAT>The video and audio signal editing and transmitting apparatus of the present invention may be further provided with a subscriber unit having an instruction means which is connected to the transmission unit for selecting a program to be received from the transmission unit and a receiving means for receiving and decoding the digital video and audio signals transmitted from the transmission unit.</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><PDAT>When the video and audio signal editing and transmitting apparatus is used as a near-video-on-demand (NVOD) apparatus, the play-out unit copies the continuous video and audio signals to a plurality of channels of the video and audio signals, successively adds a predetermined time difference to these plurality of channels of video and audio signals, and transmits the same to the transmission unit. The transmission unit transmits the plurality of channels of the video and audio signals given the time difference to the subscriber unit.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><PDAT>Further, according to the present invention, there is provided a compilation apparatus able to be applied to a video and audio signal editing and transmitting apparatus, in particular, a video-on demand (VOD) apparatus or a near-video-on-demand (NVOD) apparatus.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><PDAT>The compilation apparatus is provided with an encoder for compressing and encoding the video and audio signals of the program to be broadcasted; a storage means for storing the compressed and encoded video and audio signals for several weeks to several months worth of broadcasts according to the broadcast schedule; a data transmitting means for transmitting the compressed and encoded video and audio signals stored in the storage means to an external portion in accordance with a transmission request; and a compilation system controller for controlling the encoder, the storage means, and the data transmitting means.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>According to the present invention, there is also provided a play-out apparatus able to be applied to a near-video-on-demand (NVOD) apparatus.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><PDAT>The near-video-on-demand (NVOD) play-out apparatus is provided with a recording means for recording the compressed and encoded broadcast-use video and audio signals; a signal distributing means for reading the video and audio signals stored in the storage means in accordance with a request and distributing the same to a plurality of channels; a reproducing means for reproducing the compressed and encoded video and audio signals distributed to the plurality of channels and successively giving a time difference to these reproduced plurality of channels worth of video and audio signals; a switching means for switching the plurality of compressed and encoded video and audio signals which are reproduced and given the time difference based on a switching request; and a play-out system controller for controlling the recording means, the signal distributing means, and the reproducing means in accordance with the broadcast content.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><PDAT>According to the present invention, there is further provided a transmission apparatus able to be applied to a near-video-on-demand (NVOD) apparatus.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><PDAT>The transmission apparatus is provided with a switching means for switching the plurality of channels worth of compressed and encoded video and audio signals successively given a time difference in accordance with a broadcast request; a first multiplexing means for multiplexing the switched plurality of channels worth of compressed and coded video and audio signals for a satellite broadcast; a first modulating means for modulating the video and audio signals multiplexed by the first multiplexing means for the satellite broadcast; a first transmitting means for transmitting the modulated video and audio signals modulated by the first modulating means toward an antenna; a second multiplexing means for multiplexing the switched plurality of channels worth of compressed and coded video and audio signals for a cable broadcast; a second modulating means for modulating the video and audio signals multiplexed by the second multiplexing means for a cable broadcast; and a second transmitting means for transmitting the modulated video and audio signals modulated at the second modulating means via a cable.</PDAT></PTEXT></PARA>
<PARA ID="P-00031" LVL="0"><PTEXT><PDAT>Further, according to the present invention, there is provided a near-video-on-demand (NVOD) subscriber apparatus connected by electromagnetic waves or connected by cable to the transmission apparatus.</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><PDAT>The near-video-on-demand (NVOD) subscriber apparatus is provided with a receiving means for receiving the plurality of channels worth of compressed and coded video and audio signals transmitted from the transmission apparatus and a decoding means for decoding the received video and audio signals.</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><PDAT>Further, according to the present invention, there is provided a video and audio editing and transmitting method.</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><PDAT>The video and audio editing and transmitting method is provided with the following steps, that is, a step of receiving original video signals serving as video stock and original audio signals corresponding to the original video signals and compressing and encoding the received signals; a step of performing predetermined editing on the compressed and encoded digital video and audio signals and storing them in a first storage means; a step of transmitting the digital compressed and encoded video and audio signals stored in the first storage means in accordance with a first transmission request; a step of receiving the transmitted digital compressed and encoded video and audio signals and storing the same in a second storage means having a smaller capacity than the storage capacity of the first storage means; a step of reading and reproducing the digital compressed and encoded video and audio signals from the second storage means in accordance with a second transmission request and transmitting the reproduced digital video and audio signals; and a step of transmitting the transmitted reproduced digital video and audio signals to the subscribers according to a broadcast schedule.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00035" LVL="0"><PTEXT><PDAT>These and other objects and features of the invention will become clearer from the following description of the preferred embodiments made with reference to the attached drawings, in which:</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a view of the overall configuration of a near-video on-demand (NVOD) apparatus according to a first embodiment of a video and audio signal editing and transmitting apparatus of the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a view of the configuration of the near-video-on-demand (NVOD) compilation unit shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>;</PDAT></PTEXT></PARA>
<PARA ID="P-00038" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> is a view of the configuration of the near-video-on-demand (NVOD) play-out unit shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>; and</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> is a view of the configuration of a transmission unit and a subscriber unit shown in FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DESCRIPTION OF THE PREFERRED EMBODIMENTS</PDAT></STEXT></H>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>An example of a near-video-on-demand (NVOD) apparatus will be described as a first embodiment of the video and audio signal editing and transmitting apparatus of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>In this specification, video information or video signals mean not only pure video signals, but also the audio signals related to the pure video signal as in a movie and television broadcast program etc., that is, both of the audio signal and video signal, that is, an AV signal. Below, a video signal and audio signal will be abbreviated as an &ldquo;AV signal&rdquo;.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>Overall Configuration</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a view of the overall configuration of a near-video-on-demand (NVOD) apparatus of a first embodiment of a video and audio signal editing and transmitting apparatus of the present invention.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>A near-video-on-demand (NVOD) apparatus </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> is constituted by a near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, a near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, a transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT>, and a near-video-on-demand (NVOD) subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>The near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, and the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> are disposed on for example the side providing the near-video-on-demand (NVOD) program, for example, the broadcasting station. The near-video-on-demand (NVOD) subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> is the apparatus installed at the home or other premise of the subscriber utilizing the near-video-on-demand (NVOD) service.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>In the embodiment of the present invention, for example, the hardware (equipment) installed at the broadcasting station is divided into the near-video-on-demand (NVOD) compilation unit (apparatus) </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, the near-video-on-demand (NVOD) play-out unit (apparatus) </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, and the transmission unit (apparatus) </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT>. Therefore, the processing is suitably dispersed, the overall hardware configuration is suitably assembled, and the hardware configuration is made flexible and simple so as to enable various requests and modifications to be handled when realizing the near-video-on-demand (NVOD) system. Details of this will be explained below when describing the details of each component.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>Below, a description will be made of the general operation of the components of the near-video-on-demand (NVOD) apparatus </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>The near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> converts video stock such as movies in advance into a digital data format, in view of the broadcast format, according to the long term broadcast schedule (broadcast programs) for the next several weeks to several months, edits it, and stores the same in a large capacity digital storage (first recording means comprising a record controller </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT> and an archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>). Accordingly, the first storage means is a large capacity digital storage capable of storing AV signals for several weeks to several months of broadcasts. The near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> transmits the AV signals recorded in the first recording means to the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> in accordance with the broadcast schedule or a request from the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>The near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> stores several days to several weeks worth of the AV signals of the video information transmitted from the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> in another large capacity digital storage (second recording means comprising near line storage </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> of FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>). Accordingly, the second storage means is a large capacity digital storage capable of storing several days to several weeks worth of the AV signals. The AV signals stored in the second storage means are transferred to an on-line storage (third storage means comprising a plurality of on-line storages </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT>) in the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> according to the broadcast schedule. Then, according to the broadcast schedule, the video information transferred to the on-line storage is reproduced for multiple channels with a time difference and transmitted to the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>The transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> multiplexes several channels of the plurality of channels of video information given the time difference transmitted from the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, modulates this, and transmits the same to the near-video-on-demand (NVOD) subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>The subscriber at the near-video-on-demand (NVOD) subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> indicates his or her desired video information from among the multiple channels of video information transmitted from the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> to cause it to be displayed on the television receiver or the like. In certain cases, the company collecting the reception fee on behalf of the broadcaster monitors the state of reception by the subscriber through an upstream signal or other communication means to determine the charges.</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>Charges of memory are naturally incurred along with the utilization of the near-video-on-demand (NVOD) service, but the charging system is not described in the above configuration. In the near-video-on-demand (NVOD) apparatus of the embodiments of the present invention, however, various known charging systems can be adopted. For example, a charging system such as in a cable type broadcast system such as a CATV system can be applied.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>The relationship among the first storage means (the record controller </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT> and archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>) in the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, the second storage means (near line storage </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) in the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, and the third storage means (plurality of on-line storages </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) will be explained next.</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>The first storage means (archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>) in the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> stores the programs to be edited in advance according to a long term broadcast schedule of several weeks to several months.</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>Note that to enable high efficiency storage of a large amount of AV signals in the first storage means, the data is compressed and encoded at the encoder </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> so as to greatly reduce the amount of the data.</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>The second storage means (near line storage </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) in the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> stores the AV signals of the broadcast programs which are scheduled to be broadcast in several days to several weeks. The second storage means also stores compressed and encoded AV signals.</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="0"><PTEXT><PDAT>The third storage means (plurality of on-line storages </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> of </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>) in the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> temporarily stores the AV signals of the programs to be broadcasted at present among the AV signals stored in the second storage means. The third storage means also stores compressed and encoded AV signals.</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="0"><PTEXT><PDAT>The hierarchization of the storage means in accordance with the magnitude of the storage capacity and objective of use as described above enables the design of suitable storage capacities, an increase of the speed of the storage and reading, ease of management of storage, and other more efficient management of storage and processing according to the objective of use.</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="0"><PTEXT><PDAT>Further, the hierarchization of the storage means described above enables the separation of the components in the near-video-on-demand (NVOD) apparatus. For example, the first storage means in the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> stores broadcast use AV signals for a long period of up to several weeks to several months and cannot be placed near the near-video-on-demand (NVOD) subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> to which the AV signals must be provided on-line. Accordingly, a near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> is provided disposed in a central broadcasting station commonly with respect to a plurality of near-video-on-demand (NVOD) play-out units </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> and stores several weeks to several months of the AV signals for each of the plurality of near-video-on-demand (NVOD) play-out units </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>. Further, it is also possible to provide a duplicate first storage means to enhance the reliability of the stored data.</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="0"><PTEXT><PDAT>The second storage means in the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> receives as input several days to several weeks worth of the broadcast use AV signals in advance every several days to several weeks from the first storage means of the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> according to the broadcast schedule and stores them in advance. Further, it is possible to provide a duplicate second storage means to enhance the reliability of the stored data. In this case, the second storage means has a smaller size than the first storage means, therefore even if there are a plurality of near-video-on-demand (NVOD) play-out units </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, the duplexing of the second storage means in each near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> is not that heavy a load economically speaking.</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>As explained referring to FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> and </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>, in the present embodiment, a case of using a communication line </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> or a portable recording medium </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> for transferring the AV signals stored in the first storage means (archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT>) to the second storage means is shown.</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="0"><PTEXT><PDAT>The third storage means in the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> exists near the near-video-on-demand (NVOD) subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> and temporarily stores the AV signals of the broadcast program to be broadcasted for the playback. Accordingly, the third storage means is desirably placed near the near-video-on-demand (NVOD) subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>. Since the third storage means temporarily stores the AV signals to be broadcasted at present, even if the AV signal is transmitted out, it is possible to read the AV signal for the next broadcast from the second storage means, therefore it is not particularly necessary to provide a duplicate third storage means.</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="0"><PTEXT><PDAT>For reasons relating to the data transmission, the third storage means is desirably placed near the near-video-on-demand (NVOD) subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>. Accordingly, desirably the third storage means is placed near the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> at the terminal of the near-video-on-demand (NVOD) apparatus </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="0"><PTEXT><PDAT>The second storage means in the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> can be disposed somewhere between the positions of the first storage means and the third storage means.</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="0"><PTEXT><PDAT>The present embodiment shows a case where the second storage means (near line storage </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT>) and the third storage means (plurality of on-line storages </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT>) are provided in the same near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>. The reason for this is to avoid complicating the overall configuration where the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> is designed as a separate unit as in the present embodiment. However, for certain other configurations of the near-video-on demand (NVOD) apparatus, it would be possible to divide the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> part into two, that is, a part before the near line storage </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> and a part after the plurality of on-line storages </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="0"><PTEXT><PDAT>In the near-video-on-demand (NVOD) apparatus </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, the compressed and encoded digital AV signals flow according to the MPEG2 standard, which is now becoming the universal standard for image data compression, over the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> to the near-video-on-demand (NVOD) subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>. In this way, by using AV signals compressed and encoded with the unified standard in the entire near-video-on-demand (NVOD) apparatus </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, standardization of the signal processing, sharing (standardization) of the hardware, and maintenance of the compatibility are achieved.</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="0"><PTEXT><PDAT>Details of the components of the near-video-on-demand (NVOD) apparatus </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> will be explained below.</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="0"><PTEXT><PDAT>Near-Video-on-Demand (NVOD) Compilation Unit</PDAT></PTEXT></PARA>
<PARA ID="P-00069" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> is a view of the detailed configuration of the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="0"><PTEXT><PDAT>The near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> edits and compresses film stock such as video film or video stock recorded on video tape, stores them for a long period, and transmits the required video information to the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> in accordance with the broadcast.</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="0"><PTEXT><PDAT>The near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> has a film stock conversion device (device called &ldquo;Telecine&rdquo;) </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> which reads the movie of the film stock recorded on the films </PDAT><HIL><BOLD><PDAT>102</PDAT></BOLD></HIL><PDAT> and </PDAT><HIL><BOLD><PDAT>104</PDAT></BOLD></HIL><PDAT> and converts the same to video signals and audio signals, that is, AV signals.</PDAT></PTEXT></PARA>
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>Further, the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> has a video signal reproducing apparatus (VTR) </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> for reproducing the analog or digital AV signals recorded on video tape (referred to as &ldquo;VTR stock&rdquo;).</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="0"><PTEXT><PDAT>The near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> has a switching circuit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> for selecting the signal from the film stock conversion device </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> or the signal from the video signal reproducing apparatus (VTR) </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00074" LVL="0"><PTEXT><PDAT>After the switching circuit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> is provided an encoding device (encoder) </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>. The encoder </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> compresses and encodes the video signals and audio signals of the film stock or the VTR stock input via the switching circuit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> based on the MPEG2 standard. Accordingly, the signal after the encoder </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> is a digital AV signal compressed and encoded by the MPEG2 standard.</PDAT></PTEXT></PARA>
<PARA ID="P-00075" LVL="0"><PTEXT><PDAT>The near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> further has the above large capacity storage means, that is, the record controller </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT> and the archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT>, as the first storage means.</PDAT></PTEXT></PARA>
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>The near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> has a communication controller </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT> which transmits the AV signals recorded in the archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> through the communication path </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> and a removable storage </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> for storing the AV signals recorded in the archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> on a recording medium </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00077" LVL="0"><PTEXT><PDAT>Further, the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> has a near-video-on-demand (NVOD) compilation system controller </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT> for controlling the operation of the components explained above. The near-video-on-demand (NVOD) compilation system controller </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT> is realized by a personal computer system.</PDAT></PTEXT></PARA>
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>In the following description, the MPEG2 standard is used for the compression and encoding. As the video signal, audio signal, and code data, a transport stream (TS) of the MPEG2 standard is used.</PDAT></PTEXT></PARA>
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>The compilation system controller </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT> biases the switching circuit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> so that the film stock conversion device </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> is selected when editing is carried out by using the film stock and so that the video signal reproducing apparatus (VTR) </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> is selected when the editing is carried out by using the VTR stock based on a long term broadcast schedule of several weeks to several months set by the user. The signals from the selected apparatus are supplied to the encoder </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>. For instance, when editing the AV signals from the film stock, the compilation system controller </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT> biases the switching circuit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> to enable the operation of the film stock conversion device </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> and have the digital AV signals converted at the film stock conversion device </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> input to the encoder </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>. Conversely, when editing the AV signals from the VTR stock, the compilation system controller </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT> biases the switching circuit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> to enable the operation of the video signal reproducing apparatus (VTR) </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> and have the digital AV signals reproduced at the VTR </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> input to the encoder </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>The encoder </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> performs the compression and encoding for the input digital AV signals selected at the switching circuit </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> according to the control of the compilation system controller </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT>. Accordingly, the AV signals output from the encoder </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> to the record controller </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT> are digital AV signals compressed and encoded by the MPEG2 standard.</PDAT></PTEXT></PARA>
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>The encoder </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT>, when necessary, multiplexes packets of the video signals, audio signals, and code data in the form of code data packets to be inserted when transmitting the data from the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> to the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> in advance and outputs the same in the form of a transport stream (TS) of the MPEG2 standard.</PDAT></PTEXT></PARA>
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>The &ldquo;code data &rdquo; means the data of the information indicating what channel broadcasts what program, information for the text broadcasts, subtitles, etc. This code data is inserted into the AV signal in a plurality of code data insertion circuits </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT> in the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> explained later referring to FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>The record controller </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT> performs the control for storing the digital compressed and encoded AV signals transmitted from the encoder </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> in the archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>The archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> is a large capacity digital storage for storing several months of video programs for a long period in advance based on a long term broadcast schedule in the near-video-on-demand (NVOD) apparatus. The archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> is constituted by using a combination of a digital data recorder and auto-changer for recording and reproducing the digital AV signals on for example a magnetic tape or using a removable medium such as an auto-changer using a magneto-optical (MO) disc recording medium.</PDAT></PTEXT></PARA>
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>The record controller </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT> stores the digital AV signals transmitted from the encoder </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> in the archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> based on a command from the compilation system controller </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>Preferably, the record controller </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT> edits the data so as to obtain a signal storage format efficient for highly efficient reading from the archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> and signal processing at the time of the broadcast in accordance with the time difference during staggered reproduction for several channels in the near-video-on-demand (NVOD) system instructed from the compilation system controller </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT> and makes the archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> store this. When editing and storing the video and audio signals in the archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> in this way, when the data is read from the archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> and reproduced via the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, staggered playback for multiple channels becomes possible by just repeating a sequential playback.</PDAT></PTEXT></PARA>
<PARA ID="P-00087" LVL="0"><PTEXT><PDAT>When applying the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> not to a near-video-on-demand (NVOD) apparatus, but to a video-on-demand (VOD) apparatus, it is sufficient to transmit different AV signals to a plurality of channels rather than the same AV signal to multiple channels with a time difference.</PDAT></PTEXT></PARA>
<PARA ID="P-00088" LVL="0"><PTEXT><PDAT>The communication controller </PDAT><HIL><BOLD><PDAT>118</PDAT></BOLD></HIL><PDAT> fetches a corresponding program stored in the archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> according to a request from the broadcast side or an instruction from the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, that is, the compilation system controller </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT> receiving an instruction for supply at the program supply side, and transmits the same via the communication path </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> to the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00089" LVL="0"><PTEXT><PDAT>The communication speed of the communication line </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> is governed by the speed of reading the AV signals from the archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT>, the transmission speed of the communication line </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT>, and the reception speed of the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, in other words, the slowest speed of the recording speed of the recording medium in the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>. The transmission rate of the MPEG2-TS is 4 to 6 Mbps, therefore if a high speed communication medium is used as the communication line </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT>, a considerably high speed communication becomes possible.</PDAT></PTEXT></PARA>
<PARA ID="P-00090" LVL="0"><PTEXT><PDAT>The removable storage </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> is a removable storage device which does not transmit the AV signals to the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> via the communication lines </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT>, but stores the digital AV signals in a removable recording medium </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> such as an MO disc or digital tape based on a command from the compilation system controller </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT> and provides the same to the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00091" LVL="0"><PTEXT><PDAT>The compilation system controller </PDAT><HIL><BOLD><PDAT>126</PDAT></BOLD></HIL><PDAT> controls the operation of the components of the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> as mentioned above and as illustrated in FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00092" LVL="0"><PTEXT><PDAT>The near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> compresses and encodes the film stock from the film stock conversion device </PDAT><HIL><BOLD><PDAT>106</PDAT></BOLD></HIL><PDAT> or VTR stock from the video signal reproducing apparatus (VTR) </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> by the MPEG2 standard as mentioned above to store about several weeks to several months of broadcast content and provides the required content when it is requested on the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> side or the like.</PDAT></PTEXT></PARA>
<PARA ID="P-00093" LVL="0"><PTEXT><PDAT>Near-Video-on-Demand (NVOD) Play-Out Unit</PDAT></PTEXT></PARA>
<PARA ID="P-00094" LVL="0"><PTEXT><PDAT>A description will be made next of the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> arranged at the program supply side referring to FIG. </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00095" LVL="0"><PTEXT><PDAT>First, the configuration of the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> will be explained.</PDAT></PTEXT></PARA>
<PARA ID="P-00096" LVL="0"><PTEXT><PDAT>The near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> has a communication controller </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT>, a removable storage </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT>, a near line storage </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT>, a first routing switching circuit </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT>, plurality of on-line storages </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT>, a plurality of near-video-on-demand (NVOD) play-out processors </PDAT><HIL><BOLD><PDAT>214</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT>, a second routing switching circuit </PDAT><HIL><BOLD><PDAT>218</PDAT></BOLD></HIL><PDAT>, a promotion and CM server </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT>, a plurality of code data insertion circuits </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT>, and the near-video-on-demand (NVOD) play-out system controller </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT> for controlling the operation of the componentss mentioned above.</PDAT></PTEXT></PARA>
<PARA ID="P-00097" LVL="0"><PTEXT><PDAT>The content of the broadcast programs is transmitted from the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> to the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> with a time difference over multiple channels according to the broadcast schedule. The near-video-on-demand (NVOD) play-out system controller </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT> controls the components in the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> according to the broadcast schedule and operates so that the signals are reproduced and output for multiple channels with a time difference from a plurality of code data insertion circuits </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00098" LVL="0"><PTEXT><PDAT>The communication controller </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> receives the AV signals transmitted via the communication path </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> of the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> under the control of the near-video-on-demand (NVOD) play-out system controller </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00099" LVL="0"><PTEXT><PDAT>The removable storage </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> reads the AV signals recorded on the recording medium </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> from the recording medium </PDAT><HIL><BOLD><PDAT>124</PDAT></BOLD></HIL><PDAT> by the removable storage </PDAT><HIL><BOLD><PDAT>122</PDAT></BOLD></HIL><PDAT> of the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> under the control of the near-video-on-demand (NVOD) play-out system controller </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00100" LVL="0"><PTEXT><PDAT>The near line storage </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> stores about several days to several weeks worth of the AV signals transmitted from the communication controller </PDAT><HIL><BOLD><PDAT>202</PDAT></BOLD></HIL><PDAT> or the removable storage </PDAT><HIL><BOLD><PDAT>204</PDAT></BOLD></HIL><PDAT> under the control of the near-video-on-demand (NVOD) play-out system controller </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT> to which a command is given from the user based on a medium term broadcast schedule of several days to several weeks and the broadcast schedule near the broadcasting. Further, the near line storage </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> transmits the AV signals stored as described above, that is, the AV signals for which the broadcast schedule is approaching, to the first routing switching circuit </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> according to the command of the near-video-on-demand (NVOD) play-out system controller </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT>. The first routing switching circuit </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> transmits the AV signals transmitted from the near line storage </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> to the corresponding part of one of the plurality of on-line storages </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> based on the command of the near-video-on-demand (NVOD) play-out system controller </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00101" LVL="0"><PTEXT><PDAT>Each of the plurality of on-line storages </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> has a capacity for storing the AV signals transmitted according to the broadcast schedule and the AV signals to be transmitted next. Note that, where the programs to be broadcasted are rearranged, the plurality of on-line storages </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> are controlled by the near-video-on-demand (NVOD) play-out system controller </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT> so as to store the AV signals so that the staggered playback can be carried out for the multiple channels while recording a new program.</PDAT></PTEXT></PARA>
<PARA ID="P-00102" LVL="0"><PTEXT><PDAT>The near line storage </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT>, the first routing switching circuit </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT>, and the plurality of on-line storages </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> can be integrally constituted. Namely, the near line storage </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> is a recording device for storing several days to several weeks of broadcast of the AV signals, the first routing switching circuit </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT> is the switching circuit for selecting the AV signals stored in the near line storage </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> and outputting them, and the plurality of on-line storages </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> are recording devices for storing only the amount of the AV signals stored in the near line storage </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> that is to be transmitted in accordance with the broadcast and the AV signals to be transmitted next, therefore the storage and call up of the AV signals may be carried out for the above objectives by providing a large scale storage device.</PDAT></PTEXT></PARA>
<PARA ID="P-00103" LVL="0"><PTEXT><PDAT>To reproduce and output the AV signals giving a time difference to the corresponding channels, each of the plurality of near-video-on-demand (NVOD) play-out processors </PDAT><HIL><BOLD><PDAT>214</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT> controls the corresponding on-line storage of the on-line storages </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> provided in the front thereof (by controlling the integral storage device where the near line storage </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT>, the first routing switching circuit </PDAT><HIL><BOLD><PDAT>208</PDAT></BOLD></HIL><PDAT>, and plurality of on-line storages </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> are integrally formed as mentioned above) to reproduce the AV signals giving a time difference. As explained referring to the part of the near-video-on demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, when the data is recorded in a format that is convenient for playback with a time difference in advance at the time of the recording, it is sufficient that sequential playback be repeated. However, when the data is continuously recorded without considering the playback with a time difference, the AV signals are reproduced while after a time interval equal to the amount of the time difference.</PDAT></PTEXT></PARA>
<PARA ID="P-00104" LVL="0"><PTEXT><PDAT>The reproduction timing in the plurality of near-video-on-demand (NVOD) play-out processors </PDAT><HIL><BOLD><PDAT>214</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT> and the switching with the novel AV signal are carried out based on the control commands of the near-video-on-demand (NVOD) play-out system controller </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00105" LVL="0"><PTEXT><PDAT>The promotion and CM server </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> is a device which outputs promotional video information or commercial (CM) video information for inserting the same into the AV signals output from the plurality of near-video-on-demand (NVOD) play-out processors </PDAT><HIL><BOLD><PDAT>214</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT>. The promotional video or commercial (CM) video information is also processed by the MPEG2 standard and stored in the form of a transport stream (TS) of the MPEG2 standard.</PDAT></PTEXT></PARA>
<PARA ID="P-00106" LVL="0"><PTEXT><PDAT>Whether or not the promotional video information or commercial (CM) video information is to be transmitted from the promotion and CM server </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> is determined according to the command of the near-video-on-demand (NVOD) play-out system controller </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00107" LVL="0"><PTEXT><PDAT>The second routing switching circuit </PDAT><HIL><BOLD><PDAT>218</PDAT></BOLD></HIL><PDAT> performs the switching between the movie program transmitted from the plurality of near-video-on-demand (NVOD) play-out processors </PDAT><HIL><BOLD><PDAT>214</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT> and the promotional video information or commercial (CM) video information transmitted from the promotion and CM server </PDAT><HIL><BOLD><PDAT>220</PDAT></BOLD></HIL><PDAT> according to the control command of the near-video-on-demand (NVOD) play-out system controller </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT> and transmits the same to the plurality of code data insertion circuits </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00108" LVL="0"><PTEXT><PDAT>In the second routing switching circuit </PDAT><HIL><BOLD><PDAT>218</PDAT></BOLD></HIL><PDAT>, the digital compressed AV signals output from the plurality of near-video-on-demand (NVOD) play-out processors </PDAT><HIL><BOLD><PDAT>214</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>216</PDAT></BOLD></HIL><PDAT> are synchronized in frame and matched in phase as groups of pictures (GOP), the unit for accommodating a plurality of video signals prescribed by the MPEG2 standard, so as to prevent an abnormal frame being generated at the switching point. At this time, however, a closed GOP becomes necessary for the GOP at the start of the video to be switched. However, if the last part of the video to be switched and the leading one to two frames of the video to be switched are set as black images, it is not necessary to attach a closed GOP. Further, even if GOP phase matching is not carried out, if it is indicated that the GOP at the start of the video to be switched is a broken link, the playback becomes possible without a disadvantage in the subscriber use decoder.</PDAT></PTEXT></PARA>
<PARA ID="P-00109" LVL="0"><PTEXT><PDAT>Each of the plurality of code data insertion circuits </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT> inserts the code data into the broadcast use data transmitted from the second routing switching circuit </PDAT><HIL><BOLD><PDAT>218</PDAT></BOLD></HIL><PDAT> in accordance with the command of the near-video-on-demand (NVOD) play-out system controller </PDAT><HIL><BOLD><PDAT>226</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00110" LVL="0"><PTEXT><PDAT>The output signals transmitted from the code data insertion circuits </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT> are transmitted in the form of an MPEG2 standard transport stream (TS).</PDAT></PTEXT></PARA>
<PARA ID="P-00111" LVL="0"><PTEXT><PDAT>The &ldquo;code data &rdquo; means the information indicating for example what channel broadcasts what program, information for text broadcasts, subtitles, and other data.</PDAT></PTEXT></PARA>
<PARA ID="P-00112" LVL="0"><PTEXT><PDAT>The insertion of the code data is carried out in accordance with the content thereof.</PDAT></PTEXT></PARA>
<PARA ID="P-00113" LVL="0"><PTEXT><PDAT>When code data use packets are prepared in advance in the encoder </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> in the form of multiplexed packets of the video signals, audio signals, and code data in a form of code data packets to be inserted when transmitting the data from the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> to the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> as explained above, the plurality of code data insertion circuits </PDAT><HIL><BOLD><PDAT>222</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>224</PDAT></BOLD></HIL><PDAT> insert the code data into those packets.</PDAT></PTEXT></PARA>
<PARA ID="P-00114" LVL="0"><PTEXT><PDAT>By the above operation, in the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT>, the contents of the program to be broadcasted according to the broadcast schedule are given code data according to need and transmitted to the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> with a time difference given to the plurality of channels worth of the video and audio signals according to the format of the MPEG2-TS.</PDAT></PTEXT></PARA>
<PARA ID="P-00115" LVL="0"><PTEXT><PDAT>Transmission Unit and Subscriber Unit</PDAT></PTEXT></PARA>
<PARA ID="P-00116" LVL="0"><PTEXT><PDAT>The transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> and the subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> will be explained next referring to FIG. </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>. The transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> is constituted so as to be able to perform both a satellite broadcast and digital CATV broadcast.</PDAT></PTEXT></PARA>
<PARA ID="P-00117" LVL="0"><PTEXT><PDAT>The transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> has a third routing switching circuit </PDAT><HIL><BOLD><PDAT>302</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00118" LVL="0"><PTEXT><PDAT>The transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> has a plurality of satellite broadcast use multiplexing devices </PDAT><HIL><BOLD><PDAT>304</PDAT></BOLD></HIL><PDAT> (only one is illustrated as a representative one due to the limitations of illustration), a plurality of satellite broadcast use modulators </PDAT><HIL><BOLD><PDAT>308</PDAT></BOLD></HIL><PDAT> (only one is illustrated as a representative one due to the limitations of illustration), and a plurality of satellite broadcast use transmission devices </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT> (only one is illustrated as a representative one due to the limitations of illustration) each having an antenna so as to perform the satellite broadcast. Corresponding to these satellite broadcasts, an antenna </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT>, an integrated receiver decoder (IRD) </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT>, and a television receiver </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT> are disposed at the home of the user able to receive satellite broadcasts in the subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> connected by radio to the antenna of the satellite broadcast use transmission device </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT> in the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00119" LVL="0"><PTEXT><PDAT>Further, the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> has a plurality of digital CATV use multiplexing devices </PDAT><HIL><BOLD><PDAT>324</PDAT></BOLD></HIL><PDAT> (only one is illustrated as a representative one due to the limitation of illustration), a plurality of digital CATV use modulators </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT> (only one is illustrated as a representative one due to the limitation of illustration), and a plurality of digital CATV use transmission devices </PDAT><HIL><BOLD><PDAT>332</PDAT></BOLD></HIL><PDAT> (only one is illustrated as a representative one due to the limitation of illustration) so as to perform a cable broadcast, for example, a digital CATV broadcast. A CATV cable </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT> is laid between the plurality of digital CATV use transmission devices </PDAT><HIL><BOLD><PDAT>332</PDAT></BOLD></HIL><PDAT> and the CATV receiving subscriber home in the subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>. Corresponding to the digital CATV broadcast, in the CATV receiving subscriber home, an integrated receiver decoder (IRD) </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT> and a television receiver </PDAT><HIL><BOLD><PDAT>416</PDAT></BOLD></HIL><PDAT> are disposed.</PDAT></PTEXT></PARA>
<PARA ID="P-00120" LVL="0"><PTEXT><PDAT>Note that, the integrated receiver decoder </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT> disposed in the satellite broadcast receiving subscriber home and the integrated receiver decoder </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT> disposed in the CATV receiving subscriber home are the same model, and the television receiver </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT> disposed in the satellite broadcast receiving subscriber home and the television receiver </PDAT><HIL><BOLD><PDAT>416</PDAT></BOLD></HIL><PDAT> disposed in the CATV receiving subscriber home may be the same model too.</PDAT></PTEXT></PARA>
<PARA ID="P-00121" LVL="0"><PTEXT><PDAT>The transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> is provided with a transmission system controller </PDAT><HIL><BOLD><PDAT>350</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00122" LVL="0"><PTEXT><PDAT>The transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> is provided with a reception decoder </PDAT><HIL><BOLD><PDAT>344</PDAT></BOLD></HIL><PDAT> connected to the third routing switching circuit </PDAT><HIL><BOLD><PDAT>302</PDAT></BOLD></HIL><PDAT> and a television receiver </PDAT><HIL><BOLD><PDAT>346</PDAT></BOLD></HIL><PDAT>. The reception decoder </PDAT><HIL><BOLD><PDAT>344</PDAT></BOLD></HIL><PDAT> and the television receiver </PDAT><HIL><BOLD><PDAT>346</PDAT></BOLD></HIL><PDAT> are for monitoring the signal processing performed in the integrated receiver decoder </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT> and television receiver </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT> in the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> or the integrated receiver decoder </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT> and the television receiver </PDAT><HIL><BOLD><PDAT>416</PDAT></BOLD></HIL><PDAT> in the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT>. Namely, in the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT>, they are for monitoring the state of reception in the subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> by reproducing the contents equivalent to the received contents in the television receiver </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT> or the television receiver </PDAT><HIL><BOLD><PDAT>416</PDAT></BOLD></HIL><PDAT> of the subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> at the television receiver </PDAT><HIL><BOLD><PDAT>346</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00123" LVL="0"><PTEXT><PDAT>The transmission system controller </PDAT><HIL><BOLD><PDAT>350</PDAT></BOLD></HIL><PDAT> controls the components in the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> mentioned above according to the on-line (real time) broadcast schedule and transmits the broadcast program to the subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00124" LVL="0"><PTEXT><PDAT>The third routing switching circuit </PDAT><HIL><BOLD><PDAT>302</PDAT></BOLD></HIL><PDAT> receives the signals output from the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT> or the signals output from the other program transmission units and outputs the program contents to the multiplexing device among a plurality of satellite broadcast use multiplexing devices </PDAT><HIL><BOLD><PDAT>304</PDAT></BOLD></HIL><PDAT> or a plurality of digital CATV use multiplexing devices </PDAT><HIL><BOLD><PDAT>324</PDAT></BOLD></HIL><PDAT> designated by the transmission system controller </PDAT><HIL><BOLD><PDAT>350</PDAT></BOLD></HIL><PDAT> according to the command of the transmission system controller </PDAT><HIL><BOLD><PDAT>350</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00125" LVL="0"><PTEXT><PDAT>Each of the plurality of satellite broadcast use multiplexing devices </PDAT><HIL><BOLD><PDAT>304</PDAT></BOLD></HIL><PDAT> multiplexes the signals input in a MPEG2-TS format in a format suited to the satellite broadcast. This multiplexed signal is modulated in a manner suited to the satellite broadcast by the corresponding modulator of the plurality of satellite broadcast use modulators </PDAT><HIL><BOLD><PDAT>308</PDAT></BOLD></HIL><PDAT>. The result of modulation is transmitted from the satellite broadcast use transmission device </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT> having the corresponding antenna to the antenna </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> of the subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT>. In the satellite broadcast receiving subscriber home, the transmitted program contents are received at the antenna </PDAT><HIL><BOLD><PDAT>402</PDAT></BOLD></HIL><PDAT> and demodulated at the integrated receiver decoder </PDAT><HIL><BOLD><PDAT>404</PDAT></BOLD></HIL><PDAT>. The reproduced information is then output to the television receiver </PDAT><HIL><BOLD><PDAT>406</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00126" LVL="0"><PTEXT><PDAT>Note that, the transmission system controller </PDAT><HIL><BOLD><PDAT>350</PDAT></BOLD></HIL><PDAT> assigns the satellite broadcast use multiplexing device </PDAT><HIL><BOLD><PDAT>304</PDAT></BOLD></HIL><PDAT>, the satellite broadcast use modulator </PDAT><HIL><BOLD><PDAT>308</PDAT></BOLD></HIL><PDAT>, and the satellite broadcast use transmission device </PDAT><HIL><BOLD><PDAT>312</PDAT></BOLD></HIL><PDAT> to be used and causes them to operate by considering the capacity of the transponder (relay unit).</PDAT></PTEXT></PARA>
<PARA ID="P-00127" LVL="0"><PTEXT><PDAT>Each of the plurality of digital CATV use multiplexing devices </PDAT><HIL><BOLD><PDAT>324</PDAT></BOLD></HIL><PDAT> multiplexes the signals input in the MPEG2-TS format in a form suited to the digital CATV broadcast. This multiplexed signal is modulated in a manner suited to the digital CATV broadcast by the corresponding modulator of the plurality of digital CATV use modulators </PDAT><HIL><BOLD><PDAT>328</PDAT></BOLD></HIL><PDAT>. The result of modulation is transmitted from the corresponding digital CATV use transmission device </PDAT><HIL><BOLD><PDAT>332</PDAT></BOLD></HIL><PDAT> to the integrated receiver decoder </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT> of the subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> via the CATV cable </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT>. In the CATV receiving subscriber home, the program contents transmitted via the CATV cable </PDAT><HIL><BOLD><PDAT>340</PDAT></BOLD></HIL><PDAT> are received by the integrated receiver decoder </PDAT><HIL><BOLD><PDAT>414</PDAT></BOLD></HIL><PDAT> and demodulated and then the reproduced information is output to the television receiver </PDAT><HIL><BOLD><PDAT>416</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00128" LVL="0"><PTEXT><PDAT>The near-video-on-demand (NVOD) apparatus </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> of the embodiment of the present invention has the following advantages.</PDAT></PTEXT></PARA>
<PARA ID="P-00129" LVL="2"><PTEXT><PDAT>(1) In the near-video-on-demand (NVOD) apparatus </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> shown in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT>, due to the above configuration and operation, the system configuration from the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT> to the near-video-on-demand (NVOD) subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> is functionally divided. The overall processing is also is functionally and efficiently divided.</PDAT></PTEXT></PARA>
<PARA ID="P-00130" LVL="2"><PTEXT><PDAT>(2) The near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT>, and the near-video-on-demand (NVOD) subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> can be respectively independently constituted and can independently operate. Accordingly, they can be produced with a high efficiency and can be easy connected when constructing a near-video-on-demand (NVOD) apparatus </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>. Further, even if the need arises for a change of design or a change of hardware configuration in part of the configuration, for example, the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, the other parts of the configuration, for example, the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, will not be affected.</PDAT></PTEXT></PARA>
<PARA ID="P-00131" LVL="2"><PTEXT><PDAT>(3) The digital transmission format among the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT>, and the near-video-on-demand (NVOD) subscriber unit </PDAT><HIL><BOLD><PDAT>400</PDAT></BOLD></HIL><PDAT> is standardized and an interchangeability of signal processing and an enhancement of efficiency of signal processing are realized.</PDAT></PTEXT></PARA>
<PARA ID="P-00132" LVL="2"><PTEXT><PDAT>(4) The format for storing the AV signals is hierarchized to the first storage means comprising the record controller </PDAT><HIL><BOLD><PDAT>114</PDAT></BOLD></HIL><PDAT> and the archive storage </PDAT><HIL><BOLD><PDAT>116</PDAT></BOLD></HIL><PDAT> in the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, the second storage means comprising the near line storage </PDAT><HIL><BOLD><PDAT>206</PDAT></BOLD></HIL><PDAT> in the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, and the third storage means comprising the plurality of on-line storages </PDAT><HIL><BOLD><PDAT>210</PDAT></BOLD></HIL><PDAT> to </PDAT><HIL><BOLD><PDAT>212</PDAT></BOLD></HIL><PDAT> in the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, therefore storage of the AV signals of broadcast program for a long term, storage of the AV signals of the broadcast program for a medium term, and temporary storage of the AV signals for the on-line broadcast can be effectively carried out.</PDAT></PTEXT></PARA>
<PARA ID="P-00133" LVL="2"><PTEXT><PDAT>(5) It becomes easy to deal with changes in the broadcast programs etc.</PDAT></PTEXT></PARA>
<PARA ID="P-00134" LVL="2"><PTEXT><PDAT>(6) Promotions and CMs can be efficiently added.</PDAT></PTEXT></PARA>
<PARA ID="P-00135" LVL="2"><PTEXT><PDAT>(7) Code data can be efficiently inserted.</PDAT></PTEXT></PARA>
<PARA ID="P-00136" LVL="0"><PTEXT><PDAT>In the above embodiment, the description was made of the case where the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, and the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> were disposed in one broadcasting station together, but it is not necessary to dispose them in the same broadcasting station.</PDAT></PTEXT></PARA>
<PARA ID="P-00137" LVL="0"><PTEXT><PDAT>Further, the case where the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, the near-video-on-demand (NVOD) play-out unit </PDAT><HIL><BOLD><PDAT>200</PDAT></BOLD></HIL><PDAT>, and the transmission unit </PDAT><HIL><BOLD><PDAT>300</PDAT></BOLD></HIL><PDAT> were connected together was illustrated, but as apparent from the above configuration, it is also possible to constitute them as individual devices by prescribing the input conditions and output conditions of the apparatuses and operating them as described above. Namely, they can be independently constituted as the near-video-on-demand (NVOD) compilation apparatus, the near-video-on-demand (NVOD) play-out apparatus, and the transmission apparatus and can independently operate.</PDAT></PTEXT></PARA>
<PARA ID="P-00138" LVL="0"><PTEXT><PDAT>As the compression and encoding processing of the encoder </PDAT><HIL><BOLD><PDAT>112</PDAT></BOLD></HIL><PDAT> in the near-video-on-demand (NVOD) compilation unit </PDAT><HIL><BOLD><PDAT>100</PDAT></BOLD></HIL><PDAT>, the case of using the MPEG2 standard was exemplified, but in the working of the present invention, it is not limited to the MPEG2 standard. Other various compression and encoding technologies, for example, the JPMEG and other compression and encoding technologies, can be applied as well.</PDAT></PTEXT></PARA>
<PARA ID="P-00139" LVL="0"><PTEXT><PDAT>Note that, in the above example, the description was made of the compression technology of the video signals and the compression technology of the audio signals without distinguishing between them, but the amounts of signals are different and in addition the natures of the signals are different, therefore the compression and encoding technology of the video signals and the compression and encoding technology of the audio signals are generally different. However, there is correspondence between these video signals and audio signals. Therefore the compression and encoding are carried out maintaining the correspondence thereof.</PDAT></PTEXT></PARA>
<PARA ID="P-00140" LVL="0"><PTEXT><PDAT>Application to Video-on-Demand (VOD) Apparatus</PDAT></PTEXT></PARA>
<PARA ID="P-00141" LVL="0"><PTEXT><PDAT>In the above embodiment, a near-video-on-demand (NVOD) apparatus was used as an example, but the present invention can also be applied to a video-on-demand (VOD) apparatus by enabling the broadcast of a plurality of programs to a plurality of channels instead of broadcasting a plurality of channels worth of video and audio signals for the same program on a staggered time basis, reproducing the video and audio signals required at the time requested from the subscriber unit, and enabling the transmission of same at that time.</PDAT></PTEXT></PARA>
<PARA ID="P-00142" LVL="0"><PTEXT><PDAT>Application to General Video and Audio Signal Editing and Transmitting Apparatus</PDAT></PTEXT></PARA>
<PARA ID="P-00143" LVL="0"><PTEXT><PDAT>The present invention is also not limited to the near-video-on-demand (NVOD) apparatus and the video-on-demand (VOD) apparatus explained above and can be further applied to a general digital video and audio signal editing and transmitting apparatus such as for a broadcast system which provides a plurality of digital video and audio signals to the reception side by using a plurality of channels.</PDAT></PTEXT></PARA>
<PARA ID="P-00144" LVL="0"><PTEXT><PDAT>In the above embodiments, the case of broadcasting a program such as a movie in a video-on-demand (VOD) apparatus and a near-video-on-demand (NVOD) apparatus was explained as examples, but needless to say the present invention is not limited to the case of broadcasting video and audio signals of a movie and can be applied also to the case of transmitting video and audio signals of other matter.</PDAT></PTEXT></PARA>
<PARA ID="P-00145" LVL="0"><PTEXT><PDAT>According to the present invention, even the hardware (equipment) disposed in the broadcasting station is divided into the compilation unit, the play-out unit, and the transmission unit. Therefore, the processing is suitably dispersed, the overall hardware configuration is suitably assembled, and the hardware configuration is made flexible and simple so as to enable various requests and modifications to be handled. As a result, the units can be efficiently produced and easy connected together. Further, even if the need arises for a change of design, change of hardware configuration, etc. in part of the configuration, there is no effect on the rest of the configuration.</PDAT></PTEXT></PARA>
<PARA ID="P-00146" LVL="0"><PTEXT><PDAT>According to the present invention, the transmission format of the data is standardized throughout the entire video and audio signal editing and transmitting apparatus and interchangeability of the signal processing and an enhancement of efficiency of the signal processing are realized.</PDAT></PTEXT></PARA>
<PARA ID="P-00147" LVL="0"><PTEXT><PDAT>According to the present invention, further, the storage is hierarchized to the first storage means for storing the video and audio signals of the long term broadcast schedule, the second storage means for storing the video and audio signals of the medium term broadcast schedule, and the third storage means for temporarily storing the video and audio signals for the on-line broadcast, therefore the long term storage of broadcast programs, the medium term storage of broadcast programs, and the temporary storage of video and audio signals for the on-line broadcast can be effectively carried out.</PDAT></PTEXT></PARA>
<PARA ID="P-00148" LVL="0"><PTEXT><PDAT>According to the present invention, further, it is easy to deal with changes in the broadcast programs etc.</PDAT></PTEXT></PARA>
<PARA ID="P-00149" LVL="0"><PTEXT><PDAT>Further, according to the present invention, promotions and CMs can be efficiently added.</PDAT></PTEXT></PARA>
<PARA ID="P-00150" LVL="0"><PTEXT><PDAT>Further, according to the present invention, the code data can be efficiently inserted.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00151" LVL="0"><PTEXT><PDAT>1. A video and audio signal editing and transmitting apparatus comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a compilation unit which has a first storage means having a storage capacity in a range of several weeks to several months, receives video signals serving as video stock and audio signals corresponding to the video signals, which has an encoder that compresses and encodes the received video and audio signals and multiplexed packets of the compressed and encoded video and audio signals and code data in the form of code data packets, and which has a record controller that performs predetermined editing on the compressed and encoded video and audio signals and code data from the encoder to obtain a signal storage format for staggered playback of multiple channels, stores the edited results in the signal storage format in the first storage means, and transmits the compressed and encoded video and audio signals stored in the first storage means in accordance with a first transmission request; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a play-out unit which has a second storage means having a capacity in a range of several days to several weeks and third storage means constituting an on-line storage for temporarily storing the compressed and encoded video and audio signals and having a substantially smaller storage capacity than the storage capacity of the second storage means, receives the compressed and encoded video and audio signals transmitted from the compilation unit, initially stores the compressed and encoded video and audio signals received by the play-out unit in the second storage means, routes the compressed and encoded video and audio signals from the second storage means to the third storage means, reads and reproduces the compressed and encoded video and audio signals from the second storage means for feeding to the third storage means in accordance with a second transmission request, and which has code data insertion circuits for inserting the code data packets from the record controller into the reproduced compressed and encoded video and audio signals prior to transmission, and transmits the reproduced compressed and encoded video and audio signals from the third storage means; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a transmission unit which transmits the reproduced compressed and encoded video and audio signals transmitted from the play-out unit to subscribers according to a broadcast program. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00152" LVL="0"><PTEXT><PDAT>2. The video and audio signal editing and transmitting apparatus according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein said apparatus further comprises a subscriber unit having instruction means connected to the transmission unit for selecting a program to be received from the transmission unit and receiving means for receiving and decoding the video and audio signals transmitted from the transmission unit.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00153" LVL="0"><PTEXT><PDAT>3. The video and audio signal editing and transmitting apparatus according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein said compilation unit compresses and encodes said video and audio signals according to an MPEG standard.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00154" LVL="0"><PTEXT><PDAT>4. The video and audio signal editing and transmitting apparatus according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein said compilation unit receives input video and audio signals obtained by signal processing film stock or video and audio signals obtained by signal processing video stock recorded on video tape, performs compression and encoding on the video and audio signals, performs the predetermined editing to obtain a signal format suited to the broadcast program, and stores the same in said first storage means.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00155" LVL="0"><PTEXT><PDAT>5. The video and audio signal editing transmitting apparatus according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein the transmission of the compressed and encoded video and audio signals from said compilation unit to said play-out unit is carried out via a transmission line.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00156" LVL="0"><PTEXT><PDAT>6. The video and audio signal editing and transmitting apparatus according to claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, wherein the transmission of the compressed and encoded signals from said compilation unit to said play-out unit is carried out via a recording medium on which the compressed and encoded signals are recorded.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00157" LVL="0"><PTEXT><PDAT>7. The video and audio signal editing and transmitting apparatus according to claim </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, wherein:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>said play-out unit copies continuous video and audio signals into a plurality of channels of video and audio signals, successively adds a predetermined time difference to said plurality of channels of the video and audio signals, and transmits a result to said transmission unit and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>said transmission unit transmits the plurality of channels of video and audio signals with the predetermined time difference to said subscriber unit. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00158" LVL="0"><PTEXT><PDAT>8. The video and audio signal editing and transmitting apparatus according to claim </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT>, wherein said play-out unit has a promotion and commerical server for adding at least one of promotions and commericals to said plurality of channels of video and audio signals.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00159" LVL="0"><PTEXT><PDAT>9. The video and audio signal editing and transmitting apparatus according to claim </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, wherein the transmission and reception between said transmission unit and said subscriber unit are carried out by using radio communication.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00160" LVL="0"><PTEXT><PDAT>10. The video and audio signal editing and transmitting apparatus according to claim </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>, wherein the transmission and reception between said transmission unit and said subscriber unit are carried out by using cable communication.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00161" LVL="0"><PTEXT><PDAT>11. A video and audio signal editing and transmitting method for editing a program comprised by video and audio signals and transmitting the program to subscribers, comprising the following steps:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving video signals serving as video stock and audio signals corresponding to the video signals and compressing and encoding the received signals; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>multiplexing packets of the compressed and encoded video and audio signals and packets of code data in the form of code data packets; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>performing predetermined editing on the compressed and encoded video and audio signals to obtain a signal storage format for staggered playback of multiple channels and storing said video and audio signals in the signal storage format in first storage means having a storage capacity in a range of several weeks to several months; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>transmitting the compressed and encoded video and audio signals stored in the first storage means in accordance with a first transmission request; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving the transmitted compressed and encoded video and audio signals and storing the video and audio signals in a second storage means having a storage capacity in a range of several days to several weeks; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>routing the compressed and encoded video and audio signals from the second storage means to a plurality of online storage means for temporary storage, each of the line storage means having a smaller capacity than the storage capacity of the first or second storage means; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>reading and reproducing the compressed and encoded video and audio signals from the plurality of online storage means in accordance with a second transmission request and transmitting the reproduced digital video and audio signals; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>inserting the code data packets from the step of multiplexing into the reproduced compressed and encoded video and audio signals prior to transmission; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>transmitting the transmitted reproduced video and audio signals to the subscribers according to a broadcast program.</PDAT></PTEXT></CLMSTEP>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314576-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314576-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314576-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314576-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314576-20011106-D00004.TIF">
</SDODR>
</PATDOC>

<!DOCTYPE PATDOC PUBLIC "-//USPTO//DTD ST.32 US PATENT GRANT V2.4 2000-09-20//EN" [
<!ENTITY US06314577-20011106-D00000.TIF SYSTEM "US06314577-20011106-D00000.TIF" NDATA TIF>
<!ENTITY US06314577-20011106-D00001.TIF SYSTEM "US06314577-20011106-D00001.TIF" NDATA TIF>
<!ENTITY US06314577-20011106-D00002.TIF SYSTEM "US06314577-20011106-D00002.TIF" NDATA TIF>
<!ENTITY US06314577-20011106-D00003.TIF SYSTEM "US06314577-20011106-D00003.TIF" NDATA TIF>
<!ENTITY US06314577-20011106-D00004.TIF SYSTEM "US06314577-20011106-D00004.TIF" NDATA TIF>
<!ENTITY US06314577-20011106-D00005.TIF SYSTEM "US06314577-20011106-D00005.TIF" NDATA TIF>
<!ENTITY US06314577-20011106-D00006.TIF SYSTEM "US06314577-20011106-D00006.TIF" NDATA TIF>
<!ENTITY US06314577-20011106-D00007.TIF SYSTEM "US06314577-20011106-D00007.TIF" NDATA TIF>
]>
<PATDOC DTD="2.4" STATUS="BUILD 20010518">
<SDOBI>
<B100>
<B110><DNUM><PDAT>06314577</PDAT></DNUM></B110>
<B130><PDAT>B1</PDAT></B130>
<B140><DATE><PDAT>20011106</PDAT></DATE></B140>
<B190><PDAT>US</PDAT></B190>
</B100>
<B200>
<B210><DNUM><PDAT>08916099</PDAT></DNUM></B210>
<B211US><PDAT>08</PDAT></B211US>
<B220><DATE><PDAT>19970821</PDAT></DATE></B220>
</B200>
<B400>
<B472>
<B473US>
</B472>
</B400>
<B500>
<B510>
<B511><PDAT>H04N  7173</PDAT></B511>
<B512><PDAT>H04M  100</PDAT></B512>
<B516><PDAT>7</PDAT></B516>
</B510>
<B520>
<B521><PDAT>725 93</PDAT></B521>
<B522><PDAT>725 48</PDAT></B522>
<B522><PDAT>37910101</PDAT></B522>
</B520>
<B540><STEXT><PDAT>Apparatus and method to generate and access broadcast information</PDAT></STEXT></B540>
<B560>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4506387</PDAT></DNUM>
<DATE><PDAT>19850300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Walter</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4757267</PDAT></DNUM>
<DATE><PDAT>19880700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Riskin</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>379113</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>4789863</PDAT></DNUM>
<DATE><PDAT>19881200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Bush</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>37910101</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5359419</PDAT></DNUM>
<DATE><PDAT>19941000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Kawasaki</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  6</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5457739</PDAT></DNUM>
<DATE><PDAT>19951000</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Le Cheviller</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>455  63</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5485197</PDAT></DNUM>
<DATE><PDAT>19960100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Hoarty</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348  7</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5539635</PDAT></DNUM>
<DATE><PDAT>19960700</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Larson</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>37910101</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5592551</PDAT></DNUM>
<DATE><PDAT>19970100</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Lett et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348906</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5635978</PDAT></DNUM>
<DATE><PDAT>19970600</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Alten et al.</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>348906</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5661787</PDAT></DNUM>
<DATE><PDAT>19970800</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Pocock</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>37910101</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5703795</PDAT></DNUM>
<DATE><PDAT>19971200</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Mankovitz</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>345327</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5734961</PDAT></DNUM>
<DATE><PDAT>19980300</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Castille</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>37910101</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
<B561>
<PCIT>
<DOC><DNUM><PDAT>5809246</PDAT></DNUM>
<DATE><PDAT>19980900</PDAT></DATE></DOC>
<PARTY-US>
<NAM><SNM><STEXT><PDAT>Goldman</PDAT></STEXT></SNM></NAM>
</PARTY-US>
<PNC><PDAT>37910101</PDAT></PNC></PCIT><CITED-BY-EXAMINER>
</B561>
</B560>
<B570>
<B577><PDAT>130</PDAT></B577>
<B578US><PDAT>1</PDAT></B578US>
</B570>
<B580>
<B582><PDAT>348  7</PDAT></B582>
<B582><PDAT>348 12</PDAT></B582>
<B582><PDAT>348 13</PDAT></B582>
<B582><PDAT>37910101</PDAT></B582>
<B582><PDAT>455  2</PDAT></B582>
<B582><PDAT>4551861</PDAT></B582>
<B582><PDAT>4551862</PDAT></B582>
<B582><PDAT>455  63</PDAT></B582>
<B582><PDAT>360 15</PDAT></B582>
<B582><PDAT>360 60</PDAT></B582>
<B583US><PDAT>725 37- 39</PDAT></B583US>
<B582><PDAT>725115</PDAT></B582>
<B582><PDAT>725145</PDAT></B582>
</B580>
<B590><B595><PDAT>7</PDAT></B595><B596><PDAT>7</PDAT></B596><B597US>
</B590>
</B500>
<B600>
<B630><B631><PARENT-US><CDOC><DOC><DNUM><PDAT>08/916099</PDAT></DNUM></DOC></CDOC><PDOC><DOC><DNUM><PDAT>08/329837</PDAT></DNUM><DATE><PDAT>19941027</PDAT></DATE><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>00</PDAT></KIND></DOC></PDOC><PSTA><PDAT>01</PDAT></PSTA><PPUB><DOC><DNUM><PDAT>5661787</PDAT></DNUM><CTRY><PDAT>US</PDAT></CTRY><KIND><PDAT>A </PDAT></KIND></DOC></PPUB></PARENT-US></B631></B630>
</B600>
<B700>
<B720>
<B721>
<PARTY-US>
<NAM><FNM><PDAT>Michael H.</PDAT></FNM><SNM><STEXT><PDAT>Pocock</PDAT></STEXT></SNM></NAM>
<ADR>
<STR><PDAT>485 Queens Avenue</PDAT></STR>
<CITY><PDAT>London, Ontario</PDAT></CITY>
<CTRY><PDAT>CA</PDAT></CTRY>
</ADR>
<DTXT><STEXT><PDAT>N6B1Y3 </PDAT></STEXT></DTXT></PARTY-US>
</B721>
</B720>
<B745>
<B746>
<PARTY-US>
<NAM><FNM><PDAT>Andrew</PDAT></FNM><SNM><STEXT><PDAT>Faile</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B746>
<B747>
<PARTY-US>
<NAM><FNM><PDAT>Reuben M.</PDAT></FNM><SNM><STEXT><PDAT>Brown</PDAT></STEXT></SNM></NAM>
</PARTY-US>
</B747>
<B748US><PDAT>2611</PDAT></B748US>
</B745>
</B700>
</SDOBI>
<SDOAB>
<BTEXT>
<PARA ID="P-00001" LVL="0"><PTEXT><PDAT>The system enables listeners and viewers of a broadcast to access additional information associated with a broadcast. Listeners and viewers utilize a user device to connect to a database containing program descriptions (e.g. audio, text, video, or combination thereof) further describing the programming and ancillary information. The database is indexed by the broadcast&apos;s program list or schedule thereby allowing a user of the system to search and select a particular program description of interest. Hearing or viewing program descriptions enables users to preview excerpts and review a broadcast before purchasing an item heard or viewed on a broadcast.</PDAT></PTEXT></PARA>
</BTEXT>
</SDOAB>
<SDODE>
<RELAPP>
<BTEXT>
<PARA ID="P-00002" LVL="0"><PTEXT><PDAT>This application is a continuation of application Ser. No. 08/329,837, filed Oct. 27, 1994, now U.S. Pat. No. 5,661,787.</PDAT></PTEXT></PARA>
</BTEXT>
</RELAPP>
<BRFSUM>
<BTEXT>
<H LVL="1"><STEXT><PDAT>FIELD OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00003" LVL="0"><PTEXT><PDAT>The present invention relates generally to a method and apparatus to enable a broadcast listener to automatically purchase a music product such as a record album, cassette tape or compact disk without the intervention of an operator after hearing a music piece played on a radio station or music television station. More specifically, the preferred embodiment of the invention utilizes a programmed data processor, a digitally stored audio database containing the names of musical artists and groups, the names of pieces which have been recorded on the musical products, musical excerpts of these pieces, and a telephone system to replay this descriptive information through a telephone connection to a potential purchaser. This method utilizes the program schedule from a local radio station indicating when pieces will be played, a digital recording facility to automatically record excerpts of the music pieces played, a telephone system to decode DTMF tones from a touch tone telephone and an interface to a data communications network for communication with remote databases and computers.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>BACKGROUND OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00004" LVL="0"><PTEXT><PDAT>Radio networks offer the most significant marketing medium for the music industry to create awareness for music titles and artists. But music products such as records, cassettes and compact disks (CDs) are inconvenient to purchase at the time when the consumer has the maximum impulse to buy, after hearing a musical piece on the radio.</PDAT></PTEXT></PARA>
<PARA ID="P-00005" LVL="0"><PTEXT><PDAT>Additionally, the inability to automate many of the key functions of a radio based, direct marketing sales operation make it cost prohibitive for a single radio station to establish a direct marketing service linked to the music they broadcast Station operators offer different programming in each market area making it unsuitable to link their stations into a national music retail network. As well, regulatory limitations curtail the number of stations a radio operator can own in a major market thereby limiting the number of listeners below the critical mass necessary to operate a profitable direct marketing music business.</PDAT></PTEXT></PARA>
<PARA ID="P-00006" LVL="0"><PTEXT><PDAT>Radio broadcasters provide no means to fulfill the impulse purchase nature of the radio business. When a radio listener hears a music piece they wish to purchase they must listen for, and remember, the artists name and title of the song. In many instances it is inconvenient to write this information down for future reference. In order to purchase the music product containing the song heard on the radio the consumer must be further motivated to travel to a music store to proceed with the purchase process. At the music store the potential purchaser must determine if the selected music product is in stock and assess the pricing information.</PDAT></PTEXT></PARA>
<PARA ID="P-00007" LVL="0"><PTEXT><PDAT>The consumer is further constrained because they are unable to preview the songs on the music product they are considering because the music products are packaged and cannot be played at the store. The potential purchaser must remember and continue to be motivated by the music piece heard on the radio broadcast, possibly from days ago, and hope the other pieces recorded on the album are of sufficient interest to justify the purchase. The inconvenience and inability to sustain the impulse impetus severely impacts the purchase process.</PDAT></PTEXT></PARA>
<PARA ID="P-00008" LVL="0"><PTEXT><PDAT>Radio networks are unable to capitalize on the direct marketing opportunities they initiate through impulse music purchases because of the high cost of creating a direct marketing operation. Coordinating and tracking the music aired with the music products to be sold, recording of musical excerpts to be previewed, customer service operations and order fulfillment are all high overhead activities requiring a large dedicated staff with a separate skill set than radio station personnel. The cost for a radio station to establish a direct marketing operation far exceeds the returns from the music selling proceeds derived from a single radio station.</PDAT></PTEXT></PARA>
<PARA ID="P-00009" LVL="0"><PTEXT><PDAT>Cable television shopping networks have successfully developed large direct marketing networks based on national coverage by telecasting their programming over many cable companies reaching millions of potential purchasers. Radio station operators are unable to market music products in the same manner because station operators broadcast different music programming in each market preventing the linking of these stations into a common national market.</PDAT></PTEXT></PARA>
<PARA ID="P-00010" LVL="0"><PTEXT><PDAT>Radio is the most widely received broadcast medium throughout the world. The problems as previously described have prevented radio networks from being utilized for a mass media, direct marketing, music retail business.</PDAT></PTEXT></PARA>
<H LVL="1"><STEXT><PDAT>SUMMARY OF THE INVENTION</PDAT></STEXT></H>
<PARA ID="P-00011" LVL="0"><PTEXT><PDAT>In view of the foregoing, one objective of this invention is to resolve the problems which inhibit the successful development of a direct marketing music business for the radio industry. In this regard, it should be apparent that there exists a need in the art for a method of operating an automated system which tracks radio audio segments enabling radio broadcast listeners to select, preview and purchase a music product containing the music piece listened to for a radio broadcast.</PDAT></PTEXT></PARA>
<PARA ID="P-00012" LVL="0"><PTEXT><PDAT>It is therefore an object of this invention to provide an automated transaction system to record and track radio audio segments enabling a radio listener to use their telephone to recall and preview, on-demand, music pieces previously broadcast thereby assisting the listener in the purchase of a music product such as a record album, cassette or CD. The invention provides the consumer with a timely method to purchase a musical product by supplying all of the required information to conveniently make a music product purchase.</PDAT></PTEXT></PARA>
<PARA ID="P-00013" LVL="0"><PTEXT><PDAT>It is another object of the invention to provide a method for an automated transaction system to service multiple radio broadcasts simultaneously, thereby creating a mass radio audience for the direct marketing of music.</PDAT></PTEXT></PARA>
<PARA ID="P-00014" LVL="0"><PTEXT><PDAT>These and other objects are achieved by a method of and apparatus for tracking and recording a radio broadcast using a telephone interface connected to a programmed data processor such that when a potential purchaser calls a designated telephone number advertised by the radio station, for example 1-800-RECORDS, a telephone interface provides the listener with the name of the musical artist and the song titles in the reverse order played during the broadcast, starting with the current piece played. The selection, from the current artist played, to the music product the potential purchaser wants to order, is controlled by the potential purchaser using the touch tone telephone keys or voice input. When the potential purchaser reaches the song and artist of interest, further details can be related such as the other songs recorded on the album, pricing, availability and delivery information.</PDAT></PTEXT></PARA>
<PARA ID="P-00015" LVL="0"><PTEXT><PDAT>The invention can playback through the telephone, on instructions from the caller, excerpts or the entire song, as broadcast over the radio network, to assist the caller with the purchasing process.</PDAT></PTEXT></PARA>
<PARA ID="P-00016" LVL="0"><PTEXT><PDAT>When the potential purchaser indicates they are ready to order, the automated order system obtains the correct name and shipping address by accessing a name and address database responsive to the consumers telephone number or credit card information. The system also records the consumer&apos;s credit card information and obtains credit authorization. The invention then transmits the complete order to the fulfillment warehouse for shipment of the musical product to the purchaser.</PDAT></PTEXT></PARA>
<PARA ID="P-00017" LVL="0"><PTEXT><PDAT>It is a further object of this invention to provide a method and apparatus whereby multiple radio stations can be supported simultaneously, offering services on a local, regional or national basis providing the economies of scale and mass audience to support the sales volume necessary to operate a profitable direct marketing service. When a potential purchaser dials the advertised number such as 1-800-RECORDS they are directed by audio prompts to indicate by touch tone entry or voice input the call letters for the radio station to which they are listening. The audio prompts are provided by a telephone interface that is connected to a programmed data processor which performs database functions. The potential purchaser&apos;s telephone number, input by the caller or supplied by the telephone company&apos;s (ANI) Automatic Number Identification service, is compared to all the radio station broadcast coverage zones offered by the participating radio stations. This comparison determines the radio stations within the broadcast range of the caller, providing a limited set of radio stations for the programmed data processor to sort and search based on the callers input of the station call letters. The input of the station call letters enables the programmed data processor to select the correct station program schedule and related information. Thus a large number of radio stations, dispersed locally, regionally, nationally and internationally can be supported by one automated system.</PDAT></PTEXT></PARA>
<PARA ID="P-00018" LVL="0"><PTEXT><PDAT>The inventive method also includes the step of efficiently selecting the correct radio station based on touch tone input. Although, each of the telephone keys </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> through </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT> have three related alphabetical characters, callers need only to input four telephone key strokes for the four station call letters. The programmed data processor only recognizes the input for the participating radio stations broadcasting in the callers area as determined by the telephone number and broadcast coverage comparison previously described.</PDAT></PTEXT></PARA>
<PARA ID="P-00019" LVL="0"><PTEXT><PDAT>It is a further object of this invention to automate the manual and time-consuming functions. The inputting of the radio station play schedule in advance of the broadcast as well as the tracking of the program schedule during the broadcast day requires significant overhead if undertaken manually. As the service expands, and many radio stations are added to the service, the tracking of the various program schedules becomes unmanageable from a manual standpoint.</PDAT></PTEXT></PARA>
<PARA ID="P-00020" LVL="0"><PTEXT><PDAT>One component of the method and apparatus of the invention is a system for management of the radio station&apos;s program schedule. A radio station&apos;s program schedule is produced days and sometimes weeks in advance of broadcast. The program schedule is organized chronologically in the order musical pieces are broadcast and includes information such as the title of the song, the recording artist and group, as well as the day and time the piece is to be broadcast. A radio station broadcasts hundreds of musical pieces each day and the input of the program schedule by an operator is both time-consuming and prone to manual input error. The present invention enables the automation of the program schedule input by utilizing a data communications link and a communications interface such as a facsimile interface to receive the program schedule directly from the radio station into the programmed data processor. The communication interface such as a facsimile board is resident in the programmed data processor and in conjunction with a imaging software, such as a character recognition package, automatically interprets and directly stores the stations program schedule and associated information on a programmed data processor.</PDAT></PTEXT></PARA>
<PARA ID="P-00021" LVL="0"><PTEXT><PDAT>The radio station program schedule contains timetable information as well as information describing the music pieces played such as the title, artist and group name. The program schedule is accessed by a audio description creation system which is connected to the programmed data processor. The audio description creation system creates the audio description heard by the caller over the telephone when inquiring about a particular music piece. The audio description information describes the music piece outlined in the program schedule and the music product containing the music piece, along with other related information such as product pricing. The audio description creation system digitally records the audio and is connected to various input devices such as a compact disc player, cassette player, digital audio tape and a microphone. An announcer accesses the program schedule file on a display screen and reads the description information into the microphone creating the audio description file for each music piece. The announcer has access to previous recordings stored in an audio description archive which can be accessed via a data input terminal connected to the audio description creation system enabling previously recorded audio descriptions to be referenced.</PDAT></PTEXT></PARA>
<PARA ID="P-00022" LVL="0"><PTEXT><PDAT>It is another object of the invention to automate the recording and storing of the music excerpts for the music pieces outline in the program schedule. These audio segments can be accessed by the potential purchaser to assist in the purchase process and to verify to the caller they are purchasing the music product containing the music piece listened to during the radio broadcast. The automated record and store process is accomplished by inserting a signal such as a tone or pulse at the beginning of each music piece broadcast. A receiver is tuned to the broadcast containing the music pieces to be recorded and a signal detector triggers the digital recording of the piece by the programmed data processor. The music piece is recorded for a specified time such as ten seconds providing an audio segment of the music piece.</PDAT></PTEXT></PARA>
<PARA ID="P-00023" LVL="0"><PTEXT><PDAT>Coordination of the audio description file with the program schedule is accomplished through a synchronized time schedule whereby the program schedule file and the recording of the audio segments on the programmed data processor are initiated at the same time. Each station&apos;s program schedule is stored in chronological order enabling the coordination. Another method of implementing the signal insertion enables information to be encoded as part of the selection signal and decoded into data for use by a programmed data processor. Information such as the program schedule number or music piece number can be incorporated into the selection signal enabling the coordination of the audio description with the program schedule. Information can be encoded into the selection signal through means such as multiple pulses or combination of tones and pulses.</PDAT></PTEXT></PARA>
<PARA ID="P-00024" LVL="0"><PTEXT><PDAT>The invention also provides the information for a potential purchaser to automatically order a music product without having heard one of the pieces through a radio broadcast. For instance when the potential purchaser dials the 1-800-RECORDS telephone number a telephone system audibly requests the potential purchaser to touch </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> on their touch tone telephone if they want to order a music piece they have just heard played on the radio, or touch </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> if they want to order a music product from the automated music catalogue. If the potential purchaser touches </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> the invention will then proceed to determine the musical product to be ordered by asking the potential purchaser to select the type of music and to input the artists name or group name using the touch tone telephone keys. Once the correct artist or group is determined the system can reference all the music products performed by that artist or group and provide the potential purchaser with the names of the music album and the recording media available such as CD, record or cassette along with pricing. Further information can also be made available such as the names of the pieces of each piece recorded on each music product along with excerpts to preview each song. The invention conveniently provides all the information required to make a purchase. Some of this information is not available even at the record store.</PDAT></PTEXT></PARA>
<PARA ID="P-00025" LVL="0"><PTEXT><PDAT>When the potential purchaser indicates they wish to buy a particular music product the system determines the shipping address and credit authorization and then places the order for the music product with the fulfillment warehouse.</PDAT></PTEXT></PARA>
<PARA ID="P-00026" LVL="0"><PTEXT><PDAT>In the case where more than one main artist or group performed on a music product or the purchase process was too complex, the potential purchaser can be bridged to an operator who can obtain and input any required data and assist the caller through the purchase process.</PDAT></PTEXT></PARA>
<PARA ID="P-00027" LVL="0"><PTEXT><PDAT>The invention can also be utilized with other broadcast services such as a music television, telecast. Viewers of music television program or channel, access the invention in the same manner as previously described-but enter the station designation such as call letters, channel number or advertised pseudo-name enabling the invention to recall the pertinent program schedule relating to the viewed television program or channel. The audio portion of the music broadcast, would be recorded and utilized to assist the viewer in the purchasing process. The invention can simultaneously support orders originating from both radio listeners and television viewers.</PDAT></PTEXT></PARA>
<PARA ID="P-00028" LVL="0"><PTEXT><PDAT>Other applications of the invention are also possible. The broadcast can consist of content other than music whereby products are advertised within a broadcast and the invention enables listeners to select, preview and purchase items advertised for sale over the network. The audio segments for these products would be recorded in the same manner as previously described for the music pieces and the products would match the program schedule as input prior to the broadcast.</PDAT></PTEXT></PARA>
<PARA ID="P-00029" LVL="0"><PTEXT><PDAT>The invention also extends to a digital as well as analog broadcast format whereby the selection signals are digital signals inserted into the digital broadcast.</PDAT></PTEXT></PARA>
<PARA ID="P-00030" LVL="0"><PTEXT><PDAT>The foregoing features of the invention, as well as the advantages provided thereby, are explained in greater detail hereinafter with reference to preferred embodiments illustrated in the accompanying drawings.</PDAT></PTEXT></PARA>
</BTEXT>
</BRFSUM>
<DRWDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>BRIEF DESCRIPTION OF THE DRAWINGS</PDAT></STEXT></H>
<PARA ID="P-00031" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> is a block diagram of the self-generating audio recording, storage, indexing and transaction system according to the present invention;</PDAT></PTEXT></PARA>
<PARA ID="P-00032" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT> illustrates an example of a Program Schedule reference file;</PDAT></PTEXT></PARA>
<PARA ID="P-00033" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> illustrates an Artist and Group Name reference file;</PDAT></PTEXT></PARA>
<PARA ID="P-00034" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> illustrates the telephone area and exchange code, station call letter code and touch tone input database file;</PDAT></PTEXT></PARA>
<PARA ID="P-00035" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT> is a table and map of North American telephone area codes;</PDAT></PTEXT></PARA>
<PARA ID="P-00036" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 6</PDAT></FGREF><PDAT> is the touch tone telephone keypad lay out; and</PDAT></PTEXT></PARA>
<PARA ID="P-00037" LVL="0"><PTEXT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT> is an entity relationship diagram illustrating some of the principles of the invention.</PDAT></PTEXT></PARA>
</BTEXT>
</DRWDESC>
<DETDESC>
<BTEXT>
<H LVL="1"><STEXT><PDAT>DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</PDAT></STEXT></H>
<PARA ID="P-00038" LVL="0"><PTEXT><PDAT>In order to explain the present invention in detail, reference will be made in particular to FIG. </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00039" LVL="0"><PTEXT><PDAT>In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, the reference number </PDAT><HIL><BOLD><PDAT>1000</PDAT></BOLD></HIL><PDAT> designates the radio station schedule input terminal device located at a remote radio station that can communicate with the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT>, located at the central site </PDAT><HIL><BOLD><PDAT>1025</PDAT></BOLD></HIL><PDAT>, and input the program schedule of music to be broadcast on the remote radio station. In the preferred embodiment the radio station schedule input terminal </PDAT><HIL><BOLD><PDAT>1000</PDAT></BOLD></HIL><PDAT> is the computer system at the radio station that schedules the time of play for both commercials and musical program content. This terminal device </PDAT><HIL><BOLD><PDAT>1000</PDAT></BOLD></HIL><PDAT> is equipped with a modem and a communications program so that it can automatically dial the communications interface </PDAT><HIL><BOLD><PDAT>1050</PDAT></BOLD></HIL><PDAT> of the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> and input the program schedule including the artists name, name of the musical piece, and the date and time the music is to be played. This information can be coded to reduce the transmission time as there could be hundreds of music pieces broadcast each day.</PDAT></PTEXT></PARA>
<PARA ID="P-00040" LVL="0"><PTEXT><PDAT>Alternatively, the radio station schedule can be automatically input by FAX (facsimile) using a computer or typewritten print out of the stations program schedule to transmit the stations schedule from the local FAX machine at the radio station to the central site </PDAT><HIL><BOLD><PDAT>1025</PDAT></BOLD></HIL><PDAT>. At the central site </PDAT><HIL><BOLD><PDAT>1025</PDAT></BOLD></HIL><PDAT>, the FAX receiver is a FAX board mounted within either a stand alone personal computer or the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> that would sequentially provide each incoming FAX message with its own identification number prior to storing the FAX digitally on the computer systems hard drive. In the process of setting up the FAX call a hand shake protocol is established between the sending and receiving FAX machines such that the receiving FAX machine can determine, by error free data transfer, the telephone number of the transmitting FAX machine. Alternatively, the station&apos;s FAX number can be established through, the telephone company supplied, (ANI) Automatic Number Identification service. The programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> utilizes this telephone number as an index to select the optimal algorithm to convert the FAX images to data. For example, message number </PDAT><HIL><BOLD><PDAT>101</PDAT></BOLD></HIL><PDAT> assigned by the FAX receiving board is associated with radio station WTAM FM because of the stations digitized telephone number received in the hand shake protocol. The programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> then accesses the interpretation protocol that matches the FAXed data for WTAM FM to convert the character images sent from the radio station FAX into ASCII characters to be stored on the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> in the program schedule file </PDAT><HIL><BOLD><PDAT>1060</PDAT></BOLD></HIL><PDAT>. For example, radio station WTAM FM could utilize a computer printer that produced text in the Roman font. Each line on their schedule begins with time of play, followed by duration, artist name, then the name of the music piece. A different radio station, identified through the handshake protocol by their telephone number as WPAT AM, utilizes a different scheduling computer to print out their program schedule using the Tudor font highlighting the artist name first, followed by the musical piece, time of play and duration. Because the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> knows the identity of the sending FAX machine it can apply the optimum algorithm to interpret the text font and determine from the text placement the contents of the page. This approach enables the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> to automatically file the FAXed program schedule of the remote radio station in a fixed digital format in the program schedule file </PDAT><HIL><BOLD><PDAT>1060</PDAT></BOLD></HIL><PDAT> associated with a particular radio station. An example of the format to which the program schedule files are processed is illustrated in FIG. </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00041" LVL="0"><PTEXT><PDAT>Alternatively, the terminal device </PDAT><HIL><BOLD><PDAT>1000</PDAT></BOLD></HIL><PDAT> could be a nonprogrammable terminal connected via a network to the communications interface </PDAT><HIL><BOLD><PDAT>1050</PDAT></BOLD></HIL><PDAT>, interacting on line to input the program schedule. The program schedule data could also be input using a touch tone telephone with voice prompting when connected to the telephone interface </PDAT><HIL><BOLD><PDAT>1020</PDAT></BOLD></HIL><PDAT> or input by voice into a section of the telephone interface that recognized spoken numbers and words through voice recognition. A coded version of the radio station program schedule makes the input easier and quicker. The schedule data could also be read over the telephone to an operator who would input the data. As this program schedule data is received from all of the participating radio stations it is stored in the program schedule </PDAT><HIL><BOLD><PDAT>1060</PDAT></BOLD></HIL><PDAT> of the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00042" LVL="0"><PTEXT><PDAT>Music television channels and other telecasters can also utilize the above-mentioned methods to forward and store their program schedules for use by the system.</PDAT></PTEXT></PARA>
<PARA ID="P-00043" LVL="0"><PTEXT><PDAT>The digitized audio description file </PDAT><HIL><BOLD><PDAT>1070</PDAT></BOLD></HIL><PDAT> is created using the audio description creation system </PDAT><HIL><BOLD><PDAT>1080</PDAT></BOLD></HIL><PDAT> which is connected to the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT>. The audio description creation system consists of a set of audio input devices, such as a CD player </PDAT><HIL><BOLD><PDAT>1085</PDAT></BOLD></HIL><PDAT>, cassette player </PDAT><HIL><BOLD><PDAT>1086</PDAT></BOLD></HIL><PDAT>, record player </PDAT><HIL><BOLD><PDAT>1087</PDAT></BOLD></HIL><PDAT>, audio tape player </PDAT><HIL><BOLD><PDAT>1088</PDAT></BOLD></HIL><PDAT> and microphone </PDAT><HIL><BOLD><PDAT>1089</PDAT></BOLD></HIL><PDAT> for an announcer to record audio descriptions.</PDAT></PTEXT></PARA>
<PARA ID="P-00044" LVL="0"><PTEXT><PDAT>The audio description file </PDAT><HIL><BOLD><PDAT>1070</PDAT></BOLD></HIL><PDAT> consists of the audio description information describing the music piece and an audio segment consisting of an excerpt of the music piece. The audio description information corresponds to the audio recording of the text description of each music piece listed in the program schedule stored in the program schedule file </PDAT><HIL><BOLD><PDAT>1060</PDAT></BOLD></HIL><PDAT>. The announcer uses the display screen </PDAT><HIL><BOLD><PDAT>1081</PDAT></BOLD></HIL><PDAT> to recall the program schedule from the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> for each radio station. As well, additional information concerning the music piece such as the name of the music product containing the music piece and pricing can be input into the creation system via the attached data input terminal </PDAT><HIL><BOLD><PDAT>1082</PDAT></BOLD></HIL><PDAT> or personal computer and stored on the audio description creation system available to the announcer for audio recording.</PDAT></PTEXT></PARA>
<PARA ID="P-00045" LVL="0"><PTEXT><PDAT>For example, the station program schedule, after receipt from a participating radio station, would be loaded onto the audio description creation system </PDAT><HIL><BOLD><PDAT>1020</PDAT></BOLD></HIL><PDAT>. The program schedule file </PDAT><HIL><BOLD><PDAT>1060</PDAT></BOLD></HIL><PDAT>, an example of which is referenced in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 2</PDAT></FGREF><PDAT>, contains the station code or identifier for the station </PDAT><HIL><BOLD><PDAT>2000</PDAT></BOLD></HIL><PDAT>, field </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, date and period of the program schedule broadcast </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. number of music pieces in the time period </PDAT><HIL><BOLD><PDAT>2010</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT>, chronological schedule number </PDAT><HIL><BOLD><PDAT>2015</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, time of broadcast for a particular music piece </PDAT><HIL><BOLD><PDAT>2020</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>, artist or group name </PDAT><HIL><BOLD><PDAT>2025</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>, title of the music piece </PDAT><HIL><BOLD><PDAT>2030</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT> and the pointer to data file </PDAT><HIL><BOLD><PDAT>2035</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>. Parts of this schedule information can be coded to reduce the transmission time from the radio station to the system. For example, a particular artist or group could be located in a reference table and related to an artist or group number followed by a music piece reference number. The coded entry would be made in the program schedule at the radio station and FAXed to the central site </PDAT><HIL><BOLD><PDAT>1025</PDAT></BOLD></HIL><PDAT>. A standardized reference system could be utilized by all reference table based stations or different tables implemented for each station whereby the station reference table conversion is conducted by the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> when the imaging and interpolation process occurs for incoming program schedules.</PDAT></PTEXT></PARA>
<PARA ID="P-00046" LVL="0"><PTEXT><PDAT>For the purposes of recording the music title portion of the audio description, the audio description creation system </PDAT><HIL><BOLD><PDAT>1080</PDAT></BOLD></HIL><PDAT> performs an initial sort of the music pieces listed in the program schedules to remove redundant entries for the same artist and music piece. The artist name </PDAT><HIL><BOLD><PDAT>2025</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> and the name of the music piece </PDAT><HIL><BOLD><PDAT>2030</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT> contained in the program schedule </PDAT><HIL><BOLD><PDAT>1060</PDAT></BOLD></HIL><PDAT>, or the code representing it, is compared to the data description archive file </PDAT><HIL><BOLD><PDAT>1066</PDAT></BOLD></HIL><PDAT> containing all previous listings for which audio descriptions already exist. The announcer is then presented, on the display screen </PDAT><HIL><BOLD><PDAT>1081</PDAT></BOLD></HIL><PDAT>, with the listings that require an audio description. The announcer then reads the artist&apos;s name and title of the music piece into the microphone </PDAT><HIL><BOLD><PDAT>1089</PDAT></BOLD></HIL><PDAT> and stores them in the audio description file </PDAT><HIL><BOLD><PDAT>1070</PDAT></BOLD></HIL><PDAT> while at the same time updating the audio description archive file </PDAT><HIL><BOLD><PDAT>1084</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00047" LVL="0"><PTEXT><PDAT>Information not contained in the program schedule such as pricing, album name or other background can be input by the data input terminal </PDAT><HIL><BOLD><PDAT>1082</PDAT></BOLD></HIL><PDAT>, prior to audio recording, and stored as part of the data description archive file </PDAT><HIL><BOLD><PDAT>1066</PDAT></BOLD></HIL><PDAT> to be included in the audio description by the announcer.</PDAT></PTEXT></PARA>
<PARA ID="P-00048" LVL="0"><PTEXT><PDAT>The music product containing the music piece outlined in the program schedule can then be loaded into its respective player such as a CD player </PDAT><HIL><BOLD><PDAT>1085</PDAT></BOLD></HIL><PDAT>, on the audio description creation system </PDAT><HIL><BOLD><PDAT>1080</PDAT></BOLD></HIL><PDAT> and the audio segment digitized, compressed and stored into its associated audio description file </PDAT><HIL><BOLD><PDAT>1070</PDAT></BOLD></HIL><PDAT> while also updating the audio description archive file </PDAT><HIL><BOLD><PDAT>1084</PDAT></BOLD></HIL><PDAT>. The audio segment can consist of an excerpt of the music piece or the entire music piece.</PDAT></PTEXT></PARA>
<PARA ID="P-00049" LVL="0"><PTEXT><PDAT>The announcer would then depress the space bar or other key of the display terminal </PDAT><HIL><BOLD><PDAT>1082</PDAT></BOLD></HIL><PDAT> to indicate completion of that audio input and the linking of the entry in the program schedule with the corresponding audio description. The link is made through a database which utilizes the pointer to data file, </PDAT><HIL><BOLD><PDAT>2035</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT>, which is added to each music piece in the program schedule and references the corresponding audio and data description.</PDAT></PTEXT></PARA>
<PARA ID="P-00050" LVL="0"><PTEXT><PDAT>The announcer can then proceed with the next descriptive item of that musical product which would be displayed on the display screen </PDAT><HIL><BOLD><PDAT>1081</PDAT></BOLD></HIL><PDAT> for the announcer to record onto the system. This process can be repeated for each piece recorded on the musical product and referenced in the database by product name. Both the audio description archive file </PDAT><HIL><BOLD><PDAT>1084</PDAT></BOLD></HIL><PDAT> and the data description archive file </PDAT><HIL><BOLD><PDAT>1066</PDAT></BOLD></HIL><PDAT> are automatically updated with the new entries.</PDAT></PTEXT></PARA>
<PARA ID="P-00051" LVL="0"><PTEXT><PDAT>Instead of using a staff announcer&apos;s voice to provide the audio description it is possible to have the recording artist provide their own music descriptions on a recording medium such as an audio tape and have it sent to the creation system site to be input and included as part of the audio description via the audio tape recorder </PDAT><HIL><BOLD><PDAT>1088</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00052" LVL="0"><PTEXT><PDAT>When the audio descriptions for all of program schedule entries and potentially for all of the new music products have been processed by the audio description creation system </PDAT><HIL><BOLD><PDAT>1080</PDAT></BOLD></HIL><PDAT>, the digital audio description file </PDAT><HIL><BOLD><PDAT>1070</PDAT></BOLD></HIL><PDAT> on the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> is updated with the new audio descriptions contained in the audio description archive file </PDAT><HIL><BOLD><PDAT>1084</PDAT></BOLD></HIL><PDAT>. As well, the data file </PDAT><HIL><BOLD><PDAT>1065</PDAT></BOLD></HIL><PDAT> is also updated with the new files contained in the data description archive file </PDAT><HIL><BOLD><PDAT>1066</PDAT></BOLD></HIL><PDAT>. The program schedule </PDAT><HIL><BOLD><PDAT>1060</PDAT></BOLD></HIL><PDAT> is updated with the revised schedule containing the pointer to data file </PDAT><HIL><BOLD><PDAT>2035</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> linking to the corresponding audio and data description.</PDAT></PTEXT></PARA>
<PARA ID="P-00053" LVL="0"><PTEXT><PDAT>Acquiring the music products and manually recording the music pieces is both expensive and time-consuming. The system offers a method for automatically recording the audio segments of the music pieces broadcast. This is accomplished by digitally recording the music in real time directly from the broadcast and storing the recorded segments into the associated audio description file </PDAT><HIL><BOLD><PDAT>1070</PDAT></BOLD></HIL><PDAT> on the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00054" LVL="0"><PTEXT><PDAT>In the radio industry, recordable media, such as Digital Audio Tape (DAT) or digital hard drives are used to prerecord many hours of music for preparation and play by radio stations. The music on the digital media is prepared in accordance with a station&apos;s program schedule. Existing technology enables an audio signal such as a pulse or DTMF tone to be recorded on the DAT and included with the broadcast to trigger remote audio and video equipment. This capability is commonly used in the radio and television industries to remotely play advertisements.</PDAT></PTEXT></PARA>
<PARA ID="P-00055" LVL="0"><PTEXT><PDAT>According to the invention, the automated record and store process is accomplished by inserting a selection signal such as a tone or pulse at the beginning of each music piece to be recorded from the broadcast. In </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT> the receiver </PDAT><HIL><BOLD><PDAT>1090</PDAT></BOLD></HIL><PDAT> is connected to the signal detector </PDAT><HIL><BOLD><PDAT>1091</PDAT></BOLD></HIL><PDAT> which is connected to the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT>. The receiver </PDAT><HIL><BOLD><PDAT>1090</PDAT></BOLD></HIL><PDAT> receives the broadcast containing the music pieces to be recorded and a signal detector </PDAT><HIL><BOLD><PDAT>1091</PDAT></BOLD></HIL><PDAT>, when it detects the appropriate signal, triggers the digital recording of the piece by the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT>. The recording of the music piece continues for a specified time, such as ten seconds, providing an excerpt; of each music piece denoted by the selection signal. The digitizing facility can be part of the signal detector </PDAT><HIL><BOLD><PDAT>1091</PDAT></BOLD></HIL><PDAT> or contained within the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00056" LVL="0"><PTEXT><PDAT>An additional signal can be included to signal the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> to stop recording rather than a timer based approach. Having a signal start and stop the recording function enables the entire music piece to be recorded whereby the additional signal is appended to the end of the music piece.</PDAT></PTEXT></PARA>
<PARA ID="P-00057" LVL="0"><PTEXT><PDAT>The real-time recording of the music piece is linked to the program schedule </PDAT><HIL><BOLD><PDAT>1060</PDAT></BOLD></HIL><PDAT> enabling the recorded audio segment to be stored in the correct audio description file. The recording of the music pieces is initially time synchronized with the program schedule for each station. A receiver </PDAT><HIL><BOLD><PDAT>1090</PDAT></BOLD></HIL><PDAT> and signal detector </PDAT><HIL><BOLD><PDAT>1091</PDAT></BOLD></HIL><PDAT> is dedicated to each station requiring real-time recording. Knowing the station code or identifier that the receiver is dedicated to, the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> loads the correct program schedule </PDAT><HIL><BOLD><PDAT>1060</PDAT></BOLD></HIL><PDAT>, for the station it is recording, based on the station code </PDAT><HIL><BOLD><PDAT>2000</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT>, and the current time and period of broadcast </PDAT><HIL><BOLD><PDAT>2005</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT>. The system clock is used by the programmed data processor to locate the current music piece played as indicated in the program schedule, using the time of broadcast </PDAT><HIL><BOLD><PDAT>2020</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT>. The incoming audio segment, as detected by the signal detector </PDAT><HIL><BOLD><PDAT>1091</PDAT></BOLD></HIL><PDAT> is recorded into its corresponding audio description file </PDAT><HIL><BOLD><PDAT>1070</PDAT></BOLD></HIL><PDAT> as referenced by the pointer to data file </PDAT><HIL><BOLD><PDAT>2035</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>8</PDAT></BOLD></HIL><PDAT> in its program schedule </PDAT><HIL><BOLD><PDAT>1070</PDAT></BOLD></HIL><PDAT>. After the initial synchronization, the recording of the music pieces into the audio description file </PDAT><HIL><BOLD><PDAT>1070</PDAT></BOLD></HIL><PDAT> follows in chronological order with the program schedule for that particular station. For example, if synchronization between the incoming audio segments and the current program schedule occurred with the first music piece listed in the program schedule as indicated by the chronological schedule number </PDAT><HIL><BOLD><PDAT>2015</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, then the next audio segment detected would be recorded into the audio description file corresponding to the next program schedule listing containing the chronological schedule number of two.</PDAT></PTEXT></PARA>
<PARA ID="P-00058" LVL="0"><PTEXT><PDAT>When the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> reaches the last listing in a program schedule it loads the next schedule for that particular station and proceeds to synchronize and record when the next audio segment is detected. Establishing the last listing in a program schedule can be accomplished in various ways such as comparing the number of music pieces in the time period </PDAT><HIL><BOLD><PDAT>2010</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> and the chronological schedule number </PDAT><HIL><BOLD><PDAT>2015</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> for the current listing. If the two fields match the next program schedule is loaded for synchronization with the next incoming audio segment. Another method of detecting the end of a program schedule involves the addition of a delineator at the end of the program listing which when reached causes the loading of the new program schedule. As well, a delineator signal can be added to the broadcast signalling the programmed data processor to refer to the next program schedule.</PDAT></PTEXT></PARA>
<PARA ID="P-00059" LVL="0"><PTEXT><PDAT>Specific signals or multiple signals can be inserted for various purposes such as to synchronize the program schedule with the automatic recording of the music pieces. When creating the program schedule the station can indicate the time of the synchronizing signal and upon receiving the program schedule, the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> automatically interprets the signal placement along with the rest of the program schedule information. Many stations currently utilize a beginning of the hour signal for advertising purposes and this beginning of the hour signal can be detected by the programmed data processor and utilized to synchronize the program schedule.</PDAT></PTEXT></PARA>
<PARA ID="P-00060" LVL="0"><PTEXT><PDAT>Another method of implementing the selection signalling enables information to be encoded as part of the inserted signal and converted into data by the signal detector </PDAT><HIL><BOLD><PDAT>1091</PDAT></BOLD></HIL><PDAT>. Information such as a program schedule number or a music piece reference number can be incorporated into the selection signal enabling the coordination of the program schedule </PDAT><HIL><BOLD><PDAT>1060</PDAT></BOLD></HIL><PDAT> with the recording of the music pieces into the correct audio description file </PDAT><HIL><BOLD><PDAT>1070</PDAT></BOLD></HIL><PDAT>. The selection signal information can be encoded in the inserted signal through various means such as multiple tones or a combination of tones and pulses. For example, when DAT tapes are prepared containing the music for a days broadcast, a signal such as DTMF tones can be inserted prior to each music piece whereby the program schedule number precedes the music piece in the broadcast. For example, the 46th music piece in the program schedule can be preceded by the tones representing a 4 and 6. The signal detector </PDAT><HIL><BOLD><PDAT>1091</PDAT></BOLD></HIL><PDAT> would detect and decode the signal and pass the information to the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT>. The programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> would reference the chronological schedule number </PDAT><HIL><BOLD><PDAT>2015</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT>, within the current program schedule and record the audio segment into the correct audio description file </PDAT><HIL><BOLD><PDAT>1070</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00061" LVL="0"><PTEXT><PDAT>The encoding and inserting of information in the broadcast can be utilized in several ways. A coded music piece reference number indicating the title and artist name can be inserted into the broadcast and received, detected and decoded for use by the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> to coordinate the recording of the audio description and synchronization of the program schedule.</PDAT></PTEXT></PARA>
<PARA ID="P-00062" LVL="0"><PTEXT><PDAT>In an alternate method of operating the system, the insertion of the music piece reference number enables the system to operate without a program schedule. The insertion of the music piece reference number enables the programmed data processor to go directly to an audio description without accessing a program schedule. If the music piece reference number referred to an audio description not available on the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> then the programmed data processor can access the audio description archive file </PDAT><HIL><BOLD><PDAT>1084</PDAT></BOLD></HIL><PDAT> to retrieve the associated audio description. For operation without a program schedule utilizing the insertion of a music piece reference number, the audio description archive file </PDAT><HIL><BOLD><PDAT>1084</PDAT></BOLD></HIL><PDAT> can be located on the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> to provide more efficient operation.</PDAT></PTEXT></PARA>
<PARA ID="P-00063" LVL="0"><PTEXT><PDAT>The selection signal or other information, can be sent as data with the broadcast signal through methods such as the side band frequency of the broadcast signal or as digital data contained within a digital radio transmission or digital television signal.</PDAT></PTEXT></PARA>
<PARA ID="P-00064" LVL="0"><PTEXT><PDAT>As well, the selection signal can be utilized to pass messages in real-time to the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> such as in the case whereby the disc jockey at the radio station manually inserts a specific signal as part of the broadcast. The signal is decoded by the signal detector </PDAT><HIL><BOLD><PDAT>1091</PDAT></BOLD></HIL><PDAT> and passed to the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT>, relaying messages such as, a music piece will be skipped and the next music piece in the program schedule will be played enabling the programmed data processor to skip the next listing in the current program schedule.</PDAT></PTEXT></PARA>
<PARA ID="P-00065" LVL="0"><PTEXT><PDAT>The real-time insertion of a music piece reference number enables radio stations that conduct live or request radio, to insert the music piece reference number preceding or during the music piece broadcast, enabling the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> to locate the corresponding audio description or trigger the recording facility.</PDAT></PTEXT></PARA>
<PARA ID="P-00066" LVL="0"><PTEXT><PDAT>The selection signal methodology also applies in the case of a music television channel, music video program or a music station associated with a television telecast such as provided through a cable television telecast, satellite broadcast or television signals distributed via the telephone network. The selection signal is inserted into the audio portion of the signal and detected and potentially decoded as previously described.</PDAT></PTEXT></PARA>
<PARA ID="P-00067" LVL="0"><PTEXT><PDAT>An alternate signaling method enables video information to be inserted and detected as the selection signal. In the case of video signaling, the receiver </PDAT><HIL><BOLD><PDAT>1090</PDAT></BOLD></HIL><PDAT> becomes a television receiver and the signal detector and decoder is a video decoder able to decode the embedded video signal contained within the broadcast.</PDAT></PTEXT></PARA>
<PARA ID="P-00068" LVL="0"><PTEXT><PDAT>The audio description archive file </PDAT><HIL><BOLD><PDAT>1084</PDAT></BOLD></HIL><PDAT> can be updated at the end of the day or recording period by up-loading the audio segments and audio descriptions recorded from the broadcast that do not already exist in the archive. Music pieces, whether prerecorded when the artist name and titles are recorded by the announcer, or real-time recorded from the broadcast, are recorded once and can be referenced in multiple program schedules or multiple times within a given program schedule. Each audio description is filed in the audio description archive file </PDAT><HIL><BOLD><PDAT>1084</PDAT></BOLD></HIL><PDAT> contained on the audio description creation system </PDAT><HIL><BOLD><PDAT>1080</PDAT></BOLD></HIL><PDAT>. The audio description archive file </PDAT><HIL><BOLD><PDAT>1084</PDAT></BOLD></HIL><PDAT> enables easy reference and repeated use of the audio descriptions. This is significant from an efficiency standpoint because in most cases a relatively limited number of music pieces receive the majority of the broadcast play.</PDAT></PTEXT></PARA>
<PARA ID="P-00069" LVL="0"><PTEXT><PDAT>The audio description creation system </PDAT><HIL><BOLD><PDAT>1080</PDAT></BOLD></HIL><PDAT> is also the means to create the area code and call letter file </PDAT><HIL><BOLD><PDAT>1075</PDAT></BOLD></HIL><PDAT>, which when located on the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT>, is the basis for determining the call letters of the radio station being listened to by the potential purchaser.</PDAT></PTEXT></PARA>
<PARA ID="P-00070" LVL="0"><PTEXT><PDAT>For example each of the approximately 130 telephone company area codes, see </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 5</PDAT></FGREF><PDAT>, have less than 999 unique local exchange codes. Each telephone exchange code defines a small portion of the geographic area of the telephone area code that it is located in, such that a specific exchange code can only exist in one city or town for that particular area code. Similarly, cellular and other wireless telephone services such as PCS (Personal Communications Services) have identification codes relating to cell and transmitter locations with defined geographic limits. Every radio station has an area of signal coverage that is publicly available on maps such that for every exchange code it can be determined which radio stations provide coverage within the boundaries of a particular exchange. For example, in area code 519, exchanges 293, 526, 765, 773, 565, 644, 523, 228, 482, 233, 234, 237, 268, 762, 235, 769, 287, 524, 238, 225, 269, 262, 263, 666, 247, 229, 652, 227, 289, 264, 232, 294, 874, 243, 782, 785, 631, 633, 527, 522, 764, 775, 866, 245, 296, 461, 693, 768, 236 are located in an area surrounding London, Ontario, Canada and these following exchanges are within the London city limits 432, 433, 434, 438, 439, 451, 452, 453, 455, 471, 472, 473, 641, 643, 645, 649, 657, 659, 660, 661, 663, 667, 668, 672, 673, 679, 681, 685, 686 and from these exchanges the following radio stations can be heard CBBL FM, CBCL FM, CIXX FM, CJBC FM, CJBK AM, CJBX FM, CIQM FM CKSL AM CFPL AM in London and CHLO AM in St. Thomas and CBEG FM, CHOK AM, CKJD AM, CJFI FM in Sarnia. By organizing this information in a database it is possible to determine from touch tone input, the call letters of the radio station listened to even though the touch tone keys have three alphabetic characters on each key as illustrated in FIG. </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00071" LVL="0"><PTEXT><PDAT>The area code and call letter file and database structure are illustrated in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> where the area code </PDAT><HIL><BOLD><PDAT>4000</PDAT></BOLD></HIL><PDAT> and the local exchange digits </PDAT><HIL><BOLD><PDAT>4010</PDAT></BOLD></HIL><PDAT> are the first two data fields followed by a third field </PDAT><HIL><BOLD><PDAT>4020</PDAT></BOLD></HIL><PDAT> which indicates the maximum number of radio stations that can be satisfactorily heard in that area and exchange code. A radio station is described in the next set of four fields which are repeated for each radio station. </PDAT><HIL><BOLD><PDAT>4030</PDAT></BOLD></HIL><PDAT>, field </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> contains the numeric values of the touch tone keys that match the letters of the radio stations call letters. For instance WPAT FM would appear as </PDAT><HIL><BOLD><PDAT>9728</PDAT></BOLD></HIL><PDAT> where the number </PDAT><HIL><BOLD><PDAT>9</PDAT></BOLD></HIL><PDAT> is contained on the touch tone key corresponding to the letters WXY. </PDAT><HIL><BOLD><PDAT>4040</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>5</PDAT></BOLD></HIL><PDAT> contains a 0 if the station is AM station or a 1 if FM. </PDAT><HIL><BOLD><PDAT>4050</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>6</PDAT></BOLD></HIL><PDAT> contains a number 0 to 9 indicating the type of radio station such as country, pop or rock. </PDAT><HIL><BOLD><PDAT>4060</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>7</PDAT></BOLD></HIL><PDAT> contains a pointer to an audio description of the station call letters so that the potential purchaser can be prompted with the station call letters combined with the type of station in the event the purchaser forgets the call letters. The radio station call letter fields would be arranged in sorted order to improve the speed of the retrieval.</PDAT></PTEXT></PARA>
<PARA ID="P-00072" LVL="0"><PTEXT><PDAT>The system would know in advance as part of the database that the first two stations listed in the above example, CBBL FM and CBCL FM have the same touch tone numeric values 22252 and would audibly ask the caller to select the correct station once it detected this conflict.</PDAT></PTEXT></PARA>
<PARA ID="P-00073" LVL="0"><PTEXT><PDAT>To determine the radio station call letters the potential purchaser&apos;s telephone area and exchange code digits are used as a retrieval key against the area code and call letter file </PDAT><HIL><BOLD><PDAT>1075</PDAT></BOLD></HIL><PDAT> to retrieve the set of radio station call letters that could be heard from that telephone exchange. The potential purchaser is asked to use the telephone to input the station call letters. The call letter numbers from the area code and call letter file </PDAT><HIL><BOLD><PDAT>1075</PDAT></BOLD></HIL><PDAT> are then compared with the numeric values of the station call letters input by the potential purchaser. If a match is established the system can then proceed to determine which music has been played on the selected radio station. If a match is not found the potential purchaser can be verbally prompted with the types of radio stations in that area code and exchange, for example touch 1 for country, 2 for pop, which when selected, will allow the system to further prompt the potential purchaser with the radio station call letters that match the selected type of station. If this process does not determine the radio station, the potential purchaser can be bridged to a customer service operator, located at a customer service data terminal, </PDAT><HIL><BOLD><PDAT>1040</PDAT></BOLD></HIL><PDAT> to determine and input the radio station call letters.</PDAT></PTEXT></PARA>
<PARA ID="P-00074" LVL="0"><PTEXT><PDAT>As well as station call letters, other identifiers can be utilized in place of or in conjunction with the station call letters, for example, a radio station frequency number, television channel call letters, cable or television station number or advertised station descriptor. This entails an expanded version of the area code and call letter file referenced in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 4</PDAT></FGREF><PDAT> whereby </PDAT><HIL><BOLD><PDAT>4030</PDAT></BOLD></HIL><PDAT>, field </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> includes the touch tone numbers for additional identifiers.</PDAT></PTEXT></PARA>
<PARA ID="P-00075" LVL="0"><PTEXT><PDAT>In some cases the station operator may request their own specific telephone number for their listeners to access the service, in which case the called number would identify the station and enable the programmed data processor to recall the appropriate program schedule.</PDAT></PTEXT></PARA>
<PARA ID="P-00076" LVL="0"><PTEXT><PDAT>The audio description creation system </PDAT><HIL><BOLD><PDAT>1080</PDAT></BOLD></HIL><PDAT> is also the means to create an artist name archive file </PDAT><HIL><BOLD><PDAT>1083</PDAT></BOLD></HIL><PDAT> which is updated every time a new artist adds a musical product. This artists name archive file </PDAT><HIL><BOLD><PDAT>1083</PDAT></BOLD></HIL><PDAT> updates the artists name file </PDAT><HIL><BOLD><PDAT>1078</PDAT></BOLD></HIL><PDAT> on the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> each time it is updated. The artists name file </PDAT><HIL><BOLD><PDAT>1078</PDAT></BOLD></HIL><PDAT> contains the touch tone key combinations and other related information for each artist or group name. This file is also partitioned into as many segments as a potential purchaser can identify as separate sets or styles of music. For example, 5 partitions can be created by dividing all artists or groups into the categories of soft rock, hard rock, pop, easy listening and country. Each of these categories can then be divided into single artists or groups. Then the artist and group names are converted into the numeric values of the touch tone keys that match the alphabetic characters of their names. For example, the letters A,B,C would all be represented by the number </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> which is the numeric value of the touch tone key containing them. A generalized version of this file is described in </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 3</PDAT></FGREF><PDAT> where </PDAT><HIL><BOLD><PDAT>3000</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> contains a number between 1 and 5 representing the type or category of music. </PDAT><HIL><BOLD><PDAT>3005</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>2</PDAT></BOLD></HIL><PDAT> contains a 0 for an artist or 1 indicating a group. </PDAT><HIL><BOLD><PDAT>3010</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>3</PDAT></BOLD></HIL><PDAT> contains the name of the artist in touch tone representation of the ASCII characters of their name. Since the characters Q and Z and Space do not appear on the touch tone telephone keypad the number 1 is used to indicate either Q or Z and the number 0 is used to denote a space. The potential purchaser would be informed of these keyboard characteristics when prompted to input the artist or group name. </PDAT><HIL><BOLD><PDAT>3020</PDAT></BOLD></HIL><PDAT> field </PDAT><HIL><BOLD><PDAT>4</PDAT></BOLD></HIL><PDAT> would contain a pointer to the artist or group name in the data file </PDAT><HIL><BOLD><PDAT>1065</PDAT></BOLD></HIL><PDAT> referencing the pointers to all the musical products for the artist or group as well as pointers to the audio description of the artist&apos;s name, the names of the artist&apos;s musical products, the various pieces included in the musical products and musical excerpts of these pieces contained in the audio description file </PDAT><HIL><BOLD><PDAT>1070</PDAT></BOLD></HIL><PDAT>.</PDAT></PTEXT></PARA>
<PARA ID="P-00077" LVL="0"><PTEXT><PDAT>When the updated program schedule </PDAT><HIL><BOLD><PDAT>1060</PDAT></BOLD></HIL><PDAT>, data file </PDAT><HIL><BOLD><PDAT>1065</PDAT></BOLD></HIL><PDAT>, area code and call letter file </PDAT><HIL><BOLD><PDAT>1075</PDAT></BOLD></HIL><PDAT>, artists name file </PDAT><HIL><BOLD><PDAT>1078</PDAT></BOLD></HIL><PDAT>, and audio description file </PDAT><HIL><BOLD><PDAT>1070</PDAT></BOLD></HIL><PDAT> have been loaded on to the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> along with the program to initialize and control the data processor, the system is ready to receive telephone calls ordering music products.</PDAT></PTEXT></PARA>
<PARA ID="P-00078" LVL="0"><PTEXT><PDAT>Referencing </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 1</PDAT></FGREF><PDAT>, the potential purchaser uses a touch tone telephone </PDAT><HIL><BOLD><PDAT>1030</PDAT></BOLD></HIL><PDAT> to dial an advertised number such a 1-800-RECORDS (equivalent to 1-800-732-6737) to be connected to the telephone interface </PDAT><HIL><BOLD><PDAT>1020</PDAT></BOLD></HIL><PDAT>. The telephone interface </PDAT><HIL><BOLD><PDAT>1020</PDAT></BOLD></HIL><PDAT> uses audio prompts to ask the potential purchaser to use the touch tone keys to input their telephone number including the area code. Alternatively, this information can be supplied or verified by the telephone company ANI (Automatic Number Identification) service.</PDAT></PTEXT></PARA>
<PARA ID="P-00079" LVL="0"><PTEXT><PDAT>After receiving the telephone number the system asks the potential purchaser to touch 1 if they heard the music piece of interest on a radio station, or to touch 2 if they plan to order a music product not recently heard on the radio station.</PDAT></PTEXT></PARA>
<PARA ID="P-00080" LVL="0"><PTEXT><PDAT>If the potential purchaser touched 1 the telephone interface </PDAT><HIL><BOLD><PDAT>1020</PDAT></BOLD></HIL><PDAT> would ask the potential purchaser to input the call letters of the radio station to which they were listening, including AM and FM designations if necessary. Since the basic radio station call letters are four characters and each of the touch tone telephone keys with an alphabetical listing contain three possible characters, the potential for confusion as to which radio station identifier was input is very large. One of the concepts of the invention is to eliminate this confusion by using the caller&apos;s telephone area code and the mutually exclusive exchange code digits. This area and exchange code information enables the system to determine which city the call originated from and compare the caller input with a select group of radio station call letters consisting of only the stations participating in the service from that area. The request for the input of AM and FM designations would be requested when an equivalent set of base call letters, such as WPAT FM and WPAT AM, provide a potential conflict.</PDAT></PTEXT></PARA>
<PARA ID="P-00081" LVL="0"><PTEXT><PDAT>If the potential purchaser cannot remember the station call letters it is possible to use the area and exchange code digits to retrieve station descriptions from the area code and call letter file </PDAT><HIL><BOLD><PDAT>1075</PDAT></BOLD></HIL><PDAT> to verbally prompt the user with the call letters only available from their city. This audio prompting could also include general station descriptions such as Country and Western or Rock to help determine the exact station listened to.</PDAT></PTEXT></PARA>
<PARA ID="P-00082" LVL="0"><PTEXT><PDAT>Once the system has determined which radio station was listened to, the system can search the program schedule for the selected station to determine the current piece being played and provide the prospective purchaser with the first level of description such as the artists name. Then the telephone interface directs the potential purchaser to touch 1 if it is the music piece in which they are interested or touch the 2 key to hear an excerpt of the music piece broadcast to confirm the music piece of interest or touch the number key &num; on their telephone to jump to the previous piece of music played on the broadcast.</PDAT></PTEXT></PARA>
<PARA ID="P-00083" LVL="0"><PTEXT><PDAT>With each touch of the number key (&num;) the system would step back through each piece of music previously broadcast or telecast until the potential purchaser touched 1 to indicate reaching the music piece of interest. Listeners can also, through the telephone, enter the time they listened to a song to speed the retrieve process for those callers that were significantly delayed in calling the service.</PDAT></PTEXT></PARA>
<PARA ID="P-00084" LVL="0"><PTEXT><PDAT>Upon reaching the music piece of interest, the system audibly informs the potential purchaser of the formats available for the music product selected, such as CD, cassette tape or record album and provide the pricing, shipping and other details.</PDAT></PTEXT></PARA>
<PARA ID="P-00085" LVL="0"><PTEXT><PDAT>The system would then ask the potential purchaser to touch the asterisk key * on the touch tone telephone </PDAT><HIL><BOLD><PDAT>1030</PDAT></BOLD></HIL><PDAT> if they want to order the music product. Alternatively they can press the number key &num; if they want more details.</PDAT></PTEXT></PARA>
<PARA ID="P-00086" LVL="0"><PTEXT><PDAT>If the potential purchaser touches the number key &num; the other musical pieces on the product would be described and, if requested, excerpts could be played so that the potential purchaser had all the required information to make the purchase. Pressing the asterisk key * begins the order process.</PDAT></PTEXT></PARA>
<PARA ID="P-00087" LVL="0"><PTEXT><PDAT>When the asterisk key * is pressed to order the musical product, the system would use the caller&apos;s telephone number to determine the shipping address. The system accomplishes this by requesting the communications interface </PDAT><HIL><BOLD><PDAT>1050</PDAT></BOLD></HIL><PDAT> to connect to an outside database </PDAT><HIL><BOLD><PDAT>1090</PDAT></BOLD></HIL><PDAT> to provide the address associated with the caller&apos;s telephone number. This address could also be obtained from a local CD ROM, attached to the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT>, that contains the street addresses for the respective telephone numbers. If the caller requests a different shipping address, they can leave a voice message on the audio response system </PDAT><HIL><BOLD><PDAT>1025</PDAT></BOLD></HIL><PDAT> or be connected to a customer service operator.</PDAT></PTEXT></PARA>
<PARA ID="P-00088" LVL="0"><PTEXT><PDAT>As the address retrieval process is proceeding, the telephone interface </PDAT><HIL><BOLD><PDAT>1020</PDAT></BOLD></HIL><PDAT> audibly requests the purchaser to input their credit card number on the touch tone telephone </PDAT><HIL><BOLD><PDAT>1030</PDAT></BOLD></HIL><PDAT>. The programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> then directs the communications interface </PDAT><HIL><BOLD><PDAT>1050</PDAT></BOLD></HIL><PDAT> to contact the credit card issuer </PDAT><HIL><BOLD><PDAT>1095</PDAT></BOLD></HIL><PDAT> and obtain a credit authorization number which would enable the system to subsequently invoice the customers credit card account upon shipment.</PDAT></PTEXT></PARA>
<PARA ID="P-00089" LVL="0"><PTEXT><PDAT>With the shipping address and credit authorization known, the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> directs the communications interface </PDAT><HIL><BOLD><PDAT>1050</PDAT></BOLD></HIL><PDAT> to connect to the fulfillment warehouse </PDAT><HIL><BOLD><PDAT>2000</PDAT></BOLD></HIL><PDAT> and place the order for the requested music product. If the product is not in stock the fulfillment warehouse computer informs the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> through the communications interface </PDAT><HIL><BOLD><PDAT>1050</PDAT></BOLD></HIL><PDAT> which then instructs the telephone interface </PDAT><HIL><BOLD><PDAT>1020</PDAT></BOLD></HIL><PDAT> to inform the customer of the out of stock condition.</PDAT></PTEXT></PARA>
<PARA ID="P-00090" LVL="0"><PTEXT><PDAT>Once it has been determined that the product is in stock an is placed with all the information to ship the product and create the appropriate records to invoice the purchaser and record the transaction for further accounting and statistical purposes.</PDAT></PTEXT></PARA>
<PARA ID="P-00091" LVL="0"><PTEXT><PDAT>In each of these steps, if the caller experiences problems not easily handled by inputting information via the touch tone telephone the caller can be connected through the telephone interface </PDAT><HIL><BOLD><PDAT>1020</PDAT></BOLD></HIL><PDAT> to a customer service operator, who would obtain the required information verbally for input into the system via the customer service data terminal </PDAT><HIL><BOLD><PDAT>1040</PDAT></BOLD></HIL><PDAT>. The customer service operator has complete control of the session with the caller once the bridge connection has been made. For example, the customer service operator, can over the telephone, play the recorded excerpts for the caller, obtain and enter shipping addresses or explain credit problems. In general the customer service operator is the last resort when the automatic system is unable to complete the order process.</PDAT></PTEXT></PARA>
<PARA ID="P-00092" LVL="0"><PTEXT><PDAT>The system will also support orders from callers not directed by a broadcast but interested in purchasing a music product. For example, the potential purchaser can initially, upon calling, be prompted to press the number 2 on their touch tone telephone indicating they were not a radio listener but wished to use the automated music catalogue service whereby the system would proceed to automatically determine the required musical product and provide all the information, including the playing of music excerpts, to enable the potential purchaser to order a selected music album. The system accomplishes this by narrowing the scope of possible music products by first asking the potential purchaser to touch 1 if the artist of group is soft rock, touch 2 if hard rock, touch 3 for blues and touch 4 for country, then to indicate whether the music product is recorded by a group or single artist. Then the telephone interface </PDAT><HIL><BOLD><PDAT>1020</PDAT></BOLD></HIL><PDAT> requests the artists name followed by a terminator key such as the number key &num;, to be input using the touch tone keys on the telephone </PDAT><HIL><BOLD><PDAT>1030</PDAT></BOLD></HIL><PDAT>. The type of music and the numeric representation of the artist or group name is combined together as a retrieval key. Matching the retrieval key with the artists name file </PDAT><HIL><BOLD><PDAT>10713</PDAT></BOLD></HIL><PDAT> provides access to the pointer for the selected artist&apos;s name in the data file </PDAT><HIL><BOLD><PDAT>1065</PDAT></BOLD></HIL><PDAT>. The data file </PDAT><HIL><BOLD><PDAT>1065</PDAT></BOLD></HIL><PDAT> contains a pointer to the artist&apos;s name in the audio description file </PDAT><HIL><BOLD><PDAT>1070</PDAT></BOLD></HIL><PDAT> for the telephone interface </PDAT><HIL><BOLD><PDAT>1020</PDAT></BOLD></HIL><PDAT> to audibly relate the artist or group name and ask the potential purchaser to confirm the selection of the correct artist or group, using the touch tone keys.</PDAT></PTEXT></PARA>
<PARA ID="P-00093" LVL="0"><PTEXT><PDAT>Once the correct artist has been identified the system retrieves the names of musical products for the selected artist stored in the data file </PDAT><HIL><BOLD><PDAT>1065</PDAT></BOLD></HIL><PDAT> and relates them in the reverse order of their release. These names have pointers to audio descriptions in the audio description file </PDAT><HIL><BOLD><PDAT>1070</PDAT></BOLD></HIL><PDAT>, which when played to the potential purchaser, can assist in determining which musical music product is of interest. By using the touch tone keys, the potential purchaser can hear excerpts from any musical product until satisfied they have all the required information to initiate the purchasing process by touching the asterisk key *. Once the asterisk key * is depressed the system will automatically proceed with the purchase process as previously described.</PDAT></PTEXT></PARA>
<PARA ID="P-00094" LVL="0"><PTEXT><PDAT>It is contemplated that a 1-900 telephone number can be used for the service where the potential purchaser would be charged by their telephone company for the telephone call on either a per call or duration basis.</PDAT></PTEXT></PARA>
<PARA ID="P-00095" LVL="0"><PTEXT><PDAT>It is further anticipated that record and music clubs can use this invention to assist in describing and selling their products. As well, record stores can use this invention to allow potential customers to hear excerpts from the musical products over telephone lines. These services could be offered from one central site or through smaller local distributed systems networked together.</PDAT></PTEXT></PARA>
<PARA ID="P-00096" LVL="0"><PTEXT><PDAT>In both of the above-mentioned examples the music product number or unit code can be used to access the album index of possible pieces to be previewed, thereby reducing the retrieval time to obtain the music information required to make a purchase.</PDAT></PTEXT></PARA>
<PARA ID="P-00097" LVL="0"><PTEXT><PDAT>It is further contemplated that specific components of the system can be located remotely and networked to provide </PDAT><HIL><BOLD><PDAT>13</PDAT></BOLD></HIL><PDAT> distributed approach to reduce communications costs. For example, the telephone interface </PDAT><HIL><BOLD><PDAT>1020</PDAT></BOLD></HIL><PDAT> can contain local file storage capabilities and be located remotely from the programmed data processor </PDAT><HIL><BOLD><PDAT>1010</PDAT></BOLD></HIL><PDAT> such that the telephone interface, and its audible response and preview functions, can be located in major, cities.</PDAT></PTEXT></PARA>
<PARA ID="P-00098" LVL="0"><PTEXT><PDAT>It is further envisioned that the system may provide support for a variety of terminal devices through the system user interface </PDAT><HIL><BOLD><PDAT>7012</PDAT></BOLD></HIL><PDAT>. For example, a multi-media device such as a personal computer may access the program list information through a digital interface such as the communication interface </PDAT><HIL><BOLD><PDAT>1050</PDAT></BOLD></HIL><PDAT> thereby enabling access to both audio and text files comprising the program list information. The personal computer communicates utilizing digital data and users select program list information through keypad commands. The user may be guided through the selection process through one of, or a combination of, audio and visual prompts provided through the personal computer.</PDAT></PTEXT></PARA>
<PARA ID="P-00099" LVL="0"><PTEXT><PDAT>Further, the system may include support for the addition of video to the program list information whereby the system records, indexes and stores program list information that comprises audio and video content, such as a music video program information recorded from a cable, satellite or a digital data network broadcast or telecast. The video portion of the program list information may be recorded, indexed and stored in conjunction with the audio description in the same manner as previously described. A multi-media terminal device such as a personal computer or interactive television receiver may access the system through the user interface </PDAT><HIL><BOLD><PDAT>7012</PDAT></BOLD></HIL><PDAT> of which such communication functionality may be provided through the communication interface </PDAT><HIL><BOLD><PDAT>1050</PDAT></BOLD></HIL><PDAT> providing multi-media descriptions of the program schedule information.</PDAT></PTEXT></PARA>
<PARA ID="P-00100" LVL="0"><PTEXT><PDAT>Having now described the preferred embodiment of the invention, reference will be made to </PDAT><FGREF ID="DRAWINGS"><PDAT>FIG. 7</PDAT></FGREF><PDAT>, which gives an overview of some of the principles of the present invention. As illustrated, the present invention employs data processor </PDAT><HIL><BOLD><PDAT>7010</PDAT></BOLD></HIL><PDAT> which is provided with a suitable user interface </PDAT><HIL><BOLD><PDAT>7012</PDAT></BOLD></HIL><PDAT>. In the presently preferred embodiment, the user interface is integrated with the existing telephone infrastructure, so that persons may interact with the system using conventional DTMF telephone equipment, as described above. Connected to data processor </PDAT><HIL><BOLD><PDAT>7010</PDAT></BOLD></HIL><PDAT> is a subsystem </PDAT><HIL><BOLD><PDAT>7018</PDAT></BOLD></HIL><PDAT> for providing prerecorded program descriptions of the program material (e.g. recorded music) that the caller may wish to purchase. Subsystem </PDAT><HIL><BOLD><PDAT>7018</PDAT></BOLD></HIL><PDAT> may be implemented using hard disk storage, optical storage, digital audio tape (DAT) storage, or the like. The program material (e.g. recorded music) may be prerecorded from the media played over the air, or it may be prerecorded from the live broadcast using a suitable AM or FM receiver and suitable digitizing (analog to digital conversion) equipment. Also connected to data processor </PDAT><HIL><BOLD><PDAT>7010</PDAT></BOLD></HIL><PDAT> is a program schedule input system </PDAT><HIL><BOLD><PDAT>7020</PDAT></BOLD></HIL><PDAT>, which may be any suitable means for inputting the program schedule or play list identifying what program materials have been or will be broadcast, including optical character recognition equipment for inputting play lists provided in printed form and telefacsimile equipment for inputting play list information via FAX.</PDAT></PTEXT></PARA>
<PARA ID="P-00101" LVL="0"><PTEXT><PDAT>Data processor </PDAT><HIL><BOLD><PDAT>7010</PDAT></BOLD></HIL><PDAT> is further provided with a database system </PDAT><HIL><BOLD><PDAT>7014</PDAT></BOLD></HIL><PDAT> for storing the program schedule, suitable data or pointers from which the prerecorded program description may be obtained, reconstructed or generated. An program description subsystem </PDAT><HIL><BOLD><PDAT>7016</PDAT></BOLD></HIL><PDAT> is coupled to data processor </PDAT><HIL><BOLD><PDAT>7010</PDAT></BOLD></HIL><PDAT> to provide the selected program description to the user via the user interface </PDAT><HIL><BOLD><PDAT>7012</PDAT></BOLD></HIL><PDAT>. The program description subsystem may include digital to analog conversion equipment for converting digitally prerecorded program description information into an analog form suitable for distributing serially over the telephone. Alternatively or additionally, the program description subsystem may include synthesis equipment for performing text to speech conversion on text data files representing prerecorded program description information.</PDAT></PTEXT></PARA>
<PARA ID="P-00102" LVL="0"><PTEXT><PDAT>While the invention has been described with regard to the presently preferred embodiment, it will be understood that the invention is capable of certain modification without departing from the spirit of the invention as set forth in the appended claims.</PDAT></PTEXT></PARA>
</BTEXT>
</DETDESC>
</SDODE>
<SDOCL>
<H LVL="1"><STEXT><PDAT>What is claimed is: </PDAT></STEXT></H>
<CL>
<CLM ID="CLM-00001">
<PARA ID="P-00103" LVL="0"><PTEXT><PDAT>1. A computer-implemented information system to provide users with information concerning program materials disseminated according to a program list, comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>a processing system for execution by a computer; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a user interface coupled to said processing system, said user interface providing means for placing user inquiries regarding the program material; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a database coupled to said processing system; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>first input means coupled to said processing system, for inputting information reflecting program descriptions of said program materials; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>second input means coupled to said processing system, for inputting program list information regarding a plurality of program material items; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a program description output means coupled to said processing system and to said user interface; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>identifier means responsive to only a broadcast identifier for generating and storing information in said database; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>said processing system having: </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>means for correlating said program descriptions of program material with said program list information and for storing said correlated program descriptions and program list information in said database responsive to receipt of said broadcast identifier; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>means for responding to a user inquiry, placed through said user interface, about an item in said program list, by retrieving a selected program description from said database associated with said broadcast identifier, and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="3"><PTEXT><PDAT>means for further responding to said user inquiry by causing said program description output means to produce a message based on said selected program description. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00002">
<PARA ID="P-00104" LVL="0"><PTEXT><PDAT>2. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said processing system is a computer program running on said computer.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00003">
<PARA ID="P-00105" LVL="0"><PTEXT><PDAT>3. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said user interface includes means for coupling to a computer.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00004">
<PARA ID="P-00106" LVL="0"><PTEXT><PDAT>4. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said user interface comprises a communication interface and wherein said user inquiries are placed using digital data entered through a keypad.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00005">
<PARA ID="P-00107" LVL="0"><PTEXT><PDAT>5. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said first input means includes a television receiver.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00006">
<PARA ID="P-00108" LVL="0"><PTEXT><PDAT>6. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said first input means includes a video signal digitizer.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00007">
<PARA ID="P-00109" LVL="0"><PTEXT><PDAT>7. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said first input means includes means for extracting said program description from prerecorded material.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00008">
<PARA ID="P-00110" LVL="0"><PTEXT><PDAT>8. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said second input means includes a video receiver.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00009">
<PARA ID="P-00111" LVL="0"><PTEXT><PDAT>9. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said first input means couples to a digital data network.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00010">
<PARA ID="P-00112" LVL="0"><PTEXT><PDAT>10. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said program description output means includes a text to speech conversion system.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00011">
<PARA ID="P-00113" LVL="0"><PTEXT><PDAT>11. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said program description output means includes digital to analog conversion means.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00012">
<PARA ID="P-00114" LVL="0"><PTEXT><PDAT>12. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said program description comprises a telecast schedule.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00013">
<PARA ID="P-00115" LVL="0"><PTEXT><PDAT>13. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said program description comprises information specific to a broadcaster.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00014">
<PARA ID="P-00116" LVL="0"><PTEXT><PDAT>14. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said user interface includes means for coupling to a digital data network.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00015">
<PARA ID="P-00117" LVL="0"><PTEXT><PDAT>15. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said user interface includes means for coupling to a personal computer which receives said program list.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00016">
<PARA ID="P-00118" LVL="0"><PTEXT><PDAT>16. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said user interface includes means for coupling to a computer which receives and displays said program description information comprising a multi-media presentation.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00017">
<PARA ID="P-00119" LVL="0"><PTEXT><PDAT>17. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said user interface includes means for coupling to an interactive television device.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00018">
<PARA ID="P-00120" LVL="0"><PTEXT><PDAT>18. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein multiple program descriptions are selected from said program list.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00019">
<PARA ID="P-00121" LVL="0"><PTEXT><PDAT>19. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said message produced by said program description relates to a subset of said program list.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00020">
<PARA ID="P-00122" LVL="0"><PTEXT><PDAT>20. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said first input means includes a reception device for a digital signal.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00021">
<PARA ID="P-00123" LVL="0"><PTEXT><PDAT>21. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said broadcast identifier includes one of the following, station call letters, a station tuning frequency, a television channel allocation, a cable subscriber identification, a music genre, a telephone number, a network address, an identification number or a predetermined identifier.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00022">
<PARA ID="P-00124" LVL="0"><PTEXT><PDAT>22. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said system further comprises means to store a master listing of program descriptions and wherein said first input means updates said master listing with information reflecting program descriptions.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00023">
<PARA ID="P-00125" LVL="0"><PTEXT><PDAT>23. The information system in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said second input means receives said program list information in the chronological order of a broadcast or telecast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00024">
<PARA ID="P-00126" LVL="0"><PTEXT><PDAT>24. The information system in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said program description output means produces said messages consecutively in the chronological order in which the program list information is received.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00025">
<PARA ID="P-00127" LVL="0"><PTEXT><PDAT>25. The information system in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said message produced by said program description output means is contained within a digit data transmission.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00026">
<PARA ID="P-00128" LVL="0"><PTEXT><PDAT>26. The information system in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said broadcast identifier comprises an address for a remote user device.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00027">
<PARA ID="P-00129" LVL="0"><PTEXT><PDAT>27. The information system in claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said broadcast identifier comprises a program material item.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00028">
<PARA ID="P-00130" LVL="0"><PTEXT><PDAT>28. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said program list is associated with a broadcast signal transmitted through a digital data network.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00029">
<PARA ID="P-00131" LVL="0"><PTEXT><PDAT>29. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said message produced by said program description output means comprises text.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00030">
<PARA ID="P-00132" LVL="0"><PTEXT><PDAT>30. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said message produced by said program description output means comprises video.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00031">
<PARA ID="P-00133" LVL="0"><PTEXT><PDAT>31. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said message produced by said program description output means comprises audio.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00032">
<PARA ID="P-00134" LVL="0"><PTEXT><PDAT>32. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said first input means comprises a communications interface connected to a network.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00033">
<PARA ID="P-00135" LVL="0"><PTEXT><PDAT>33. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said first input means records and stores at least one program description from said broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00034">
<PARA ID="P-00136" LVL="0"><PTEXT><PDAT>34. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said message produced by said program description output means contains more than one program description.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00035">
<PARA ID="P-00137" LVL="0"><PTEXT><PDAT>35. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said program description output means is located geographically remote from said information system.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00036">
<PARA ID="P-00138" LVL="0"><PTEXT><PDAT>36. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said program list comprises a listing of advertisements and wherein said program description contains information relating to said advertisements.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00037">
<PARA ID="P-00139" LVL="0"><PTEXT><PDAT>37. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said broadcast identifier is associated with a conversion format to apply to said program list.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00038">
<PARA ID="P-00140" LVL="0"><PTEXT><PDAT>38. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said user inquiry comprises a broadcast identifier.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00039">
<PARA ID="P-00141" LVL="0"><PTEXT><PDAT>39. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said program list is synchronized with said broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00040">
<PARA ID="P-00142" LVL="0"><PTEXT><PDAT>40. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said user inquiry comprises a program item from said program list.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00041">
<PARA ID="P-00143" LVL="0"><PTEXT><PDAT>41. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said user inquiry comprises a reference number or code.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00042">
<PARA ID="P-00144" LVL="0"><PTEXT><PDAT>42. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein information within said program list is associated with number representations or codes referenced from a master listing.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00043">
<PARA ID="P-00145" LVL="0"><PTEXT><PDAT>43. The information system of claim </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> wherein said number representations or codes are associated with said program descriptions.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00044">
<PARA ID="P-00146" LVL="0"><PTEXT><PDAT>44. The information system of claim </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> wherein said number representations or codes are interpreted responsive to said broadcast identifier.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00045">
<PARA ID="P-00147" LVL="0"><PTEXT><PDAT>45. The information system of claim </PDAT><HIL><BOLD><PDAT>42</PDAT></BOLD></HIL><PDAT> wherein said number representations or codes are encoded and inserted with broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00046">
<PARA ID="P-00148" LVL="0"><PTEXT><PDAT>46. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said program list is input through a touch tone telephone or using voice recognition.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00047">
<PARA ID="P-00149" LVL="0"><PTEXT><PDAT>47. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said user inquiry comprises a city or geographic region.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00048">
<PARA ID="P-00150" LVL="0"><PTEXT><PDAT>48. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said database further comprises digital data representing the alpha-numeric touch tone telephone key pad input of artist names, song titles and music album titles referenced within said database.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00049">
<PARA ID="P-00151" LVL="0"><PTEXT><PDAT>49. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said program list information is provided interactively in real-time.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00050">
<PARA ID="P-00152" LVL="0"><PTEXT><PDAT>50. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said user interface comprises means to connect to a wireless network.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00051">
<PARA ID="P-00153" LVL="0"><PTEXT><PDAT>51. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said correlation of said program description with said program list is responsive to receipt of program list information.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00052">
<PARA ID="P-00154" LVL="0"><PTEXT><PDAT>52. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said correlation of said program description with said program list is responsive to receipt of a program description.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00053">
<PARA ID="P-00155" LVL="0"><PTEXT><PDAT>53. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said user interface comprises a telephone interface and wherein said user inquiries are placed using telephone DTMF codes entered through a touch tone telephone.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00054">
<PARA ID="P-00156" LVL="0"><PTEXT><PDAT>54. The information system of claim </PDAT><HIL><BOLD><PDAT>1</PDAT></BOLD></HIL><PDAT> wherein said program list is synchronized with said program descriptions.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00055">
<PARA ID="P-00157" LVL="0"><PTEXT><PDAT>55. An information system for on-demand remote access to a self-generating program recording, storage and indexing system comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>at least one broadcast unit for providing a broadcast to remote locations; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>signal generator means coupled to said at least one broadcast unit for providing a signal within said broadcast; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a programmed data processor that includes a data input system and a first database for receiving program list information; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a user interface coupled to said programmed data processor, said user interface providing means to communicate with remote users; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>at least one reception device to receive said broadcast; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a detection device associated with said at least one reception device for detecting said signal from said broadcast; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a storage device to digitally record and store detected program descriptions; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>identifier means responsive to only a broadcast identifier for generating information in said first database; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein said programmed data processor is coupled to said user interface, to said storage device and to said detection device, said programmed data processor causing said user interface to communicate said program description information to said remote user, responsive to a user inquiry. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00056">
<PARA ID="P-00158" LVL="0"><PTEXT><PDAT>56. The information system in claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said user inquiry comprises a broadcast identifier.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00057">
<PARA ID="P-00159" LVL="0"><PTEXT><PDAT>57. The information system in claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> further comprising means for correlating said program descriptions with said program list and for storing said correlated program descriptions and program list information in said first database.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00058">
<PARA ID="P-00160" LVL="0"><PTEXT><PDAT>58. The information system in claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said broadcast identifier comprises an identification of a listing from said program list.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00059">
<PARA ID="P-00161" LVL="0"><PTEXT><PDAT>59. The information system in claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said broadcast comprises a digital data broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00060">
<PARA ID="P-00162" LVL="0"><PTEXT><PDAT>60. The information system in claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said broadcast comprises a cable telecast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00061">
<PARA ID="P-00163" LVL="0"><PTEXT><PDAT>61. The information system in claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> further comprising a system for extracting program descriptions from prerecorded materials.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00062">
<PARA ID="P-00164" LVL="0"><PTEXT><PDAT>62. The information system in claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said broadcast identifier includes information from said program list.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00063">
<PARA ID="P-00165" LVL="0"><PTEXT><PDAT>63. The information system in claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said program list is received from said broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00064">
<PARA ID="P-00166" LVL="0"><PTEXT><PDAT>64. The information system in claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said program descriptive information is recorded from said broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00065">
<PARA ID="P-00167" LVL="0"><PTEXT><PDAT>65. The information system in claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said program description information includes video.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00066">
<PARA ID="P-00168" LVL="0"><PTEXT><PDAT>66. The information system in claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said program description information includes text.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00067">
<PARA ID="P-00169" LVL="0"><PTEXT><PDAT>67. The information system of claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said broadcast identifier comprises one of the following, station call letters, a station tuning frequency, a television channel allocation, a cable subscriber identification, a music genre, a telephone number, a network address, an identification number or a predetermined identifier.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00068">
<PARA ID="P-00170" LVL="0"><PTEXT><PDAT>68. The information system in claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said database further comprises digital data representing the alpha-numeric touch tone telephone key pad input of artist names, song titles and music album titles referenced within said database.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00069">
<PARA ID="P-00171" LVL="0"><PTEXT><PDAT>69. The information system claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said program list comprises a listing of advertisements and wherein said program description contains information relating to said advertisements.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00070">
<PARA ID="P-00172" LVL="0"><PTEXT><PDAT>70. The information system of claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said signal is received within a digital radio, digital television or the sideband of a broadcast signal.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00071">
<PARA ID="P-00173" LVL="0"><PTEXT><PDAT>71. The information system of claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said program list is synchronized with said program descriptions.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00072">
<PARA ID="P-00174" LVL="0"><PTEXT><PDAT>72. The information system of claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said program list is synchronized with said broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00073">
<PARA ID="P-00175" LVL="0"><PTEXT><PDAT>73. The information system of claim </PDAT><HIL><BOLD><PDAT>55</PDAT></BOLD></HIL><PDAT> wherein said program descriptions are located geographically remote from said information system.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00074">
<PARA ID="P-00176" LVL="0"><PTEXT><PDAT>74. An information system for on-demand remote access to a self-generating program recording, storage and indexing system comprising:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>at least one broadcast unit for providing a broadcast; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a signal generator coupled to said at least one broadcast unit for providing a signal within said broadcast; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a programmed data processor that includes a data input system and a first database for receiving a program list; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a user interface for providing user inquiries to said programmed data processor; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>at least one reception device to receive said broadcast; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a detection device associated with said at least one reception device for detecting said signal from said broadcast; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a storage device for digitally recording and storing detected information on said programmed data processor, responsive to only a broadcast identifier; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a program description creation device for creating a program description file, said creation device being selected from the group consisting essentially of a compact disc player, a tape cassette player, a digital audio tape device, a videotape player, a multi-track audio tape recorder, a microphone and a data input device; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>a responsive device responding to the receipt of at least one item from said program list to access said first database to read program descriptive information; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>wherein said programmed data processor is coupled to said user interface, and to said detection device, said programmed data processor causing said user interface to communicate said program descriptive information to said remote locations. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00075">
<PARA ID="P-00177" LVL="0"><PTEXT><PDAT>75. The information system in claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said broadcast comprises a digital data broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00076">
<PARA ID="P-00178" LVL="0"><PTEXT><PDAT>76. The information system in claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said broadcast comprises a cable telecast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00077">
<PARA ID="P-00179" LVL="0"><PTEXT><PDAT>77. The information system in claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said user inquiry includes a broadcast identifier.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00078">
<PARA ID="P-00180" LVL="0"><PTEXT><PDAT>78. The information system in claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said user interface comprises a telephone interface and wherein said user inquiries are placed using telephone DTMF codes entered through a touch tone telephone.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00079">
<PARA ID="P-00181" LVL="0"><PTEXT><PDAT>79. The information system in claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said broadcast identifier includes information from said program list.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00080">
<PARA ID="P-00182" LVL="0"><PTEXT><PDAT>80. The information system in claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said program list is received from said broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00081">
<PARA ID="P-00183" LVL="0"><PTEXT><PDAT>81. The information system in claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said program descriptive information is recorded from said broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00082">
<PARA ID="P-00184" LVL="0"><PTEXT><PDAT>82. The information system in claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said program description creation device is located remotely from said system.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00083">
<PARA ID="P-00185" LVL="0"><PTEXT><PDAT>83. The information system in claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said program description information is stored remotely from said information system.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00084">
<PARA ID="P-00186" LVL="0"><PTEXT><PDAT>84. The information system of claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said broadcast identifier comprises one of the following, station call letters, a station tuning frequency, a television channel allocation, a cable subscriber identification, a music genre, a telephone number, a network address, an identification number or a predetermined identifier.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00085">
<PARA ID="P-00187" LVL="0"><PTEXT><PDAT>85. The information system in claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said program description information includes video.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00086">
<PARA ID="P-00188" LVL="0"><PTEXT><PDAT>86. The information system in claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said program description information includes text.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00087">
<PARA ID="P-00189" LVL="0"><PTEXT><PDAT>87. The information system of claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said database further comprises digital data representing the alpha-numeric touch tone telephone key pad input of artist names, song titles and music album titles referenced within said database.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00088">
<PARA ID="P-00190" LVL="0"><PTEXT><PDAT>88. The information system of claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said user inquiry comprises a product name, product code or reference number.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00089">
<PARA ID="P-00191" LVL="0"><PTEXT><PDAT>89. The information system claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said program list comprises a listing of advertisements and wherein said program description contain information relating to said advertisements.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00090">
<PARA ID="P-00192" LVL="0"><PTEXT><PDAT>90. The information system of claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said signal is received within a digital radio, digital television or the sideband of a broadcast signal.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00091">
<PARA ID="P-00193" LVL="0"><PTEXT><PDAT>91. The information system of claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said program list is synchronized with said program</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00092">
<PARA ID="P-00194" LVL="0"><PTEXT><PDAT>92. The information system of claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said program list is synchronized with said broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00093">
<PARA ID="P-00195" LVL="0"><PTEXT><PDAT>93. The information system of claim </PDAT><HIL><BOLD><PDAT>74</PDAT></BOLD></HIL><PDAT> wherein said program descriptions are located geographically remote from said information system.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00094">
<PARA ID="P-00196" LVL="0"><PTEXT><PDAT>94. A method for providing listeners or viewers of a radio or television broadcast with automated information about program material, comprising the steps of:</PDAT></PTEXT></PARA>
<CLMSTEP LVL="2"><PTEXT><PDAT>broadcasting at least one radio or television broadcast; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>receiving user inquiries from a listener or viewer of said radio or television broadcast; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>creating a program description file; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>communicating program list information into a programmed data processor; </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>correlating said program descriptions of program material with said program list information and generating information in a database responsive to only a broadcast identifier; and </PDAT></PTEXT></CLMSTEP>
<CLMSTEP LVL="2"><PTEXT><PDAT>using said programmed data processor to communicate said program description file responsive to said user inquiry. </PDAT></PTEXT></CLMSTEP>
</CLM>
<CLM ID="CLM-00095">
<PARA ID="P-00197" LVL="0"><PTEXT><PDAT>95. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> further comprising the step of recording data from said broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00096">
<PARA ID="P-00198" LVL="0"><PTEXT><PDAT>96. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said user inquiry comprises a broadcast identifier.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00097">
<PARA ID="P-00199" LVL="0"><PTEXT><PDAT>97. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said broadcast is a digital data broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00098">
<PARA ID="P-00200" LVL="0"><PTEXT><PDAT>98. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said program list is synchronized with said broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00099">
<PARA ID="P-00201" LVL="0"><PTEXT><PDAT>99. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said user inquiry comprises city or geographic region information.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00100">
<PARA ID="P-00202" LVL="0"><PTEXT><PDAT>100. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein a conversion format is applied to said program list based upon said broadcast identifier.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00101">
<PARA ID="P-00203" LVL="0"><PTEXT><PDAT>101. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said user inquiry is provided through a computer device.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00102">
<PARA ID="P-00204" LVL="0"><PTEXT><PDAT>102. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said user inquiry is provided through a wireless network.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00103">
<PARA ID="P-00205" LVL="0"><PTEXT><PDAT>103. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said user inquiry is provided through a touchtone telephone.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00104">
<PARA ID="P-00206" LVL="0"><PTEXT><PDAT>104. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said user inquiry is transmitted through a digital data network.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00105">
<PARA ID="P-00207" LVL="0"><PTEXT><PDAT>105. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said program list is input by touch-tone telephone or using voice recognition.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00106">
<PARA ID="P-00208" LVL="0"><PTEXT><PDAT>106. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said correlation of said program descriptions with said program list information is responsive to receipt of said program list information.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00107">
<PARA ID="P-00209" LVL="0"><PTEXT><PDAT>107. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said correlation of said program description information with said program list is responsive to receipt of said program description.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00108">
<PARA ID="P-00210" LVL="0"><PTEXT><PDAT>108. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> further comprising the step of storing said program description files in a master listing of program description files, said master listing associated with said program list information.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00109">
<PARA ID="P-00211" LVL="0"><PTEXT><PDAT>109. The method of claim </PDAT><HIL><BOLD><PDAT>108</PDAT></BOLD></HIL><PDAT> further comprising the step of associating said program list with said program descriptions, said program descriptions being stored geographically remote from said database.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00110">
<PARA ID="P-00212" LVL="0"><PTEXT><PDAT>110. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> including the step of assigning number representations or codes to information within said program list, said number representations or codes assigned from a master listing.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00111">
<PARA ID="P-00213" LVL="0"><PTEXT><PDAT>111. The method of claim </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> wherein said number representations or codes are associated with said program descriptions.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00112">
<PARA ID="P-00214" LVL="0"><PTEXT><PDAT>112. The method of claim </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> wherein said number representations or codes are interpreted responsive to said broadcast identifier.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00113">
<PARA ID="P-00215" LVL="0"><PTEXT><PDAT>113. The method of claim </PDAT><HIL><BOLD><PDAT>110</PDAT></BOLD></HIL><PDAT> including the step of encoding and broadcasting said number representations or codes with said broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00114">
<PARA ID="P-00216" LVL="0"><PTEXT><PDAT>114. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said database further comprises digital data representing the alpha-numeric touch tone telephone key pad input of an artist name, song title or album, and wherein said user inquiries are entered through a touch tone telephone and compared to said digital data representing said alpha-numeric touch tone telephone key pad input of an artist name, song title or album, thereby identifying a listing in said database.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00115">
<PARA ID="P-00217" LVL="0"><PTEXT><PDAT>115. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said database includes partitions for categorizing said program descriptions by music genre.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00116">
<PARA ID="P-00218" LVL="0"><PTEXT><PDAT>116. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein the step of receiving a user inquiry includes providing a user with a menu of broadcasters from which to select a broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00117">
<PARA ID="P-00219" LVL="0"><PTEXT><PDAT>117. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said program list comprises a listing of advertisements and wherein said program description contains information relating to said advertisements.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00118">
<PARA ID="P-00220" LVL="0"><PTEXT><PDAT>118. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> further including the step of communicating said program description file from a remotely located storage device.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00119">
<PARA ID="P-00221" LVL="0"><PTEXT><PDAT>119. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> further including the step of linking a user to a remote located storage unit wherein said program description file is stored.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00120">
<PARA ID="P-00222" LVL="0"><PTEXT><PDAT>120. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> further comprising the step of including a signal within said broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00121">
<PARA ID="P-00223" LVL="0"><PTEXT><PDAT>121. The method of claim </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> further comprising the step of encoding data into said signal.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00122">
<PARA ID="P-00224" LVL="0"><PTEXT><PDAT>122. The method of claim </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> further comprising the step of encoding said program list information in said signal.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00123">
<PARA ID="P-00225" LVL="0"><PTEXT><PDAT>123. The method of claim </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> further comprising the step of encoding said program description information in said signal.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00124">
<PARA ID="P-00226" LVL="0"><PTEXT><PDAT>124. The method of claim </PDAT><HIL><BOLD><PDAT>120</PDAT></BOLD></HIL><PDAT> wherein said signal is received within a digital radio, digital television or sideband of a broadcast signal.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00125">
<PARA ID="P-00227" LVL="0"><PTEXT><PDAT>125. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> further comprising the step of receiving said broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00126">
<PARA ID="P-00228" LVL="0"><PTEXT><PDAT>126. The method of claim </PDAT><HIL><BOLD><PDAT>125</PDAT></BOLD></HIL><PDAT> further comprising the step of recording said program description file from said broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00127">
<PARA ID="P-00229" LVL="0"><PTEXT><PDAT>127. The method of claim </PDAT><HIL><BOLD><PDAT>125</PDAT></BOLD></HIL><PDAT> further comprising the step of recording said program list information from said broadcast.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00128">
<PARA ID="P-00230" LVL="0"><PTEXT><PDAT>128. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> further including the step of receiving a network address comprising said user inquiry.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00129">
<PARA ID="P-00231" LVL="0"><PTEXT><PDAT>129. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said broadcast identifier includes one of the following, station call letters, a station tuning frequency, a television channel allocation, a cable subscriber identification, a music genre, a telephone number, a network address, an identification number or a predetermined identifier.</PDAT></PTEXT></PARA>
</CLM>
<CLM ID="CLM-00130">
<PARA ID="P-00232" LVL="0"><PTEXT><PDAT>130. The method of claim </PDAT><HIL><BOLD><PDAT>94</PDAT></BOLD></HIL><PDAT> wherein said program list is synchronized with said program descriptions.</PDAT></PTEXT></PARA>
</CLM>
</CL>
</SDOCL>
<SDODR ID="DRAWINGS">
<EMI ID="EMI-D00000" FILE="US06314577-20011106-D00000.TIF">
<EMI ID="EMI-D00001" FILE="US06314577-20011106-D00001.TIF">
<EMI ID="EMI-D00002" FILE="US06314577-20011106-D00002.TIF">
<EMI ID="EMI-D00003" FILE="US06314577-20011106-D00003.TIF">
<EMI ID="EMI-D00004" FILE="US06314577-20011106-D00004.TIF">
<EMI ID="EMI-D00005" FILE="US06314577-20011106-D00005.TIF">
<EMI ID="EMI-D00006" FILE="US06314577-20011106-D00006.TIF">
<EMI ID="EMI-D00007" FILE="US06314577-20011106-D00007.TIF">
</SDODR>
</PATDOC>

